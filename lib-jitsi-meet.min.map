{"version":3,"sources":["webpack://JitsiMeetJS/webpack/universalModuleDefinition","webpack://JitsiMeetJS/webpack/bootstrap","webpack://JitsiMeetJS/./JitsiConferenceEvents.js","webpack://JitsiMeetJS/./service/xmpp/XMPPEvents.js","webpack://JitsiMeetJS/./node_modules/strophe.js/dist/strophe.umd.js","webpack://JitsiMeetJS/./modules/browser/index.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/index.js","webpack://JitsiMeetJS/./service/RTC/MediaType.js","webpack://JitsiMeetJS/./modules/statistics/statistics.js","webpack://JitsiMeetJS/./service/RTC/RTCEvents.js","webpack://JitsiMeetJS/./service/statistics/AnalyticsEvents.js","webpack://JitsiMeetJS/./modules/xmpp/SDPUtil.js","webpack://JitsiMeetJS/./modules/RTC/RTCUtils.js","webpack://JitsiMeetJS/./modules/util/GlobalOnErrorHandler.js","webpack://JitsiMeetJS/./service/RTC/VideoType.js","webpack://JitsiMeetJS/./modules/RTC/RTC.js","webpack://JitsiMeetJS/./JitsiTrackErrors.js","webpack://JitsiMeetJS/./JitsiTrackEvents.js","webpack://JitsiMeetJS/./JitsiConferenceErrors.js","webpack://JitsiMeetJS/./modules/xmpp/SDP.js","webpack://JitsiMeetJS/./node_modules/events/events.js","webpack://JitsiMeetJS/./JitsiTrackError.js","webpack://JitsiMeetJS/./service/RTC/CodecMimeType.js","webpack://JitsiMeetJS/./modules/util/Listenable.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/index.js","webpack://JitsiMeetJS/./modules/detection/DetectionEvents.js","webpack://JitsiMeetJS/./modules/xmpp/xmpp.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGWConstants.js","webpack://JitsiMeetJS/./JitsiConnectionEvents.js","webpack://JitsiMeetJS/./service/statistics/Events.js","webpack://JitsiMeetJS/./modules/util/MathUtil.js","webpack://JitsiMeetJS/./modules/settings/Settings.js","webpack://JitsiMeetJS/./modules/xmpp/SdpTransformUtil.js","webpack://JitsiMeetJS/./service/connectivity/ConnectionQualityEvents.js","webpack://JitsiMeetJS/./node_modules/lodash.isequal/index.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionState.js","webpack://JitsiMeetJS/./modules/proxyconnection/constants.js","webpack://JitsiMeetJS/./service/RTC/Resolutions.js","webpack://JitsiMeetJS/./modules/statistics/CallStats.js","webpack://JitsiMeetJS/./modules/util/RandomUtil.js","webpack://JitsiMeetJS/./modules/xmpp/ConnectionPlugin.js","webpack://JitsiMeetJS/./JitsiConnectionErrors.js","webpack://JitsiMeetJS/./modules/xmpp/XmppConnection.js","webpack://JitsiMeetJS/./node_modules/lodash.clonedeep/index.js","webpack://JitsiMeetJS/./service/RTC/SignalingEvents.js","webpack://JitsiMeetJS/./modules/statistics/constants.js","webpack://JitsiMeetJS/./service/RTC/CameraFacingMode.js","webpack://JitsiMeetJS/(webpack)/buildin/global.js","webpack://JitsiMeetJS/./modules/util/Deferred.js","webpack://JitsiMeetJS/./JitsiMediaDevicesEvents.js","webpack://JitsiMeetJS/./modules/RTC/ScreenObtainer.js","webpack://JitsiMeetJS/./modules/util/ScriptUtil.js","webpack://JitsiMeetJS/./modules/connectivity/ParticipantConnectionStatus.js","webpack://JitsiMeetJS/./modules/connectivity/NetworkInfo.js","webpack://JitsiMeetJS/./node_modules/sdp/sdp.js","webpack://JitsiMeetJS/./modules/recording/recordingXMLUtils.js","webpack://JitsiMeetJS/./modules/e2ee/OlmAdapter.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEncryption.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionPC.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/browser-detection/browsers.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/browser-detection/BrowserDetection.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/jitsi-local-storage/index.js","webpack://JitsiMeetJS/./node_modules/base64-js/index.js","webpack://JitsiMeetJS/./modules/xmpp/SDPDiffer.js","webpack://JitsiMeetJS/./modules/RTC/TPCUtils.js","webpack://JitsiMeetJS/./node_modules/process/browser.js","webpack://JitsiMeetJS/./modules/statistics/LocalStatsCollector.js","webpack://JitsiMeetJS/./JitsiTranscriptionStatus.js","webpack://JitsiMeetJS/./modules/xmpp/MediaSessionEvents.js","webpack://JitsiMeetJS/./modules/RTC/JitsiTrack.js","webpack://JitsiMeetJS/./modules/detection/TrackVADEmitter.js","webpack://JitsiMeetJS/./modules/webaudio/WebAudioUtils.js","webpack://JitsiMeetJS/./service/e2eping/E2ePingEvents.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStats.js","webpack://JitsiMeetJS/./JitsiMediaDevices.js","webpack://JitsiMeetJS/./service/authentication/AuthenticationEvents.js","webpack://JitsiMeetJS/./node_modules/js-md5/src/md5.js","webpack://JitsiMeetJS/./node_modules/lodash.debounce/index.js","webpack://JitsiMeetJS/./modules/e2ee/crypto-utils.js","webpack://JitsiMeetJS/./modules/xmpp/Caps.js","webpack://JitsiMeetJS/./modules/RTC/JitsiLocalTrack.js","webpack://JitsiMeetJS/./modules/detection/VADAudioAnalyser.js","webpack://JitsiMeetJS/./modules/recording/JibriSession.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/esm-browser/rng.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/esm-browser/bytesToUuid.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/esm-browser/v4.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/Logger.js","webpack://JitsiMeetJS/(webpack)/buildin/module.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/./modules/transcription/audioRecorder.js","webpack://JitsiMeetJS/./JitsiConnection.js","webpack://JitsiMeetJS/./JitsiConference.js","webpack://JitsiMeetJS/./JitsiConferenceEventManager.js","webpack://JitsiMeetJS/./modules/browser/BrowserCapabilities.js","webpack://JitsiMeetJS/./node_modules/bowser/es5.js","webpack://JitsiMeetJS/./modules/statistics/AnalyticsAdapter.js","webpack://JitsiMeetJS/./modules/statistics/PerformanceObserverStats.js","webpack://JitsiMeetJS/./modules/statistics/RTPStatsCollector.js","webpack://JitsiMeetJS/./modules/util/EventEmitterForwarder.js","webpack://JitsiMeetJS/./JitsiParticipant.js","webpack://JitsiMeetJS/./authenticateAndUpgradeRole.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEContext.js","webpack://JitsiMeetJS/./modules/xmpp/ResumeTask.js","webpack://JitsiMeetJS/./modules/util/Retry.js","webpack://JitsiMeetJS/./modules/xmpp/StropheLastSuccess.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.ping.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.emuc.js","webpack://JitsiMeetJS/./modules/xmpp/ChatRoom.js","webpack://JitsiMeetJS/./modules/xmpp/Lobby.js","webpack://JitsiMeetJS/./modules/xmpp/moderator.js","webpack://JitsiMeetJS/./modules/util/UsernameGenerator.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.jingle.js","webpack://JitsiMeetJS/./node_modules/rtcpeerconnection-shim/rtcpeerconnection.js","webpack://JitsiMeetJS/./modules/util/AsyncQueue.js","webpack://JitsiMeetJS/./node_modules/async/lib/async.js","webpack://JitsiMeetJS/./modules/util/StringUtils.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSession.js","webpack://JitsiMeetJS/./modules/xmpp/SignalingLayerImpl.js","webpack://JitsiMeetJS/./service/RTC/SignalingLayer.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.logger.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.rayo.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.util.js","webpack://JitsiMeetJS/./modules/RTC/CodecSelection.js","webpack://JitsiMeetJS/./modules/RTC/BridgeChannel.js","webpack://JitsiMeetJS/./modules/RTC/TraceablePeerConnection.js","webpack://JitsiMeetJS/./modules/xmpp/RtxModifier.js","webpack://JitsiMeetJS/./modules/xmpp/SdpConsistency.js","webpack://JitsiMeetJS/./modules/RTC/JitsiRemoteTrack.js","webpack://JitsiMeetJS/./modules/RTC/LocalSdpMunger.js","webpack://JitsiMeetJS/./modules/connectivity/ConnectionQuality.js","webpack://JitsiMeetJS/./modules/connectivity/IceFailedHandling.js","webpack://JitsiMeetJS/./modules/detection/NoAudioSignalDetection.js","webpack://JitsiMeetJS/./modules/detection/P2PDominantSpeakerDetection.js","webpack://JitsiMeetJS/./modules/detection/VADNoiseDetection.js","webpack://JitsiMeetJS/./modules/detection/VADTalkMutedDetection.js","webpack://JitsiMeetJS/./modules/e2eping/e2eping.js","webpack://JitsiMeetJS/./modules/event/Jvb121EventGenerator.js","webpack://JitsiMeetJS/./modules/qualitycontrol/ReceiveVideoController.js","webpack://JitsiMeetJS/./modules/qualitycontrol/SendVideoController.js","webpack://JitsiMeetJS/./modules/recording/RecordingManager.js","webpack://JitsiMeetJS/./modules/statistics/AudioOutputProblemDetector.js","webpack://JitsiMeetJS/./modules/statistics/AvgRTPStatsReporter.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStatsCollector.js","webpack://JitsiMeetJS/./modules/transcription/transcriber.js","webpack://JitsiMeetJS/./modules/version/ComponentsVersions.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGW.js","webpack://JitsiMeetJS/./modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://JitsiMeetJS/./modules/detection/ActiveDeviceDetector.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionService.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionPC.js","webpack://JitsiMeetJS/./modules/recording/recordingConstants.js","webpack://JitsiMeetJS/./modules/statistics/PrecallTest.js","webpack://JitsiMeetJS/./modules/util/AuthUtil.js","webpack://JitsiMeetJS/./modules/webaudio/AudioMixer.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/transform.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/interop.js","webpack://JitsiMeetJS/./index.js","webpack://JitsiMeetJS/./JitsiMeetJS.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/LogCollector.js","webpack://JitsiMeetJS/(webpack)/buildin/amd-options.js","webpack://JitsiMeetJS/./node_modules/current-executing-script/dist/currentExecutingScript.js","webpack://JitsiMeetJS/./service/statistics/constants.js","webpack://JitsiMeetJS/./node_modules/strophejs-plugin-disco/lib/strophe.disco.js","webpack://JitsiMeetJS/./node_modules/strophejs-plugin-stream-management/lib/strophe.stream-management.js","webpack://JitsiMeetJS/./node_modules/timers-browserify/main.js","webpack://JitsiMeetJS/./node_modules/setimmediate/setImmediate.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/parser.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/writer.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-simulcast/lib/index.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://JitsiMeetJS/./modules/transcription/recordingResult.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/word.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/utils.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/edge/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/edge/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/edge/edge_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/edge/filtericeservers.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/safari/safari_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/common_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_core.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_factory.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","AUDIO_INPUT_STATE_CHANGE","AUTH_STATUS_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOINED","CONFERENCE_LEFT","CONFERENCE_UNIQUE_ID_SET","CONNECTION_ESTABLISHED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","DATA_CHANNEL_OPENED","DISPLAY_NAME_CHANGED","DOMINANT_SPEAKER_CHANGED","CONFERENCE_CREATED_TIMESTAMP","DTMF_SUPPORT_CHANGED","ENDPOINT_MESSAGE_RECEIVED","ENDPOINT_STATS_RECEIVED","JVB121_STATUS","KICKED","PARTICIPANT_KICKED","LAST_N_ENDPOINTS_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","_MEDIA_SESSION_STARTED","_MEDIA_SESSION_ACTIVE_CHANGED","MEMBERS_ONLY_CHANGED","MESSAGE_RECEIVED","NO_AUDIO_INPUT","NOISY_MIC","PRIVATE_MESSAGE_RECEIVED","PARTICIPANT_CONN_STATUS_CHANGED","PARTCIPANT_FEATURES_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PHONE_NUMBER_CHANGED","PROPERTIES_CHANGED","RECORDER_STATE_CHANGED","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","SUBJECT_CHANGED","SUSPEND_DETECTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","TRANSCRIPTION_STATUS_CHANGED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","BOT_TYPE_CHANGED","LOBBY_USER_JOINED","LOBBY_USER_UPDATED","LOBBY_USER_LEFT","ADD_ICE_CANDIDATE_FAILED","AUDIO_MUTED_BY_FOCUS","VIDEO_MUTED_BY_FOCUS","AUTHENTICATION_REQUIRED","BRIDGE_DOWN","CALL_ACCEPTED","CALL_INCOMING","CALL_ENDED","CHAT_ERROR_RECEIVED","CONFERENCE_PROPERTIES_CHANGED","CONNECTION_FAILED","CONNECTION_ICE_FAILED","CONNECTION_RESTARTED","CONNECTION_STATUS_CHANGED","EMUC_ROOM_ADDED","EMUC_ROOM_REMOVED","ETHERPAD","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_RESTARTING","ICE_RESTART_SUCCESS","LOCAL_ROLE_CHANGED","MEETING_ID_SET","INVITE_MESSAGE_RECEIVED","MUC_MEMBER_BOT_TYPE_CHANGED","MUC_DESTROYED","MUC_JOINED","MUC_MEMBER_JOINED","MUC_MEMBER_LEFT","MUC_LOBBY_MEMBER_JOINED","MUC_LOBBY_MEMBER_UPDATED","MUC_LOBBY_MEMBER_LEFT","MUC_DENIED_ACCESS","MUC_LEFT","MUC_ROLE_CHANGED","MUC_LOCK_CHANGED","MUC_MEMBERS_ONLY_CHANGED","PARTICIPANT_AUDIO_MUTED","PARTICIPANT_VIDEO_MUTED","PARTICIPANT_VIDEO_TYPE_CHANGED","PARTICIPANT_FEATURES_CHANGED","PASSWORD_REQUIRED","PRESENCE_RECEIVED","PRESENCE_STATUS","PROMPT_FOR_LOGIN","READY_TO_JOIN","REMOTE_STATS","RENEGOTIATION_FAILED","RESERVATION_ERROR","ROOM_CONNECT_ERROR","ROOM_CONNECT_NOT_ALLOWED_ERROR","ROOM_JOIN_ERROR","ROOM_CONNECT_MEMBERS_ONLY_ERROR","ROOM_MAX_USERS_ERROR","SENDING_CHAT_MESSAGE","SENDING_PRIVATE_CHAT_MESSAGE","SESSION_ACCEPT_TIMEOUT","SPEAKER_STATS_RECEIVED","CONFERENCE_TIMESTAMP_RECEIVED","START_MUTED_FROM_FOCUS","TRANSPORT_INFO","ICE_CONNECTION_STATE_CHANGED","JSON_MESSAGE_RECEIVED","global$1","global","self","_typeof","obj","iterator","constructor","_toConsumableArray","arr","Array","isArray","arr2","length","_arrayWithoutHoles","iter","toString","from","_iterableToArray","TypeError","_nonIterableSpread","safe_add","x","y","lsw","str2binl","str","Error","bin","charCodeAt","md5_cmn","q","a","b","num","cnt","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","len","olda","oldb","oldc","oldd","MD5","hexdigest","binarray","charAt","binl2hex","hash","String","fromCharCode","binl2str","core_sha1","j","olde","w","e","rol","safe_add$1","sha1_ft","sha1_kt","core_hmac_sha1","data","bkey","str2binb","ipad","opad","concat","binb2b64","triplet","binb2str","SHA1","b64_hmac_sha1","b64_sha1","str_hmac_sha1","str_sha1","utils","out","cookies","cookieName","expires","domain","path","cookieObj","isObj","cookieValue","escape","unescape","document","cookie","$build","attrs","Strophe","Builder","$iq","$pres","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","STREAM","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","tags","attributes","css","validTag","tag","validAttribute","attribute","validCSS","style","Status","ERROR","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","CONNECTED","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","BINDREQUIRED","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","DEBUG","INFO","WARN","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","TIMEOUT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elem","elemName","func","childNodes","childNode","nodeType","this","isTagEqual","el","tagName","_xmlGenerator","_makeGenerator","doc","undefined","implementation","createDocument","documentMode","_getIEXmlDom","appendChild","createElement","xmlGenerator","docStrings","ActiveXObject","xmlElement","node","arguments","arg","xmlTextNode","sort","attr","setAttribute","k","xmlescape","text","replace","xmlunescape","createTextNode","xmlHtmlNode","html","DOMParser","parseFromString","async","loadXML","getText","nodeValue","copyElement","nodeName","_i","createHtml","toLowerCase","getAttribute","cssText","cssAttrs","split","cssName","cssValue","push","join","_i2","createDocumentFragment","_i3","_i4","escapeNode","unescapeNode","getNodeFromJid","jid","indexOf","getDomainFromJid","bare","getBareJidFromJid","parts","splice","getResourceFromJid","_handleError","stack","fatal","sourceURL","handler","line","message","fileName","lineNumber","log","level","msg","console","error","debug","info","warn","serialize","tree","names","keys","map","result","reduce","getNamedItem","child","_requestId","_connectionPlugins","addConnectionPlugin","ptype","xmlns","nodeTree","up","parentNode","moreattrs","removeAttribute","cnode","impNode","xmlGen","importNode","newElem","h","fragment","innerHTML","xhtml","Handler","type","id","options","matchBare","matchBareFromJid","user","getNamespace","elNamespace","ignoreNamespaceFragment","namespaceMatch","_this","nsMatch","isMatch","elem_type","run","TimedHandler","period","lastCalled","Date","getTime","reset","Connection","service","_this2","proto","protocol","_proto","Websocket","Bosh","features","_sasl_data","do_session","do_bind","timedHandlers","handlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","_idleTimeout","_disconnectTimeout","authenticated","connected","disconnecting","do_authentication","paused","restored","_data","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","maxRetries","setTimeout","_onIdle","registerSASLMechanisms","mechanisms","F","init","_reset","_requests","pause","resume","getUniqueId","suffix","uuid","Math","random","addProtocolErrorHandler","status_code","callback","connect","pass","wait","hold","route","authcid","authzid","servtype","connect_callback","_changeConnectStatus","_connect","attach","sid","rid","wind","_attach","restore","_sessionCachingSupported","_restore","JSON","sessionStorage","setItem","removeItem","xmlInput","xmlOutput","rawInput","rawOutput","nextValidRid","send","_queueData","_send","flush","clearTimeout","sendPresence","errback","timeout","_this3","timeoutHandler","addHandler","stanza","deleteTimedHandler","addTimedHandler","deleteHandler","sendIQ","_this4","iqtype","element","_sendRestart","_this5","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLMD5","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","forEach","registerSASLMechanism","mechanism","disconnect","reason","pres","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","_abortAllRequests","_doDisconnect","status","condition","plugin","statusChanged","err","_dataRecv","req","raw","_this6","_reqToData","strip","pop","_emptyQueue","cond","conflict","getElementsByTagName","UNKOWN_REASON","newList","_i5","_hand","_connect_cb","_callback","bodyWrap","getElementsByTagNameNS","matched","mech","authenticate","_no_auth_received","sortMechanismsByPriority","higher","priority","swap","_attemptSASLAuth","_attemptLegacyAuth","mechanism_found","test","_addSysHandler","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","onStart","request_auth_exchange","isClientFirst","response","onChallenge","btoa","challenge","atob","_onLegacyAuthIQResult","iq","_auth2_cb","_this7","serverSignature","matches","match","onSuccess","streamfeature_handlers","wrapper","_onStreamFeaturesAfterSASL","explicitResourceBinding","_onResourceBindResultIQ","resource","jidNode","_establishSession","_onSessionResultIQ","onFailure","_this8","now","_i6","_thand","SASLMechanism","connection","_connection","auth_str","test_cnonce","cnonce","nonce","salt","Hi","U","U_old","responseText","authMessage","attribMatch","substr","clientKey","serverKey","clientSignature","_quote","realm","host","digest_uri","cred","A1","A2","core","Strophe$1","$build$1","Request","sends","xmlData","origFunc","date","NaN","abort","dead","age","timeDead","xhr","_newXHR","getResponse","responseXML","documentElement","querySelector","textContent","XMLHttpRequest","overrideMimeType","onreadystatechange","_conn","floor","errors","inactivity","lastResponseHeaders","_buildBody","keepalive","_cacheSession","body","_onRequestStateChange","_throttledRequestHandler","session","parse","getItem","stringify","typ","parseInt","_sendTerminate","_callProtocolErrorHandlers","reqStatus","_getRequestStatus","err_callback","HTTP","_hitError","time_elapsed","def","readyState","getAllResponseHeaders","valid_request","too_many_retries","_removeRequest","reqIs0","_restartRequest","Number","_processRequest","primary_timeout","isNaN","secondary_timeout","server_error","content_type","contentType","open","sync","setRequestHeader","withCredentials","e2","sendFunc","customHeaders","headers","header","backoff","min","pow","abs","Strophe$2","$build$2","new_service","location","pathname","_buildStream","_check_streamerror","connectstatus","errorString","_closeSocket","socket","WebSocket","onopen","_onOpen","onerror","_onError","onclose","_onClose","onmessage","_connect_cb_wrapper","_handleStreamStart","ver","streamStart","parsedMessage","see_uri","string","_streamWrap","_onMessage","CLOSED","close","closeString","code","rawStanza","search","firstChild","start","startString","$msg","BrowserCapabilities","Logger","LogCollector","idLoggers","loggers","curLevel","levels","TRACE","addGlobalTransport","transport","removeGlobalTransport","setGlobalOptions","getLogger","transports","logger","setLogLevelById","setLevel","setLogLevel","AUDIO","PRESENTER","VIDEO","require","__filename","_instances","isCallstatsLoaded","_initCallStatsBackend","CallStats","isBackendInitialized","initBackend","callStatsID","callStatsSecret","userName","aliasName","applicationName","getWiFiStatsMethod","confID","siteID","Statistics","xmpp","rtpStatsMap","Map","eventEmitter","EventEmitter","callStatsIntegrationEnabled","enableCallStats","disableThirdPartyRequests","callStatsApplicationLogsDisabled","browser","isReactNative","ScriptUtil","loadScript","customScriptUrl","CALLSTATS_SCRIPT_URL","loadCallStatsAPI","callsStatsInstances","instances","add","audioLevelsEnabled","disableAudioLevels","pcStatsInterval","audioLevelsInterval","longTasksStatsInterval","analytics","Set","startRemoteStats","peerconnection","stopRemoteStats","rtpStats","RTPStats","set","localStats","startLocalStats","stream","LocalStats","addAudioLevelListener","listener","on","StatisticsEvents","removeAudioLevelListener","removeListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","addLongTasksStatsListener","attachLongTasksStats","conference","supportsPerformanceObserver","performanceObserverStats","PerformanceObserverStats","JitsiConferenceEvents","startObserver","stopObserver","getLongTasksStats","removeLongTasksStatsListener","setSpeakerList","speakerList","values","isP2P","dispose","size","emit","callStats","stopCallStats","tpc","tpcId","_stopRemoteStats","removeAllListeners","delete","stopLocalStats","stop","startCallStats","remoteUserID","has","newInstance","_getAllCallStatsInstances","csInstances","statistics","cs","callStatsInstance","sendTerminateEvent","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","isResume","instance","sendResumeOrHoldEvent","sendIceConnectionFailedEvent","sendMuteEvent","muted","sendScreenSharingEvent","ssrc","sendDominantSpeakerEvent","roomJid","sendActiveDeviceListEvent","devicesData","globalSet","associateStreamWithVideoTag","isLocal","userId","usageLabel","containerId","sendGetUserMediaFailed","JitsiTrackError","gum","constraintName","constraints","formatJitsiTrackErrorForCallStats","sendCreateOfferFailed","sendCreateAnswerFailed","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","sendLog","globalSubSet","stats","next","csPerStats","sendApplicationLog","sendFeedback","overall","comment","sendEvent","FEEDBACK","rating","LOCAL_JID","reportGlobalError","sendAnalyticsAndLog","event","properties","eventToLog","sendAnalytics","eventName","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","ENDPOINT_CONN_STATUS_CHANGED","LASTN_ENDPOINT_CHANGED","PERMISSIONS_CHANGED","SENDER_VIDEO_CONSTRAINTS_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_MUTE","REMOTE_TRACK_REMOVED","REMOTE_TRACK_UNMUTE","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","TYPE_UI","ACTION_JINGLE_RESTART","ACTION_JINGLE_SA_TIMEOUT","ACTION_JINGLE_SI_RECEIVED","ACTION_JINGLE_SI_TIMEOUT","ACTION_JINGLE_TERMINATE","ACTION_JINGLE_TR_RECEIVED","ACTION_JINGLE_TR_SUCCESS","ACTION_P2P_DECLINED","ACTION_P2P_ESTABLISHED","ACTION_P2P_FAILED","ACTION_P2P_SWITCH_TO_JVB","AVAILABLE_DEVICE","CONNECTION_DISCONNECTED","ICE_DURATION","ICE_ESTABLISHMENT_DURATION_DIFF","ICE_STATE_CHANGED","NO_BYTES_SENT","TRACK_UNMUTED","createBridgeDownEvent","action","actionSubject","createConnectionFailedEvent","errorType","errorMessage","details","createConferenceEvent","source","createConnectionStageReachedEvent","stage","createE2eRttEvent","participantId","region","rtt","createFocusLeftEvent","createGetUserMediaEvent","createParticipantConnectionStatusEvent","createJingleEvent","createNoDataFromSourceEvent","mediaType","createP2PEvent","createRemotelyMutedEvent","createRtpStatsEvent","createTransportStatsEvent","createAudioOutputProblemEvent","userID","localAudioLevels","remoteAudioLevels","createBridgeChannelClosedEvent","createTtfmEvent","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","pwd","ufrag","findLine","parseICEUfrag","parseICEPwd","substring","buildICEUfrag","frag","buildICEPwd","parseMID","parseMLine","media","shift","port","fmt","buildMLine","mline","parseRTPMap","clockrate","channels","parseSCTPMap","buildRTPMap","parseCrypto","parseFingerprint","fingerprint","parseFmtp","parseICECandidate","candidate","elems","foundation","component","ip","generation","tcptype","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","desc","lines","parseRTCPFB","pt","params","parseExtmap","direction","uri","haystack","needle","sessionpart","findLines","needles","candidateToJingle","candidateFromJingle","isFirefox","parsePrimaryVideoSsrc","videoMLine","numSsrcs","ssrcs","ssrcInfo","filter","index","array","numGroups","ssrcGroups","primarySsrc","fidGroup","find","group","semantics","simGroup","generateSsrc","RandomUtil","randomInt","getSsrcAttribute","mLine","attributeName","ssrcLine","parseGroupSsrcs","ssrcGroup","ssrcStr","getMedia","sdp","getUfrag","ufragLines","startsWith","preferCodec","codecName","matchingPayloadTypes","rtp","codec","payload","payloadTypes","payloads","reverse","payloadIndex","unshift","stripCodec","highProfile","h264Pts","removePts","stripH264HighCodec","CodecMimeType","H264","fmtp","item","config","includes","rtxApts","rtxPts","keepPts","rtcpFb","usesAdapter","OLD_GUM_DEFAULT_DEVICES","DEFAULT_CONSTRAINTS","video","height","ideal","max","width","SS_DEFAULT_FRAME_RATE","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","disableHPF","stereo","featureDetectionAudioEl","isAudioOutputDeviceChangeAvailable","setSinkId","availableDevicesPollTimer","availableDevices","emptyFuncton","getConstraints","um","audio","isNewStyleConstraintsSupported","isWebKitBased","mandatory","optional","cameraDeviceId","deviceId","sourceId","facingMode","CameraFacingMode","USER","minFps","maxFps","fps","minFrameRate","maxFrameRate","resolution","Resolutions","minWidth","minHeight","maxWidth","maxHeight","setResolutionConstraints","micDeviceId","echoCancellation","googEchoCancellation","googAutoGainControl","googNoiseSuppression","googHighpassFilter","googNoiseSuppression2","googEchoCancellation2","googAutoGainControl2","isChrome","getSSConstraints","mozMediaSource","mediaSource","frameRate","errmsg","GlobalOnErrorHandler","callErrorHandler","isElectron","screenShareAudio","desktopStream","chromeMediaSource","bandwidth","firefox_fake_device","fake","screen","chromeMediaSourceId","updateGrantedPermissions","audioTracksReceived","Boolean","getAudioTracks","videoTracksReceived","getVideoTracks","grantedPermissions","RTCEvents","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","kind","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","groupId","label","updateKnownDevices","pds","newDevices","mediaDeviceInfoToJSON","facing","compareAvailableMediaDevices","slice","RTCUtils","Listenable","super","origAttachMediaStream","audioQuality","clearInterval","usesNewGumFlow","RTCPeerConnectionType","RTCPeerConnection","attachMediaStream","srcObject","res","apply","rtcUtils","isDeviceChangeAvailable","getAudioOutputDevice","catch","ex","callUnhandledRejectionHandler","promise","getStreamID","getTrackID","pcConstraints","isChromiumBased","googScreencastMinBitrate","googCpuOveruseDetection","screenObtainer","getUserMediaWithConstraints","isDeviceListAvailable","enumerateDevices","ds","supportsDeviceChangeEvent","navigator","mediaDevices","addEventListener","setInterval","then","devices","_getUserMedia","umDevices","Promise","resolve","reject","gumTimeout","timeoutExpired","JitsiTrackErrors","getUserMedia","jitsiError","_newGetDesktopMedia","isSupported","obtainStream","_parseDesktopSharingOptions","obtainAudioAndVideoPermissions","_getAudioAndVideoStreams","streams","audioStream","videoStream","audioVideo","audioTracks","MediaStream","addTrack","videoTracks","release","desktop","sourceType","track","MediaType","videoType","VideoType","DESKTOP","CAMERA","handleLocalStream","requestingDesktop","avStream","missingTracks","_getMissingTracks","stopMediaStream","desktopSharingSourceDevice","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","desktopSharingSources","gumOptions","desktopSharingFrameRate","newObtainAudioAndVideoPermissions","otherOptions","mediaStreamsMetaData","maybeRequestDesktopDevice","matchingDevice","maybeRequestCaptureDevices","requestedCaptureDevices","clonedeep","autoGainControl","noiseSuppression","assign","channelCount","newGetConstraints","desktopAudioTracks","desktopAudioStream","desktopVideoTracks","desktopVideoStream","effects","deviceType","mediaStream","getTracks","isDesktopSharingEnabled","setAudioOutputDevice","getCurrentlyAvailableMediaDevices","arePermissionsGrantedForAvailableDevices","some","getEventDataForActiveDevice","deviceData","setSuspendVideo","enable","googSuspendBelowMinBitrate","oldOnErrorHandler","oldOnUnhandledRejection","onunhandledrejection","args","errHandler","NONE","peerConnectionIdCounter","rtcTrackIdCounter","createLocalTracks","tracksInfo","newTracks","trackInfo","safeCounterIncrement","localTrack","JitsiLocalTrack","rtcId","_newCreateLocalTracks","mediaStreamMetaData","metaData","getSettings","RTC","peerConnections","localTracks","_channel","_lastN","_lastNEndpoints","_maxFrameHeight","_selectedEndpoints","_lastNChangeListener","_onLastNChanged","_onDeviceListChanged","_updateAudioOutputForAudioTracks","_videoType","addListener","destroy","_channelOpenListener","initializeBridgeChannel","wsUrl","BridgeChannel","_receiverVideoConstraints","sendNewReceiverVideoConstraintsMessage","sendSelectedEndpointsMessage","sendReceiverVideoConstraintMessage","sendSetLastNMessage","_selectedEndpoint","sendVideoTypeMessage","lastNEndpoints","oldLastNEndpoints","leavingLastNEndpoints","enteringLastNEndpoints","isInLastN","onCallEnded","setNewReceiverVideoConstraints","isOpen","setReceiverVideoConstraint","maxFrameHeight","setVideoType","selectEndpoints","ids","eventType","createPeerConnection","signaling","iceConfig","abtestSuspendVideo","addPermanentProperties","enableInsertableStreams","encodedInsertableStreams","forceEncodedAudioInsertableStreams","forceEncodedVideoInsertableStreams","supportsSdpSemantics","sdpSemantics","forceTurnRelay","iceTransportPolicy","bundlePolicy","newConnection","TraceablePeerConnection","_removePeerConnection","traceablePeerConnection","addLocalTrack","getLocalVideoTrack","localVideo","getLocalTracks","getLocalAudioTrack","localAudio","tracks","getType","getRemoteTracks","remoteTracks","pcRemoteTracks","setAudioMute","mutePromises","audioTrack","mute","unmute","all","setVideoMute","videoTrack","removeLocalTrack","pos","elSelector","isUserStreamById","streamId","closeBridgeChannel","setAudioLevel","audioLevel","getTrackBySSRC","isAudioTrack","sendChannelMessage","to","sendMessage","sendEndpointStatsMessage","setLastN","remoteAudioTracks","setAudioOutput","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","GENERAL","NOT_FOUND","PERMISSION_DENIED","SCREENSHARING_GENERIC_ERROR","SCREENSHARING_USER_CANCELED","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","CHAT_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","CONFERENCE_RESTARTED","NOT_ALLOWED_ERROR","MEMBERS_ONLY_ERROR","CONFERENCE_ACCESS_DENIED","ICE_FAILED","INCOMPATIBLE_SERVER_VERSIONS","OFFER_ANSWER_FAILED","PASSWORD_NOT_SUPPORTED","VIDEOBRIDGE_NOT_AVAILABLE","SDP","mediaI","failICE","removeTcpCandidates","removeUdpCandidates","getMediaSsrcMap","mediaSSRCs","mediaindex","mid","linessrc","idx","containsSSRC","medias","toJingle","thecreator","assrcline","creator","amidline","rtpmap","afmtpline","fmtpParameters","rtcpFbToJingle","ssrcMap","availableSsrc","ssrcParameters","ssrcSdpLine","kv","v","ridLines","usesRidsForSimulcast","rids","ridLine","ridInfo","extmapLines","extmap","senders","transportToJingle","sctpmap","sctpAttrs","number","setupLine","setup","iceParameters","payloadtype","feedback","rtcpFbFromJingle","feedbackElementTrrInt","each","_","fb","hasAttribute","fromJingle","jingle","sessionId","groups","$","contents","content","jingle2media","sctp","streamCount","payloadType","__","parameter","hdrExt","ReflectOwnKeys","R","Reflect","ReflectApply","target","receiver","Function","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","_getMaxListeners","that","_addListener","prepend","events","existing","warning","newListener","warned","emitter","count","onceWrapper","fired","wrapFn","_onceWrap","state","wrapped","_listeners","unwrap","evlistener","ret","unwrapListeners","arrayClone","listenerCount","copy","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","context","listeners","prependListener","once","prependOnceListener","list","position","originalListener","spliceOne","off","rawListeners","eventNames","TRACK_ERROR_TO_MESSAGE_MAP","constraint","failedConstraintName","getResolutionFromFailedConstraint","OPUS","VP8","VP9","removeEventListener","parser","writer","write","parseFmtpConfig","parseParams","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","DETECTOR_STATE_CHANGE","VAD_NOISY_DEVICE","VAD_REPORT_PUBLISHED","VAD_SCORE_PUBLISHED","VAD_TALK_WHILE_MUTED","FAILURE_REGEX","DEFAULT_STUN_SERVERS","urls","JITSI_MEET_MUC_TYPE","FEATURE_JIGASI","FEATURE_E2EE","XMPP","token","disconnectInProgress","connectionTimes","authenticatedUser","initStropheUtil","initStropheLogger","xmppPing","hosts","enableWebsocketResume","serviceUrl","shard","websocketKeepAlive","websocketKeepAliveUrl","XmppConnection","createConnection","bosh","deploymentInfo","Events","CONN_SHARD_CHANGED","shard_changed","suspend_time","ping","getPingSuspendTime","time_since_last_success","getTimeSinceLastSuccess","JitsiConnectionEvents","JitsiConnectionErrors","_initStrophePlugins","caps","Caps","clientNode","initFeaturesList","ev","addFeature","disableRtx","isVersionLessThan","enableOpusRed","supportsAudioRed","enableRemb","enableTcc","enableLipSync","rayo","E2EEncryption","getConnection","connectionHandler","credentials","performance","statusStr","getStatusString","XMPPEvents","_sysMessageHandler","_stropheConn","sendDiscoInfo","getStunAndTurnCredentials","_resetState","getFeaturesAndIdentities","identities","PING","_processDiscoInfoIdentities","password","anonymousConnectionFailed","connectionFailed","lastErrorMsg","stopInterval","wasIntentionalDisconnect","errMsg","_getConnectionFailedReasonDetails","lastErrorStatus","getLastErrorStatus","lastFailedRawMessage","getLastFailedMessage","_parseConnectionFailedMessage","identity","speakerStatsComponentAddress","conferenceDurationComponentAddress","lobbySupported","processLobbyFeatures","f","fr","endsWith","_onPrivateMessage","exec","_onSystemMessage","foundIceServers","onReceiveStunAndTurnCredentials","parseDiscoInfo","attaching","anonymousdomain","configDomain","hostname","createRoom","roomName","onCreateResource","roomjid","customDomain","muc","mucNickname","randomHexString","emuc","getJid","getJingleLog","getLog","getXmppLog","dial","pingDomain","getSessions","sessions","disconnectListener","_cleanupXmppConnection","isUsingWebSocket","evType","sendUnavailableBeacon","jvb","iceServers","p2p","p2pStunServers","stunServers","MucConnectionPlugin","JingleConnectionPlugin","RayoConnectionPlugin","headersArr","trim","room","tryParseJSONAndVerify","jsonString","json","jsonMessage","parsedJson","users","created_timestamp","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","WRONG_STATE","DISPLAY_NAME_REQUIRED","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","LONG_TASKS_STATS","nextValue","MAX_SAFE_INTEGER","calculateAverage","valueArray","filterPositiveValues","RunningAverage","average","addNext","getAverage","_callStatsUserName","_machineId","_p8","_storage","jitsiLocalStorage","externalStorage","username","UsernameGenerator","generateUsername","generateCallStatsUserName","amDid","jitsiMeetId","generateJitsiMeetId","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","getSSRCAttrValue","ssrcNumber","attrName","ssrcObj","removeSSRC","ssrcNum","addSSRCAttribute","findGroup","findGroups","findGroupByPrimarySSRC","primarySSRC","findSSRCByMSID","msid","getSSRCCount","containsAnySSRCGroups","getPrimaryVideoSsrc","fecGroup","getRtxSSRC","getSSRCs","getPrimaryVideoSSRCs","videoSSRCs","ssrcGroupInfo","secondarySsrc","dumpSSRCGroups","removeGroupsWithSSRC","groupInfo","removeGroupsBySemantics","replaceSSRC","oldSSRC","newSSRC","addSSRCGroup","SdpTransformWrap","rawSDP","parsedSDP","transform","selectMedia","selectedMLine","toRawSDP","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","argsTag","mapTag","objectTag","setTag","reIsHostCtor","reIsUint","typedArrayTags","freeGlobal","freeSelf","freeExports","freeModule","moduleExports","freeProcess","process","nodeUtil","binding","nodeIsTypedArray","isTypedArray","arraySome","predicate","mapToArray","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","funcToString","maskSrcKey","IE_PROTO","nativeObjectToString","reIsNative","RegExp","Buffer","Uint8Array","propertyIsEnumerable","symToStringTag","nativeGetSymbols","nativeIsBuffer","isBuffer","nativeKeys","DataView","getNative","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entries","clear","entry","ListCache","MapCache","SetCache","__data__","Stack","arrayLikeKeys","inherited","isArr","isArg","isArguments","isBuff","isType","skipIndexes","iteratee","baseTimes","isIndex","assocIndexOf","eq","baseGetTag","isOwn","unmasked","getRawTag","objectToString","baseIsArguments","isObjectLike","baseIsEqual","other","bitmask","customizer","equalFunc","objIsArr","othIsArr","objTag","getTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","byteLength","byteOffset","buffer","convert","isPartial","stacked","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","getAllKeys","objLength","othLength","skipCtor","objValue","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","baseIsNative","isObject","isMasked","isFunction","baseKeys","Ctor","arrLength","seen","arrValue","othIndex","keysFunc","symbolsFunc","offset","arrayPush","baseGetAllKeys","getSymbols","getMapData","getValue","pairs","LARGE_ARRAY_SIZE","resIndex","arrayFilter","symbol","ArrayBuffer","ctorString","isLength","baseUnary","PENDING","ACTIVE","ENDED","ACTIONS","ACCEPT","INITIATE","TERMINATE","UNAVAILABLE","order","wrtcFuncNames","fabricEvent","reportType","_fabrics","backend","backendInitialized","atLeastOneFabric","defaultInstance","fabrics","hasFabric","_addNewFabric","_emptyReportQueue","csInstance","defaultConfID","defaultPC","report","reportsQueue","errorData","_reportError","pc","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","_error","reportError","theBackend","tryCatchMethods","methodName","originalMethod","theArguments","debugMethods","originalReportError","exception","CallStatsBackend","callstats","configParams","_traceAndCatchBackendCalls","applicationVersion","getName","initialize","_initCallback","attachWifiStatsHandler","addresses","_reportEvent","conferenceID","sendUserFeedback","fabricAttributes","remoteEndpointType","endpointType","peer","server","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","success","streamEndpointId","fabricTerminated","randomElement","randomHexDigit","randomAlphanumStr","getConnectionPluginDefinition","base","ConnectionPluginListenable","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","CONN_STATUS_CHANGED","_options","pingOptions","_usesWebsocket","_rawInputTracker","LastSuccessTracker","startTracking","_resumeTask","ResumeTask","_deferredIQs","PingConnectionPlugin","getTimeSinceLastServerResponse","onPingThresholdExceeded","_onPingErrorThresholdExceeded","_oneSuccessfulConnect","websocket","_status","OPEN","disco","_stropheConnectionCb","targetCallback","blockCallback","_maybeEnableStreamResume","_keepAliveAndCheckShard","_maybeStartWSKeepAlive","_processDeferredIQs","cancel","startInterval","_tryResumingConnection","_wsKeepAlive","_clearDeferredIQs","deferred","closeWebsocket","streamManagement","getResumeToken","intervalWithJitter","url","fetch","responseShard","timeLeft","sendIQ2","sendBeacon","schedule","funcTag","genTag","reFlags","cloneableTags","addMapEntry","pair","addSetEntry","arrayReduce","accumulator","initAccum","isHostObject","overArg","getPrototype","objectCreate","isArrayLike","isArrayLikeObject","assignValue","baseClone","isDeep","isFull","input","initCloneArray","copyArray","isFunc","cloneBuffer","isPrototype","initCloneObject","copyObject","copySymbols","baseAssign","cloneFunc","cloneArrayBuffer","dataView","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","initCloneByTag","props","arrayEach","subValue","arrayBuffer","newValue","cache","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","SPEAKERS_AUDIO_LEVELS","ENVIRONMENT","g","Deferred","clearRejectTimeout","_timeout","setRejectTimeout","ms","PERMISSION_PROMPT_IS_SHOWN","SLOW_GET_USER_MEDIA","gumFunction","ScreenObtainer","_createObtainStreamMethod","isNWJS","JitsiMeetNW","obtainDesktopStream","obtainScreenOnElectron","supportsGetDisplayMedia","obtainScreenFromGetDisplayMediaRN","obtainScreenFromGetDisplayMedia","JitsiMeetScreenObtainer","openDesktopPicker","streamType","onGetStreamResponse","errorCallback","getDisplayMedia","cursor","errorDetails","errorName","errorMsg","errorStack","currentExecutingScript","src","relativeURL","loadCallback","script","referenceNode","scriptEl","scriptSrc","baseScriptSrc","lastIndexOf","onload","insertBefore","ParticipantConnectionStatus","INACTIVE","INTERRUPTED","RESTORING","ParticipantConnectionStatusHandler","isConnectionActiveByJvb","isRestoringTimedout","isVideoMuted","isVideoTrackFrozen","supportsVideoMuteOnConnInterrupted","rtc","trackTimers","connStatusFromJvb","outOfLastNTimeout","rtcMuteTimeout","rtcMutedTimestamp","enteredLastNTimestamp","restoringTimers","connectionStatusMap","_getVideoFrozenTimeout","_onEndpointConnStatusChanged","onEndpointConnStatusChanged","_onP2PStatus","refreshConnectionStatusForAll","_onUserLeft","onUserLeft","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onRemoteTrackAdded","onRemoteTrackAdded","_onRemoteTrackRemoved","onRemoteTrackRemoved","_onSignallingMuteChanged","onSignallingMuteChanged","_onTrackVideoTypeChanged","onTrackVideoTypeChanged","_onLastNValueChanged","participantIds","clearRtcMutedTimestamp","endpointId","isActive","myUserId","figureOutConnectionStatus","_changeConnectionStatus","participant","newStatus","getConnectionStatus","getId","_setConnectionStatus","remoteTrack","getParticipantId","JitsiTrackEvents","hasAnyVideoRTCMuted","hasAnyVideoTrackWebRTCMuted","participants","getParticipants","getParticipantById","inP2PMode","isP2PActive","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","getLastN","isConnActiveByJvb","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","oldConnectionStatus","connectionStatus","nowMs","maybeSendParticipantConnectionStatusEvent","startedMs","getTracksByMediaType","participantConnectionStatus","leavingLastN","enteringLastN","rTimer","isMuted","NETWORK_INFO_EVENT","NetworkInfo","_current","isOnline","updateNetworkInfo","networkInfo","SDPUtils","localCName","generateIdentifier","splitLines","blob","splitSections","part","getDescription","sections","getMediaSections","matchPrefix","prefix","parseCandidate","address","relatedAddress","relatedPort","tcpType","usernameFragment","writeCandidate","toUpperCase","parseIceOptions","parseRtpMap","parsed","clockRate","numChannels","writeRtpMap","preferredPayloadType","writeExtmap","headerExtension","preferredId","writeFmtp","parameters","param","parseRtcpFb","writeRtcpFb","rtcpFeedback","parseSsrcMedia","sp","colon","parseSsrcGroup","getMid","mediaSection","algorithm","getDtlsParameters","role","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","writeIceParameters","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","rtpmapline","fmtps","writeRtpDescription","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","flows","apt","encParam","codecPayloadType","rtx","fec","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","cname","rsize","reducedSize","compound","mux","parseMsid","spec","planB","msidParts","parseSctpDescription","maxMessageSize","maxSizeLine","sctpPort","writeSctpDescription","output","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","version","writeMediaSection","transceiver","iceGatherer","getLocalParameters","dtlsTransport","rtpSender","rtpReceiver","sendEncodingParameters","getDirection","getKind","isRejected","parseOLine","sessionVersion","netType","addressType","isValidSDP","getFocusRecordingUpdate","presence","jibriStatus","initiator","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","OLM_MESSAGE_TYPES","kOlmData","OlmAdapterEvents","OLM_ID_KEY_READY","PARTICIPANT_E2EE_CHANNEL_READY","PARTICIPANT_KEY_UPDATED","OlmAdapter","_conf","_init","_key","_keyIndex","_reqs","_sessionInitialization","_bootstrapOlm","_onEndpointMessageReceived","_onConferenceLeft","_onParticipantLeft","_onParticipantPropertyChanged","promises","localParticipantId","getFeatures","_sendSessionInit","allSettled","Olm","pId","olmData","_getParticipantOlmData","uuidv4","olm","ciphertext","_encryptKeyInfo","_sendMessage","updateCurrentKey","clearParticipantSession","free","_olmAccount","Account","idKeys","identity_keys","_idKey","curve25519","get_library_version","keyInfo","base64js","fromByteArray","keyIndex","encrypt","_sendError","Session","create_outbound","idKey","otKey","ack","pendingSessionUuid","create_inbound","remove_one_time_keys","decrypt","safeJsonParse","toByteArray","lastKey","isEqual","oldValue","isE2EEEnabled","generate_one_time_keys","otKeys","one_time_keys","mark_keys_as_published","_conferenceJoined","_enabled","_initialized","_enabling","_e2eeCtx","E2EEContext","_olmAdapter","_ratchetKey","debounce","_ratchetKeyImpl","_rotateKey","_rotateKeyImpl","_onParticipantJoined","_onMediaSessionStarted","_onLocalTrackAdded","_setupReceiverE2EEForTrack","_trackMuteChanged","_onOlmIdKeyReady","_onParticipantE2EEChannelReady","_onParticipantKeyUpdated","supportsInsertableStreams","testing","disableE2EE","isEnabled","enabled","initSessions","setLocalParticipantProperty","_restartMediaSessions","_generateKey","updateKey","setKey","crypto","getRandomValues","_getMediaSessions","_setupSenderE2EEForTrack","cleanup","material","importKey","newKey","ratchet","findReceiverForTrack","handleReceiver","sender","findSenderForTrack","handleSender","doesVideoMuteByStreamRemove","isVideoTrack","JingleSessionPC","JingleSession","jingleContents","videoContents","maxFrameHeightSel","localJid","remoteJid","mediaConstraints","isInitiator","_bridgeSessionId","_cachedOldLocalSdp","_cachedNewLocalSdp","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","localRecvMaxFrameHeight","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","remoteRecvMaxFrameHeight","signalingLayer","SignalingLayerImpl","modificationQueue","AsyncQueue","wasConnected","establishmentDuration","_xmppListeners","onXmppStatusChanged","_removeSenderVideoConstraintsChangeListener","_assertNotEnded","JingleSessionState","doInitialize","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","gatherStats","maxstats","capScreenshareBitrate","videoQuality","disableSimulcast","_abtestSuspendVideoEnabled","preferH264","disableH264","preferredCodec","startSilent","onicecandidate","phase","sendIceCandidate","onsignalingstatechange","signalingState","connectionState","oniceconnectionstatechange","iceConnectionState","reconnect","usesTerminateForRestart","enableIceRestart","supportsRestartByTerminate","iceStarted","onnegotiationneeded","remoteDescription","usesUnifiedPlan","workFunction","finishedCallback","oldSdp","localDescription","_renegotiate","newSdp","notifyMySSRCUpdate","setChatRoom","getRemoteRecvMaxFrameHeight","localSDP","ice","sdpMLineIndex","jcand","errorMesssage","usedrip","dripContainer","sendIceCandidates","candidates","initiatorJid","cands","sdpMid","fingerprintLine","tmp","required","newJingleErrorHandler","sendIceFailedNotification","sessionInfo","addIceCandidates","iceCandidates","rtcCandidate","RTCIceCandidate","outerHTML","iceCandidate","addIceCandidate","readSsrcInfo","ssrcElement","setSSRCOwner","i3","ssrcInfoElement","owner","generateRecvonlySsrc","getConfiguredVideoCodec","acceptOffer","jingleOffer","failure","setOfferAnswerCycle","sendSessionAccept","invite","addTracks","createOffer","offerSdp","setLocalDescription","sendSessionInitiate","setAnswer","jingleAnswer","jingleOfferAnswerIq","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","bridgeSessionId","sendContentModify","newLocalSdp","setVideoCodecs","preferred","disabled","current","replaceTransport","jingleOfferElem","enableForcedReload","sendTransportAccept","originalOffer","clone","remove","newFingerprint","accept","responder","responderJid","sessionModify","transportAccept","medialines","sendTransportReject","transportReject","setSenderMaxBitrates","setMaxBitRate","setSenderVideoConstraint","videoActive","setMediaTransferActive","setSenderVideoDegradationPreference","terminate","sendSessionTerminate","sessionTerminate","reasonDescription","restart","requestRestart","onTerminated","reasonCondition","reasonText","_parseSsrcInfoFromSourceAdd","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","i2","addRemoteStream","_addOrRemoveRemoteStream","removeRemoteStream","removeRemoteStreamsOnLeave","finishCallback","removeSsrcInfo","getRemoteSourceInfoByParticipant","_processRemoteRemoveSource","removeRemoteTracks","newLocalSDP","isAdd","logPrefix","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","offerIq","remoteSdp","usesPlanB","findIndex","optionalRemoteSdp","RTCSessionDescription","_initiatorRenegotiate","_responderRenegotiate","setRemoteDescription","createAnswer","answer","offer","replaceTrack","oldTrack","newTrack","clearRecvonlySsrc","shouldRenegotiate","sourceRemoveElem","ssrcLines","_verifyNoSSRCChanged","operationName","oldSDP","currentLocalSDP","sdpDiff","SDPDiffer","addedMedia","getNewMedia","removedMedia","addTrackAsUnmute","_addRemoveTrackAsMuteUnmute","removeTrackAsMute","isMute","oldLocalSDP","removeTrackMute","addTrackUnmute","audioActive","logAudioStr","logVideoStr","isSessionActive","audioActiveChanged","setAudioTransferActive","pcVideoActiveChanged","setVideoTransferActive","modifyContents","newVideoSenders","parseVideoSenders","newMaxFrameHeight","parseMaxFrameHeight","MediaSessionEvents","REMOTE_VIDEO_CONSTRAINTS_CHANGED","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","sdpDiffer","request","failureCb","errResponse","errorElSel","errorReasonSel","errorMsgSel","getIceConnectionState","getConnectionState","shutdown","abTesting","enableSuspendVideoTest","_getInitiatorJid","integerHash","bowserNameToJitsiName","_detectElectron","userAgent","_detectNWJS","_detectReactNative","product","_detect","bowser","browserInfo","detectors","getBrowserName","getBrowserVersion","_detectChromiumBased","BrowserDetection","_bowser","Bowser","getParser","detectedBrowserInfo","_name","_version","isOpera","isIExplorer","isSafari","getVersion","_checkCondition","checkTree","satisfies","isVersionGreaterThan","isVersionEqualTo","DummyLocalStorage","keyName","keyValue","JitsiLocalStorage","localStorage","_localStorageDisabled","ignore","isLocalStorageDisabled","dontEmitChangedEvent","localStorageContent","b64","lens","getLens","validLen","placeHoldersLen","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","len2","encodeChunk","lookup","end","arrayEquals","array1","array2","equals","mySDP","otherSDP","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","mySsrcGroup","modify","sdpMediaSsrcs","modified","mediaSsrc","nv","SIM_LAYER_RIDS","TPCUtils","videoBitrates","localStreamEncodingsConfig","active","high","low","scaleResolutionDownBy","standard","ensureCorrectOrderOfSsrcs","parsedSdp","reorderedSsrcs","sources","_getStreamEncodings","isSimulcastOn","insertUnifiedPlanSimulcastReceive","usesSdpMungingForSimulcast","simulcast_03","simulcast","simulcastLine","getTrack","transceiverInit","getOriginalStream","sendEncodings","addTransceiver","getTransceivers","addStream","setEncodings","getLocalStreamHeightConstraints","localVideoHeightConstraints","encoding","getTrackId","stopped","localSSRCs","_addedStreams","_extractPrimarySSRC","getParameters","encodings","setParameters","transceivers","updateEncodingsResolution","every","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","marker","runClearTimeout","Item","noop","nextTick","title","env","argv","versions","cwd","chdir","dir","umask","AudioContext","webkitAudioContext","LocalStatsCollector","interval","intervalId","intervalMilis","suspend","isLocalStatsSupported","analyser","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","frequencyBinCount","getByteTimeDomainData","samples","maxVolume","parseFloat","toFixed","timeDomainDataToAudioLevel","newLevel","lastLevel","diff","animateLevel","ON","OFF","trackHandler2Prop","JitsiTrack","streamInactiveHandler","trackMediaType","containers","disposed","_streamInactiveHandler","_setStream","_addMediaStreamInactiveHandler","onended","oninactive","_setHandler","_unregisterHandlers","isWebRTCTrackMuted","isLocalAudioTrack","getStreamId","getTrackLabel","getUsageLabel","_maybeFireTrackAttached","container","_onTrackAttach","_attachTTFMTracker","detach","_onTrackDetach","isScreenSharing","newAudioLevel","supportsReceiverStats","getMSID","trackId","TrackVADEmitter","procNodeSampleRate","vadProcessor","jitsiLocalTrack","_procNodeSampleRate","_vadProcessor","_localTrack","_bufferResidue","Float32Array","_audioContext","createAudioContext","sampleRate","getRequiredPCMFrequency","_vadSampleSize","getSampleLength","_onAudioProcess","_initializeAudioContext","_audioSource","_audioProcessingNode","createScriptProcessor","audioEvent","inData","inputBuffer","getChannelData","completeInData","sampleTimestamp","pcmSample","vadScore","calculateAudioFrameVAD","timestamp","score","pcmData","getDeviceId","_connectAudioGraph","onaudioprocess","destination","_disconnectAudioGraph","_cleanupResources","stopStream","getDeviceLabel","_destroyed","AudioContextImpl","E2E_RTT_CHANGED","displayName","isLocalStats","_userId","setDisplayName","_isLocalStats","setDominantSpeaker","totalDominantSpeakerTime","_dominantSpeakerStart","_hasLeft","getUserId","getDisplayName","newName","isDominantSpeaker","isNowDominantSpeaker","timeElapsed","getTotalDominantSpeakerTime","total","hasLeft","markAsHasLeft","_eventEmitter","_permissions","JitsiMediaDevicesEvents","_logOutputDevice","permissions","_handlePermissionsChange","_permissionsApiSupported","query","_parsePermissionState","onchange","results","supported","permissionStatus","deviceID","isDevicePermissionGranted","isMultipleAudioInputSupported","emitEvent","IDENTITY_UPDATED","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","HEX_CHARS","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","Uint32Array","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","createOutputMethod","outputType","Md5","update","createMethod","method","nodeWrap","eval","nodeMethod","createHash","digest","sharedMemory","h0","h1","h2","h3","bytes","hBytes","finalized","hashed","first","notString","lastByteIndex","finalize","bc","da","hex","base64","v1","v2","v3","base64Str","md5","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","nativeMax","nativeMin","toNumber","isSymbol","isBinary","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","time","thisArg","leadingEdge","timerExpired","shouldInvoke","timeSinceLastCall","trailingEdge","remainingWait","debounced","isInvoking","textEncoder","TextEncoder","subtle","deriveBits","encode","keyBytes","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","compareIdentities","category","rooms","externalFeatures","_addChatRoom","_removeChatRoom","CAPS","feature","submit","external","_generateVersion","_updateRoomWithExternalFeatures","removeFeature","removeFromPresence","children","addOrReplaceInPresence","_getDiscoInfo","_fixChatRoomPresenceMap","_notifyVersionChanged","sortedIdentities","accumulatedValue","sortedFeatures","generateSha","_identities","_features","_setEffectInProgress","effect","_startStreamEffect","maxEnabledResolution","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_trackMutedTS","_onDeviceListWillChange","oldRealDeviceId","_setRealDeviceIdFromDeviceList","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","isEnded","_isNoDataFromSourceEventsEnabled","_fireNoDataFromSourceEvent","isReceivingData","storedMSID","_streamEffect","_originalStream","startEffect","_stopStreamEffect","stopEffect","_switchStreamEffect","setEffect","cont","removeTrack","_queueSetMuted","setMuted","_setMuted","logMuteInfo","_removeStreamFromConferenceAsMute","streamOptions","getCameraFacingMode","streamsInfo","streamInfo","_addStreamToConferenceAsUnmute","_sendMuteStatus","_addLocalTrackAsUnmute","successCallback","_removeLocalTrackAsMute","_setConference","_onByteSentStatsReceived","bytesSent","trackSettings","_stopStreamInProgress","_switchCamera","_effectEnabled","VADAudioAnalyser","createVADProcessor","_createVADProcessor","_vadEmitter","_isVADEmitterRunning","_detectionServices","_vadInitTracker","_processVADScore","_trackAdded","_trackRemoved","addVADDetectionService","vadService","detector","_stopVADEmitter","_startVADEmitter","processVADScore","_changeDetectorsMuteState","changeMuteState","vadEmitter","JibriSession","_mode","_setSessionID","setStatus","getError","getID","_sessionID","getInitiator","_initiator","getLiveStreamViewURL","_liveStreamViewURL","getStatus","getTerminator","_terminator","getMode","setError","setLiveStreamViewURL","setInitiator","setTerminator","appData","broadcastId","focusMucJid","_createIQ","recordingXMLUtils","_setErrorFromIq","errorIq","msCrypto","rnds8","rng","byteToHex","buf","bth","rnds","consoleTransport","globalTransports","transportIdx","globalOptions","getCallerInfo","callerInfo","fileLocation","column","disableCallerInfo","logPrefixes","toISOString","fullLogParts","methods","LOG","webpackPolyfill","deprecate","paths","grammar","reg","format","u","z","rate","subtype","sessionConfig","raddr","dir2","RecordingResult","TrackRecorder","recorder","startTime","startRecorder","trackRecorder","stopRecorder","determineCorrectFileType","MediaRecorder","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","isRecording","instantiateTrackRecorder","updateNames","originalStream","mimeType","ondataavailable","dataEvent","recorderToRemove","download","Blob","URL","createObjectURL","href","click","revokeObjectURL","getRecordingResults","getFileType","JitsiConnection","appID","errType","ANALYTICS_CONNECTION_DISCONNECTED","setToken","initJitsiConference","JitsiConference","getConnectionTimes","getLogs","metadata","ua","eventManager","JitsiConferenceEventManager","componentsVersions","ComponentsVersions","jvbJingleSession","lastDominantSpeaker","dtmfManager","somebodySupportsDTMF","authEnabled","startAudioMuted","startVideoMuted","startMutedPolicy","isMutedByFocus","mutedByFocusActor","isVideoMutedByFocus","mutedVideoByFocusActor","wasStopped","connectionQuality","ConnectionQuality","avgRtpStatsReporter","AvgRTPStatsReporter","avgRtpStatsN","_audioOutputProblemDetector","AudioOutputProblemDetector","isJvbConnectionInterrupted","speakerStatsCollector","SpeakerStatsCollector","deferredStartP2PTask","delay","backToP2PDelay","isP2PConnectionInterrupted","p2pJingleSession","videoSIPGWHandler","VideoSIPGW","recordingManager","RecordingManager","_conferenceJoinAnalyticsEventSent","isE2EESupported","_e2eEncryption","resourceCreator","isAuthenticatedUser","setupXMPPListeners","codecSettings","disabledCodec","enforcePreferredCodec","jvbCodec","p2pCodec","codecSelection","CodecSelection","_statsCurrentId","statisticsId","Settings","callStatsUserName","statsId","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","_sendConferenceJoinAnalyticsEvent","e2eping","E2ePing","setupRTCListeners","receiveVideoController","ReceiveVideoController","sendVideoController","SendVideoController","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","callStatsThreshold","statisticsDisplayName","callStatsCustomScriptUrl","setupChatRoomListeners","setupStatisticsListeners","enableTalkWhileMuted","_audioAnalyser","vadTalkMutedDetection","VADTalkMutedDetection","DetectionEvents","enableNoisyMicDetection","vadNoiseDetection","VADNoiseDetection","enableNoAudioDetection","_noAudioSignalDetection","NoAudioSignalDetection","hasAudioSignal","channelLastN","jvb121Status","Jvb121EventGenerator","p2pDominantSpeakerDetection","P2PDominantSpeakerDetection","userRegion","getPreferredCodec","_maybeSetSITimeout","authenticateAndUpgradeRole","isJoined","joined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","leave","onLocalTrackRemoved","_sendConferenceLeftAnalyticsEvent","_delayedIceFailed","removeXMPPListeners","onMemberLeft","_getActiveMediaSession","isAuthEnabled","isLoggedIn","authIdentity","getAuthLogin","isExternalAuthEnabled","moderator","getExternalAuthUrl","urlForPopup","getPopupLoginUrl","getLoginUrl","getPerformanceStats","longTasksStats","eventId","addCommandListener","command","addPresenceListener","removeCommandListener","removePresenceListener","sendTextMessage","elementName","getFromPresence","sendPrivateTextMessage","sendPrivateMessage","sendCommand","sendCommandOnce","removeCommand","setSubject","subject","isModerator","getTranscriber","transcriber","Transcriber","localAudioTracks","getTranscriptionStatus","transcriptionStatus","_fireAudioLevelChangeEvent","activeTpc","getActivePeerConnection","_fireMuteChangeEvent","actorParticipant","muteParticipant","myroomjid","actorId","_getInitialLocalTracks","isStartAudioMuted","isStartVideoMuted","muteHandler","audioLevelHandler","_doReplaceTrack","_setupNewTrack","replaceTrackPromises","videoTypeTagName","addAsUnmutePromises","removeAsMutePromises","getRole","isHidden","hiddenDomain","lock","lockRoom","JitsiConferenceErrors","unlock","selectParticipant","selectParticipants","lastN","isInteger","isVideoActive","getParticipantCount","countHidden","grantOwner","setAffiliation","revokeOwner","isMyself","isMembersOnly","kickParticipant","kick","_maybeClearSITimeout","_sessionInitiateTimeout","muteMediaType","onMemberJoined","nick","statsID","botType","fullJid","JitsiParticipant","setRole","setBotType","setFeatures","_updateFeatures","_maybeStartOrStopP2P","_onMucJoined","_supportsDTMF","updateDTMFSupport","setProperty","_onMemberBotTypeChanged","botParticipant","getBotType","mediaSessions","removePromises","removedTracks","onMemberKicked","isSelfPresence","kickedParticipantId","kickedParticipant","onLocalRoleChanged","onUserRoleChanged","onDisplayNameChanged","_displayName","_tracks","onCallAccepted","onTransportInfo","transportInfo","removedTrack","_onIncomingCallP2P","jingleSession","rejectReason","supportsP2P","_shouldBeInP2PMode","_rejectIncomingCall","_acceptP2PIncomingCall","onIncomingCall","isFocus","_acceptJvbIncomingCall","serverRegion","_setBridgeChannel","_suspendMediaTransferForJvbConnection","webSocket","forceJvb121","p2pFailed","_stopP2PSession","onSuspendDetected","supportsDTMF","isDTMFSupported","sendTones","tones","duration","peerConnection","startRecording","stopRecording","isSIPCallingSupported","hangup","startTranscriber","stopTranscriber","getPhoneNumber","getPhonePin","getMeetingUniqueId","getMeetingId","setStartMutedPolicy","policy","getStartMutedPolicy","removeLocalParticipantProperty","getLocalParticipantProperty","presMap","nodes","prop","overallFeedback","detailedFeedback","getSsrcByTrack","getLocalSSRC","getSSRC","remoteUserId","_isFocus","mucJid","_fireIncompatibleVersionsEvent","sendEndpointMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","isConnectionInterrupted","_onConferenceRestarted","restartInProgress","_onIceConnectionFailed","IceFailedHandling","remoteID","getStatsID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","logName","p2pEstablishmentDuration","jvbEstablishmentDuration","done","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","changed","getProperty","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","newP2PJingleSession","userLeftEvent","peers","peerCount","shouldBeInP2P","myId","peersId","hasBotPeer","hasFeature","wasP2PEstablished","getP2PConnectionState","startP2PSession","peerJid","stopP2PSession","getSpeakerStats","getStats","setReceiverConstraints","videoConstraints","setPreferredReceiveMaxFrameHeight","setPreferredSendMaxFrameHeight","createVideoSIPGWSession","sipAddress","VideoSIPGWConstants","meetingId","perf","toggleE2EE","setEnabled","isLobbySupported","getLobby","membersOnlyEnabled","enableLobby","disableLobby","disable","joinLobby","email","lobbyDenyAccess","denyAccess","lobbyApproveAccess","approveAccess","xmppListeners","chatRoom","chatRoomForwarder","EventEmitterForwarder","actor","forward","setParticipantPropertyListener","recorderSession","logObject","AuthenticationEvents","txt","myJid","ts","updated","dominant","previous","_addConferenceXMPPListener","audioMuted","videoMuted","ignoreStartMuted","createdTimestamp","isEngine","RTCRtpTransceiver","isTwa","matchMedia","_getChromiumBasedVersion","isUserInteractionRequiredForUnmute","supportsBandwidthStatistics","supportsCodecPreferences","setCodecPreferences","RTCRtpReceiver","getCapabilities","ondevicechange","supportsLocalCandidateRttStatistics","PerformanceObserver","supportedEntryTypes","supportsRTTStatistics","RTCRtpSender","createEncodedStreams","createEncodedVideoStreams","ReadableStream","postMessage","chromium","default","17","getFirstMatch","getSecondMatch","matchAndReturnConst","getWindowsVersionName","getMacOSVersionName","getAndroidVersionName","getVersionPrecision","compareVersions","getBrowserAlias","BROWSER_ALIASES_MAP","getBrowserTypeByAlias","BROWSER_MAP","18","ENGINE_MAP","OS_MAP","PLATFORMS_MAP","Bada","BlackBerry","Chrome","Chromium","Epiphany","Firefox","Focus","Generic","Googlebot","Maxthon","Opera","PhantomJS","Puffin","QupZilla","QQ","QQLite","Safari","Sailfish","SeaMonkey","Sleipnir","Swing","Tizen","Vivaldi","WeChat","Roku","amazon_silk","android","bada","blackberry","chrome","epiphany","firefox","focus","generic","googlebot","google_search","ie","k_meleon","maxthon","edge","mz","naver","opera","opera_coast","phantomjs","puffin","qupzilla","qq","qqlite","safari","sailfish","samsung_internet","seamonkey","sleipnir","swing","tizen","uc","vivaldi","webos","wechat","yandex","tablet","mobile","tv","WindowsPhone","Windows","MacOS","iOS","Android","WebOS","Linux","ChromeOS","PlayStation4","EdgeHTML","Blink","Trident","Presto","Gecko","WebKit","90","configurable","writable","getResult","91","_ua","parsedResult","getUA","parseBrowser","describe","getBrowser","getOS","os","parseOS","getOSName","getOSVersion","getPlatform","platform","parsePlatform","getPlatformType","getEngine","engine","parseEngine","getEngineName","isOS","isPlatform","isBrowser","compareVersion","is","92","93","versionName","94","vendor","model","95","analyticsHandlers","permanentProperties","conferenceName","setAnalyticsHandlers","_setUserProperties","_sendEvent","setUserProperties","setConferenceName","_verifyRequiredFields","objectType","containerType","objectId","_maybeCacheEvent","statsInterval","longTasks","maxDuration","performanceStatsInterval","avgRatePerMinute","maxDurationMs","longTaskEventHandler","getEntries","task","observer","observe","buffered","longTasksIntervalId","_lastTimeStamp","calculatePacketLoss","lostPackets","totalPackets","round","SsrcStats","loss","bitrate","upload","framerate","ConferenceStats","packetLoss","StatsCollector","baselineAudioLevelsReport","currentAudioLevelsReport","currentStatsReport","previousStatsReport","audioLevelReportHistory","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","statsIntervalId","statsIntervalMilis","ssrc2stats","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","setCodec","startAudioLevelStats","audioLevels","getAudioLevels","processAudioLevelReport","processStats","processStatsReport","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioCodec","videoCodec","audioBitrateDownload","audioBitrateUpload","videoBitrateDownload","videoBitrateUpload","ssrcStats","isDownloadStream","packetsTotal","packetsLost","userResolutions","userFramerates","codecDesc","userCodecs","avgAudioLevels","localAvgAudioLevels","avgAudioLevel","sum","currentValue","getNonNegativeValue","_calculateBitrate","before","fieldName","bytesNow","bytesBefore","bytesProcessed","timeMs","bitrateKbps","byteSentStats","nominated","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","remoteCandidateId","localUsedCandidate","localCandidateId","localip","conferenceStatsTransport","localCandidateType","candidateType","remoteCandidateType","networkType","currentRoundTripTime","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","frameHeight","frameWidth","framesPerSecond","codecId","codecShortType","remoteSource","localVideoTracks","framesSent","numberOfActiveStreams","getActiveSimulcastStreams","trackIdentifier","getSsrcByTrackId","dest","srcEvent","hidden","_jid","_id","_conference","_role","_hidden","_statsID","_connectionStatus","_properties","_identity","getConference","jitsiTrack","isAudioMuted","_isMediaTypeMuted","newRole","newFeatures","_botType","newBotType","onLoginSuccessful","roomPassword","rejectPromise","canceled","authenticationError","connectionError","kJitsiE2EE","E2EEcontext","baseUrl","ljm","workerBlob","blobUrl","_worker","Worker","operation","receiverStreams","createEncodedAudioStreams","readableStream","readable","writableStream","senderStreams","stropheConnection","_resumeRetryN","_retryDelay","_cancelResume","_networkOnlineListener","_scheduleResume","_resumeTimeout","getJitterDelay","retryDelay","_resumeConnection","resumeToken","pattern","oldToken","retry","minDelay","LastRequestTracker","_lastSuccess","_lastFailedMessage","xmppConnection","originalRawInput","rawMessage","ConnectionPlugin","failedPings","_onPingThresholdExceeded","_getTimeSinceLastServerResponse","pingInterval","pingTimeout","pingThreshold","threshold","pingTimestampsToKeep","pingExecIntervals","_addPingExecutionTimestamp","_lastServerCheck","pingIntervals","maxInterval","previousTS","currentInterval","onPresence","onPresenceUnavailable","onPresenceError","onMessage","onMute","onMuteVideo","ChatRoom","doLeave","createNonAnonymousRoom","packet2JSON","json2packet","packet","filterNodeFromPresenceJSON","MEMBERS_AFFILIATIONS","members","presHandlers","_removeConnListeners","noBridgeAvailable","Moderator","lobby","Lobby","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","locked","JitsiTranscriptionStatus","xns","presenceUpdateTime","disableFocus","allocateConferenceFocus","onConnStatusChanged","fromJoin","billingId","presenceSyncTime","discoRoomInfo","getInfo","meetingIdValEl","setMeetingId","membersOnly","lobbyRoomField","setLobbyRoomJid","disableDiscoInfo","getForm","form","formSubmit","member","statusEl","hasStatusUpdate","hasVersionUpdate","xElement","mucUserItem","affiliation","getFocusUserJid","isHiddenDomain","fromHiddenDomain","xEl","extractIdentityInformation","userInfo","_extractFeatures","_initFocus","memberOfThis","displayJids","restartByTerminateSupported","att","phone","pin","processNode","var","focusFeatures","tagHandlers","nickname","onParticipantLeft","skipEvents","onMucMemberLeft","destroySelect","reasonSelect","isKick","membersKeys","actorSelect","actorNick","subjectText","stamp","dateParts","passwordSelect","lobbyRoomNode","lobbyRoomJid","grantIQ","kickIQ","onError","onNotSupported","formsubmit","setMembersOnly","formToSubmit","addToPresence","matchingNodes","handlerIdx","getMemberRole","sendVideoInfoPresence","sendAudioInfoPresence","addAudioInfoToPresence","addVideoInfoToPresence","getMediaPresenceInfo","mutedNode","codecTypeNode","videoTypeNode","codecType","isSipGatewayEnabled","iqToFocus","clean","onMucLeft","doReject","mainRoom","maybeJoinLobbyRoom","_maybeJoinLobbyRoom","lobbyRoom","_leaveLobbyRoom","avatar","invitePassword","memberRoomJid","msgToSend","createExpBackoffTimer","step","origin","xmppService","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","attachEvent","setFocusUserJid","focusJid","focusUserJid","getFocusComponent","focusComponent","createConferenceIq","machineUID","machineId","audioPacketDelay","startBitrate","minBitrate","parseSessionId","resultIq","parseConfigOptions","authenticationEnabled","_allocateConferenceFocusSuccess","_allocateConferenceFocusError","invalidSession","reservationErr","errorCode","errorTextNode","waitMs","retrySec","urlCallback","failureCallback","_getLoginUrl","popup","urlCb","decodeURIComponent","logout","logoutUrl","jvbIceConfig","p2pIceConfig","offerToReceiveAudio","offerToReceiveVideo","onJingle","fromJid","sess","startMuted","successTime","me","v2Res","v2Err","v1Res","v1Err","iceservers","dict","credential","temp","useTurnUdp","updateLog","dtlsRole","_initialTrackId","getCommonCapabilities","localCapabilities","remoteCapabilities","commonCapabilities","findCodecByPayloadType","rtxCapabilityMatches","lRtx","rRtx","lCodecs","rCodecs","lCodec","rCodec","lHeaderExtension","rHeaderExtension","isActionAllowedInSignalingState","maybeAddCandidate","iceTransport","alreadyAdded","getRemoteCandidates","remoteCandidate","addRemoteCandidate","makeError","NotSupportedError","InvalidStateError","InvalidAccessError","OperationError","edgeVersion","addTrackToStreamAndFireEvent","dispatchEvent","MediaStreamTrackEvent","fireAddTrack","trackEvent","Event","_dispatchEvent","_eventTarget","canTrickleIceCandidates","needNegotiation","localStreams","remoteStreams","_localDescription","_remoteDescription","iceGatheringState","usingBundle","rtcpMuxPolicy","hasTurn","isString","filterIceServers","_iceGatherers","iceCandidatePoolSize","RTCIceGatherer","gatherPolicy","_config","_sdpSessionId","_sdpSessionVersion","_dtlsRole","_isClosed","onaddstream","ontrack","onremovestream","onconnectionstatechange","onicegatheringstatechange","ondatachannel","_emitGatheringStateChange","getConfiguration","getLocalStreams","getRemoteStreams","_createTransceiver","doNotAdd","hasBundleTransport","recvEncodingParameters","associatedRemoteMediaStreams","wantReceive","_createIceAndDtlsTransports","_maybeFireNegotiationNeeded","clonedStream","clonedTrack","removeStream","getSenders","getReceivers","_createIceGatherer","bufferedCandidateEvents","bufferCandidates","_gather","onlocalcandidate","evt","serializedCandidate","toJSON","complete","RTCIceTransport","onicestatechange","_updateIceConnectionState","_updateConnectionState","RTCDtlsTransport","ondtlsstatechange","_disposeIceAndDtlsTransports","_transceive","recv","receive","isIceLite","rejected","remoteIceParameters","remoteDtlsParameters","_updateSignalingState","receiverList","iceOptions","remoteMsid","isComplete","setTransport","setRemoteCandidates","isNewTrack","nativeTrack","removeTrackFromStreamAndFireEvent","states","checking","completed","disconnected","failed","new","connecting","numAudioTracks","numVideoTracks","offerOptions","remoteCodec","rHdrExt","getLocalCandidates","mediaSectionsInOffer","candidateString","selector","MediaStreamTrack","senderOrReceiver","allStats","stat","ortcObjectName","nativeGetstats","nativeStats","mapStats","inboundrtp","outboundrtp","candidatepair","localcandidate","remotecandidate","nativeMethod","_queue","_processQueueTasks","_stopped","kill","previous_async","only_once","fn","called","noConflict","_toString","_isArray","_each","_map","_keys","setImmediate","eachSeries","iterate","forEachSeries","eachLimit","limit","_eachLimit","forEachLimit","started","running","replenish","doParallel","doSeries","_asyncMap","eachfn","mapSeries","mapLimit","_mapLimit","doParallelLimit","memo","inject","foldl","reduceRight","reversed","foldr","_filter","filterSeries","select","selectSeries","_reject","rejectSeries","main_callback","detect","detectSeries","any","sortBy","criteria","left","right","auto","tasks","remainingTasks","taskComplete","theCallback","taskCallback","safeResults","rkey","requires","ready","times","attempts","wrappedTask","wrappedCallback","wrappedResults","retryAttempt","finalAttempt","seriesCallback","series","waterfall","wrapIterator","_parallel","parallel","parallelLimit","makeCallback","_concat","cb","concatSeries","whilst","doWhilst","until","doUntil","worker","concurrency","_insert","drain","saturated","workers","empty","idle","priorityQueue","_compareTasks","sequence","compare","beg","_binarySearch","cargo","working","drained","_console_fn","memoize","hasher","queues","memoized","unmemoized","unmemoize","counter","timesSeries","seq","fns","newargs","nextargs","compose","_applyEach","go","applyEach","applyEachSeries","forever","char","getState","addSources","removeSources","SignalingLayer","ssrcOwners","oldChatRoom","_audioMuteHandler","_videoMuteHandler","_videoTypeHandler","SignalingEvents","getPeerMediaInfo","getSSRCOwner","StropheLogger","logIncoming","logOutgoing","onRayo","roomPass","callResource","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","trace","errStatusCapture","_getCodecMimeType","jvbPreferredCodec","_isCodecSupported","p2pPreferredCodec","_selectPreferredCodec","_onMediaSessionStared","mediaSession","selectedCodec","remoteParticipants","remote","peerMediaInfo","_areRetriesEnabled","_closedFromClient","datachannel","createDataChannel","_handleChannel","_wsUrl","_initWebSocket","ws","_startConnectionRetries","timeoutS","reload","_retryTimeout","_stopConnectionRetries","_retryWebSocketConnection","closeEvent","colibriClass","msgPayload","endpointIds","selectedEndpoints","maxFrameHeightPixels","channel","dominantSpeakerEndpoint","previousSpeakers","endpoint","jsonObject","audioTransferActive","_dtmfSender","_dtmfTonesQueue","videoTransferActive","localUfrag","remoteUfrag","_peerVideoTypeChanged","_peerMutedChanged","safeConstraints","rtcStatsSFUP2P","standardVideoBitrates","maxBitratesVideo","tpcUtils","statsinterval","interop","Interop","Simulcast","numOfLayers","explodeRemoteSimulcast","sdpConsistency","SdpConsistency","localSdpMunger","LocalSdpMunger","rtxModifier","RtxModifier","senderVideoMaxHeight","what","_remoteStreamAdded","_remoteStreamRemoved","_remoteTrackAdded","onremovetrack","_remoteTrackRemoved","_processStat","statValue","endTime","dumpSDP","_getDesiredMediaDirection","mediaTransferActive","hasAnyTracksOfType","_getReceiversByEndpointIds","endpoints","receivers","remoteTrackIds","_setVideoType","setMute","getSynchronizationSources","endpointTrackMap","mediaTrack","primarySsrcs","fidLines","getTargetVideoBitrates","currentCodec","findTrackById","onaddtrack","streamAudioTracks","streamVideoTracks","remoteSDP","mediaLines","mls","trackSsrc","ownerEndpointId","_createRemoteTrack","remoteTracksMap","existingTrack","JitsiRemoteTrack","isUserStream","_removeRemoteTrackById","_getRemoteTrackById","removedAudioTrack","removedVideoTrack","_removeRemoteTrack","toBeRemoved","normalizePlanB","firstSsrcs","newSsrcLines","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","resStr","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","fidGroups","getters","toPlanB","maybeAddMutedLocalVideoTracksToSDP","transformer","audioMedia","videoMedia","enforceSendRecv","transformStreamIdentifiers","_isSharingScreen","_mungeCodecOrder","codecPreference","bitrates","hdBitrate","containsTrack","webrtcStream","_addStream","generateNewStreamSSRCInfo","setPrimarySsrc","setSsrcCache","rtxSsrcMapping","rtxSsrc","promiseChain","_assertTrackBelongs","webRtcStream","_removeStream","doesBelong","defaultCodec","capabilities","isMediaStreamInPc","findSenderByKind","opts","_ensureSimulcastGroupIsLast","localSdp","sdpStr","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","desiredVideoDirection","_mungeOpus","opusMaxAverageBitrate","mLines","fmtpOpus","fmtpConfig","sdpChanged","mungedConfig","toUnifiedPlan","localVideoTrack","videoSender","preference","degradationPreference","planBScreenSharing","presenterEnabled","scaleFactor","layer","mungeRemoteDescription","currentDescription","newHeight","encodingsEnabledState","ldStreamIndex","interToneGap","dtmf","localAudioTrack","createDTMFSender","ontonechange","_onToneChange","toneBuffer","insertDTMF","tone","clearVideoSsrcCache","peerTracks","_createOfferOrAnswer","isOffer","handleSuccess","resultSdp","resolveFn","rejectFn","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","mungeLocalDescription","modifyRtxSsrcs","groupsMap","groupSSRCs","extractSSRCMap","_processLocalSSRCsMap","handleFailure","oaPromise","trackMSID","newSSRCNum","oldSSRCNum","activeStreams","currNumSsrcs","updateAssociatedRtxStream","primarySsrcInfo","primarySsrcMsid","primarySsrcCname","previousRtxSSRC","correspondingRtxSsrcs","clearSsrcCache","ssrcMapping","sdpTransformer","modifyRtxSsrcs2","primaryVideoSsrcs","correspondingRtxSsrc","previousAssociatedRtxStream","stripRtx","cachedPrimarySsrc","injectRecvOnly","newPrimarySsrc","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","containerEvents","hasBeenMuted","_bindTrackHandlers","_containerHandlers","_containerEventHandler","_onTrackMute","_onTrackUnmute","_playCallback","gumStart","gumEnd","gumDuration","ttfm","_getStatus","_addMutedLocalVideoTracksToSDP","localVideos","isInPeerConnection","shouldFakeSdp","requiredSSRCs","ssrcCache","primaryCname","_transformMediaIdentifiers","pcId","streamAndTrackIDs","sessionDesc","audioMLine","kSimulcastFormats","layers","targetRN","getTarget","millisSinceStart","videoQualitySettings","simulcastFormat","targetHeight","rampUp","_localStats","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","ConferenceEvents","_updateLocalConnectionQuality","ConnectionQualityEvents","_broadcastLocalStats","_updateRemoteStats","_updateLocalStats","_maybeUpdateUnmuteTime","bridgeCount","_calculateConnectionQuality","resolutionName","quality","activeTPC","maxIncreasePerSecond","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","_actOnIceFailed","explicitlyDisabled","useTerminateForRestart","reloadClient","jvbConnection","jvbConnIceState","_canceled","_iceFailedTimeout","_timeoutTrigger","_hasAudioInput","_audioLevel","_clearTriggerTimeout","_handleAudioInputStateChange","_handleNoAudioInputDetection","_eventFired","_audioTrack","myUserID","_processing","_scoreArray","_audioLvlArray","_active","_calculateNoisyScore","scoreAvg","audioLevelAvg","_setActiveState","_recordValues","avgAudioLvl","_processTimeout","posAudioLevels","_calculateVADScore","ParticipantWrapper","requests","lastRequestId","clearIntervals","sendRequest","handleResponse","maybeSendAnalytics","isDataChannelOpen","pingIntervalMs","analyticsInterval","analyticsIntervalMs","requestId","requestMessage","timeSent","E2ePingEvents","Infinity","participantJoined","participantLeft","messageReceived","dataChannelOpened","participantWrapper","handleRequest","_jvb121","evaluateStatus","oldStatus","ReceiverVideoConstraints","_defaultConstraints","defaultConstraints","onStageEndpoints","updateLastN","updateReceiveResolution","updateReceiverVideoConstraints","updateSelectedEndpoints","_rtc","useNewReceiverConstraints","useNewBandwidthAllocationStrategy","remoteEndpointIds","oldConstraints","newConstraints","layerSuspensionEnabled","enableLayerSuspension","_propagateSendMaxFrameHeight","_senderVideoConstraints","idealHeight","sendMaxFrameHeight","selectSendMaxFrameHeight","activeMediaSession","preferredSendMaxFrameHeight","_sessions","_chatRoom","getSession","_handleFocusPresence","_handleJibriPresence","_addSession","_emitSessionUpdate","_createSession","_localAudioLevelCache","_reportedParticipants","_audioProblemCandidates","_numberOfRemoteAudioLevelsReceived","_onLocalAudioLevelsReport","_onRemoteAudioLevelReceived","_clearUserData","numberOfReports","localAudioLevelsString","AverageStatReport","calculate","appendReport","ConnectionAvgStats","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onRemoteStatsUpdated","_processRemoteStats","batchReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_cachedTransportStats","_onLocalStatsUpdated","_maybeSendTransportAnalyticsEvent","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","transportStats","dominantSpeakerId","SpeakerStats","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","_updateStats","oldDominantSpeaker","newDominantSpeaker","savedUser","newStats","speakerStatsToUpdate","newParticipant","SphinxService","audioRecorder","transcriptionService","transcription","lineLength","blobCallBack","wordArray","getUTCMilliseconds","wordObject","begin","word","maybeMerge","hasPopulatedArrays","twoDimensionalArray","callBack","recordingResult","merge","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","processVersions","mucResource","getComponentVersion","componentName","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","sipaddress","setState","failure_reason","JitsiVideoSIPGWSession","addStateListener","removeStateListener","_sendJibriIQ","failureReason","oldState","displayname","getActiveAudioDevice","audioDevices","devicePromiseArray","micDevice","devicePromise","outcomeArray","successfulPromises","rejectedPromises","rejectReasons","stopActiveDevices","deviceLabel","ProxyConnectionService","jitsiConnection","_peerConnection","_onFatalError","_onSendMessage","_onRemoteStream","processMessage","getPeerJid","_convertStringToXML","$jingle","_createPeerConnection","receiveVideo","_selfCloseConnection","xml","xmlDom","onRemoteStream","onSendMessage","ProxyConnectionPC","jitsiRemoteTrack","isVideo","convertVideoToDesktop","jitsiLocalTracks","newCreateLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","receiveAudio","_onSessionAccept","_onSessionInitiate","_onSessionTerminate","_onTransportInfo","connectionStub","iceConfigStub","roomStub","BUSY","RESOURCE_CONSTRAINT","SERVICE_UNAVAILABLE","FILE","api","_loadScript","appId","appSecret","disablePrecalltest","_initialize","execute","makePrecallTest","AuthUtil","getTokenAuthUrl","urlPattern","roleUpgrade","AudioMixer","_started","_streamsToMix","_streamMSSArray","addMediaStream","_mixedMSD","createMediaStreamDestination","streamMSS","found","PLAN_B_MIDS","findSimGroup","grp","findFidGroup","addSimGroupSources","sourceGroups","sourceList","findSourcebyId","relatedFidGroup","relatedSsrc","addSourcesToMline","otherSsrc","simGroup2","checkIfMlineForSsrcExists","mlines","sessionMedia","bLine","bundle","mids","msidSemantic","semantic","currentDesc","newMline","mLineForData","ssrc2group","createSourceGroupMap","bundleOnly","inactiveMid","cmLine","getAnalyticsAttributesFromOptions","video_requested","_mergeNamespaceAndModule","JitsiMeetJS","constants","recording","recordingConstants","sipVideoGW","detection","errorTypes","logLevels","JitsiMediaDevices","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","aprops","isWebRtcSupported","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","setGlobalLogOptions","oldfirePermissionPromptIsShownEvent","originalOptions","promiseFulfilled","firePermissionPromptIsShownEvent","fireSlowPromiseEvent","restOptions","mStream","currentlyAvailableMediaDevices","setVideoTrackContentHints","oldResolution","newResolution","resName","getLowerResolution","createTrackVADEmitter","localAudioDeviceId","createAudioMixer","isCollectingLocalStats","lineno","colno","setNetworkInfo","hint","contentHint","precallTest","util","logStorage","stringifyObjects","storeInterval","maxEntryLength","logLevel","_log","storeLogsIntervalID","totalLen","outputCache","someObject","formatLogMessage","prevMessage","prevMessageText","_flush","_reschedulePublishInterval","force","reschedule","isReady","cachedQueue","storeLogs","__webpack_amd_options__","scriptReadyRegex","fullPageUrl","pageUrl","scripts","supportsScriptReadyState","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","hasStackBeforeThrowing","hasStackAfterThrowing","_nearestExecutingScript","eligibleScripts","skipStackDepth","getScriptFromUrl","getScriptUrlFromStack","ignoreMessage","getSoleInlineScript","currentScript","thrownErr","near","far","strophe_js","_items","conn","_onDiscoInfo","_onDiscoItems","addIdentity","lang","var_name","addItem","call_back","items","_buildIQResult","query_attrs","iqresult","logging","autoSendCountOnEveryIncomingStanza","requestResponseInterval","_c","_NS","_isStreamManagementEnabled","_serverProcesssedStanzasCounter","_clientProcessedStanzasCounter","_clientSentStanzasCounter","_originalXMLOutput","_requestHandler","_incomingHandler","_requestResponseIntervalCount","_isSupported","_unacknowledgedStanzas","_acknowledgedStanzaListeners","addAcknowledgedStanzaListener","_resumeToken","_resuming","_originalConnect","_connectArgs","requestAcknowledgement","getOutgoingCounter","getIncomingCounter","_interceptConnectArgs","_originalOnStreamFeaturesAfterSASL","_originalDoDisconnect","_interceptDoDisconnect","_originalDisconnect","_interceptDisconnect","_resumeState","_storedJid","previd","_handleServerRequestHandler","_ackHandler","_handleServerAck","_incomingStanzaHandler","_enabledHandler","_handleEnabled","_resumeFailedHandler","_handleResumeFailed","_resumedHandler","_handleResumed","_increaseSentStanzasCounter","firstElementChild","handledCount","_handleAcknowledgedStanzas","_increaseReceivedStanzasCounter","_answerProcessedStanzas","reportedHandledCount","lastKnownHandledCount","delta","_throwError","Timeout","clearFn","_clearFn","scope","unref","ref","enroll","msecs","_idleTimeoutId","unenroll","_unrefActive","_onTimeout","clearImmediate","registerImmediate","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","attachTo","handle","runIfPresent","importScripts","postMessageIsAsynchronous","oldOnMessage","canUsePostMessage","MessageChannel","port1","port2","removeChild","toIntIfInt","parseReg","needsBlank","keyLocation","rawName","attachProperties","validLine","paramReducer","acc","expr","scid","formatRegExp","formatStr","makeLine","defaultOuterOrder","defaultInnerOrder","outerOrder","innerOrder","transformUtils","parseSsrcs","writeSsrcs","processVideo","validateDescription","_parseSimLayers","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","newMsid","newCname","ssrcsToReplace","ssrcsToAdd","_generateSourceData","addAssociatedStream","simSsrcs","simSsrc","_restoreSimulcast","enableConferenceFlag","simulcastSsrcs","relatedGroup","relatedSsrcs","relatedSSRC","simulcastGroup","nuke","implodeRemoteSimulcast","invalid","assertGoogConference","xGoogleFlag","removeGoogConference","Word","TranscriptionService","sphinxURL","toReturn","getURL","audioFileBlob","DONE","formatResponse","objects","filler","verify","getWord","getBeginTime","getEndTime","audioBlob","logDisabled_","deprecationWarnings_","extractVersion","uastring","wrapPeerConnectionEvent","eventNameToWrap","nativeAddEventListener","nativeEventName","modifiedEvent","handleEvent","_eventMap","nativeRemoveEventListener","unwrappedCb","disableLog","bool","disableWarnings","deprecated","oldMethod","newMethod","val","compactObject","isEmptyObject","filterStats","outbound","streamStatsType","filteredResult","trackStats","trackStat","walkStats","resultSet","shimGetUserMedia","browserDetails","constraintsToChrome_","cc","exact","oldname_","oc","mix","advanced","shimConstraints_","remap","face","getSupportedFacingModeLies","getSupportedConstraints","dev","shimError_","PermissionDeniedError","PermissionDismissedError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","TabCaptureError","ScreenCaptureError","DeviceCaptureError","webkitGetUserMedia","origGetUserMedia","DOMException","shimGetDisplayMedia","getSourceId","widthSpecified","heightSpecified","frameRateSpecified","shimMediaStream","webkitMediaStream","shimOnTrack","_ontrack","origSetRemoteDescription","_ontrackpoly","te","shimGetSendersWithDtmf","shimSenderWithDtmf","_dtmf","_pc","_senders","origAddTrack","origRemoveTrack","origAddStream","origRemoveStream","origGetSenders","shimGetStats","origGetStats","onSucc","onErr","fixChromeStats_","standardReport","standardStats","makeMapStats","successCallbackWrapper_","shimSenderReceiverGetStats","origGetReceivers","srcElement","shimAddTrackRemoveTrackWithNative","_shimmedLocalStreams","existingSenders","newSenders","newSender","shimAddTrackRemoveTrack","origGetLocalStreams","nativeStreams","_reverseStreams","_streams","newStream","replaceInternalStreamId","internalId","externalStream","internalStream","replaceExternalStreamId","alreadyExists","oldStream","methodObj","origSetLocalDescription","origLocalDescription","getOwnPropertyDescriptor","streamid","shimPeerConnection","webkitRTCPeerConnection","fixNegotiationNeeded","origMSTEnabled","RTCDtmfSender","RTCDTMFSender","RTCPeerConnectionShim","validTurn","shimReplaceTrack","setTrack","nativeGetUserMedia","nativeGetSettings","applyConstraints","nativeApplyConstraints","preferredMediaSource","RTCTrackEvent","mozRTCPeerConnection","modernStatsTypes","nativeGetStats","shimSenderGetStats","shimReceiverGetStats","shimRemoveStream","shimRTCDataChannel","DataChannel","RTCDataChannel","shimAddTransceiver","origAddTransceiver","setParametersPromises","initParameters","shouldPerformCheck","encodingParam","maxFramerate","shimGetParameters","origGetParameters","shimCreateOffer","origCreateOffer","finally","shimCreateAnswer","origCreateAnswer","shimLocalStreamsAPI","_localStreams","_addTrack","shimRemoteStreamsAPI","_remoteStreams","_onaddstream","_onaddstreampoly","shimCallbacksAPI","withCallback","shimConstraints","errcb","shimRTCIceServerUrls","OrigPeerConnection","pcConfig","newIceServers","generateCertificate","shimTrackEventTransceiver","shimCreateOfferLegacy","audioTransceiver","setDirection","videoTransceiver","shimAudioContext","shimRTCIceCandidate","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","augmentedCandidate","shimMaxMessageSize","_sctp","sctpInDescription","getRemoteFirefoxVersion","getCanSendMaxMessageSize","remoteIsFirefox","canSendMaxMessageSize","getMaxMessageSize","canSendMMS","remoteMMS","POSITIVE_INFINITY","shimSendThrowTypeError","wrapDcSend","dc","origDataChannelSend","origCreateDataChannel","dataChannel","shimConnectionState","_onconnectionstatechange","origMethod","_connectionstatechangepoly","_lastConnectionState","newEvent","removeExtmapAllowMixed","nativeSRD","shimAddIceCandidateNullOrEmpty","nativeAddIceCandidate","shimChrome","shimFirefox","shimEdge","shimSafari","mozGetUserMedia","isSecureContext","supportsUnifiedPlan","adapter","commonShim","browserShim","adapterFactory"],"mappings":"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","file":"lib-jitsi-meet.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetJS\"] = factory();\n\telse\n\t\troot[\"JitsiMeetJS\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 149);\n","/**\n * The events for the conference.\n */\n\n/**\n * Event indicates that the current conference audio input switched between audio\n * input states,i.e. with or without audio input.\n */\nexport const AUDIO_INPUT_STATE_CHANGE = 'conference.audio_input_state_changed';\n\n/**\n * Indicates that authentication status changed.\n */\nexport const AUTH_STATUS_CHANGED = 'conference.auth_status_changed';\n\n/**\n * Fired just before the statistics module is disposed and it's the last chance\n * to submit some logs to the statistics service (ex. CallStats if enabled),\n * before it's disconnected.\n */\nexport const BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed';\n\n/**\n * Indicates that an error occured.\n */\nexport const CONFERENCE_ERROR = 'conference.error';\n\n/**\n * Indicates that conference failed.\n */\nexport const CONFERENCE_FAILED = 'conference.failed';\n\n/**\n * Indicates that conference has been joined. The event does NOT provide any\n * parameters to its listeners.\n */\nexport const CONFERENCE_JOINED = 'conference.joined';\n\n/**\n * Indicates that conference has been left.\n */\nexport const CONFERENCE_LEFT = 'conference.left';\n\n/**\n * Indicates that the conference unique identifier has been set.\n */\nexport const CONFERENCE_UNIQUE_ID_SET = 'conference.unique_id_set';\n\n/**\n * Indicates that the connection to the conference has been established\n * XXX This is currently fired whenVthe *ICE* connection enters 'connected'\n * state for the first time.\n */\nexport const CONNECTION_ESTABLISHED = 'conference.connectionEstablished';\n\n/**\n * Indicates that the connection to the conference has been interrupted for some\n * reason.\n * XXX This is currently fired when the *ICE* connection is interrupted.\n */\nexport const CONNECTION_INTERRUPTED = 'conference.connectionInterrupted';\n\n/**\n * Indicates that the connection to the conference has been restored.\n * XXX This is currently fired when the *ICE* connection is restored.\n */\nexport const CONNECTION_RESTORED = 'conference.connectionRestored';\n\n/**\n * A connection to the video bridge's data channel has been established.\n */\nexport const DATA_CHANNEL_OPENED = 'conference.dataChannelOpened';\n\n/**\n * A user has changed it display name\n */\nexport const DISPLAY_NAME_CHANGED = 'conference.displayNameChanged';\n\n/**\n * The dominant speaker was changed.\n */\nexport const DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker';\n\n/**\n * UTC conference timestamp when first participant joined.\n */\nexport const CONFERENCE_CREATED_TIMESTAMP = 'conference.createdTimestamp';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged';\n\n/**\n * Indicates that a message from another participant is received on data\n * channel.\n */\nexport const ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received';\n\n/**\n * Indicates that a message for the remote endpoint statistics has been received on the bridge channel.\n */\nexport const ENDPOINT_STATS_RECEIVED = 'conference.endpoint_stats_received';\n\n/**\n * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\n *\n * Event emitted when conference transits, between one to one and multiparty JVB\n * conference. If the conference switches to P2P it's neither one to one nor\n * a multiparty JVB conference, but P2P (the status argument of this event will\n * be <tt>false</tt>).\n *\n * The first argument is a boolean which carries the previous value and\n * the seconds argument is a boolean with the new status. The event is emitted\n * only if the previous and the new values are different.\n *\n * @type {string}\n */\nexport const JVB121_STATUS = 'conference.jvb121Status';\n\n/**\n * You are kicked from the conference.\n * @param {JitsiParticipant} the participant that initiated the kick.\n */\nexport const KICKED = 'conference.kicked';\n\n/**\n * Participant was kicked from the conference.\n * @param {JitsiParticipant} the participant that initiated the kick.\n * @param {JitsiParticipant} the participant that was kicked.\n */\nexport const PARTICIPANT_KICKED = 'conference.participant_kicked';\n\n/**\n * The Last N set is changed.\n *\n * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\n * which are leaving Last N\n * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\n * which are entering Last N\n */\nexport const LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged';\n\n/**\n * Indicates that the room has been locked or unlocked.\n */\nexport const LOCK_STATE_CHANGED = 'conference.lock_state_changed';\n\n/**\n * Indicates that the region of the media server (jitsi-videobridge) that we\n * are connected to changed (or was initially set).\n * @type {string} the region.\n */\nexport const SERVER_REGION_CHANGED = 'conference.server_region_changed';\n\n/**\n * An event(library-private) fired when a new media session is added to the conference.\n * @type {string}\n * @private\n */\nexport const _MEDIA_SESSION_STARTED = 'conference.media_session.started';\n\n/**\n * An event(library-private) fired when the conference switches the currently active media session.\n * @type {string}\n * @private\n */\nexport const _MEDIA_SESSION_ACTIVE_CHANGED = 'conference.media_session.active_changed';\n\n/**\n * Indicates that the conference had changed to members only enabled/disabled.\n * The first argument of this event is a <tt>boolean</tt> which when set to\n * <tt>true</tt> means that the conference is running in members only mode.\n * You may need to use Lobby if supported to ask for permissions to enter the conference.\n */\nexport const MEMBERS_ONLY_CHANGED = 'conference.membersOnlyChanged';\n\n/**\n * New text message was received.\n */\nexport const MESSAGE_RECEIVED = 'conference.messageReceived';\n\n/**\n * Event indicates that the current selected input device has no signal\n */\nexport const NO_AUDIO_INPUT = 'conference.no_audio_input';\n\n/**\n * Event indicates that the current microphone used by the conference is noisy.\n */\nexport const NOISY_MIC = 'conference.noisy_mic';\n\n/**\n * New private text message was received.\n */\nexport const PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived';\n\n/**\n * Event fired when JVB sends notification about interrupted/restored user's\n * ICE connection status or we detect local problem with the video track.\n * First argument is the ID of the participant and\n * the seconds is a string indicating if the connection is currently\n * - active - the connection is active\n * - inactive - the connection is inactive, was intentionally interrupted by\n * the bridge\n * - interrupted - a network problem occurred\n * - restoring - the connection was inactive and is restoring now\n *\n * The current status value can be obtained by calling\n * JitsiParticipant.getConnectionStatus().\n */\nexport const PARTICIPANT_CONN_STATUS_CHANGED\n    = 'conference.participant_conn_status_changed';\n\n/**\n * Indicates that the features of the participant has been changed.\n */\nexport const PARTCIPANT_FEATURES_CHANGED\n    = 'conference.partcipant_features_changed';\n\n/**\n * Indicates that a the value of a specific property of a specific participant\n * has changed.\n */\nexport const PARTICIPANT_PROPERTY_CHANGED\n    = 'conference.participant_property_changed';\n\n/**\n * Indicates that the conference has switched between JVB and P2P connections.\n * The first argument of this event is a <tt>boolean</tt> which when set to\n * <tt>true</tt> means that the conference is running on the P2P connection.\n */\nexport const P2P_STATUS = 'conference.p2pStatus';\n\n/**\n * Indicates that phone number changed.\n */\nexport const PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged';\n\n/**\n * The conference properties changed.\n * @type {string}\n */\nexport const PROPERTIES_CHANGED = 'conference.propertiesChanged';\n\n/**\n * Indicates that recording state changed.\n */\nexport const RECORDER_STATE_CHANGED = 'conference.recorderStateChanged';\n\n/**\n * Indicates that video SIP GW state changed.\n * @param {VideoSIPGWConstants} status.\n */\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED\n    = 'conference.videoSIPGWAvailabilityChanged';\n\n/**\n * Indicates that video SIP GW Session state changed.\n * @param {options} event - {\n *     {string} address,\n *     {VideoSIPGWConstants} oldState,\n *     {VideoSIPGWConstants} newState,\n *     {string} displayName}\n * }.\n */\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED\n    = 'conference.videoSIPGWSessionStateChanged';\n\n/**\n * Indicates that start muted settings changed.\n */\nexport const START_MUTED_POLICY_CHANGED\n    = 'conference.start_muted_policy_changed';\n\n/**\n * Indicates that the local user has started muted.\n */\nexport const STARTED_MUTED = 'conference.started_muted';\n\n/**\n * Indicates that subject of the conference has changed.\n */\nexport const SUBJECT_CHANGED = 'conference.subjectChanged';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const SUSPEND_DETECTED = 'conference.suspendDetected';\n\n/**\n * Event indicates that local user is talking while he muted himself\n */\nexport const TALK_WHILE_MUTED = 'conference.talk_while_muted';\n\n/**\n * A new media track was added to the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the added JitsiTrack\n */\nexport const TRACK_ADDED = 'conference.trackAdded';\n\n/**\n * Audio levels of a media track ( attached to the conference) was changed.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged';\n\n/**\n * A media track ( attached to the conference) mute status was changed.\n * @param {JitsiParticipant|null} the participant that initiated the mute\n * if it is a remote mute.\n */\nexport const TRACK_MUTE_CHANGED = 'conference.trackMuteChanged';\n\n/**\n * The media track was removed from the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the removed JitsiTrack\n */\nexport const TRACK_REMOVED = 'conference.trackRemoved';\n\n/**\n * Notifies for transcription status changes. The event provides the\n * following parameters to its listeners:\n *\n * @param {String} status - The new status.\n */\nexport const TRANSCRIPTION_STATUS_CHANGED\n    = 'conference.transcriptionStatusChanged';\n\n\n/**\n * A new user joined the conference.\n */\nexport const USER_JOINED = 'conference.userJoined';\n\n/**\n * A user has left the conference.\n */\nexport const USER_LEFT = 'conference.userLeft';\n\n/**\n * User role changed.\n */\nexport const USER_ROLE_CHANGED = 'conference.roleChanged';\n\n/**\n * User status changed.\n */\nexport const USER_STATUS_CHANGED = 'conference.statusChanged';\n\n/**\n * Event indicates that the bot participant type changed.\n */\nexport const BOT_TYPE_CHANGED = 'conference.bot_type_changed';\n\n/**\n * A new user joined the lobby room.\n */\nexport const LOBBY_USER_JOINED = 'conference.lobby.userJoined';\n\n/**\n * A user from the lobby room has been update.\n */\nexport const LOBBY_USER_UPDATED = 'conference.lobby.userUpdated';\n\n/**\n * A user left the lobby room.\n */\nexport const LOBBY_USER_LEFT = 'conference.lobby.userLeft';\n","const XMPPEvents = {\n    /**\n     * Indicates error while adding ice candidate.\n     */\n    ADD_ICE_CANDIDATE_FAILED: 'xmpp.add_ice_candidate_failed',\n\n    // Designates an event indicating that the focus has asked us to mute our\n    // audio.\n    AUDIO_MUTED_BY_FOCUS: 'xmpp.audio_muted_by_focus',\n\n    // Designates an event indicating that the focus has asked us to disable our\n    // camera.\n    VIDEO_MUTED_BY_FOCUS: 'xmpp.video_muted_by_focus',\n    AUTHENTICATION_REQUIRED: 'xmpp.authentication_required',\n    BRIDGE_DOWN: 'xmpp.bridge_down',\n\n    /**\n     * Triggered when 'session-accept' is received from the responder.\n     */\n    CALL_ACCEPTED: 'xmpp.callaccepted.jingle',\n\n    // Designates an event indicating that an offer (e.g. Jingle\n    // session-initiate) was received.\n    CALL_INCOMING: 'xmpp.callincoming.jingle',\n\n    // Triggered when Jicofo kills our media session, this can happen while\n    // we're still in the MUC, when it decides to terminate the media session.\n    // For example when the session is idle for too long, because we're the only\n    // person in the conference room.\n    CALL_ENDED: 'xmpp.callended.jingle',\n    CHAT_ERROR_RECEIVED: 'xmpp.chat_error_received',\n\n    // The conference properties (as advertised by jicofo) have changed\n    CONFERENCE_PROPERTIES_CHANGED: 'xmpp.conference_properties_changed',\n\n    /**\n     * This event is triggered when the ICE connects for the first time.\n     */\n    CONNECTION_ESTABLISHED: 'xmpp.connection.connected',\n\n    // Designates an event indicating that the connection to the XMPP server\n    // failed.\n    CONNECTION_FAILED: 'xmpp.connection.failed',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // interrupted. This should go to the RTC module.\n    CONNECTION_INTERRUPTED: 'xmpp.connection.interrupted',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // restored. This should go to the RTC module.\n    CONNECTION_RESTORED: 'xmpp.connection.restored',\n\n    // Designates an event indicating that the media (ICE) connection failed.\n    // This should go to the RTC module.\n    CONNECTION_ICE_FAILED: 'xmpp.connection.ice.failed',\n\n    // Designates an event indicating that the call has been migrated to a different\n    // bridge and that the client needs to be restarted for a successful transition.\n    CONNECTION_RESTARTED: 'xmpp.connection.restart',\n\n    /**\n     * Designates an event indicating connection status changes.\n     */\n    CONNECTION_STATUS_CHANGED: 'xmpp.connection.status.changed',\n\n    // Designates an event indicating that the display name of a participant\n    // has changed.\n    DISPLAY_NAME_CHANGED: 'xmpp.display_name_changed',\n\n    /**\n     * Chat room instance have been added to Strophe.emuc plugin.\n     */\n    EMUC_ROOM_ADDED: 'xmpp.emuc_room_added',\n\n    /**\n     * Chat room instance have been removed from Strophe.emuc plugin.\n     */\n    EMUC_ROOM_REMOVED: 'xmpp.emuc_room_removed',\n    ETHERPAD: 'xmpp.etherpad',\n    FOCUS_DISCONNECTED: 'xmpp.focus_disconnected',\n    FOCUS_LEFT: 'xmpp.focus_left',\n    GRACEFUL_SHUTDOWN: 'xmpp.graceful_shutdown',\n\n    /**\n     * Event fired when 'transport-replace' Jingle message has been received,\n     * before the new offer is set on the PeerConnection.\n     */\n    ICE_RESTARTING: 'rtc.ice_restarting',\n\n    /**\n     * Event fired after the 'transport-replace' message has been processed\n     * and the new offer has been set successfully.\n     */\n    ICE_RESTART_SUCCESS: 'rtc.ice_restart_success',\n\n    /**\n     * Designates an event indicating that we were kicked from the XMPP MUC.\n     * @param {boolean} isSelfPresence - whether it is for local participant\n     * or another participant.\n     * @param {string} actorJid - the jid of the participant who was initator\n     * of the kick.\n     * @param {?string} participantJid - when it is not a kick for local participant,\n     * this is the jid of the participant which was kicked.\n     */\n    KICKED: 'xmpp.kicked',\n\n    // Designates an event indicating that our role in the XMPP MUC has changed.\n    LOCAL_ROLE_CHANGED: 'xmpp.localrole_changed',\n\n    /**\n     * Event fired when the unique meeting id is set.\n     */\n    MEETING_ID_SET: 'xmpp.meeting_id_set',\n\n    // Designates an event indicating that an XMPP message in the MUC was\n    // received.\n    MESSAGE_RECEIVED: 'xmpp.message_received',\n\n    // Designates an event indicating that an invite XMPP message in the MUC was\n    // received.\n    INVITE_MESSAGE_RECEIVED: 'xmpp.invite_message_received',\n\n    // Designates an event indicating that a private XMPP message in the MUC was\n    // received.\n    PRIVATE_MESSAGE_RECEIVED: 'xmpp.private_message_received',\n\n    // Designates an event indicating that a bot participant type had changed\n    MUC_MEMBER_BOT_TYPE_CHANGED: 'xmpp.muc_member_bot_type_changed',\n\n    // Designates an event indicating that the XMPP MUC was destroyed.\n    MUC_DESTROYED: 'xmpp.muc_destroyed',\n\n    // Designates an event indicating that we have joined the XMPP MUC.\n    MUC_JOINED: 'xmpp.muc_joined',\n\n    // Designates an event indicating that a participant joined the XMPP MUC.\n    MUC_MEMBER_JOINED: 'xmpp.muc_member_joined',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_MEMBER_LEFT: 'xmpp.muc_member_left',\n\n    // Designates an event indicating that a participant joined the lobby XMPP MUC.\n    MUC_LOBBY_MEMBER_JOINED: 'xmpp.muc_lobby_member_joined',\n\n    // Designates an event indicating that a participant in the lobby XMPP MUC has been updated\n    MUC_LOBBY_MEMBER_UPDATED: 'xmpp.muc_lobby_member_updated',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_LOBBY_MEMBER_LEFT: 'xmpp.muc_lobby_member_left',\n\n    // Designates an event indicating that a participant was denied access to a conference from the lobby XMPP MUC.\n    MUC_DENIED_ACCESS: 'xmpp.muc_denied access',\n\n    // Designates an event indicating that local participant left the muc\n    MUC_LEFT: 'xmpp.muc_left',\n\n    // Designates an event indicating that the MUC role of a participant has\n    // changed.\n    MUC_ROLE_CHANGED: 'xmpp.muc_role_changed',\n\n    // Designates an event indicating that the MUC has been locked or unlocked.\n    MUC_LOCK_CHANGED: 'xmpp.muc_lock_changed',\n\n    // Designates an event indicating that the MUC members only config has changed.\n    MUC_MEMBERS_ONLY_CHANGED: 'xmpp.muc_members_only_changed',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have audio muted (or unmuted).\n    PARTICIPANT_AUDIO_MUTED: 'xmpp.audio_muted',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have video muted (or unmuted).\n    PARTICIPANT_VIDEO_MUTED: 'xmpp.video_muted',\n\n    // Designates an event indicating that the video type (e.g. 'camera' or\n    // 'screen') for a participant has changed.\n    // Note: currently this event fires every time we receive presence from\n    // someone (regardless of whether or not the \"video type\" changed).\n    PARTICIPANT_VIDEO_TYPE_CHANGED: 'xmpp.video_type',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     */\n    PARTICIPANT_FEATURES_CHANGED: 'xmpp.participant_features_changed',\n    PASSWORD_REQUIRED: 'xmpp.password_required',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED: 'conference.phoneNumberChanged',\n    PRESENCE_RECEIVED: 'xmpp.presence_received',\n    PRESENCE_STATUS: 'xmpp.presence_status',\n    PROMPT_FOR_LOGIN: 'xmpp.prompt_for_login',\n\n    // xmpp is connected and obtained user media\n    READY_TO_JOIN: 'xmpp.ready_to_join',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED: 'xmpp.recorderStateChanged',\n\n    // Designates an event indicating that we received statistics from a\n    // participant in the MUC.\n    REMOTE_STATS: 'xmpp.remote_stats',\n\n    /**\n     * Indicates that the offer / answer renegotiation has failed.\n     */\n    RENEGOTIATION_FAILED: 'xmpp.renegotiation_failed',\n    RESERVATION_ERROR: 'xmpp.room_reservation_error',\n    ROOM_CONNECT_ERROR: 'xmpp.room_connect_error',\n    ROOM_CONNECT_NOT_ALLOWED_ERROR: 'xmpp.room_connect_error.not_allowed',\n    ROOM_JOIN_ERROR: 'xmpp.room_join_error',\n    ROOM_CONNECT_MEMBERS_ONLY_ERROR: 'xmpp.room_connect_error.members_only',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    ROOM_MAX_USERS_ERROR: 'xmpp.room_max_users_error',\n\n    // Designates an event indicating that we sent an XMPP message to the MUC.\n    SENDING_CHAT_MESSAGE: 'xmpp.sending_chat_message',\n\n    // Designates an event indicating that we sent a private XMPP message to\n    // a specific user of the muc.\n    SENDING_PRIVATE_CHAT_MESSAGE: 'xmpp.sending_private_chat_message',\n\n    /**\n     * Event fired when we do not get our 'session-accept' acknowledged by\n     * Jicofo. It most likely means that there is serious problem with our\n     * connection or XMPP server and we should reload the conference.\n     *\n     * We have seen that to happen in BOSH requests race condition when the BOSH\n     * request table containing the 'session-accept' was discarded by Prosody.\n     * Jicofo does send the RESULT immediately without any condition, so missing\n     * packets means that most likely it has never seen our IQ.\n     */\n    SESSION_ACCEPT_TIMEOUT: 'xmpp.session_accept_timeout',\n\n    /**\n     * Event fired when speaker stats update message is received.\n     */\n    SPEAKER_STATS_RECEIVED: 'xmpp.speaker_stats_received',\n\n    /**\n     * Event fired when conference creation timestamp is received.\n     */\n    CONFERENCE_TIMESTAMP_RECEIVED: 'xmpp.conference_timestamp_received',\n\n    // Designates an event indicating that we should join the conference with\n    // audio and/or video muted.\n    START_MUTED_FROM_FOCUS: 'xmpp.start_muted_from_focus',\n\n    // Designates an event indicating that the subject of the XMPP MUC has\n    // changed.\n    SUBJECT_CHANGED: 'xmpp.subject_changed',\n\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\n    // suspending detected\n    SUSPEND_DETECTED: 'xmpp.suspend_detected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED: 'xmpp.transcription_status_changed',\n\n    /**\n     * Event fired when 'transport-info' with new ICE candidates is received.\n     */\n    TRANSPORT_INFO: 'xmpp.transportinfo.jingle',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     *\n     * @param {VideoSIPGWConstants} status - Any of the following statuses:\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED: 'xmpp.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * The statuses are any of the following statuses:\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\n     * {@see VideoSIPGWConstants}\n     *\n     * @param {options} event - {address, oldState, newState, displayName}.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED:\n        'xmpp.videoSIPGWSessionStateChanged',\n\n    // Designates an event indicating that the local ICE connection state has\n    // changed.\n    ICE_CONNECTION_STATE_CHANGED: 'xmpp.ice_connection_state_changed',\n\n    /**\n     * Event which is emitted when the body in an XMPP message in the MUC\n     * contains JSON\n     */\n    JSON_MESSAGE_RECEIVED: 'xmmp.json_message_received'\n};\n\nmodule.exports = XMPPEvents;\n","(function (global, factory) {\n            typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n            typeof define === 'function' && define.amd ? define(factory) :\n            (global = global || self, global.strophe = factory());\n}(this, function () { 'use strict';\n\n            var global$1 = (typeof global !== \"undefined\" ? global :\n                        typeof self !== \"undefined\" ? self :\n                        typeof window !== \"undefined\" ? window : {});\n\n            function _typeof(obj) {\n              if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                _typeof = function (obj) {\n                  return typeof obj;\n                };\n              } else {\n                _typeof = function (obj) {\n                  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                };\n              }\n\n              return _typeof(obj);\n            }\n\n            function _toConsumableArray(arr) {\n              return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n            }\n\n            function _arrayWithoutHoles(arr) {\n              if (Array.isArray(arr)) {\n                for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n                return arr2;\n              }\n            }\n\n            function _iterableToArray(iter) {\n              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n            }\n\n            function _nonIterableSpread() {\n              throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n            }\n\n            /*\n             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n             * Digest Algorithm, as defined in RFC 1321.\n             * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for more info.\n             */\n\n            /*\n             * Everything that isn't used by Strophe has been stripped here!\n             */\n\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n            var safe_add = function safe_add(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            };\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            var bit_rol = function bit_rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            };\n            /*\n             * Convert a string to an array of little-endian words\n             */\n\n\n            var str2binl = function str2binl(str) {\n              if (typeof str !== \"string\") {\n                throw new Error(\"str2binl was passed a non-string\");\n              }\n\n              var bin = [];\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\n              }\n\n              return bin;\n            };\n            /*\n             * Convert an array of little-endian words to a string\n             */\n\n\n            var binl2str = function binl2str(bin) {\n              var str = \"\";\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\n              }\n\n              return str;\n            };\n            /*\n             * Convert an array of little-endian words to a hex string.\n             */\n\n\n            var binl2hex = function binl2hex(binarray) {\n              var hex_tab = \"0123456789abcdef\";\n              var str = \"\";\n\n              for (var i = 0; i < binarray.length * 4; i++) {\n                str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\n              }\n\n              return str;\n            };\n            /*\n             * These functions implement the four basic operations the algorithm uses.\n             */\n\n\n            var md5_cmn = function md5_cmn(q, a, b, x, s, t) {\n              return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\n            };\n\n            var md5_ff = function md5_ff(a, b, c, d, x, s, t) {\n              return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n            };\n\n            var md5_gg = function md5_gg(a, b, c, d, x, s, t) {\n              return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n            };\n\n            var md5_hh = function md5_hh(a, b, c, d, x, s, t) {\n              return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n            };\n\n            var md5_ii = function md5_ii(a, b, c, d, x, s, t) {\n              return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n            };\n            /*\n             * Calculate the MD5 of an array of little-endian words, and a bit length\n             */\n\n\n            var core_md5 = function core_md5(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << len % 32;\n              x[(len + 64 >>> 9 << 4) + 14] = len;\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var olda, oldb, oldc, oldd;\n\n              for (var i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n                d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n                c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n                b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n                a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n                d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n                c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n                b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n                a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n                d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n                c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n                b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n                a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n                d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n                c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n                b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n                a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n                d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n                c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n                b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n                a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n                d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n                c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n                b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n                a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n                d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n                c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n                b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n                a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n                d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n                c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n                b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n                a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n                d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n                c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n                b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n                a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n                d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n                c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n                b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n                a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n                d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n                c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n                b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n                a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n                d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n                c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n                b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n                a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n                d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n                c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n                b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n                a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n                d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n                c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n                b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n                a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n                d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n                c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n                b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n                a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n                d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n                c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n                b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n                a = safe_add(a, olda);\n                b = safe_add(b, oldb);\n                c = safe_add(c, oldc);\n                d = safe_add(d, oldd);\n              }\n\n              return [a, b, c, d];\n            };\n            /*\n             * These are the functions you'll usually want to call.\n             * They take string arguments and return either hex or base-64 encoded\n             * strings.\n             */\n\n\n            var MD5 = {\n              hexdigest: function hexdigest(s) {\n                return binl2hex(core_md5(str2binl(s), s.length * 8));\n              },\n              hash: function hash(s) {\n                return binl2str(core_md5(str2binl(s), s.length * 8));\n              }\n            };\n\n            /*\n             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n             * in FIPS PUB 180-1\n             * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for details.\n             */\n\n            /* global define */\n\n            /* Some functions and variables have been stripped for use with Strophe */\n\n            /*\n             * Calculate the SHA-1 of an array of big-endian words, and a bit length\n             */\n            function core_sha1(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << 24 - len % 32;\n              x[(len + 64 >> 9 << 4) + 15] = len;\n              var w = new Array(80);\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var e = -1009589776;\n              var i, j, t, olda, oldb, oldc, oldd, olde;\n\n              for (i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                olde = e;\n\n                for (j = 0; j < 80; j++) {\n                  if (j < 16) {\n                    w[j] = x[i + j];\n                  } else {\n                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n                  }\n\n                  t = safe_add$1(safe_add$1(rol(a, 5), sha1_ft(j, b, c, d)), safe_add$1(safe_add$1(e, w[j]), sha1_kt(j)));\n                  e = d;\n                  d = c;\n                  c = rol(b, 30);\n                  b = a;\n                  a = t;\n                }\n\n                a = safe_add$1(a, olda);\n                b = safe_add$1(b, oldb);\n                c = safe_add$1(c, oldc);\n                d = safe_add$1(d, oldd);\n                e = safe_add$1(e, olde);\n              }\n\n              return [a, b, c, d, e];\n            }\n            /*\n             * Perform the appropriate triplet combination function for the current\n             * iteration\n             */\n\n\n            function sha1_ft(t, b, c, d) {\n              if (t < 20) {\n                return b & c | ~b & d;\n              }\n\n              if (t < 40) {\n                return b ^ c ^ d;\n              }\n\n              if (t < 60) {\n                return b & c | b & d | c & d;\n              }\n\n              return b ^ c ^ d;\n            }\n            /*\n             * Determine the appropriate additive constant for the current iteration\n             */\n\n\n            function sha1_kt(t) {\n              return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n            }\n            /*\n             * Calculate the HMAC-SHA1 of a key and some data\n             */\n\n\n            function core_hmac_sha1(key, data) {\n              var bkey = str2binb(key);\n\n              if (bkey.length > 16) {\n                bkey = core_sha1(bkey, key.length * 8);\n              }\n\n              var ipad = new Array(16),\n                  opad = new Array(16);\n\n              for (var i = 0; i < 16; i++) {\n                ipad[i] = bkey[i] ^ 0x36363636;\n                opad[i] = bkey[i] ^ 0x5C5C5C5C;\n              }\n\n              var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n              return core_sha1(opad.concat(hash), 512 + 160);\n            }\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n\n\n            function safe_add$1(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            }\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            function rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            }\n            /*\n             * Convert an 8-bit or 16-bit string to an array of big-endian words\n             * In 8-bit function, characters >255 have their hi-byte silently ignored.\n             */\n\n\n            function str2binb(str) {\n              var bin = [];\n              var mask = 255;\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\n              }\n\n              return bin;\n            }\n            /*\n             * Convert an array of big-endian words to a base-64 string\n             */\n\n\n            function binb2b64(binarray) {\n              var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n              var str = \"\";\n              var triplet, j;\n\n              for (var i = 0; i < binarray.length * 4; i += 3) {\n                triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\n\n                for (j = 0; j < 4; j++) {\n                  if (i * 8 + j * 6 > binarray.length * 32) {\n                    str += \"=\";\n                  } else {\n                    str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\n                  }\n                }\n              }\n\n              return str;\n            }\n            /*\n             * Convert an array of big-endian words to a string\n             */\n\n\n            function binb2str(bin) {\n              var str = \"\";\n              var mask = 255;\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\n              }\n\n              return str;\n            }\n            /*\n             * These are the functions you'll usually want to call\n             * They take string arguments and return either hex or base-64 encoded strings\n             */\n\n\n            var SHA1 = {\n              b64_hmac_sha1: function b64_hmac_sha1(key, data) {\n                return binb2b64(core_hmac_sha1(key, data));\n              },\n              b64_sha1: function b64_sha1(s) {\n                return binb2b64(core_sha1(str2binb(s), s.length * 8));\n              },\n              binb2str: binb2str,\n              core_hmac_sha1: core_hmac_sha1,\n              str_hmac_sha1: function str_hmac_sha1(key, data) {\n                return binb2str(core_hmac_sha1(key, data));\n              },\n              str_sha1: function str_sha1(s) {\n                return binb2str(core_sha1(str2binb(s), s.length * 8));\n              }\n            };\n\n            var utils = {\n              utf16to8: function utf16to8(str) {\n                var i, c;\n                var out = \"\";\n                var len = str.length;\n\n                for (i = 0; i < len; i++) {\n                  c = str.charCodeAt(i);\n\n                  if (c >= 0x0000 && c <= 0x007F) {\n                    out += str.charAt(i);\n                  } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\n                    out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  } else {\n                    out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  }\n                }\n\n                return out;\n              },\n              addCookies: function addCookies(cookies) {\n                /* Parameters:\n                 *  (Object) cookies - either a map of cookie names\n                 *    to string values or to maps of cookie values.\n                 *\n                 * For example:\n                 * { \"myCookie\": \"1234\" }\n                 *\n                 * or:\n                 * { \"myCookie\": {\n                 *      \"value\": \"1234\",\n                 *      \"domain\": \".example.org\",\n                 *      \"path\": \"/\",\n                 *      \"expires\": expirationDate\n                 *      }\n                 *  }\n                 *\n                 *  These values get passed to Strophe.Connection via\n                 *   options.cookies\n                 */\n                cookies = cookies || {};\n\n                for (var cookieName in cookies) {\n                  if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {\n                    var expires = '';\n                    var domain = '';\n                    var path = '';\n                    var cookieObj = cookies[cookieName];\n                    var isObj = _typeof(cookieObj) === \"object\";\n                    var cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n\n                    if (isObj) {\n                      expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\n                      domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\n                      path = cookieObj.path ? \";path=\" + cookieObj.path : '';\n                    }\n\n                    document.cookie = cookieName + '=' + cookieValue + expires + domain + path;\n                  }\n                }\n              }\n            };\n\n            /** Function: $build\n             *  Create a Strophe.Builder.\n             *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n             *\n             *  Parameters:\n             *    (String) name - The root element name.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $build(name, attrs) {\n              return new Strophe.Builder(name, attrs);\n            }\n            /** Function: $msg\n             *  Create a Strophe.Builder with a <message/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <message/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $msg(attrs) {\n              return new Strophe.Builder(\"message\", attrs);\n            }\n            /** Function: $iq\n             *  Create a Strophe.Builder with an <iq/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <iq/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $iq(attrs) {\n              return new Strophe.Builder(\"iq\", attrs);\n            }\n            /** Function: $pres\n             *  Create a Strophe.Builder with a <presence/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <presence/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $pres(attrs) {\n              return new Strophe.Builder(\"presence\", attrs);\n            }\n            /** Class: Strophe\n             *  An object container for all Strophe library functions.\n             *\n             *  This class is just a container for all the objects and constants\n             *  used in the library.  It is not meant to be instantiated, but to\n             *  provide a namespace for library objects, constants, and functions.\n             */\n\n\n            var Strophe = {\n              /** Constant: VERSION */\n              VERSION: \"@VERSION@\",\n\n              /** Constants: XMPP Namespace Constants\n               *  Common namespace constants from the XMPP RFCs and XEPs.\n               *\n               *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n               *  NS.BOSH - BOSH namespace from XEP 206.\n               *  NS.CLIENT - Main XMPP client namespace.\n               *  NS.AUTH - Legacy authentication namespace.\n               *  NS.ROSTER - Roster operations namespace.\n               *  NS.PROFILE - Profile namespace.\n               *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n               *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n               *  NS.MUC - Multi-User Chat namespace from XEP 45.\n               *  NS.SASL - XMPP SASL namespace from RFC 3920.\n               *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n               *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.\n               *  NS.SESSION - XMPP Session namespace from RFC 3920.\n               *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n               *  NS.XHTML - XHTML body namespace from XEP 71.\n               */\n              NS: {\n                HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n                BOSH: \"urn:xmpp:xbosh\",\n                CLIENT: \"jabber:client\",\n                AUTH: \"jabber:iq:auth\",\n                ROSTER: \"jabber:iq:roster\",\n                PROFILE: \"jabber:iq:profile\",\n                DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n                DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n                MUC: \"http://jabber.org/protocol/muc\",\n                SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n                STREAM: \"http://etherx.jabber.org/streams\",\n                FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n                BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n                SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n                VERSION: \"jabber:iq:version\",\n                STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n                XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n                XHTML: \"http://www.w3.org/1999/xhtml\"\n              },\n\n              /** Constants: XHTML_IM Namespace\n               *  contains allowed tags, tag attributes, and css properties.\n               *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n               *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n               *  allowed tags and their attributes.\n               */\n              XHTML: {\n                tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\n                attributes: {\n                  'a': ['href'],\n                  'blockquote': ['style'],\n                  'br': [],\n                  'cite': ['style'],\n                  'em': [],\n                  'img': ['src', 'alt', 'style', 'height', 'width'],\n                  'li': ['style'],\n                  'ol': ['style'],\n                  'p': ['style'],\n                  'span': ['style'],\n                  'strong': [],\n                  'ul': ['style'],\n                  'body': []\n                },\n                css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\n\n                /** Function: XHTML.validTag\n                 *\n                 * Utility method to determine whether a tag is allowed\n                 * in the XHTML_IM namespace.\n                 *\n                 * XHTML tag names are case sensitive and must be lower case.\n                 */\n                validTag: function validTag(tag) {\n                  for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\n                    if (tag === Strophe.XHTML.tags[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                },\n\n                /** Function: XHTML.validAttribute\n                 *\n                 * Utility method to determine whether an attribute is allowed\n                 * as recommended per XEP-0071\n                 *\n                 * XHTML attribute names are case sensitive and must be lower case.\n                 */\n                validAttribute: function validAttribute(tag, attribute) {\n                  if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n                    for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                      if (attribute === Strophe.XHTML.attributes[tag][i]) {\n                        return true;\n                      }\n                    }\n                  }\n\n                  return false;\n                },\n                validCSS: function validCSS(style) {\n                  for (var i = 0; i < Strophe.XHTML.css.length; i++) {\n                    if (style === Strophe.XHTML.css[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                }\n              },\n\n              /** Constants: Connection Status Constants\n               *  Connection status constants for use by the connection handler\n               *  callback.\n               *\n               *  Status.ERROR - An error has occurred\n               *  Status.CONNECTING - The connection is currently being made\n               *  Status.CONNFAIL - The connection attempt failed\n               *  Status.AUTHENTICATING - The connection is authenticating\n               *  Status.AUTHFAIL - The authentication attempt failed\n               *  Status.CONNECTED - The connection has succeeded\n               *  Status.DISCONNECTED - The connection has been terminated\n               *  Status.DISCONNECTING - The connection is currently being terminated\n               *  Status.ATTACHED - The connection has been attached\n               *  Status.REDIRECT - The connection has been redirected\n               *  Status.CONNTIMEOUT - The connection has timed out\n               */\n              Status: {\n                ERROR: 0,\n                CONNECTING: 1,\n                CONNFAIL: 2,\n                AUTHENTICATING: 3,\n                AUTHFAIL: 4,\n                CONNECTED: 5,\n                DISCONNECTED: 6,\n                DISCONNECTING: 7,\n                ATTACHED: 8,\n                REDIRECT: 9,\n                CONNTIMEOUT: 10,\n                BINDREQUIRED: 11\n              },\n              ErrorCondition: {\n                BAD_FORMAT: \"bad-format\",\n                CONFLICT: \"conflict\",\n                MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\n                NO_AUTH_MECH: \"no-auth-mech\",\n                UNKNOWN_REASON: \"unknown\"\n              },\n\n              /** Constants: Log Level Constants\n               *  Logging level indicators.\n               *\n               *  LogLevel.DEBUG - Debug output\n               *  LogLevel.INFO - Informational output\n               *  LogLevel.WARN - Warnings\n               *  LogLevel.ERROR - Errors\n               *  LogLevel.FATAL - Fatal errors\n               */\n              LogLevel: {\n                DEBUG: 0,\n                INFO: 1,\n                WARN: 2,\n                ERROR: 3,\n                FATAL: 4\n              },\n\n              /** PrivateConstants: DOM Element Type Constants\n               *  DOM element types.\n               *\n               *  ElementType.NORMAL - Normal element.\n               *  ElementType.TEXT - Text data element.\n               *  ElementType.FRAGMENT - XHTML fragment element.\n               */\n              ElementType: {\n                NORMAL: 1,\n                TEXT: 3,\n                CDATA: 4,\n                FRAGMENT: 11\n              },\n\n              /** PrivateConstants: Timeout Values\n               *  Timeout values for error states.  These values are in seconds.\n               *  These should not be changed unless you know exactly what you are\n               *  doing.\n               *\n               *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n               *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 1.1, and with default wait, 66 seconds.\n               *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n               *      Strophe can detect early failure, it will consider the request\n               *      failed if it doesn't return after\n               *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 0.1, and with default wait, 6 seconds.\n               */\n              TIMEOUT: 1.1,\n              SECONDARY_TIMEOUT: 0.1,\n\n              /** Function: addNamespace\n               *  This function is used to extend the current namespaces in\n               *  Strophe.NS.  It takes a key and a value with the key being the\n               *  name of the new namespace, with its actual value.\n               *  For example:\n               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n               *\n               *  Parameters:\n               *    (String) name - The name under which the namespace will be\n               *      referenced under Strophe.NS\n               *    (String) value - The actual namespace.\n               */\n              addNamespace: function addNamespace(name, value) {\n                Strophe.NS[name] = value;\n              },\n\n              /** Function: forEachChild\n               *  Map a function over some or all child elements of a given element.\n               *\n               *  This is a small convenience function for mapping a function over\n               *  some or all of the children of an element.  If elemName is null, all\n               *  children will be passed to the function, otherwise only children\n               *  whose tag names match elemName will be passed.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The element to operate on.\n               *    (String) elemName - The child element tag name filter.\n               *    (Function) func - The function to apply to each child.  This\n               *      function should take a single argument, a DOM element.\n               */\n              forEachChild: function forEachChild(elem, elemName, func) {\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var childNode = elem.childNodes[i];\n\n                  if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {\n                    func(childNode);\n                  }\n                }\n              },\n\n              /** Function: isTagEqual\n               *  Compare an element's tag name with a string.\n               *\n               *  This function is case sensitive.\n               *\n               *  Parameters:\n               *    (XMLElement) el - A DOM element.\n               *    (String) name - The element name.\n               *\n               *  Returns:\n               *    true if the element's tag name matches _el_, and false\n               *    otherwise.\n               */\n              isTagEqual: function isTagEqual(el, name) {\n                return el.tagName === name;\n              },\n\n              /** PrivateVariable: _xmlGenerator\n               *  _Private_ variable that caches a DOM document to\n               *  generate elements.\n               */\n              _xmlGenerator: null,\n\n              /** PrivateFunction: _makeGenerator\n               *  _Private_ function that creates a dummy XML DOM document to serve as\n               *  an element and text node generator.\n               */\n              _makeGenerator: function _makeGenerator() {\n                var doc; // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\n                // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\n                // less than 10 in the case of IE9 and below.\n\n                if (document.implementation.createDocument === undefined || document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n                  doc = this._getIEXmlDom();\n                  doc.appendChild(doc.createElement('strophe'));\n                } else {\n                  doc = document.implementation.createDocument('jabber:client', 'strophe', null);\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlGenerator\n               *  Get the DOM document to generate elements.\n               *\n               *  Returns:\n               *    The currently used DOM document.\n               */\n              xmlGenerator: function xmlGenerator() {\n                if (!Strophe._xmlGenerator) {\n                  Strophe._xmlGenerator = Strophe._makeGenerator();\n                }\n\n                return Strophe._xmlGenerator;\n              },\n\n              /** PrivateFunction: _getIEXmlDom\n               *  Gets IE xml doc object\n               *\n               *  Returns:\n               *    A Microsoft XML DOM Object\n               *  See Also:\n               *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n               */\n              _getIEXmlDom: function _getIEXmlDom() {\n                var doc = null;\n                var docStrings = [\"Msxml2.DOMDocument.6.0\", \"Msxml2.DOMDocument.5.0\", \"Msxml2.DOMDocument.4.0\", \"MSXML2.DOMDocument.3.0\", \"MSXML2.DOMDocument\", \"MSXML.DOMDocument\", \"Microsoft.XMLDOM\"];\n\n                for (var d = 0; d < docStrings.length; d++) {\n                  if (doc === null) {\n                    try {\n                      doc = new ActiveXObject(docStrings[d]);\n                    } catch (e) {\n                      doc = null;\n                    }\n                  } else {\n                    break;\n                  }\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlElement\n               *  Create an XML DOM element.\n               *\n               *  This function creates an XML DOM element correctly across all\n               *  implementations. Note that these are not HTML DOM elements, which\n               *  aren't appropriate for XMPP stanzas.\n               *\n               *  Parameters:\n               *    (String) name - The name for the element.\n               *    (Array|Object) attrs - An optional array or object containing\n               *      key/value pairs to use as element attributes. The object should\n               *      be in the format {'key': 'value'} or {key: 'value'}. The array\n               *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n               *    (String) text - The text child data for the element.\n               *\n               *  Returns:\n               *    A new XML DOM element.\n               */\n              xmlElement: function xmlElement(name) {\n                if (!name) {\n                  return null;\n                }\n\n                var node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or\n                // there are more than two optional args\n\n                for (var a = 1; a < arguments.length; a++) {\n                  var arg = arguments[a];\n\n                  if (!arg) {\n                    continue;\n                  }\n\n                  if (typeof arg === \"string\" || typeof arg === \"number\") {\n                    node.appendChild(Strophe.xmlTextNode(arg));\n                  } else if (_typeof(arg) === \"object\" && typeof arg.sort === \"function\") {\n                    for (var i = 0; i < arg.length; i++) {\n                      var attr = arg[i];\n\n                      if (_typeof(attr) === \"object\" && typeof attr.sort === \"function\" && attr[1] !== undefined && attr[1] !== null) {\n                        node.setAttribute(attr[0], attr[1]);\n                      }\n                    }\n                  } else if (_typeof(arg) === \"object\") {\n                    for (var k in arg) {\n                      if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {\n                        node.setAttribute(k, arg[k]);\n                      }\n                    }\n                  }\n                }\n\n                return node;\n              },\n\n              /*  Function: xmlescape\n               *  Excapes invalid xml characters.\n               *\n               *  Parameters:\n               *     (String) text - text to escape.\n               *\n               *  Returns:\n               *      Escaped text.\n               */\n              xmlescape: function xmlescape(text) {\n                text = text.replace(/\\&/g, \"&amp;\");\n                text = text.replace(/</g, \"&lt;\");\n                text = text.replace(/>/g, \"&gt;\");\n                text = text.replace(/'/g, \"&apos;\");\n                text = text.replace(/\"/g, \"&quot;\");\n                return text;\n              },\n\n              /*  Function: xmlunescape\n              *  Unexcapes invalid xml characters.\n              *\n              *  Parameters:\n              *     (String) text - text to unescape.\n              *\n              *  Returns:\n              *      Unescaped text.\n              */\n              xmlunescape: function xmlunescape(text) {\n                text = text.replace(/\\&amp;/g, \"&\");\n                text = text.replace(/&lt;/g, \"<\");\n                text = text.replace(/&gt;/g, \">\");\n                text = text.replace(/&apos;/g, \"'\");\n                text = text.replace(/&quot;/g, \"\\\"\");\n                return text;\n              },\n\n              /** Function: xmlTextNode\n               *  Creates an XML DOM text node.\n               *\n               *  Provides a cross implementation version of document.createTextNode.\n               *\n               *  Parameters:\n               *    (String) text - The content of the text node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlTextNode: function xmlTextNode(text) {\n                return Strophe.xmlGenerator().createTextNode(text);\n              },\n\n              /** Function: xmlHtmlNode\n               *  Creates an XML DOM html node.\n               *\n               *  Parameters:\n               *    (String) html - The content of the html node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlHtmlNode: function xmlHtmlNode(html) {\n                var node; //ensure text is escaped\n\n                if (DOMParser) {\n                  var parser = new DOMParser();\n                  node = parser.parseFromString(html, \"text/xml\");\n                } else {\n                  node = new ActiveXObject(\"Microsoft.XMLDOM\");\n                  node.async = \"false\";\n                  node.loadXML(html);\n                }\n\n                return node;\n              },\n\n              /** Function: getText\n               *  Get the concatenation of all text children of an element.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A String with the concatenated text of all text element children.\n               */\n              getText: function getText(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                var str = \"\";\n\n                if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\n                  str += elem.nodeValue;\n                }\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\n                    str += elem.childNodes[i].nodeValue;\n                  }\n                }\n\n                return Strophe.xmlescape(str);\n              },\n\n              /** Function: copyElement\n               *  Copy an XML DOM element.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              copyElement: function copyElement(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  el = Strophe.xmlElement(elem.tagName);\n\n                  for (var i = 0; i < elem.attributes.length; i++) {\n                    el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);\n                  }\n\n                  for (var _i = 0; _i < elem.childNodes.length; _i++) {\n                    el.appendChild(Strophe.copyElement(elem.childNodes[_i]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: createHtml\n               *  Copy an HTML DOM element into an XML DOM.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (HTMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              createHtml: function createHtml(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  var tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n\n                  if (Strophe.XHTML.validTag(tag)) {\n                    try {\n                      el = Strophe.xmlElement(tag);\n\n                      for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                        var attribute = Strophe.XHTML.attributes[tag][i];\n                        var value = elem.getAttribute(attribute);\n\n                        if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\n                          continue;\n                        }\n\n                        if (attribute === 'style' && _typeof(value) === 'object' && typeof value.cssText !== 'undefined') {\n                          value = value.cssText; // we're dealing with IE, need to get CSS out\n                        } // filter out invalid css styles\n\n\n                        if (attribute === 'style') {\n                          var css = [];\n                          var cssAttrs = value.split(';');\n\n                          for (var j = 0; j < cssAttrs.length; j++) {\n                            var attr = cssAttrs[j].split(':');\n                            var cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n\n                            if (Strophe.XHTML.validCSS(cssName)) {\n                              var cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                              css.push(cssName + ': ' + cssValue);\n                            }\n                          }\n\n                          if (css.length > 0) {\n                            value = css.join('; ');\n                            el.setAttribute(attribute, value);\n                          }\n                        } else {\n                          el.setAttribute(attribute, value);\n                        }\n                      }\n\n                      for (var _i2 = 0; _i2 < elem.childNodes.length; _i2++) {\n                        el.appendChild(Strophe.createHtml(elem.childNodes[_i2]));\n                      }\n                    } catch (e) {\n                      // invalid elements\n                      el = Strophe.xmlTextNode('');\n                    }\n                  } else {\n                    el = Strophe.xmlGenerator().createDocumentFragment();\n\n                    for (var _i3 = 0; _i3 < elem.childNodes.length; _i3++) {\n                      el.appendChild(Strophe.createHtml(elem.childNodes[_i3]));\n                    }\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\n                  el = Strophe.xmlGenerator().createDocumentFragment();\n\n                  for (var _i4 = 0; _i4 < elem.childNodes.length; _i4++) {\n                    el.appendChild(Strophe.createHtml(elem.childNodes[_i4]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: escapeNode\n               *  Escape the node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An escaped node (or local part).\n               */\n              escapeNode: function escapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/^\\s+|\\s+$/g, '').replace(/\\\\/g, \"\\\\5c\").replace(/ /g, \"\\\\20\").replace(/\\\"/g, \"\\\\22\").replace(/\\&/g, \"\\\\26\").replace(/\\'/g, \"\\\\27\").replace(/\\//g, \"\\\\2f\").replace(/:/g, \"\\\\3a\").replace(/</g, \"\\\\3c\").replace(/>/g, \"\\\\3e\").replace(/@/g, \"\\\\40\");\n              },\n\n              /** Function: unescapeNode\n               *  Unescape a node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An unescaped node (or local part).\n               */\n              unescapeNode: function unescapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/\\\\20/g, \" \").replace(/\\\\22/g, '\"').replace(/\\\\26/g, \"&\").replace(/\\\\27/g, \"'\").replace(/\\\\2f/g, \"/\").replace(/\\\\3a/g, \":\").replace(/\\\\3c/g, \"<\").replace(/\\\\3e/g, \">\").replace(/\\\\40/g, \"@\").replace(/\\\\5c/g, \"\\\\\");\n              },\n\n              /** Function: getNodeFromJid\n               *  Get the node portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the node.\n               */\n              getNodeFromJid: function getNodeFromJid(jid) {\n                if (jid.indexOf(\"@\") < 0) {\n                  return null;\n                }\n\n                return jid.split(\"@\")[0];\n              },\n\n              /** Function: getDomainFromJid\n               *  Get the domain portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the domain.\n               */\n              getDomainFromJid: function getDomainFromJid(jid) {\n                var bare = Strophe.getBareJidFromJid(jid);\n\n                if (bare.indexOf(\"@\") < 0) {\n                  return bare;\n                } else {\n                  var parts = bare.split(\"@\");\n                  parts.splice(0, 1);\n                  return parts.join('@');\n                }\n              },\n\n              /** Function: getResourceFromJid\n               *  Get the resource portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the resource.\n               */\n              getResourceFromJid: function getResourceFromJid(jid) {\n                if (!jid) {\n                  return null;\n                }\n\n                var s = jid.split(\"/\");\n\n                if (s.length < 2) {\n                  return null;\n                }\n\n                s.splice(0, 1);\n                return s.join('/');\n              },\n\n              /** Function: getBareJidFromJid\n               *  Get the bare JID from a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the bare JID.\n               */\n              getBareJidFromJid: function getBareJidFromJid(jid) {\n                return jid ? jid.split(\"/\")[0] : null;\n              },\n\n              /** PrivateFunction: _handleError\n               *  _Private_ function that properly logs an error to the console\n               */\n              _handleError: function _handleError(e) {\n                if (typeof e.stack !== \"undefined\") {\n                  Strophe.fatal(e.stack);\n                }\n\n                if (e.sourceURL) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" + e.line + \" - \" + e.name + \": \" + e.message);\n                } else if (e.fileName) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.fileName + \":\" + e.lineNumber + \" - \" + e.name + \": \" + e.message);\n                } else {\n                  Strophe.fatal(\"error: \" + e.message);\n                }\n              },\n\n              /** Function: log\n               *  User overrideable logging function.\n               *\n               *  This function is called whenever the Strophe library calls any\n               *  of the logging functions.  The default implementation of this\n               *  function logs only fatal errors.  If client code wishes to handle the logging\n               *  messages, it should override this with\n               *  > Strophe.log = function (level, msg) {\n               *  >   (user code here)\n               *  > };\n               *\n               *  Please note that data sent and received over the wire is logged\n               *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n               *\n               *  The different levels and their meanings are\n               *\n               *    DEBUG - Messages useful for debugging purposes.\n               *    INFO - Informational messages.  This is mostly information like\n               *      'disconnect was called' or 'SASL auth succeeded'.\n               *    WARN - Warnings about potential problems.  This is mostly used\n               *      to report transient connection errors like request timeouts.\n               *    ERROR - Some error occurred.\n               *    FATAL - A non-recoverable fatal error occurred.\n               *\n               *  Parameters:\n               *    (Integer) level - The log level of the log message.  This will\n               *      be one of the values in Strophe.LogLevel.\n               *    (String) msg - The log message.\n               */\n              log: function log(level, msg) {\n                if (level === this.LogLevel.FATAL && _typeof(window.console) === 'object' && typeof window.console.error === 'function') {\n                  window.console.error(msg);\n                }\n              },\n\n              /** Function: debug\n               *  Log a message at the Strophe.LogLevel.DEBUG level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              debug: function debug(msg) {\n                this.log(this.LogLevel.DEBUG, msg);\n              },\n\n              /** Function: info\n               *  Log a message at the Strophe.LogLevel.INFO level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              info: function info(msg) {\n                this.log(this.LogLevel.INFO, msg);\n              },\n\n              /** Function: warn\n               *  Log a message at the Strophe.LogLevel.WARN level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              warn: function warn(msg) {\n                this.log(this.LogLevel.WARN, msg);\n              },\n\n              /** Function: error\n               *  Log a message at the Strophe.LogLevel.ERROR level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              error: function error(msg) {\n                this.log(this.LogLevel.ERROR, msg);\n              },\n\n              /** Function: fatal\n               *  Log a message at the Strophe.LogLevel.FATAL level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              fatal: function fatal(msg) {\n                this.log(this.LogLevel.FATAL, msg);\n              },\n\n              /** Function: serialize\n               *  Render a DOM element and all descendants to a String.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The serialized element tree as a String.\n               */\n              serialize: function serialize(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var names = _toConsumableArray(Array(elem.attributes.length).keys()).map(function (i) {\n                  return elem.attributes[i].nodeName;\n                });\n\n                names.sort();\n                var result = names.reduce(function (a, n) {\n                  return \"\".concat(a, \" \").concat(n, \"=\\\"\").concat(Strophe.xmlescape(elem.attributes.getNamedItem(n).value), \"\\\"\");\n                }, \"<\".concat(elem.nodeName));\n\n                if (elem.childNodes.length > 0) {\n                  result += \">\";\n\n                  for (var i = 0; i < elem.childNodes.length; i++) {\n                    var child = elem.childNodes[i];\n\n                    switch (child.nodeType) {\n                      case Strophe.ElementType.NORMAL:\n                        // normal element, so recurse\n                        result += Strophe.serialize(child);\n                        break;\n\n                      case Strophe.ElementType.TEXT:\n                        // text element to escape values\n                        result += Strophe.xmlescape(child.nodeValue);\n                        break;\n\n                      case Strophe.ElementType.CDATA:\n                        // cdata section so don't escape values\n                        result += \"<![CDATA[\" + child.nodeValue + \"]]>\";\n                    }\n                  }\n\n                  result += \"</\" + elem.nodeName + \">\";\n                } else {\n                  result += \"/>\";\n                }\n\n                return result;\n              },\n\n              /** PrivateVariable: _requestId\n               *  _Private_ variable that keeps track of the request ids for\n               *  connections.\n               */\n              _requestId: 0,\n\n              /** PrivateVariable: Strophe.connectionPlugins\n               *  _Private_ variable Used to store plugin names that need\n               *  initialization on Strophe.Connection construction.\n               */\n              _connectionPlugins: {},\n\n              /** Function: addConnectionPlugin\n               *  Extends the Strophe.Connection object with the given plugin.\n               *\n               *  Parameters:\n               *    (String) name - The name of the extension.\n               *    (Object) ptype - The plugin's prototype.\n               */\n              addConnectionPlugin: function addConnectionPlugin(name, ptype) {\n                Strophe._connectionPlugins[name] = ptype;\n              }\n            };\n            /** Class: Strophe.Builder\n             *  XML DOM builder.\n             *\n             *  This object provides an interface similar to JQuery but for building\n             *  DOM elements easily and rapidly.  All the functions except for toString()\n             *  and tree() return the object, so calls can be chained.  Here's an\n             *  example using the $iq() builder helper.\n             *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n             *  >     .c('query', {xmlns: 'strophe:example'})\n             *  >     .c('example')\n             *  >     .toString()\n             *\n             *  The above generates this XML fragment\n             *  > <iq to='you' from='me' type='get' id='1'>\n             *  >   <query xmlns='strophe:example'>\n             *  >     <example/>\n             *  >   </query>\n             *  > </iq>\n             *  The corresponding DOM manipulations to get a similar fragment would be\n             *  a lot more tedious and probably involve several helper variables.\n             *\n             *  Since adding children makes new operations operate on the child, up()\n             *  is provided to traverse up the tree.  To add two children, do\n             *  > builder.c('child1', ...).up().c('child2', ...)\n             *  The next operation on the Builder will be relative to the second child.\n             */\n\n            /** Constructor: Strophe.Builder\n             *  Create a Strophe.Builder object.\n             *\n             *  The attributes should be passed in object notation.  For example\n             *  > let b = new Builder('message', {to: 'you', from: 'me'});\n             *  or\n             *  > let b = new Builder('messsage', {'xml:lang': 'en'});\n             *\n             *  Parameters:\n             *    (String) name - The name of the root element.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder.\n             */\n\n            Strophe.Builder = function (name, attrs) {\n              // Set correct namespace for jabber:client elements\n              if (name === \"presence\" || name === \"message\" || name === \"iq\") {\n                if (attrs && !attrs.xmlns) {\n                  attrs.xmlns = Strophe.NS.CLIENT;\n                } else if (!attrs) {\n                  attrs = {\n                    xmlns: Strophe.NS.CLIENT\n                  };\n                }\n              } // Holds the tree being built.\n\n\n              this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.\n\n              this.node = this.nodeTree;\n            };\n\n            Strophe.Builder.prototype = {\n              /** Function: tree\n               *  Return the DOM tree.\n               *\n               *  This function returns the current DOM tree as an element object.  This\n               *  is suitable for passing to functions like Strophe.Connection.send().\n               *\n               *  Returns:\n               *    The DOM tree as a element object.\n               */\n              tree: function tree() {\n                return this.nodeTree;\n              },\n\n              /** Function: toString\n               *  Serialize the DOM tree to a String.\n               *\n               *  This function returns a string serialization of the current DOM\n               *  tree.  It is often used internally to pass data to a\n               *  Strophe.Request object.\n               *\n               *  Returns:\n               *    The serialized DOM tree in a String.\n               */\n              toString: function toString() {\n                return Strophe.serialize(this.nodeTree);\n              },\n\n              /** Function: up\n               *  Make the current parent element the new current element.\n               *\n               *  This function is often used after c() to traverse back up the tree.\n               *  For example, to add two children to the same element\n               *  > builder.c('child1', {}).up().c('child2', {});\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              up: function up() {\n                this.node = this.node.parentNode;\n                return this;\n              },\n\n              /** Function: root\n               *  Make the root element the new current element.\n               *\n               *  When at a deeply nested element in the tree, this function can be used\n               *  to jump back to the root of the tree, instead of having to repeatedly\n               *  call up().\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              root: function root() {\n                this.node = this.nodeTree;\n                return this;\n              },\n\n              /** Function: attrs\n               *  Add or modify attributes of the current element.\n               *\n               *  The attributes should be passed in object notation.  This function\n               *  does not move the current element pointer.\n               *\n               *  Parameters:\n               *    (Object) moreattrs - The attributes to add/modify in object notation.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              attrs: function attrs(moreattrs) {\n                for (var k in moreattrs) {\n                  if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {\n                    if (moreattrs[k] === undefined) {\n                      this.node.removeAttribute(k);\n                    } else {\n                      this.node.setAttribute(k, moreattrs[k]);\n                    }\n                  }\n                }\n\n                return this;\n              },\n\n              /** Function: c\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function moves the current element pointer to the child,\n               *  unless text is provided.  If you need to add another child, it\n               *  is necessary to use up() to go back to the parent in the tree.\n               *\n               *  Parameters:\n               *    (String) name - The name of the child.\n               *    (Object) attrs - The attributes of the child in object notation.\n               *    (String) text - The text to add to the child.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              c: function c(name, attrs, text) {\n                var child = Strophe.xmlElement(name, attrs, text);\n                this.node.appendChild(child);\n\n                if (typeof text !== \"string\" && typeof text !== \"number\") {\n                  this.node = child;\n                }\n\n                return this;\n              },\n\n              /** Function: cnode\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function is the same as c() except that instead of using a\n               *  name and an attributes object to create the child it uses an\n               *  existing DOM element object.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              cnode: function cnode(elem) {\n                var impNode;\n                var xmlGen = Strophe.xmlGenerator();\n\n                try {\n                  impNode = xmlGen.importNode !== undefined;\n                } catch (e) {\n                  impNode = false;\n                }\n\n                var newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);\n                this.node.appendChild(newElem);\n                this.node = newElem;\n                return this;\n              },\n\n              /** Function: t\n               *  Add a child text element.\n               *\n               *  This *does not* make the child the new current element since there\n               *  are no children of text elements.\n               *\n               *  Parameters:\n               *    (String) text - The text data to append to the current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              t: function t(text) {\n                var child = Strophe.xmlTextNode(text);\n                this.node.appendChild(child);\n                return this;\n              },\n\n              /** Function: h\n               *  Replace current element contents with the HTML passed in.\n               *\n               *  This *does not* make the child the new current element\n               *\n               *  Parameters:\n               *    (String) html - The html to insert as contents of current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              h: function h(html) {\n                var fragment = document.createElement('body'); // force the browser to try and fix any invalid HTML tags\n\n                fragment.innerHTML = html; // copy cleaned html into an xml dom\n\n                var xhtml = Strophe.createHtml(fragment);\n\n                while (xhtml.childNodes.length > 0) {\n                  this.node.appendChild(xhtml.childNodes[0]);\n                }\n\n                return this;\n              }\n            };\n            /** PrivateClass: Strophe.Handler\n             *  _Private_ helper class for managing stanza handlers.\n             *\n             *  A Strophe.Handler encapsulates a user provided callback function to be\n             *  executed when matching stanzas are received by the connection.\n             *  Handlers can be either one-off or persistant depending on their\n             *  return value. Returning true will cause a Handler to remain active, and\n             *  returning false will remove the Handler.\n             *\n             *  Users will not use Strophe.Handler objects directly, but instead they\n             *  will use Strophe.Connection.addHandler() and\n             *  Strophe.Connection.deleteHandler().\n             */\n\n            /** PrivateConstructor: Strophe.Handler\n             *  Create and initialize a new Strophe.Handler.\n             *\n             *  Parameters:\n             *    (Function) handler - A function to be executed when the handler is run.\n             *    (String) ns - The namespace to match.\n             *    (String) name - The element name to match.\n             *    (String) type - The element type to match.\n             *    (String) id - The element id attribute to match.\n             *    (String) from - The element from attribute to match.\n             *    (Object) options - Handler options\n             *\n             *  Returns:\n             *    A new Strophe.Handler object.\n             */\n\n            Strophe.Handler = function (handler, ns, name, type, id, from, options) {\n              this.handler = handler;\n              this.ns = ns;\n              this.name = name;\n              this.type = type;\n              this.id = id;\n              this.options = options || {\n                'matchBareFromJid': false,\n                'ignoreNamespaceFragment': false\n              }; // BBB: Maintain backward compatibility with old `matchBare` option\n\n              if (this.options.matchBare) {\n                Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n                this.options.matchBareFromJid = this.options.matchBare;\n                delete this.options.matchBare;\n              }\n\n              if (this.options.matchBareFromJid) {\n                this.from = from ? Strophe.getBareJidFromJid(from) : null;\n              } else {\n                this.from = from;\n              } // whether the handler is a user handler or a system handler\n\n\n              this.user = true;\n            };\n\n            Strophe.Handler.prototype = {\n              /** PrivateFunction: getNamespace\n               *  Returns the XML namespace attribute on an element.\n               *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n               *  URL fragment will be stripped.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element with the namespace.\n               *\n               *  Returns:\n               *    The namespace, with optionally the fragment stripped.\n               */\n              getNamespace: function getNamespace(elem) {\n                var elNamespace = elem.getAttribute(\"xmlns\");\n\n                if (elNamespace && this.options.ignoreNamespaceFragment) {\n                  elNamespace = elNamespace.split('#')[0];\n                }\n\n                return elNamespace;\n              },\n\n              /** PrivateFunction: namespaceMatch\n               *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              namespaceMatch: function namespaceMatch(elem) {\n                var _this = this;\n\n                var nsMatch = false;\n\n                if (!this.ns) {\n                  return true;\n                } else {\n                  Strophe.forEachChild(elem, null, function (elem) {\n                    if (_this.getNamespace(elem) === _this.ns) {\n                      nsMatch = true;\n                    }\n                  });\n                  return nsMatch || this.getNamespace(elem) === this.ns;\n                }\n              },\n\n              /** PrivateFunction: isMatch\n               *  Tests if a stanza matches the Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              isMatch: function isMatch(elem) {\n                var from = elem.getAttribute('from');\n\n                if (this.options.matchBareFromJid) {\n                  from = Strophe.getBareJidFromJid(from);\n                }\n\n                var elem_type = elem.getAttribute(\"type\");\n\n                if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute(\"id\") === this.id) && (!this.from || from === this.from)) {\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: run\n               *  Run the callback on a matching stanza.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The DOM element that triggered the\n               *      Strophe.Handler.\n               *\n               *  Returns:\n               *    A boolean indicating if the handler should remain active.\n               */\n              run: function run(elem) {\n                var result = null;\n\n                try {\n                  result = this.handler(elem);\n                } catch (e) {\n                  Strophe._handleError(e);\n\n                  throw e;\n                }\n\n                return result;\n              },\n\n              /** PrivateFunction: toString\n               *  Get a String representation of the Strophe.Handler object.\n               *\n               *  Returns:\n               *    A String.\n               */\n              toString: function toString() {\n                return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" + this.id + \",\" + this.ns + \")}\";\n              }\n            };\n            /** PrivateClass: Strophe.TimedHandler\n             *  _Private_ helper class for managing timed handlers.\n             *\n             *  A Strophe.TimedHandler encapsulates a user provided callback that\n             *  should be called after a certain period of time or at regular\n             *  intervals.  The return value of the callback determines whether the\n             *  Strophe.TimedHandler will continue to fire.\n             *\n             *  Users will not use Strophe.TimedHandler objects directly, but instead\n             *  they will use Strophe.Connection.addTimedHandler() and\n             *  Strophe.Connection.deleteTimedHandler().\n             */\n\n            /** PrivateConstructor: Strophe.TimedHandler\n             *  Create and initialize a new Strophe.TimedHandler object.\n             *\n             *  Parameters:\n             *    (Integer) period - The number of milliseconds to wait before the\n             *      handler is called.\n             *    (Function) handler - The callback to run when the handler fires.  This\n             *      function should take no arguments.\n             *\n             *  Returns:\n             *    A new Strophe.TimedHandler object.\n             */\n\n            Strophe.TimedHandler = function (period, handler) {\n              this.period = period;\n              this.handler = handler;\n              this.lastCalled = new Date().getTime();\n              this.user = true;\n            };\n\n            Strophe.TimedHandler.prototype = {\n              /** PrivateFunction: run\n               *  Run the callback for the Strophe.TimedHandler.\n               *\n               *  Returns:\n               *    true if the Strophe.TimedHandler should be called again, and false\n               *      otherwise.\n               */\n              run: function run() {\n                this.lastCalled = new Date().getTime();\n                return this.handler();\n              },\n\n              /** PrivateFunction: reset\n               *  Reset the last called time for the Strophe.TimedHandler.\n               */\n              reset: function reset() {\n                this.lastCalled = new Date().getTime();\n              },\n\n              /** PrivateFunction: toString\n               *  Get a string representation of the Strophe.TimedHandler object.\n               *\n               *  Returns:\n               *    The string representation.\n               */\n              toString: function toString() {\n                return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\n              }\n            };\n            /** Class: Strophe.Connection\n             *  XMPP Connection manager.\n             *\n             *  This class is the main part of Strophe.  It manages a BOSH or websocket\n             *  connection to an XMPP server and dispatches events to the user callbacks\n             *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\n             *  and legacy authentication.\n             *\n             *  After creating a Strophe.Connection object, the user will typically\n             *  call connect() with a user supplied callback to handle connection level\n             *  events like authentication failure, disconnection, or connection\n             *  complete.\n             *\n             *  The user will also have several event handlers defined by using\n             *  addHandler() and addTimedHandler().  These will allow the user code to\n             *  respond to interesting stanzas or do something periodically with the\n             *  connection. These handlers will be active once authentication is\n             *  finished.\n             *\n             *  To send data to the connection, use send().\n             */\n\n            /** Constructor: Strophe.Connection\n             *  Create and initialize a Strophe.Connection object.\n             *\n             *  The transport-protocol for this connection will be chosen automatically\n             *  based on the given service parameter. URLs starting with \"ws://\" or\n             *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n             *  or without a protocol will use BOSH.\n             *\n             *  To make Strophe connect to the current host you can leave out the protocol\n             *  and host part and just pass the path, e.g.\n             *\n             *  > let conn = new Strophe.Connection(\"/http-bind/\");\n             *\n             *  Options common to both Websocket and BOSH:\n             *  ------------------------------------------\n             *\n             *  cookies:\n             *\n             *  The *cookies* option allows you to pass in cookies to be added to the\n             *  document. These cookies will then be included in the BOSH XMLHttpRequest\n             *  or in the websocket connection.\n             *\n             *  The passed in value must be a map of cookie names and string values.\n             *\n             *  > { \"myCookie\": {\n             *  >     \"value\": \"1234\",\n             *  >     \"domain\": \".example.org\",\n             *  >     \"path\": \"/\",\n             *  >     \"expires\": expirationDate\n             *  >     }\n             *  > }\n             *\n             *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n             *  Those cookies need to be set under those domains, for example they can be\n             *  set server-side by making a XHR call to that domain to ask it to set any\n             *  necessary cookies.\n             *\n             *  mechanisms:\n             *\n             *  The *mechanisms* option allows you to specify the SASL mechanisms that this\n             *  instance of Strophe.Connection (and therefore your XMPP client) will\n             *  support.\n             *\n             *  The value must be an array of objects with Strophe.SASLMechanism\n             *  prototypes.\n             *\n             *  If nothing is specified, then the following mechanisms (and their\n             *  priorities) are registered:\n             *\n             *      SCRAM-SHA1 - 70\n             *      DIGEST-MD5 - 60\n             *      PLAIN - 50\n             *      OAUTH-BEARER - 40\n             *      OAUTH-2 - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  explicitResourceBinding:\n             *\n             *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client\n             *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP\n             *  server has advertised the \"urn:ietf:params:xml:ns:xmpp-bind\" feature.\n             *\n             *  Making this step explicit allows client authors to first finish other\n             *  stream related tasks, such as setting up an XEP-0198 Stream Management\n             *  session, before binding the JID resource for this session.\n             *\n             *  WebSocket options:\n             *  ------------------\n             *\n             *  If you want to connect to the current host with a WebSocket connection you\n             *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n             *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n             *  for Secure WebSocket.\n             *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n             *\n             *  > let conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n             *\n             *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n             *  of the current site.\n             *\n             *  Also because downgrading security is not permitted by browsers, when using\n             *  relative URLs both BOSH and WebSocket connections will use their secure\n             *  variants if the current connection to the site is also secure (https).\n             *\n             *  BOSH options:\n             *  -------------\n             *\n             *  By adding \"sync\" to the options, you can control if requests will\n             *  be made synchronously or not. The default behaviour is asynchronous.\n             *  If you want to make requests synchronous, make \"sync\" evaluate to true.\n             *  > let conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n             *\n             *  You can also toggle this on an already established connection.\n             *  > conn.options.sync = true;\n             *\n             *  The *customHeaders* option can be used to provide custom HTTP headers to be\n             *  included in the XMLHttpRequests made.\n             *\n             *  The *keepalive* option can be used to instruct Strophe to maintain the\n             *  current BOSH session across interruptions such as webpage reloads.\n             *\n             *  It will do this by caching the sessions tokens in sessionStorage, and when\n             *  \"restore\" is called it will check whether there are cached tokens with\n             *  which it can resume an existing session.\n             *\n             *  The *withCredentials* option should receive a Boolean value and is used to\n             *  indicate wether cookies should be included in ajax requests (by default\n             *  they're not).\n             *  Set this value to true if you are connecting to a BOSH service\n             *  and for some reason need to send cookies to it.\n             *  In order for this to work cross-domain, the server must also enable\n             *  credentials by setting the Access-Control-Allow-Credentials response header\n             *  to \"true\". For most usecases however this setting should be false (which\n             *  is the default).\n             *  Additionally, when using Access-Control-Allow-Credentials, the\n             *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n             *  instead must be restricted to actual domains.\n             *\n             *  The *contentType* option can be set to change the default Content-Type\n             *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n             *  CORS preflight requests that are sent to the server.\n             *\n             *  Parameters:\n             *    (String) service - The BOSH or WebSocket service URL.\n             *    (Object) options - A hash of configuration options\n             *\n             *  Returns:\n             *    A new Strophe.Connection object.\n             */\n\n            Strophe.Connection = function (service, options) {\n              var _this2 = this;\n\n              // The service URL\n              this.service = service; // Configuration options\n\n              this.options = options || {};\n              var proto = this.options.protocol || \"\"; // Select protocal based on service or options\n\n              if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 || proto.indexOf(\"ws\") === 0) {\n                this._proto = new Strophe.Websocket(this);\n              } else {\n                this._proto = new Strophe.Bosh(this);\n              }\n              /* The connected JID. */\n\n\n              this.jid = \"\";\n              /* the JIDs domain */\n\n              this.domain = null;\n              /* stream:features */\n\n              this.features = null; // SASL\n\n              this._sasl_data = {};\n              this.do_session = false;\n              this.do_bind = false; // handler lists\n\n              this.timedHandlers = [];\n              this.handlers = [];\n              this.removeTimeds = [];\n              this.removeHandlers = [];\n              this.addTimeds = [];\n              this.addHandlers = [];\n              this.protocolErrorHandlers = {\n                'HTTP': {},\n                'websocket': {}\n              };\n              this._idleTimeout = null;\n              this._disconnectTimeout = null;\n              this.authenticated = false;\n              this.connected = false;\n              this.disconnecting = false;\n              this.do_authentication = true;\n              this.paused = false;\n              this.restored = false;\n              this._data = [];\n              this._uniqueId = 0;\n              this._sasl_success_handler = null;\n              this._sasl_failure_handler = null;\n              this._sasl_challenge_handler = null; // Max retries before disconnecting\n\n              this.maxRetries = 5; // Call onIdle callback every 1/10th of a second\n\n              this._idleTimeout = setTimeout(function () {\n                return _this2._onIdle();\n              }, 100);\n              utils.addCookies(this.options.cookies);\n              this.registerSASLMechanisms(this.options.mechanisms); // initialize plugins\n\n              for (var k in Strophe._connectionPlugins) {\n                if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                  var F = function F() {};\n\n                  F.prototype = Strophe._connectionPlugins[k];\n                  this[k] = new F();\n                  this[k].init(this);\n                }\n              }\n            };\n\n            Strophe.Connection.prototype = {\n              /** Function: reset\n               *  Reset the connection.\n               *\n               *  This function should be called after a connection is disconnected\n               *  before that connection is reused.\n               */\n              reset: function reset() {\n                this._proto._reset(); // SASL\n\n\n                this.do_session = false;\n                this.do_bind = false; // handler lists\n\n                this.timedHandlers = [];\n                this.handlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = [];\n                this.authenticated = false;\n                this.connected = false;\n                this.disconnecting = false;\n                this.restored = false;\n                this._data = [];\n                this._requests = [];\n                this._uniqueId = 0;\n              },\n\n              /** Function: pause\n               *  Pause the request manager.\n               *\n               *  This will prevent Strophe from sending any more requests to the\n               *  server.  This is very useful for temporarily pausing\n               *  BOSH-Connections while a lot of send() calls are happening quickly.\n               *  This causes Strophe to send the data in a single request, saving\n               *  many request trips.\n               */\n              pause: function pause() {\n                this.paused = true;\n              },\n\n              /** Function: resume\n               *  Resume the request manager.\n               *\n               *  This resumes after pause() has been called.\n               */\n              resume: function resume() {\n                this.paused = false;\n              },\n\n              /** Function: getUniqueId\n               *  Generate a unique ID for use in <iq/> elements.\n               *\n               *  All <iq/> stanzas are required to have unique id attributes.  This\n               *  function makes creating these easy.  Each connection instance has\n               *  a counter which starts from zero, and the value of this counter\n               *  plus a colon followed by the suffix becomes the unique id. If no\n               *  suffix is supplied, the counter is used as the unique id.\n               *\n               *  Suffixes are used to make debugging easier when reading the stream\n               *  data, and their use is recommended.  The counter resets to 0 for\n               *  every new connection for the same reason.  For connections to the\n               *  same server that authenticate the same way, all the ids should be\n               *  the same, which makes it easy to see changes.  This is useful for\n               *  automated testing as well.\n               *\n               *  Parameters:\n               *    (String) suffix - A optional suffix to append to the id.\n               *\n               *  Returns:\n               *    A unique string to be used for the id attribute.\n               */\n              getUniqueId: function getUniqueId(suffix) {\n                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                  var r = Math.random() * 16 | 0,\n                      v = c === 'x' ? r : r & 0x3 | 0x8;\n                  return v.toString(16);\n                });\n\n                if (typeof suffix === \"string\" || typeof suffix === \"number\") {\n                  return uuid + \":\" + suffix;\n                } else {\n                  return uuid + \"\";\n                }\n              },\n\n              /** Function: addProtocolErrorHandler\n               *  Register a handler function for when a protocol (websocker or HTTP)\n               *  error occurs.\n               *\n               *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n               *  Patches that handle websocket errors would be very welcome.\n               *\n               *  Parameters:\n               *    (String) protocol - 'HTTP' or 'websocket'\n               *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n               *    (Function) callback - Function that will fire on Http error\n               *\n               *  Example:\n               *  function onError(err_code){\n               *    //do stuff\n               *  }\n               *\n               *  let conn = Strophe.connect('http://example.com/http-bind');\n               *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n               *  // Triggers HTTP 500 error and onError handler will be called\n               *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n               */\n              addProtocolErrorHandler: function addProtocolErrorHandler(protocol, status_code, callback) {\n                this.protocolErrorHandlers[protocol][status_code] = callback;\n              },\n\n              /** Function: connect\n               *  Starts the connection process.\n               *\n               *  As the connection process proceeds, the user supplied callback will\n               *  be triggered multiple times with status updates.  The callback\n               *  should take two arguments - the status code and the error condition.\n               *\n               *  The status code will be one of the values in the Strophe.Status\n               *  constants.  The error condition will be one of the conditions\n               *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n               *\n               *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n               *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n               *  of the optional parameters.\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID,\n               *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n               *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n               *      process the provided password value as an access token).\n               *    (String) pass - The user's password.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (String) route - The optional route value.\n               *    (String) authcid - The optional alternative authentication identity\n               *      (username) if intending to impersonate another user.\n               *      When using the SASL-EXTERNAL authentication mechanism, for example\n               *      with client certificates, then the authcid value is used to\n               *      determine whether an authorization JID (authzid) should be sent to\n               *      the server. The authzid should not be sent to the server if the\n               *      authzid and authcid are the same. So to prevent it from being sent\n               *      (for example when the JID is already contained in the client\n               *      certificate), set authcid to that same JID. See XEP-178 for more\n               *      details.\n               */\n              connect: function connect(jid, pass, callback, wait, hold, route, authcid) {\n                this.jid = jid;\n                /** Variable: authzid\n                 *  Authorization identity.\n                 */\n\n                this.authzid = Strophe.getBareJidFromJid(this.jid);\n                /** Variable: authcid\n                 *  Authentication identity (User name).\n                 */\n\n                this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n                /** Variable: pass\n                 *  Authentication identity (User password).\n                 */\n\n                this.pass = pass;\n                /** Variable: servtype\n                 *  Digest MD5 compatibility.\n                 */\n\n                this.servtype = \"xmpp\";\n                this.connect_callback = callback;\n                this.disconnecting = false;\n                this.connected = false;\n                this.authenticated = false;\n                this.restored = false; // parse jid for domain\n\n                this.domain = Strophe.getDomainFromJid(this.jid);\n\n                this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n                this._proto._connect(wait, hold, route);\n              },\n\n              /** Function: attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              attach: function attach(jid, sid, rid, callback, wait, hold, wind) {\n                if (this._proto instanceof Strophe.Bosh) {\n                  this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"attach\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** Function: restore\n               *  Attempt to restore a cached BOSH session.\n               *\n               *  This function is only useful in conjunction with providing the\n               *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n               *\n               *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n               *  RID (Request ID) and SID (Session ID) and then when this function is\n               *  called, it will attempt to restore the session from those cached\n               *  tokens.\n               *\n               *  This function must therefore be called instead of connect or attach.\n               *\n               *  For an example on how to use it, please see examples/restore.js\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              restore: function restore(jid, callback, wait, hold, wind) {\n                if (this._sessionCachingSupported()) {\n                  this._proto._restore(jid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"restore\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _sessionCachingSupported\n               * Checks whether sessionStorage and JSON are supported and whether we're\n               * using BOSH.\n               */\n              _sessionCachingSupported: function _sessionCachingSupported() {\n                if (this._proto instanceof Strophe.Bosh) {\n                  if (!JSON) {\n                    return false;\n                  }\n\n                  try {\n                    sessionStorage.setItem('_strophe_', '_strophe_');\n                    sessionStorage.removeItem('_strophe_');\n                  } catch (e) {\n                    return false;\n                  }\n\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** Function: xmlInput\n               *  User overrideable function that receives XML data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlInput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML data received by the connection.\n               */\n              xmlInput: function xmlInput(elem) {\n                return;\n              },\n\n              /** Function: xmlOutput\n               *  User overrideable function that receives XML data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlOutput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XMLdata sent by the connection.\n               */\n              xmlOutput: function xmlOutput(elem) {\n                return;\n              },\n\n              /** Function: rawInput\n               *  User overrideable function that receives raw data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawInput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data received by the connection.\n               */\n              rawInput: function rawInput(data) {\n                return;\n              },\n\n              /** Function: rawOutput\n               *  User overrideable function that receives raw data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawOutput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data sent by the connection.\n               */\n              rawOutput: function rawOutput(data) {\n                return;\n              },\n\n              /** Function: nextValidRid\n               *  User overrideable function that receives the new valid rid.\n               *\n               *  The default function does nothing. User code can override this with\n               *  > Strophe.Connection.nextValidRid = function (rid) {\n               *  >    (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (Number) rid - The next valid rid\n               */\n              nextValidRid: function nextValidRid(rid) {\n                return;\n              },\n\n              /** Function: send\n               *  Send a stanza.\n               *\n               *  This function is called to push data onto the send queue to\n               *  go out over the wire.  Whenever a request is sent to the BOSH\n               *  server, all pending data is sent and the queue is flushed.\n               *\n               *  Parameters:\n               *    (XMLElement |\n               *     [XMLElement] |\n               *     Strophe.Builder) elem - The stanza to send.\n               */\n              send: function send(elem) {\n                if (elem === null) {\n                  return;\n                }\n\n                if (typeof elem.sort === \"function\") {\n                  for (var i = 0; i < elem.length; i++) {\n                    this._queueData(elem[i]);\n                  }\n                } else if (typeof elem.tree === \"function\") {\n                  this._queueData(elem.tree());\n                } else {\n                  this._queueData(elem);\n                }\n\n                this._proto._send();\n              },\n\n              /** Function: flush\n               *  Immediately send any pending outgoing data.\n               *\n               *  Normally send() queues outgoing data until the next idle period\n               *  (100ms), which optimizes network use in the common cases when\n               *  several send()s are called in succession. flush() can be used to\n               *  immediately send all pending data.\n               */\n              flush: function flush() {\n                // cancel the pending idle period and run the idle function\n                // immediately\n                clearTimeout(this._idleTimeout);\n\n                this._onIdle();\n              },\n\n              /** Function: sendPresence\n               *  Helper function to send presence stanzas. The main benefit is for\n               *  sending presence stanzas for which you expect a responding presence\n               *  stanza with the same id (for example when leaving a chat room).\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the presence.\n               */\n              sendPresence: function sendPresence(elem, callback, errback, timeout) {\n                var _this3 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendPresence\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this3.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    if (stanza.getAttribute('type') === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else if (callback) {\n                      callback(stanza);\n                    }\n                  }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this3.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** Function: sendIQ\n               *  Helper function to send IQ stanzas.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the IQ.\n              */\n              sendIQ: function sendIQ(elem, callback, errback, timeout) {\n                var _this4 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendIQ\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this4.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    var iqtype = stanza.getAttribute('type');\n\n                    if (iqtype === 'result') {\n                      if (callback) {\n                        callback(stanza);\n                      }\n                    } else if (iqtype === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else {\n                      var error = new Error(\"Got bad IQ type of \".concat(iqtype));\n                      error.name = \"StropheError\";\n                      throw error;\n                    }\n                  }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this4.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** PrivateFunction: _queueData\n               *  Queue outgoing data for later sending.  Also ensures that the data\n               *  is a DOMElement.\n               */\n              _queueData: function _queueData(element) {\n                if (element === null || !element.tagName || !element.childNodes) {\n                  var error = new Error(\"Cannot queue non-DOMElement.\");\n                  error.name = \"StropheError\";\n                  throw error;\n                }\n\n                this._data.push(element);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                var _this5 = this;\n\n                this._data.push(\"restart\");\n\n                this._proto._sendRestart();\n\n                this._idleTimeout = setTimeout(function () {\n                  return _this5._onIdle();\n                }, 100);\n              },\n\n              /** Function: addTimedHandler\n               *  Add a timed handler to the connection.\n               *\n               *  This function adds a timed handler.  The provided handler will\n               *  be called every period milliseconds until it returns false,\n               *  the connection is terminated, or the handler is removed.  Handlers\n               *  that wish to continue being invoked should return true.\n               *\n               *  Because of method binding it is necessary to save the result of\n               *  this function if you wish to remove a handler with\n               *  deleteTimedHandler().\n               *\n               *  Note that user handlers are not active until authentication is\n               *  successful.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addTimedHandler: function addTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** Function: deleteTimedHandler\n               *  Delete a timed handler for a connection.\n               *\n               *  This function removes a timed handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addTimedHandler(),\n               *  but is the reference returned from addTimedHandler().\n               *\n               *  Parameters:\n               *    (Strophe.TimedHandler) handRef - The handler reference.\n               */\n              deleteTimedHandler: function deleteTimedHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeTimeds.push(handRef);\n              },\n\n              /** Function: addHandler\n               *  Add a stanza handler for the connection.\n               *\n               *  This function adds a stanza handler to the connection.  The\n               *  handler callback will be called for any stanza that matches\n               *  the parameters.  Note that if multiple parameters are supplied,\n               *  they must all match for the handler to be invoked.\n               *\n               *  The handler will receive the stanza that triggered it as its argument.\n               *  *The handler should return true if it is to be invoked again;\n               *  returning false will remove the handler after it returns.*\n               *\n               *  As a convenience, the ns parameters applies to the top level element\n               *  and also any of its immediate children.  This is primarily to make\n               *  matching /iq/query elements easy.\n               *\n               *  Options\n               *  ~~~~~~~\n               *  With the options argument, you can specify boolean flags that affect how\n               *  matches are being done.\n               *\n               *  Currently two flags exist:\n               *\n               *  - matchBareFromJid:\n               *      When set to true, the from parameter and the\n               *      from attribute on the stanza will be matched as bare JIDs instead\n               *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n               *      value of options. The default value for matchBareFromJid is false.\n               *\n               *  - ignoreNamespaceFragment:\n               *      When set to true, a fragment specified on the stanza's namespace\n               *      URL will be ignored when it's matched with the one configured for\n               *      the handler.\n               *\n               *      This means that if you register like this:\n               *      >   connection.addHandler(\n               *      >       handler,\n               *      >       'http://jabber.org/protocol/muc',\n               *      >       null, null, null, null,\n               *      >       {'ignoreNamespaceFragment': true}\n               *      >   );\n               *\n               *      Then a stanza with XML namespace of\n               *      'http://jabber.org/protocol/muc#user' will also be matched. If\n               *      'ignoreNamespaceFragment' is false, then only stanzas with\n               *      'http://jabber.org/protocol/muc' will be matched.\n               *\n               *  Deleting the handler\n               *  ~~~~~~~~~~~~~~~~~~~~\n               *  The return value should be saved if you wish to remove the handler\n               *  with deleteHandler().\n               *\n               *  Parameters:\n               *    (Function) handler - The user callback.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String|Array) type - The stanza type (or types if an array) to match.\n               *    (String) id - The stanza id attribute to match.\n               *    (String) from - The stanza from attribute to match.\n               *    (String) options - The handler options\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addHandler: function addHandler(handler, ns, name, type, id, from, options) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** Function: deleteHandler\n               *  Delete a stanza handler for a connection.\n               *\n               *  This function removes a stanza handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addHandler(),\n               *  but is the reference returned from addHandler().\n               *\n               *  Parameters:\n               *    (Strophe.Handler) handRef - The handler reference.\n               */\n              deleteHandler: function deleteHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,\n                // prevent it from getting added\n\n                var i = this.addHandlers.indexOf(handRef);\n\n                if (i >= 0) {\n                  this.addHandlers.splice(i, 1);\n                }\n              },\n\n              /** Function: registerSASLMechanisms\n               *\n               * Register the SASL mechanisms which will be supported by this instance of\n               * Strophe.Connection (i.e. which this XMPP client will support).\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n               *\n               */\n              registerSASLMechanisms: function registerSASLMechanisms(mechanisms) {\n                this.mechanisms = {};\n                mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLMD5, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];\n                mechanisms.forEach(this.registerSASLMechanism.bind(this));\n              },\n\n              /** Function: registerSASLMechanism\n               *\n               * Register a single SASL mechanism, to be supported by this client.\n               *\n               *  Parameters:\n               *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n               *\n               */\n              registerSASLMechanism: function registerSASLMechanism(mechanism) {\n                this.mechanisms[mechanism.prototype.name] = mechanism;\n              },\n\n              /** Function: disconnect\n               *  Start the graceful disconnection process.\n               *\n               *  This function starts the disconnection process.  This process starts\n               *  by sending unavailable presence and sending BOSH body of type\n               *  terminate.  A timeout handler makes sure that disconnection happens\n               *  even if the BOSH server does not respond.\n               *  If the Connection object isn't connected, at least tries to abort all pending requests\n               *  so the connection object won't generate successful requests (which were already opened).\n               *\n               *  The user supplied connection callback will be notified of the\n               *  progress as this process happens.\n               *\n               *  Parameters:\n               *    (String) reason - The reason the disconnect is occuring.\n               */\n              disconnect: function disconnect(reason) {\n                this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n                Strophe.warn(\"Disconnect was called because: \" + reason);\n\n                if (this.connected) {\n                  var pres = false;\n                  this.disconnecting = true;\n\n                  if (this.authenticated) {\n                    pres = $pres({\n                      'xmlns': Strophe.NS.CLIENT,\n                      'type': 'unavailable'\n                    });\n                  } // setup timeout handler\n\n\n                  this._disconnectTimeout = this._addSysTimedHandler(3000, this._onDisconnectTimeout.bind(this));\n\n                  this._proto._disconnect(pres);\n                } else {\n                  Strophe.warn(\"Disconnect was called before Strophe connected to the server\");\n\n                  this._proto._abortAllRequests();\n\n                  this._doDisconnect();\n                }\n              },\n\n              /** PrivateFunction: _changeConnectStatus\n               *  _Private_ helper function that makes sure plugins and the user's\n               *  callback are notified of connection status changes.\n               *\n               *  Parameters:\n               *    (Integer) status - the new connection status, one of the values\n               *      in Strophe.Status\n               *    (String) condition - the error condition or null\n               *    (XMLElement) elem - The triggering stanza.\n               */\n              _changeConnectStatus: function _changeConnectStatus(status, condition, elem) {\n                // notify all plugins listening for status changes\n                for (var k in Strophe._connectionPlugins) {\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                    var plugin = this[k];\n\n                    if (plugin.statusChanged) {\n                      try {\n                        plugin.statusChanged(status, condition);\n                      } catch (err) {\n                        Strophe.error(\"\".concat(k, \" plugin caused an exception changing status: \").concat(err));\n                      }\n                    }\n                  }\n                } // notify the user's callback\n\n\n                if (this.connect_callback) {\n                  try {\n                    this.connect_callback(status, condition, elem);\n                  } catch (e) {\n                    Strophe._handleError(e);\n\n                    Strophe.error(\"User connection callback caused an exception: \".concat(e));\n                  }\n                }\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  This is the last piece of the disconnection logic.  This resets the\n               *  connection and alerts the user's connection callback.\n               */\n              _doDisconnect: function _doDisconnect(condition) {\n                if (typeof this._idleTimeout === \"number\") {\n                  clearTimeout(this._idleTimeout);\n                } // Cancel Disconnect Timeout\n\n\n                if (this._disconnectTimeout !== null) {\n                  this.deleteTimedHandler(this._disconnectTimeout);\n                  this._disconnectTimeout = null;\n                }\n\n                Strophe.debug(\"_doDisconnect was called\");\n\n                this._proto._doDisconnect();\n\n                this.authenticated = false;\n                this.disconnecting = false;\n                this.restored = false; // delete handlers\n\n                this.handlers = [];\n                this.timedHandlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = []; // tell the parent we disconnected\n\n                this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n\n                this.connected = false;\n              },\n\n              /** PrivateFunction: _dataRecv\n               *  _Private_ handler to processes incoming data from the the connection.\n               *\n               *  Except for _connect_cb handling the initial connection request,\n               *  this function handles the incoming data for all requests.  This\n               *  function also fires stanza handlers that match each incoming\n               *  stanza.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that has data ready.\n               *    (string) req - The stanza a raw string (optiona).\n               */\n              _dataRecv: function _dataRecv(req, raw) {\n                var _this6 = this;\n\n                Strophe.debug(\"_dataRecv called\");\n\n                var elem = this._proto._reqToData(req);\n\n                if (elem === null) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                    this.xmlInput(elem.childNodes[0]);\n                  } else {\n                    this.xmlInput(elem);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(elem));\n                  }\n                } // remove handlers scheduled for deletion\n\n\n                while (this.removeHandlers.length > 0) {\n                  var hand = this.removeHandlers.pop();\n                  var i = this.handlers.indexOf(hand);\n\n                  if (i >= 0) {\n                    this.handlers.splice(i, 1);\n                  }\n                } // add handlers scheduled for addition\n\n\n                while (this.addHandlers.length > 0) {\n                  this.handlers.push(this.addHandlers.pop());\n                } // handle graceful disconnect\n\n\n                if (this.disconnecting && this._proto._emptyQueue()) {\n                  this._doDisconnect();\n\n                  return;\n                }\n\n                var type = elem.getAttribute(\"type\");\n\n                if (type !== null && type === \"terminate\") {\n                  // Don't process stanzas that come in after disconnect\n                  if (this.disconnecting) {\n                    return;\n                  } // an error occurred\n\n\n                  var cond = elem.getAttribute(\"condition\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n                  } else {\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);\n                  }\n\n                  this._doDisconnect(cond);\n\n                  return;\n                } // send each incoming stanza through the handler chain\n\n\n                Strophe.forEachChild(elem, null, function (child) {\n                  // process handlers\n                  var newList = _this6.handlers;\n                  _this6.handlers = [];\n\n                  for (var _i5 = 0; _i5 < newList.length; _i5++) {\n                    var _hand = newList[_i5]; // encapsulate 'handler.run' not to lose the whole handler list if\n                    // one of the handlers throws an exception\n\n                    try {\n                      if (_hand.isMatch(child) && (_this6.authenticated || !_hand.user)) {\n                        if (_hand.run(child)) {\n                          _this6.handlers.push(_hand);\n                        }\n                      } else {\n                        _this6.handlers.push(_hand);\n                      }\n                    } catch (e) {\n                      // if the handler throws an exception, we consider it as false\n                      Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\n                    }\n                  }\n                });\n              },\n\n              /** Attribute: mechanisms\n               *  SASL Mechanisms available for Connection.\n               */\n              mechanisms: {},\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the initial connection request\n               *  response from the BOSH server. It is used to set up authentication\n               *  handlers and start the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The current request.\n               *    (Function) _callback - low level (xmpp) connect callback function.\n               *      Useful for plugins with their own xmpp connect callback (when they\n               *      want to do something special).\n               */\n              _connect_cb: function _connect_cb(req, _callback, raw) {\n                Strophe.debug(\"_connect_cb was called\");\n                this.connected = true;\n                var bodyWrap;\n\n                try {\n                  bodyWrap = this._proto._reqToData(req);\n                } catch (e) {\n                  if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {\n                    throw e;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);\n\n                  this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\n                }\n\n                if (!bodyWrap) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                    this.xmlInput(bodyWrap.childNodes[0]);\n                  } else {\n                    this.xmlInput(bodyWrap);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(bodyWrap));\n                  }\n                }\n\n                var conncheck = this._proto._connect_cb(bodyWrap);\n\n                if (conncheck === Strophe.Status.CONNFAIL) {\n                  return;\n                } // Check for the stream:features tag\n\n\n                var hasFeatures;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n                } else {\n                  hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 || bodyWrap.getElementsByTagName(\"features\").length > 0;\n                }\n\n                if (!hasFeatures) {\n                  this._proto._no_auth_received(_callback);\n\n                  return;\n                }\n\n                var matched = [];\n                var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\n\n                if (mechanisms.length > 0) {\n                  for (var i = 0; i < mechanisms.length; i++) {\n                    var mech = Strophe.getText(mechanisms[i]);\n                    if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\n                  }\n                }\n\n                if (matched.length === 0) {\n                  if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n                    // There are no matching SASL mechanisms and also no legacy\n                    // auth available.\n                    this._proto._no_auth_received(_callback);\n\n                    return;\n                  }\n                }\n\n                if (this.do_authentication !== false) {\n                  this.authenticate(matched);\n                }\n              },\n\n              /** Function: sortMechanismsByPriority\n               *\n               *  Sorts an array of objects with prototype SASLMechanism according to\n               *  their priorities.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               */\n              sortMechanismsByPriority: function sortMechanismsByPriority(mechanisms) {\n                // Sorting mechanisms according to priority.\n                for (var i = 0; i < mechanisms.length - 1; ++i) {\n                  var higher = i;\n\n                  for (var j = i + 1; j < mechanisms.length; ++j) {\n                    if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\n                      higher = j;\n                    }\n                  }\n\n                  if (higher !== i) {\n                    var swap = mechanisms[i];\n                    mechanisms[i] = mechanisms[higher];\n                    mechanisms[higher] = swap;\n                  }\n                }\n\n                return mechanisms;\n              },\n\n              /** Function: authenticate\n               * Set up authentication\n               *\n               *  Continues the initial connection request by setting up authentication\n               *  handlers and starting the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Array) matched - Array of SASL mechanisms supported.\n               *\n               */\n              authenticate: function authenticate(matched) {\n                if (!this._attemptSASLAuth(matched)) {\n                  this._attemptLegacyAuth();\n                }\n              },\n\n              /** PrivateFunction: _attemptSASLAuth\n               *\n               *  Iterate through an array of SASL mechanisms and attempt authentication\n               *  with the highest priority (enabled) mechanism.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               *  Returns:\n               *    (Boolean) mechanism_found - true or false, depending on whether a\n               *          valid SASL mechanism was found with which authentication could be\n               *          started.\n               */\n              _attemptSASLAuth: function _attemptSASLAuth(mechanisms) {\n                mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n                var mechanism_found = false;\n\n                for (var i = 0; i < mechanisms.length; ++i) {\n                  if (!mechanisms[i].prototype.test(this)) {\n                    continue;\n                  }\n\n                  this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, \"success\", null, null);\n                  this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, \"failure\", null, null);\n                  this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, \"challenge\", null, null);\n                  this._sasl_mechanism = new mechanisms[i]();\n\n                  this._sasl_mechanism.onStart(this);\n\n                  var request_auth_exchange = $build(\"auth\", {\n                    'xmlns': Strophe.NS.SASL,\n                    'mechanism': this._sasl_mechanism.name\n                  });\n\n                  if (this._sasl_mechanism.isClientFirst) {\n                    var response = this._sasl_mechanism.onChallenge(this, null);\n\n                    request_auth_exchange.t(btoa(response));\n                  }\n\n                  this.send(request_auth_exchange.tree());\n                  mechanism_found = true;\n                  break;\n                }\n\n                return mechanism_found;\n              },\n\n              /** PrivateFunction: _sasl_challenge_cb\n               *  _Private_ handler for the SASL challenge\n               *\n               */\n              _sasl_challenge_cb: function _sasl_challenge_cb(elem) {\n                var challenge = atob(Strophe.getText(elem));\n\n                var response = this._sasl_mechanism.onChallenge(this, challenge);\n\n                var stanza = $build('response', {\n                  'xmlns': Strophe.NS.SASL\n                });\n\n                if (response !== \"\") {\n                  stanza.t(btoa(response));\n                }\n\n                this.send(stanza.tree());\n                return true;\n              },\n\n              /** PrivateFunction: _attemptLegacyAuth\n               *\n               *  Attempt legacy (i.e. non-SASL) authentication.\n               */\n              _attemptLegacyAuth: function _attemptLegacyAuth() {\n                if (Strophe.getNodeFromJid(this.jid) === null) {\n                  // we don't have a node, which is required for non-anonymous\n                  // client connections\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);\n\n                  this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\n                } else {\n                  // Fall back to legacy authentication\n                  this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n\n                  this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, \"_auth_1\");\n\n                  this.send($iq({\n                    'type': \"get\",\n                    'to': this.domain,\n                    'id': \"_auth_1\"\n                  }).c(\"query\", {\n                    xmlns: Strophe.NS.AUTH\n                  }).c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).tree());\n                }\n              },\n\n              /** PrivateFunction: _onLegacyAuthIQResult\n               *  _Private_ handler for legacy authentication.\n               *\n               *  This handler is called in response to the initial <iq type='get'/>\n               *  for legacy authentication.  It builds an authentication <iq/> and\n               *  sends it, creating a handler (calling back to _auth2_cb()) to\n               *  handle the result\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onLegacyAuthIQResult: function _onLegacyAuthIQResult(elem) {\n                // build plaintext auth iq\n                var iq = $iq({\n                  type: \"set\",\n                  id: \"_auth_2\"\n                }).c('query', {\n                  xmlns: Strophe.NS.AUTH\n                }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);\n\n                if (!Strophe.getResourceFromJid(this.jid)) {\n                  // since the user has not supplied a resource, we pick\n                  // a default one here.  unlike other auth methods, the server\n                  // cannot do this for us.\n                  this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n                }\n\n                iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n                this._addSysHandler(this._auth2_cb.bind(this), null, null, null, \"_auth_2\");\n\n                this.send(iq.tree());\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_success_cb\n               *  _Private_ handler for succesful SASL authentication.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_success_cb: function _sasl_success_cb(elem) {\n                var _this7 = this;\n\n                if (this._sasl_data[\"server-signature\"]) {\n                  var serverSignature;\n                  var success = atob(Strophe.getText(elem));\n                  var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n                  var matches = success.match(attribMatch);\n\n                  if (matches[1] === \"v\") {\n                    serverSignature = matches[2];\n                  }\n\n                  if (serverSignature !== this._sasl_data[\"server-signature\"]) {\n                    // remove old handlers\n                    this.deleteHandler(this._sasl_failure_handler);\n                    this._sasl_failure_handler = null;\n\n                    if (this._sasl_challenge_handler) {\n                      this.deleteHandler(this._sasl_challenge_handler);\n                      this._sasl_challenge_handler = null;\n                    }\n\n                    this._sasl_data = {};\n                    return this._sasl_failure_cb(null);\n                  }\n                }\n\n                Strophe.info(\"SASL authentication succeeded.\");\n\n                if (this._sasl_mechanism) {\n                  this._sasl_mechanism.onSuccess();\n                } // remove old handlers\n\n\n                this.deleteHandler(this._sasl_failure_handler);\n                this._sasl_failure_handler = null;\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                var streamfeature_handlers = [];\n\n                var wrapper = function wrapper(handlers, elem) {\n                  while (handlers.length) {\n                    _this7.deleteHandler(handlers.pop());\n                  }\n\n                  _this7._onStreamFeaturesAfterSASL(elem);\n\n                  return false;\n                };\n\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, null, \"stream:features\", null, null));\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, Strophe.NS.STREAM, \"features\", null, null)); // we must send an xmpp:restart now\n\n                this._sendRestart();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onStreamFeaturesAfterSASL\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onStreamFeaturesAfterSASL: function _onStreamFeaturesAfterSASL(elem) {\n                // save stream:features for future usage\n                this.features = elem;\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var child = elem.childNodes[i];\n\n                  if (child.nodeName === 'bind') {\n                    this.do_bind = true;\n                  }\n\n                  if (child.nodeName === 'session') {\n                    this.do_session = true;\n                  }\n                }\n\n                if (!this.do_bind) {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n\n                  return false;\n                } else if (!this.options.explicitResourceBinding) {\n                  this.bind();\n                } else {\n                  this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);\n                }\n\n                return false;\n              },\n\n              /** Function: bind\n               *\n               *  Sends an IQ to the XMPP server to bind a JID resource for this session.\n               *\n               *  https://tools.ietf.org/html/rfc6120#section-7.5\n               *\n               *  If `explicitResourceBinding` was set to a truthy value in the options\n               *  passed to the Strophe.Connection constructor, then this function needs\n               *  to be called explicitly by the client author.\n               *\n               *  Otherwise it'll be called automatically as soon as the XMPP server\n               *  advertises the \"urn:ietf:params:xml:ns:xmpp-bind\" stream feature.\n               */\n              bind: function bind() {\n                if (!this.do_bind) {\n                  Strophe.log(Strophe.LogLevel.INFO, \"Strophe.Connection.prototype.bind called but \\\"do_bind\\\" is false\");\n                  return;\n                }\n\n                this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, \"_bind_auth_2\");\n\n                var resource = Strophe.getResourceFromJid(this.jid);\n\n                if (resource) {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).c('resource', {}).t(resource).tree());\n                } else {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).tree());\n                }\n              },\n\n              /** PrivateFunction: _onResourceBindIQ\n               *  _Private_ handler for binding result and session start.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onResourceBindResultIQ: function _onResourceBindResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Resource binding failed.\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n                  var condition;\n\n                  if (conflict.length > 0) {\n                    condition = Strophe.ErrorCondition.CONFLICT;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\n\n                  return false;\n                } // TODO - need to grab errors\n\n\n                var bind = elem.getElementsByTagName(\"bind\");\n\n                if (bind.length > 0) {\n                  var jidNode = bind[0].getElementsByTagName(\"jid\");\n\n                  if (jidNode.length > 0) {\n                    this.jid = Strophe.getText(jidNode[0]);\n\n                    if (this.do_session) {\n                      this._establishSession();\n                    } else {\n                      this.authenticated = true;\n\n                      this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                    }\n                  }\n                } else {\n                  Strophe.warn(\"Resource binding failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n              },\n\n              /** PrivateFunction: _establishSession\n               *  Send IQ request to establish a session with the XMPP server.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               */\n              _establishSession: function _establishSession() {\n                if (!this.do_session) {\n                  throw new Error(\"Strophe.Connection.prototype._establishSession \" + \"called but apparently \".concat(Strophe.NS.SESSION, \" wasn't advertised by the server\"));\n                }\n\n                this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, \"_session_auth_2\");\n\n                this.send($iq({\n                  type: \"set\",\n                  id: \"_session_auth_2\"\n                }).c('session', {\n                  xmlns: Strophe.NS.SESSION\n                }).tree());\n              },\n\n              /** PrivateFunction: _onSessionResultIQ\n               *  _Private_ handler for the server's IQ response to a client's session\n               *  request.\n               *\n               *  This sets Connection.authenticated to true on success, which\n               *  starts the processing of user handlers.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onSessionResultIQ: function _onSessionResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Session creation failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_failure_cb\n               *  _Private_ handler for SASL authentication failure.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_failure_cb: function _sasl_failure_cb(elem) {\n                // delete unneeded handlers\n                if (this._sasl_success_handler) {\n                  this.deleteHandler(this._sasl_success_handler);\n                  this._sasl_success_handler = null;\n                }\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                if (this._sasl_mechanism) this._sasl_mechanism.onFailure();\n\n                this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                return false;\n              },\n\n              /** PrivateFunction: _auth2_cb\n               *  _Private_ handler to finish legacy authentication.\n               *\n               *  This handler is called when the result from the jabber:iq:auth\n               *  <iq/> stanza is returned.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _auth2_cb: function _auth2_cb(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  this.disconnect('authentication failed');\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _addSysTimedHandler\n               *  _Private_ function to add a system level timed handler.\n               *\n               *  This function is used to add a Strophe.TimedHandler for the\n               *  library code.  System timed handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               */\n              _addSysTimedHandler: function _addSysTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                thand.user = false;\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** PrivateFunction: _addSysHandler\n               *  _Private_ function to add a system level stanza handler.\n               *\n               *  This function is used to add a Strophe.Handler for the\n               *  library code.  System stanza handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Function) handler - The callback function.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String) type - The stanza type attribute to match.\n               *    (String) id - The stanza id attribute to match.\n               */\n              _addSysHandler: function _addSysHandler(handler, ns, name, type, id) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id);\n                hand.user = false;\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  If the graceful disconnect process does not complete within the\n               *  time allotted, this handler finishes the disconnect anyway.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                Strophe.debug(\"_onDisconnectTimeout was called\");\n\n                this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n\n                this._proto._onDisconnectTimeout(); // actually disconnect\n\n\n                this._doDisconnect();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler to process events during idle cycle.\n               *\n               *  This handler is called every 100ms to fire timed handlers that\n               *  are ready and keep poll requests going.\n               */\n              _onIdle: function _onIdle() {\n                var _this8 = this;\n\n                // add timed handlers scheduled for addition\n                // NOTE: we add before remove in the case a timed handler is\n                // added and then deleted before the next _onIdle() call.\n                while (this.addTimeds.length > 0) {\n                  this.timedHandlers.push(this.addTimeds.pop());\n                } // remove timed handlers that have been scheduled for deletion\n\n\n                while (this.removeTimeds.length > 0) {\n                  var thand = this.removeTimeds.pop();\n                  var i = this.timedHandlers.indexOf(thand);\n\n                  if (i >= 0) {\n                    this.timedHandlers.splice(i, 1);\n                  }\n                } // call ready timed handlers\n\n\n                var now = new Date().getTime();\n                var newList = [];\n\n                for (var _i6 = 0; _i6 < this.timedHandlers.length; _i6++) {\n                  var _thand = this.timedHandlers[_i6];\n\n                  if (this.authenticated || !_thand.user) {\n                    var since = _thand.lastCalled + _thand.period;\n\n                    if (since - now <= 0) {\n                      if (_thand.run()) {\n                        newList.push(_thand);\n                      }\n                    } else {\n                      newList.push(_thand);\n                    }\n                  }\n                }\n\n                this.timedHandlers = newList;\n                clearTimeout(this._idleTimeout);\n\n                this._proto._onIdle(); // reactivate the timer only if connected\n\n\n                if (this.connected) {\n                  this._idleTimeout = setTimeout(function () {\n                    return _this8._onIdle();\n                  }, 100);\n                }\n              }\n            };\n            /** Class: Strophe.SASLMechanism\n             *\n             *  encapsulates SASL authentication mechanisms.\n             *\n             *  User code may override the priority for each mechanism or disable it completely.\n             *  See <priority> for information about changing priority and <test> for informatian on\n             *  how to disable a mechanism.\n             *\n             *  By default, all mechanisms are enabled and the priorities are\n             *\n             *      OAUTHBEARER - 60\n             *      SCRAM-SHA1 - 50\n             *      DIGEST-MD5 - 40\n             *      PLAIN - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  See: Strophe.Connection.addSupportedSASLMechanisms\n             */\n\n            /**\n             * PrivateConstructor: Strophe.SASLMechanism\n             * SASL auth mechanism abstraction.\n             *\n             *  Parameters:\n             *    (String) name - SASL Mechanism name.\n             *    (Boolean) isClientFirst - If client should send response first without challenge.\n             *    (Number) priority - Priority.\n             *\n             *  Returns:\n             *    A new Strophe.SASLMechanism object.\n             */\n\n            Strophe.SASLMechanism = function (name, isClientFirst, priority) {\n              /** PrivateVariable: name\n               *  Mechanism name.\n               */\n              this.name = name;\n              /** PrivateVariable: isClientFirst\n               *  If client sends response without initial server challenge.\n               */\n\n              this.isClientFirst = isClientFirst;\n              /** Variable: priority\n               *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n               *  Users may override this to prioritize mechanisms differently.\n               *\n               *  In the default configuration the priorities are\n               *\n               *  SCRAM-SHA1 - 40\n               *  DIGEST-MD5 - 30\n               *  Plain - 20\n               *\n               *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n               *\n               *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               */\n\n              this.priority = priority;\n            };\n\n            Strophe.SASLMechanism.prototype = {\n              /**\n               *  Function: test\n               *  Checks if mechanism able to run.\n               *  To disable a mechanism, make this return false;\n               *\n               *  To disable plain authentication run\n               *  > Strophe.SASLPlain.test = function() {\n               *  >   return false;\n               *  > }\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *\n               *  Returns:\n               *    (Boolean) If mechanism was able to run.\n               */\n              test: function test(connection) {\n                return true;\n              },\n\n              /** PrivateFunction: onStart\n               *  Called before starting mechanism on some connection.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               */\n              onStart: function onStart(connection) {\n                this._connection = connection;\n              },\n\n              /** PrivateFunction: onChallenge\n               *  Called by protocol implementation on incoming challenge. If client is\n               *  first (isClientFirst === true) challenge will be null on the first call.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *    (String) challenge - current challenge to handle.\n               *\n               *  Returns:\n               *    (String) Mechanism response.\n               */\n              onChallenge: function onChallenge(connection, challenge) {\n                throw new Error(\"You should implement challenge handling!\");\n              },\n\n              /** PrivateFunction: onFailure\n               *  Protocol informs mechanism implementation about SASL failure.\n               */\n              onFailure: function onFailure() {\n                this._connection = null;\n              },\n\n              /** PrivateFunction: onSuccess\n               *  Protocol informs mechanism implementation about SASL success.\n               */\n              onSuccess: function onSuccess() {\n                this._connection = null;\n              }\n            };\n            /** Constants: SASL mechanisms\n             *  Available authentication mechanisms\n             *\n             *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\n             *  Strophe.SASLPlain - SASL PLAIN authentication.\n             *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\n             *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\n             *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n             *  Strophe.SASLExternal - SASL EXTERNAL authentication\n             *  Strophe.SASLXOAuth2 - SASL X-OAuth2 authentication\n             */\n            // Building SASL callbacks\n\n            /** PrivateConstructor: SASLAnonymous\n             *  SASL ANONYMOUS authentication.\n             */\n\n            Strophe.SASLAnonymous = function () {};\n\n            Strophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 20);\n\n            Strophe.SASLAnonymous.prototype.test = function (connection) {\n              return connection.authcid === null;\n            };\n            /** PrivateConstructor: SASLPlain\n             *  SASL PLAIN authentication.\n             */\n\n\n            Strophe.SASLPlain = function () {};\n\n            Strophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 50);\n\n            Strophe.SASLPlain.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLPlain.prototype.onChallenge = function (connection) {\n              var auth_str = connection.authzid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.authcid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLSHA1\n             *  SASL SCRAM SHA 1 authentication.\n             */\n\n\n            Strophe.SASLSHA1 = function () {};\n\n            Strophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 70);\n\n            Strophe.SASLSHA1.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLSHA1.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n              auth_str += \",r=\";\n              auth_str += cnonce;\n              connection._sasl_data.cnonce = cnonce;\n              connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n              auth_str = \"n,,\" + auth_str;\n\n              this.onChallenge = function (connection, challenge) {\n                var nonce, salt, iter, Hi, U, U_old, i, k;\n                var responseText = \"c=biws,\";\n                var authMessage = \"\".concat(connection._sasl_data[\"client-first-message-bare\"], \",\").concat(challenge, \",\");\n                var cnonce = connection._sasl_data.cnonce;\n                var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n                while (challenge.match(attribMatch)) {\n                  var matches = challenge.match(attribMatch);\n                  challenge = challenge.replace(matches[0], \"\");\n\n                  switch (matches[1]) {\n                    case \"r\":\n                      nonce = matches[2];\n                      break;\n\n                    case \"s\":\n                      salt = matches[2];\n                      break;\n\n                    case \"i\":\n                      iter = matches[2];\n                      break;\n                  }\n                }\n\n                if (nonce.substr(0, cnonce.length) !== cnonce) {\n                  connection._sasl_data = {};\n                  return connection._sasl_failure_cb();\n                }\n\n                responseText += \"r=\" + nonce;\n                authMessage += responseText;\n                salt = atob(salt);\n                salt += \"\\x00\\x00\\x00\\x01\";\n                var pass = utils.utf16to8(connection.pass);\n                Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n\n                for (i = 1; i < iter; i++) {\n                  U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n\n                  for (k = 0; k < 5; k++) {\n                    Hi[k] ^= U[k];\n                  }\n\n                  U_old = U;\n                }\n\n                Hi = SHA1.binb2str(Hi);\n                var clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n                var serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n                var clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n                connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n                for (k = 0; k < 5; k++) {\n                  clientKey[k] ^= clientSignature[k];\n                }\n\n                responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\n                return responseText;\n              };\n\n              return auth_str;\n            };\n            /** PrivateConstructor: SASLMD5\n             *  SASL DIGEST MD5 authentication.\n             */\n\n\n            Strophe.SASLMD5 = function () {};\n\n            Strophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 60);\n\n            Strophe.SASLMD5.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n            /** PrivateFunction: _quote\n             *  _Private_ utility function to backslash escape and quote strings.\n             *\n             *  Parameters:\n             *    (String) str - The string to be quoted.\n             *\n             *  Returns:\n             *    quoted string\n             */\n\n\n            Strophe.SASLMD5.prototype._quote = function (str) {\n              return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"'; //\" end string workaround for emacs\n            };\n\n            Strophe.SASLMD5.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var realm = \"\";\n              var host = null;\n              var nonce = \"\";\n              var qop = \"\";\n\n              while (challenge.match(attribMatch)) {\n                var matches = challenge.match(attribMatch);\n                challenge = challenge.replace(matches[0], \"\");\n                matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\n\n                switch (matches[1]) {\n                  case \"realm\":\n                    realm = matches[2];\n                    break;\n\n                  case \"nonce\":\n                    nonce = matches[2];\n                    break;\n\n                  case \"qop\":\n                    qop = matches[2];\n                    break;\n\n                  case \"host\":\n                    host = matches[2];\n                    break;\n                }\n              }\n\n              var digest_uri = connection.servtype + \"/\" + connection.domain;\n\n              if (host !== null) {\n                digest_uri = digest_uri + \"/\" + host;\n              }\n\n              var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\n              var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\n              var A2 = 'AUTHENTICATE:' + digest_uri;\n              var responseText = \"\";\n              responseText += 'charset=utf-8,';\n              responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\n              responseText += 'realm=' + this._quote(realm) + ',';\n              responseText += 'nonce=' + this._quote(nonce) + ',';\n              responseText += 'nc=00000001,';\n              responseText += 'cnonce=' + this._quote(cnonce) + ',';\n              responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\n              responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" + nonce + \":00000001:\" + cnonce + \":auth:\" + MD5.hexdigest(A2)) + \",\";\n              responseText += 'qop=auth';\n\n              this.onChallenge = function () {\n                return \"\";\n              };\n\n              return responseText;\n            };\n            /** PrivateConstructor: SASLOAuthBearer\n             *  SASL OAuth Bearer authentication.\n             */\n\n\n            Strophe.SASLOAuthBearer = function () {};\n\n            Strophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 40);\n\n            Strophe.SASLOAuthBearer.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLOAuthBearer.prototype.onChallenge = function (connection) {\n              var auth_str = 'n,';\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + 'a=' + connection.authzid;\n              }\n\n              auth_str = auth_str + ',';\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + 'auth=Bearer ';\n              auth_str = auth_str + connection.pass;\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + \"\\x01\";\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLExternal\n             *  SASL EXTERNAL authentication.\n             *\n             *  The EXTERNAL mechanism allows a client to request the server to use\n             *  credentials established by means external to the mechanism to\n             *  authenticate the client. The external means may be, for instance,\n             *  TLS services.\n             */\n\n\n            Strophe.SASLExternal = function () {};\n\n            Strophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 10);\n\n            Strophe.SASLExternal.prototype.onChallenge = function (connection) {\n              /** According to XEP-178, an authzid SHOULD NOT be presented when the\n               * authcid contained or implied in the client certificate is the JID (i.e.\n               * authzid) with which the user wants to log in as.\n               *\n               * To NOT send the authzid, the user should therefore set the authcid equal\n               * to the JID when instantiating a new Strophe.Connection object.\n               */\n              return connection.authcid === connection.authzid ? '' : connection.authzid;\n            };\n            /** PrivateConstructor: SASLXOAuth2\n             *  SASL X-OAuth2 authentication.\n             */\n\n\n            Strophe.SASLXOAuth2 = function () {};\n\n            Strophe.SASLXOAuth2.prototype = new Strophe.SASLMechanism(\"X-OAUTH2\", true, 30);\n\n            Strophe.SASLXOAuth2.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLXOAuth2.prototype.onChallenge = function (connection) {\n              var auth_str = \"\\0\";\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + connection.authzid;\n              }\n\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            var core = {\n              'Strophe': Strophe,\n              '$build': $build,\n              '$iq': $iq,\n              '$msg': $msg,\n              '$pres': $pres,\n              'SHA1': SHA1,\n              'MD5': MD5,\n              'b64_hmac_sha1': SHA1.b64_hmac_sha1,\n              'b64_sha1': SHA1.b64_sha1,\n              'str_hmac_sha1': SHA1.str_hmac_sha1,\n              'str_sha1': SHA1.str_sha1\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$1 = core.Strophe;\n            var $build$1 = core.$build;\n            /** PrivateClass: Strophe.Request\n             *  _Private_ helper class that provides a cross implementation abstraction\n             *  for a BOSH related XMLHttpRequest.\n             *\n             *  The Strophe.Request class is used internally to encapsulate BOSH request\n             *  information.  It is not meant to be used from user's code.\n             */\n\n            /** PrivateConstructor: Strophe.Request\n             *  Create and initialize a new Strophe.Request object.\n             *\n             *  Parameters:\n             *    (XMLElement) elem - The XML data to be sent in the request.\n             *    (Function) func - The function that will be called when the\n             *      XMLHttpRequest readyState changes.\n             *    (Integer) rid - The BOSH rid attribute associated with this request.\n             *    (Integer) sends - The number of times this same request has been sent.\n             */\n\n            Strophe$1.Request = function (elem, func, rid, sends) {\n              this.id = ++Strophe$1._requestId;\n              this.xmlData = elem;\n              this.data = Strophe$1.serialize(elem); // save original function in case we need to make a new request\n              // from this one.\n\n              this.origFunc = func;\n              this.func = func;\n              this.rid = rid;\n              this.date = NaN;\n              this.sends = sends || 0;\n              this.abort = false;\n              this.dead = null;\n\n              this.age = function () {\n                if (!this.date) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.date) / 1000;\n              };\n\n              this.timeDead = function () {\n                if (!this.dead) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.dead) / 1000;\n              };\n\n              this.xhr = this._newXHR();\n            };\n\n            Strophe$1.Request.prototype = {\n              /** PrivateFunction: getResponse\n               *  Get a response from the underlying XMLHttpRequest.\n               *\n               *  This function attempts to get a response from the request and checks\n               *  for errors.\n               *\n               *  Throws:\n               *    \"parsererror\" - A parser error occured.\n               *    \"bad-format\" - The entity has sent XML that cannot be processed.\n               *\n               *  Returns:\n               *    The DOM element tree of the response.\n               */\n              getResponse: function getResponse() {\n                var node = null;\n\n                if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n                  node = this.xhr.responseXML.documentElement;\n\n                  if (node.tagName === \"parsererror\") {\n                    Strophe$1.error(\"invalid response received\");\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    Strophe$1.error(\"responseXML: \" + Strophe$1.serialize(this.xhr.responseXML));\n                    throw new Error(\"parsererror\");\n                  }\n                } else if (this.xhr.responseText) {\n                  // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\n                  Strophe$1.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\n                  node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n\n                  if (!node) {\n                    throw new Error('Parsing produced null node');\n                  } else if (node.querySelector('parsererror')) {\n                    Strophe$1.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    var error = new Error();\n                    error.name = Strophe$1.ErrorCondition.BAD_FORMAT;\n                    throw error;\n                  }\n                }\n\n                return node;\n              },\n\n              /** PrivateFunction: _newXHR\n               *  _Private_ helper function to create XMLHttpRequests.\n               *\n               *  This function creates XMLHttpRequests across all implementations.\n               *\n               *  Returns:\n               *    A new XMLHttpRequest.\n               */\n              _newXHR: function _newXHR() {\n                var xhr = null;\n\n                if (window.XMLHttpRequest) {\n                  xhr = new XMLHttpRequest();\n\n                  if (xhr.overrideMimeType) {\n                    xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n                  }\n                } else if (window.ActiveXObject) {\n                  xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } // use Function.bind() to prepend ourselves as an argument\n\n\n                xhr.onreadystatechange = this.func.bind(null, this);\n                return xhr;\n              }\n            };\n            /** Class: Strophe.Bosh\n             *  _Private_ helper class that handles BOSH Connections\n             *\n             *  The Strophe.Bosh class is used internally by Strophe.Connection\n             *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: bosh.js\n             *  A JavaScript library to enable BOSH in Strophejs.\n             *\n             *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n             *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n             *  More information on BOSH can be found in XEP 124.\n             */\n\n            /** PrivateConstructor: Strophe.Bosh\n             *  Create and initialize a Strophe.Bosh object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n             *\n             *  Returns:\n             *    A new Strophe.Bosh object.\n             */\n\n            Strophe$1.Bosh = function (connection) {\n              this._conn = connection;\n              /* request id for body tags */\n\n              this.rid = Math.floor(Math.random() * 4294967295);\n              /* The current session ID. */\n\n              this.sid = null; // default BOSH values\n\n              this.hold = 1;\n              this.wait = 60;\n              this.window = 5;\n              this.errors = 0;\n              this.inactivity = null;\n              this.lastResponseHeaders = null;\n              this._requests = [];\n            };\n\n            Strophe$1.Bosh.prototype = {\n              /** Variable: strip\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n               *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n               *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n               *\n               *  > Strophe.Bosh.prototype.strip = \"body\";\n               *\n               *  This will enable stripping of the body tag in both\n               *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n               */\n              strip: null,\n\n              /** PrivateFunction: _buildBody\n               *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <body/> element.\n               */\n              _buildBody: function _buildBody() {\n                var bodyWrap = $build$1('body', {\n                  'rid': this.rid++,\n                  'xmlns': Strophe$1.NS.HTTPBIND\n                });\n\n                if (this.sid !== null) {\n                  bodyWrap.attrs({\n                    'sid': this.sid\n                  });\n                }\n\n                if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n                  this._cacheSession();\n                }\n\n                return bodyWrap;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection\n               */\n              _reset: function _reset() {\n                this.rid = Math.floor(Math.random() * 4294967295);\n                this.sid = null;\n                this.errors = 0;\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function that initializes the BOSH connection.\n               *\n               *  Creates and sends the Request that initializes the BOSH connection.\n               */\n              _connect: function _connect(wait, hold, route) {\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.errors = 0;\n\n                var body = this._buildBody().attrs({\n                  \"to\": this._conn.domain,\n                  \"xml:lang\": \"en\",\n                  \"wait\": this.wait,\n                  \"hold\": this.hold,\n                  \"content\": \"text/xml; charset=utf-8\",\n                  \"ver\": \"1.6\",\n                  \"xmpp:version\": \"1.0\",\n                  \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                });\n\n                if (route) {\n                  body.attrs({\n                    'route': route\n                  });\n                }\n\n                var _connect_cb = this._conn._connect_cb;\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _attach: function _attach(jid, sid, rid, callback, wait, hold, wind) {\n                this._conn.jid = jid;\n                this.sid = sid;\n                this.rid = rid;\n                this._conn.connect_callback = callback;\n                this._conn.domain = Strophe$1.getDomainFromJid(this._conn.jid);\n                this._conn.authenticated = true;\n                this._conn.connected = true;\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.window = wind || this.window;\n\n                this._conn._changeConnectStatus(Strophe$1.Status.ATTACHED, null);\n              },\n\n              /** PrivateFunction: _restore\n               *  Attempt to restore a cached BOSH session\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *      This parameter is optional but recommended, specifically in cases\n               *      where prebinded BOSH sessions are used where it's important to know\n               *      that the right session is being restored.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _restore: function _restore(jid, callback, wait, hold, wind) {\n                var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n\n                if (typeof session !== \"undefined\" && session !== null && session.rid && session.sid && session.jid && (typeof jid === \"undefined\" || jid === null || Strophe$1.getBareJidFromJid(session.jid) === Strophe$1.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so\n                // we compare only the domains:\n                Strophe$1.getNodeFromJid(jid) === null && Strophe$1.getDomainFromJid(session.jid) === jid)) {\n                  this._conn.restored = true;\n\n                  this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error(\"_restore: no restoreable session.\");\n                  error.name = \"StropheSessionError\";\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _cacheSession\n               *  _Private_ handler for the beforeunload event.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _cacheSession: function _cacheSession() {\n                if (this._conn.authenticated) {\n                  if (this._conn.jid && this.rid && this.sid) {\n                    window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n                      'jid': this._conn.jid,\n                      'rid': this.rid,\n                      'sid': this.sid\n                    }));\n                  }\n                } else {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var typ = bodyWrap.getAttribute(\"type\");\n\n                if (typ !== null && typ === \"terminate\") {\n                  // an error occurred\n                  var cond = bodyWrap.getAttribute(\"condition\");\n                  Strophe$1.error(\"BOSH-Connection failed: \" + cond);\n                  var conflict = bodyWrap.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, cond);\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"unknown\");\n                  }\n\n                  this._conn._doDisconnect(cond);\n\n                  return Strophe$1.Status.CONNFAIL;\n                } // check to make sure we don't overwrite these if _connect_cb is\n                // called multiple times in the case of missing stream:features\n\n\n                if (!this.sid) {\n                  this.sid = bodyWrap.getAttribute(\"sid\");\n                }\n\n                var wind = bodyWrap.getAttribute('requests');\n\n                if (wind) {\n                  this.window = parseInt(wind, 10);\n                }\n\n                var hold = bodyWrap.getAttribute('hold');\n\n                if (hold) {\n                  this.hold = parseInt(hold, 10);\n                }\n\n                var wait = bodyWrap.getAttribute('wait');\n\n                if (wait) {\n                  this.wait = parseInt(wait, 10);\n                }\n\n                var inactivity = bodyWrap.getAttribute('inactivity');\n\n                if (inactivity) {\n                  this.inactivity = parseInt(inactivity, 10);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ part of Connection.disconnect for Bosh\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                this._sendTerminate(pres);\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Resets the SID and RID.\n               */\n              _doDisconnect: function _doDisconnect() {\n                this.sid = null;\n                this.rid = Math.floor(Math.random() * 4294967295);\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the Request queue is empty.\n               *\n               *  Returns:\n               *    True, if there are no Requests queued, False otherwise.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return this._requests.length === 0;\n              },\n\n              /** PrivateFunction: _callProtocolErrorHandlers\n               *  _Private_ function to call error handlers registered for HTTP errors.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _callProtocolErrorHandlers: function _callProtocolErrorHandlers(req) {\n                var reqStatus = this._getRequestStatus(req);\n\n                var err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n\n                if (err_callback) {\n                  err_callback.call(this, reqStatus);\n                }\n              },\n\n              /** PrivateFunction: _hitError\n               *  _Private_ function to handle the error count.\n               *\n               *  Requests are resent automatically until their error count reaches\n               *  5.  Each time an error is encountered, this function is called to\n               *  increment the count and disconnect if the count is too high.\n               *\n               *  Parameters:\n               *    (Integer) reqStatus - The request status.\n               */\n              _hitError: function _hitError(reqStatus) {\n                this.errors++;\n                Strophe$1.warn(\"request errored, status: \" + reqStatus + \", number of errors: \" + this.errors);\n\n                if (this.errors > 4) {\n                  this._conn._onDisconnectTimeout();\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received and sends a blank poll request.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$1.warn(\"Server did not yet offer a supported authentication \" + \"mechanism. Sending a blank poll request.\");\n\n                if (callback) {\n                  callback = callback.bind(this._conn);\n                } else {\n                  callback = this._conn._connect_cb.bind(this._conn);\n                }\n\n                var body = this._buildBody();\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  Cancels all remaining Requests and clears the queue.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                this._abortAllRequests();\n              },\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {\n                while (this._requests.length > 0) {\n                  var req = this._requests.pop();\n\n                  req.abort = true;\n                  req.xhr.abort();\n\n                  req.xhr.onreadystatechange = function () {};\n                }\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler called by Strophe.Connection._onIdle\n               *\n               *  Sends all queued Requests or polls with empty Request if there are none.\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data; // if no requests are in progress, poll\n\n                if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {\n                  Strophe$1.debug(\"no requests during idle cycle, sending blank request\");\n                  data.push(null);\n                }\n\n                if (this._conn.paused) {\n                  return;\n                }\n\n                if (this._requests.length < 2 && data.length > 0) {\n                  var body = this._buildBody();\n\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      if (data[i] === \"restart\") {\n                        body.attrs({\n                          \"to\": this._conn.domain,\n                          \"xml:lang\": \"en\",\n                          \"xmpp:restart\": \"true\",\n                          \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                        });\n                      } else {\n                        body.cnode(data[i]).up();\n                      }\n                    }\n                  }\n\n                  delete this._conn._data;\n                  this._conn._data = [];\n\n                  this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                  this._throttledRequestHandler();\n                }\n\n                if (this._requests.length > 0) {\n                  var time_elapsed = this._requests[0].age();\n\n                  if (this._requests[0].dead !== null) {\n                    if (this._requests[0].timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                      this._throttledRequestHandler();\n                    }\n                  }\n\n                  if (time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait)) {\n                    Strophe$1.warn(\"Request \" + this._requests[0].id + \" timed out, over \" + Math.floor(Strophe$1.TIMEOUT * this.wait) + \" seconds since last activity\");\n\n                    this._throttledRequestHandler();\n                  }\n                }\n              },\n\n              /** PrivateFunction: _getRequestStatus\n               *\n               *  Returns the HTTP status code from a Strophe.Request\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The Strophe.Request instance.\n               *    (Integer) def - The default value that should be returned if no\n               *          status value was found.\n               */\n              _getRequestStatus: function _getRequestStatus(req, def) {\n                var reqStatus;\n\n                if (req.xhr.readyState === 4) {\n                  try {\n                    reqStatus = req.xhr.status;\n                  } catch (e) {\n                    // ignore errors from undefined status attribute. Works\n                    // around a browser bug\n                    Strophe$1.error(\"Caught an error while retrieving a request's status, \" + \"reqStatus: \" + reqStatus);\n                  }\n                }\n\n                if (typeof reqStatus === \"undefined\") {\n                  reqStatus = typeof def === 'number' ? def : 0;\n                }\n\n                return reqStatus;\n              },\n\n              /** PrivateFunction: _onRequestStateChange\n               *  _Private_ handler for Strophe.Request state changes.\n               *\n               *  This function is called when the XMLHttpRequest readyState changes.\n               *  It contains a lot of error handling logic for the many ways that\n               *  requests can fail, and calls the request callback when requests\n               *  succeed.\n               *\n               *  Parameters:\n               *    (Function) func - The handler for the request.\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _onRequestStateChange: function _onRequestStateChange(func, req) {\n                Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" state changed to \" + req.xhr.readyState);\n\n                if (req.abort) {\n                  req.abort = false;\n                  return;\n                }\n\n                if (req.xhr.readyState !== 4) {\n                  // The request is not yet complete\n                  return;\n                }\n\n                var reqStatus = this._getRequestStatus(req);\n\n                this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n\n                if (this.disconnecting && reqStatus >= 400) {\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  return;\n                }\n\n                var valid_request = reqStatus > 0 && reqStatus < 500;\n                var too_many_retries = req.sends > this._conn.maxRetries;\n\n                if (valid_request || too_many_retries) {\n                  // remove from internal queue\n                  this._removeRequest(req);\n\n                  Strophe$1.debug(\"request id \" + req.id + \" should now be removed\");\n                }\n\n                if (reqStatus === 200) {\n                  // request succeeded\n                  var reqIs0 = this._requests[0] === req;\n                  var reqIs1 = this._requests[1] === req; // if request 1 finished, or request 0 finished and request\n                  // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n                  // restart the other - both will be in the first spot, as the\n                  // completed request has been removed from the queue already\n\n                  if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                    this._restartRequest(0);\n                  }\n\n                  this._conn.nextValidRid(Number(req.rid) + 1);\n\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\n                  func(req); // call handler\n\n                  this.errors = 0;\n                } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {\n                  // request failed\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  if (reqStatus >= 400 && reqStatus < 500) {\n                    this._conn._changeConnectStatus(Strophe$1.Status.DISCONNECTING, null);\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n                }\n\n                if (!valid_request && !too_many_retries) {\n                  this._throttledRequestHandler();\n                } else if (too_many_retries && !this._conn.connected) {\n                  this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"giving-up\");\n                }\n              },\n\n              /** PrivateFunction: _processRequest\n               *  _Private_ function to process a request in the queue.\n               *\n               *  This function takes requests off the queue and sends them and\n               *  restarts dead requests.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _processRequest: function _processRequest(i) {\n                var _this = this;\n\n                var req = this._requests[i];\n\n                var reqStatus = this._getRequestStatus(req, -1); // make sure we limit the number of retries\n\n\n                if (req.sends > this._conn.maxRetries) {\n                  this._conn._onDisconnectTimeout();\n\n                  return;\n                }\n\n                var time_elapsed = req.age();\n                var primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait);\n                var secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait);\n                var server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);\n\n                if (primary_timeout || secondary_timeout || server_error) {\n                  if (secondary_timeout) {\n                    Strophe$1.error(\"Request \".concat(this._requests[i].id, \" timed out (secondary), restarting\"));\n                  }\n\n                  req.abort = true;\n                  req.xhr.abort(); // setting to null fails on IE6, so set to empty function\n\n                  req.xhr.onreadystatechange = function () {};\n\n                  this._requests[i] = new Strophe$1.Request(req.xmlData, req.origFunc, req.rid, req.sends);\n                  req = this._requests[i];\n                }\n\n                if (req.xhr.readyState === 0) {\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\n\n                  try {\n                    var content_type = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n                    req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n\n                    if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                      // IE9 doesn't have setRequestHeader\n                      req.xhr.setRequestHeader(\"Content-Type\", content_type);\n                    }\n\n                    if (this._conn.options.withCredentials) {\n                      req.xhr.withCredentials = true;\n                    }\n                  } catch (e2) {\n                    Strophe$1.error(\"XHR open failed: \" + e2.toString());\n\n                    if (!this._conn.connected) {\n                      this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"bad-service\");\n                    }\n\n                    this._conn.disconnect();\n\n                    return;\n                  } // Fires the XHR request -- may be invoked immediately\n                  // or on a gradually expanding retry window for reconnects\n\n\n                  var sendFunc = function sendFunc() {\n                    req.date = new Date();\n\n                    if (_this._conn.options.customHeaders) {\n                      var headers = _this._conn.options.customHeaders;\n\n                      for (var header in headers) {\n                        if (Object.prototype.hasOwnProperty.call(headers, header)) {\n                          req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                      }\n                    }\n\n                    req.xhr.send(req.data);\n                  }; // Implement progressive backoff for reconnects --\n                  // First retry (send === 1) should also be instantaneous\n\n\n                  if (req.sends > 1) {\n                    // Using a cube of the retry number creates a nicely\n                    // expanding retry window\n                    var backoff = Math.min(Math.floor(Strophe$1.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;\n                    setTimeout(function () {\n                      // XXX: setTimeout should be called only with function expressions (23974bc1)\n                      sendFunc();\n                    }, backoff);\n                  } else {\n                    sendFunc();\n                  }\n\n                  req.sends++;\n\n                  if (this._conn.xmlOutput !== Strophe$1.Connection.prototype.xmlOutput) {\n                    if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n                      this._conn.xmlOutput(req.xmlData.childNodes[0]);\n                    } else {\n                      this._conn.xmlOutput(req.xmlData);\n                    }\n                  }\n\n                  if (this._conn.rawOutput !== Strophe$1.Connection.prototype.rawOutput) {\n                    this._conn.rawOutput(req.data);\n                  }\n                } else {\n                  Strophe$1.debug(\"_processRequest: \" + (i === 0 ? \"first\" : \"second\") + \" request has readyState of \" + req.xhr.readyState);\n                }\n              },\n\n              /** PrivateFunction: _removeRequest\n               *  _Private_ function to remove a request from the queue.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request to remove.\n               */\n              _removeRequest: function _removeRequest(req) {\n                Strophe$1.debug(\"removing request\");\n\n                for (var i = this._requests.length - 1; i >= 0; i--) {\n                  if (req === this._requests[i]) {\n                    this._requests.splice(i, 1);\n                  }\n                } // IE6 fails on setting to null, so set to empty function\n\n\n                req.xhr.onreadystatechange = function () {};\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _restartRequest\n               *  _Private_ function to restart a request that is presumed dead.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _restartRequest: function _restartRequest(i) {\n                var req = this._requests[i];\n\n                if (req.dead === null) {\n                  req.dead = new Date();\n                }\n\n                this._processRequest(i);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * Tries to extract a stanza out of a Request Object.\n               * When this fails the current connection will be disconnected.\n               *\n               *  Parameters:\n               *    (Object) req - The Request.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(req) {\n                try {\n                  return req.getResponse();\n                } catch (e) {\n                  if (e.message !== \"parsererror\") {\n                    throw e;\n                  }\n\n                  this._conn.disconnect(\"strophe-parsererror\");\n                }\n              },\n\n              /** PrivateFunction: _sendTerminate\n               *  _Private_ function to send initial disconnect sequence.\n               *\n               *  This is the first step in a graceful disconnect.  It sends\n               *  the BOSH server a terminate body and includes an unavailable\n               *  presence if authentication has completed.\n               */\n              _sendTerminate: function _sendTerminate(pres) {\n                Strophe$1.debug(\"_sendTerminate was called\");\n\n                var body = this._buildBody().attrs({\n                  type: \"terminate\"\n                });\n\n                if (pres) {\n                  body.cnode(pres.tree());\n                }\n\n                var req = new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\"));\n\n                this._requests.push(req);\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for BOSH\n               *\n               * Just triggers the RequestHandler to send the messages that are in the queue\n               */\n              _send: function _send() {\n                var _this2 = this;\n\n                clearTimeout(this._conn._idleTimeout);\n\n                this._throttledRequestHandler();\n\n                this._conn._idleTimeout = setTimeout(function () {\n                  return _this2._conn._onIdle();\n                }, 100);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                this._throttledRequestHandler();\n\n                clearTimeout(this._conn._idleTimeout);\n              },\n\n              /** PrivateFunction: _throttledRequestHandler\n               *  _Private_ function to throttle requests to the connection window.\n               *\n               *  This function makes sure we don't send requests so fast that the\n               *  request ids overflow the connection window in the case that one\n               *  request died.\n               */\n              _throttledRequestHandler: function _throttledRequestHandler() {\n                if (!this._requests) {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + \"undefined requests\");\n                } else {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + this._requests.length + \" requests\");\n                }\n\n                if (!this._requests || this._requests.length === 0) {\n                  return;\n                }\n\n                if (this._requests.length > 0) {\n                  this._processRequest(0);\n                }\n\n                if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {\n                  this._processRequest(1);\n                }\n              }\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$2 = core.Strophe;\n            var $build$2 = core.$build;\n            /** Class: Strophe.WebSocket\n             *  _Private_ helper class that handles WebSocket Connections\n             *\n             *  The Strophe.WebSocket class is used internally by Strophe.Connection\n             *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: websocket.js\n             *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n             *\n             *  This file implements XMPP over WebSockets for Strophejs.\n             *  If a Connection is established with a Websocket url (ws://...)\n             *  Strophe will use WebSockets.\n             *  For more information on XMPP-over-WebSocket see RFC 7395:\n             *  http://tools.ietf.org/html/rfc7395\n             *\n             *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n             */\n\n            /** PrivateConstructor: Strophe.Websocket\n             *  Create and initialize a Strophe.WebSocket object.\n             *  Currently only sets the connection Object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n             *\n             *  Returns:\n             *    A new Strophe.WebSocket object.\n             */\n\n            Strophe$2.Websocket = function (connection) {\n              this._conn = connection;\n              this.strip = \"wrapper\";\n              var service = connection.service;\n\n              if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n                // If the service is not an absolute URL, assume it is a path and put the absolute\n                // URL together from options, current URL and the path.\n                var new_service = \"\";\n\n                if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n                  new_service += \"ws\";\n                } else {\n                  new_service += \"wss\";\n                }\n\n                new_service += \"://\" + window.location.host;\n\n                if (service.indexOf(\"/\") !== 0) {\n                  new_service += window.location.pathname + service;\n                } else {\n                  new_service += service;\n                }\n\n                connection.service = new_service;\n              }\n            };\n\n            Strophe$2.Websocket.prototype = {\n              /** PrivateFunction: _buildStream\n               *  _Private_ helper function to generate the <stream> start tag for WebSockets\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <stream> element.\n               */\n              _buildStream: function _buildStream() {\n                return $build$2(\"open\", {\n                  \"xmlns\": Strophe$2.NS.FRAMING,\n                  \"to\": this._conn.domain,\n                  \"version\": '1.0'\n                });\n              },\n\n              /** PrivateFunction: _check_streamerror\n               * _Private_ checks a message for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               *    connectstatus - The ConnectStatus that will be set on error.\n               *  Returns:\n               *     true if there was a streamerror, false otherwise.\n               */\n              _check_streamerror: function _check_streamerror(bodyWrap, connectstatus) {\n                var errors;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  errors = bodyWrap.getElementsByTagNameNS(Strophe$2.NS.STREAM, \"error\");\n                } else {\n                  errors = bodyWrap.getElementsByTagName(\"stream:error\");\n                }\n\n                if (errors.length === 0) {\n                  return false;\n                }\n\n                var error = errors[0];\n                var condition = \"\";\n                var text = \"\";\n                var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n\n                for (var i = 0; i < error.childNodes.length; i++) {\n                  var e = error.childNodes[i];\n\n                  if (e.getAttribute(\"xmlns\") !== ns) {\n                    break;\n                  }\n\n                  if (e.nodeName === \"text\") {\n                    text = e.textContent;\n                  } else {\n                    condition = e.nodeName;\n                  }\n                }\n\n                var errorString = \"WebSocket stream error: \";\n\n                if (condition) {\n                  errorString += condition;\n                } else {\n                  errorString += \"unknown\";\n                }\n\n                if (text) {\n                  errorString += \" - \" + text;\n                }\n\n                Strophe$2.error(errorString); // close the connection on stream_error\n\n                this._conn._changeConnectStatus(connectstatus, condition);\n\n                this._conn._doDisconnect();\n\n                return true;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection.\n               *  Is not needed by WebSockets.\n               */\n              _reset: function _reset() {\n                return;\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function called by Strophe.Connection.connect\n               *\n               *  Creates a WebSocket for a connection and assigns Callbacks to it.\n               *  Does nothing if there already is a WebSocket.\n               */\n              _connect: function _connect() {\n                // Ensure that there is no open WebSocket from a previous Connection.\n                this._closeSocket(); // Create the new WobSocket\n\n\n                this.socket = new WebSocket(this._conn.service, \"xmpp\");\n                this.socket.onopen = this._onOpen.bind(this);\n                this.socket.onerror = this._onError.bind(this);\n                this.socket.onclose = this._onClose.bind(this);\n                this.socket.onmessage = this._connect_cb_wrapper.bind(this);\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ function called by Strophe.Connection._connect_cb\n               *\n               * checks for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var error = this._check_streamerror(bodyWrap, Strophe$2.Status.CONNFAIL);\n\n                if (error) {\n                  return Strophe$2.Status.CONNFAIL;\n                }\n              },\n\n              /** PrivateFunction: _handleStreamStart\n               * _Private_ function that checks the opening <open /> tag for errors.\n               *\n               * Disconnects if there is an error and returns false, true otherwise.\n               *\n               *  Parameters:\n               *    (Node) message - Stanza containing the <open /> tag.\n               */\n              _handleStreamStart: function _handleStreamStart(message) {\n                var error = false; // Check for errors in the <open /> tag\n\n                var ns = message.getAttribute(\"xmlns\");\n\n                if (typeof ns !== \"string\") {\n                  error = \"Missing xmlns in <open />\";\n                } else if (ns !== Strophe$2.NS.FRAMING) {\n                  error = \"Wrong xmlns in <open />: \" + ns;\n                }\n\n                var ver = message.getAttribute(\"version\");\n\n                if (typeof ver !== \"string\") {\n                  error = \"Missing version in <open />\";\n                } else if (ver !== \"1.0\") {\n                  error = \"Wrong version in <open />: \" + ver;\n                }\n\n                if (error) {\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, error);\n\n                  this._conn._doDisconnect();\n\n                  return false;\n                }\n\n                return true;\n              },\n\n              /** PrivateFunction: _connect_cb_wrapper\n               * _Private_ function that handles the first connection messages.\n               *\n               * On receiving an opening stream tag this callback replaces itself with the real\n               * message handler. On receiving a stream error the connection is terminated.\n               */\n              _connect_cb_wrapper: function _connect_cb_wrapper(message) {\n                if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n                  // Strip the XML Declaration, if there is one\n                  var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n                  if (data === '') return;\n                  var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n\n                  this._conn.xmlInput(streamStart);\n\n                  this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error\n\n\n                  if (this._handleStreamStart(streamStart)) {\n                    //_connect_cb will check for stream:error and disconnect on error\n                    this._connect_cb(streamStart);\n                  }\n                } else if (message.data.indexOf(\"<close \") === 0) {\n                  // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n                  // Parse the raw string to an XML element\n                  var parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement; // Report this input to the raw and xml handlers\n\n                  this._conn.xmlInput(parsedMessage);\n\n                  this._conn.rawInput(message.data);\n\n                  var see_uri = parsedMessage.getAttribute(\"see-other-uri\");\n\n                  if (see_uri) {\n                    var service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY\n\n                    var isSecureRedirect = service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0 || service.indexOf(\"ws:\") >= 0;\n\n                    if (isSecureRedirect) {\n                      this._conn._changeConnectStatus(Strophe$2.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\n\n                      this._conn.reset();\n\n                      this._conn.service = see_uri;\n\n                      this._connect();\n                    }\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"Received closing stream\");\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  var string = this._streamWrap(message.data);\n\n                  var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n                  this.socket.onmessage = this._onMessage.bind(this);\n\n                  this._conn._connect_cb(elem, null, message.data);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ function called by Strophe.Connection.disconnect\n               *\n               *  Disconnects and sends a last stanza if one is given\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n                  if (pres) {\n                    this._conn.send(pres);\n                  }\n\n                  var close = $build$2(\"close\", {\n                    \"xmlns\": Strophe$2.NS.FRAMING\n                  });\n\n                  this._conn.xmlOutput(close.tree());\n\n                  var closeString = Strophe$2.serialize(close);\n\n                  this._conn.rawOutput(closeString);\n\n                  try {\n                    this.socket.send(closeString);\n                  } catch (e) {\n                    Strophe$2.warn(\"Couldn't send <close /> tag.\");\n                  }\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Just closes the Socket for WebSockets\n               */\n              _doDisconnect: function _doDisconnect() {\n                Strophe$2.debug(\"WebSockets _doDisconnect was called\");\n\n                this._closeSocket();\n              },\n\n              /** PrivateFunction _streamWrap\n               *  _Private_ helper function to wrap a stanza in a <stream> tag.\n               *  This is used so Strophe can process stanzas from WebSockets like BOSH\n               */\n              _streamWrap: function _streamWrap(stanza) {\n                return \"<wrapper>\" + stanza + '</wrapper>';\n              },\n\n              /** PrivateFunction: _closeSocket\n               *  _Private_ function to close the WebSocket.\n               *\n               *  Closes the socket if it is still open and deletes it\n               */\n              _closeSocket: function _closeSocket() {\n                if (this.socket) {\n                  try {\n                    this.socket.onclose = null;\n                    this.socket.onerror = null;\n                    this.socket.onmessage = null;\n                    this.socket.close();\n                  } catch (e) {\n                    Strophe$2.debug(e.message);\n                  }\n                }\n\n                this.socket = null;\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the message queue is empty.\n               *\n               *  Returns:\n               *    True, because WebSocket messages are send immediately after queueing.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return true;\n              },\n\n              /** PrivateFunction: _onClose\n               * _Private_ function to handle websockets closing.\n               *\n               * Nothing to do here for WebSockets\n               */\n              _onClose: function _onClose(e) {\n                if (this._conn.connected && !this._conn.disconnecting) {\n                  Strophe$2.error(\"Websocket closed unexpectedly\");\n\n                  this._conn._doDisconnect();\n                } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n                  // in case the onError callback was not called (Safari 10 does not\n                  // call onerror when the initial connection fails) we need to\n                  // dispatch a CONNFAIL status update to be consistent with the\n                  // behavior on other browsers.\n                  Strophe$2.error(\"Websocket closed unexcectedly\");\n\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                  this._conn._doDisconnect();\n                } else {\n                  Strophe$2.debug(\"Websocket closed\");\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$2.error(\"Server did not offer a supported authentication mechanism\");\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, Strophe$2.ErrorCondition.NO_AUTH_MECH);\n\n                if (callback) {\n                  callback.call(this._conn);\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  This does nothing for WebSockets\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {},\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {},\n\n              /** PrivateFunction: _onError\n               * _Private_ function to handle websockets errors.\n               *\n               * Parameters:\n               * (Object) error - The websocket error.\n               */\n              _onError: function _onError(error) {\n                Strophe$2.error(\"Websocket error \" + error);\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                this._disconnect();\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ function called by Strophe.Connection._onIdle\n               *\n               *  sends all queued stanzas\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data;\n\n                if (data.length > 0 && !this._conn.paused) {\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      var stanza = void 0;\n\n                      if (data[i] === \"restart\") {\n                        stanza = this._buildStream().tree();\n                      } else {\n                        stanza = data[i];\n                      }\n\n                      var rawStanza = Strophe$2.serialize(stanza);\n\n                      this._conn.xmlOutput(stanza);\n\n                      this._conn.rawOutput(rawStanza);\n\n                      this.socket.send(rawStanza);\n                    }\n                  }\n\n                  this._conn._data = [];\n                }\n              },\n\n              /** PrivateFunction: _onMessage\n               * _Private_ function to handle websockets messages.\n               *\n               * This function parses each of the messages as if they are full documents.\n               * [TODO : We may actually want to use a SAX Push parser].\n               *\n               * Since all XMPP traffic starts with\n               *  <stream:stream version='1.0'\n               *                 xml:lang='en'\n               *                 xmlns='jabber:client'\n               *                 xmlns:stream='http://etherx.jabber.org/streams'\n               *                 id='3697395463'\n               *                 from='SERVER'>\n               *\n               * The first stanza will always fail to be parsed.\n               *\n               * Additionally, the seconds stanza will always be <stream:features> with\n               * the stream NS defined in the previous stanza, so we need to 'force'\n               * the inclusion of the NS in this stanza.\n               *\n               * Parameters:\n               * (string) message - The websocket message.\n               */\n              _onMessage: function _onMessage(message) {\n                var elem; // check for closing stream\n\n                var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n\n                if (message.data === close) {\n                  this._conn.rawInput(close);\n\n                  this._conn.xmlInput(message);\n\n                  if (!this._conn.disconnecting) {\n                    this._conn._doDisconnect();\n                  }\n\n                  return;\n                } else if (message.data.search(\"<open \") === 0) {\n                  // This handles stream restarts\n                  elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n\n                  if (!this._handleStreamStart(elem)) {\n                    return;\n                  }\n                } else {\n                  var data = this._streamWrap(message.data);\n\n                  elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n                }\n\n                if (this._check_streamerror(elem, Strophe$2.Status.ERROR)) {\n                  return;\n                } //handle unavailable presence stanza before disconnecting\n\n\n                if (this._conn.disconnecting && elem.firstChild.nodeName === \"presence\" && elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n                  this._conn.xmlInput(elem);\n\n                  this._conn.rawInput(Strophe$2.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and\n                  // wait for the </stream:stream> tag before we close the connection\n\n\n                  return;\n                }\n\n                this._conn._dataRecv(elem, message.data);\n              },\n\n              /** PrivateFunction: _onOpen\n               * _Private_ function to handle websockets connection setup.\n               *\n               * The opening stream tag is sent here.\n               */\n              _onOpen: function _onOpen() {\n                Strophe$2.debug(\"Websocket open\");\n\n                var start = this._buildStream();\n\n                this._conn.xmlOutput(start.tree());\n\n                var startString = Strophe$2.serialize(start);\n\n                this._conn.rawOutput(startString);\n\n                this.socket.send(startString);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * WebSockets don't use requests, so the passed argument is just returned.\n               *\n               *  Parameters:\n               *    (Object) stanza - The stanza.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(stanza) {\n                return stanza;\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for WebSocket\n               *\n               * Just flushes the messages that are in the queue\n               */\n              _send: function _send() {\n                this._conn.flush();\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                clearTimeout(this._conn._idleTimeout);\n\n                this._conn._onIdle.bind(this._conn)();\n              }\n            };\n\n            global$1.Strophe = core.Strophe;\n            global$1.$build = core.$build;\n            global$1.$iq = core.$iq;\n            global$1.$msg = core.$msg;\n            global$1.$pres = core.$pres;\n\n            return core;\n\n}));\n","import BrowserCapabilities from './BrowserCapabilities';\n\nexport default new BrowserCapabilities();\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    */\n    setGlobalOptions: function(options) {\n        Logger.setGlobalOptions(options);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, options) {\n        var logger = new Logger(curLevel, id, transports, options);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","/**\n * The audio type.\n */\nexport const AUDIO = 'audio';\n\n/**\n * The presenter type.\n */\nexport const PRESENTER = 'presenter';\n\n/**\n * The video type.\n */\nexport const VIDEO = 'video';\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport analytics from './AnalyticsAdapter';\nimport CallStats from './CallStats';\nimport LocalStats from './LocalStatsCollector';\nimport { PerformanceObserverStats } from './PerformanceObserverStats';\nimport RTPStats from './RTPStatsCollector';\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Stores all active {@link Statistics} instances.\n * @type {Set<Statistics>}\n */\nlet _instances;\n\n/**\n * True if callstats API is loaded\n */\nlet isCallstatsLoaded = false;\n\n/**\n * Since callstats.io is a third party, we cannot guarantee the quality of their\n * service. More specifically, their server may take noticeably long time to\n * respond. Consequently, it is in our best interest (in the sense that the\n * intergration of callstats.io is pretty important to us but not enough to\n * allow it to prevent people from joining a conference) to (1) start\n * downloading their API as soon as possible and (2) do the downloading\n * asynchronously.\n *\n * @param {StatisticsOptions} options - Options to use for downloading and\n * initializing callstats backend.\n */\nfunction loadCallStatsAPI(options) {\n    if (!isCallstatsLoaded) {\n        ScriptUtil.loadScript(\n            options.customScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ () => _initCallStatsBackend(options)\n        );\n        isCallstatsLoaded = true;\n    }\n}\n\n/**\n * Initializes Callstats backend.\n *\n * @param {StatisticsOptions} options - The options to use for initializing\n * callstats backend.\n * @private\n */\nfunction _initCallStatsBackend(options) {\n    if (CallStats.isBackendInitialized()) {\n        return;\n    }\n\n    if (!CallStats.initBackend({\n        callStatsID: options.callStatsID,\n        callStatsSecret: options.callStatsSecret,\n        userName: options.userName,\n        aliasName: options.aliasName,\n        applicationName: options.applicationName,\n        getWiFiStatsMethod: options.getWiFiStatsMethod,\n        confID: options.confID,\n        siteID: options.siteID\n    })) {\n        logger.error('CallStats Backend initialization failed bad');\n    }\n}\n\n/**\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\n * \"message\" and \"constraintName\". So we need to bundle additional information\n * from JitsiTrackError into error passed to callstats to preserve valuable\n * information about error.\n * @param {JitsiTrackError} error\n */\nfunction formatJitsiTrackErrorForCallStats(error) {\n    const err = new Error();\n\n    // Just copy original stack from error\n    err.stack = error.stack;\n\n    // Combine name from error's name plus (possibly) name of original GUM error\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\n\n    // Put all constraints into this field. For constraint failed errors we will\n    // still know which exactly constraint failed as it will be a part of\n    // message.\n    err.constraintName = error.gum && error.gum.constraints\n        ? JSON.stringify(error.gum.constraints) : '';\n\n    // Just copy error's message.\n    err.message = error.message;\n\n    return err;\n}\n\n/**\n * Init statistic options\n * @param options\n */\nStatistics.init = function(options) {\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\n    if (typeof options.pcStatsInterval === 'number') {\n        Statistics.pcStatsInterval = options.pcStatsInterval;\n    }\n\n    if (typeof options.audioLevelsInterval === 'number') {\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\n    }\n\n    if (typeof options.longTasksStatsInterval === 'number') {\n        Statistics.longTasksStatsInterval = options.longTasksStatsInterval;\n    }\n\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\n};\n\n/**\n * The options to configure Statistics.\n * @typedef {Object} StatisticsOptions\n * @property {string} applicationName - The application name to pass to\n * callstats.\n * @property {string} aliasName - The alias name to use when initializing callstats.\n * @property {string} userName - The user name to use when initializing callstats.\n * @property {string} confID - The callstats conference ID to use.\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} customScriptUrl - A custom lib url to use when downloading\n * callstats library.\n * @property {string} roomName - The room name we are currently in.\n */\n/**\n *\n * @param xmpp\n * @param {StatisticsOptions} options - The options to use creating the\n * Statistics.\n */\nexport default function Statistics(xmpp, options) {\n    /**\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\n     * collect RTP statistics for each peerconnection.\n     * @type {Map<string, RTPStats}\n     */\n    this.rtpStatsMap = new Map();\n    this.eventEmitter = new EventEmitter();\n    this.xmpp = xmpp;\n    this.options = options || {};\n\n    this.callStatsIntegrationEnabled\n        = this.options.callStatsID && this.options.callStatsSecret && this.options.enableCallStats\n\n            // Even though AppID and AppSecret may be specified, the integration\n            // of callstats.io may be disabled because of globally-disallowed\n            // requests to any third parties.\n            && (Statistics.disableThirdPartyRequests !== true);\n    if (this.callStatsIntegrationEnabled) {\n        this.callStatsApplicationLogsDisabled\n            = this.options.callStatsApplicationLogsDisabled;\n        if (browser.isReactNative()) {\n            _initCallStatsBackend(this.options);\n        } else {\n            loadCallStatsAPI(this.options);\n        }\n\n        if (!this.options.confID) {\n            logger.warn('\"confID\" is not defined');\n        }\n    }\n\n    /**\n     * Stores {@link CallStats} instances for each\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\n     * @type {Map<number, CallStats>}\n     */\n    this.callsStatsInstances = new Map();\n\n    Statistics.instances.add(this);\n}\nStatistics.audioLevelsEnabled = false;\nStatistics.audioLevelsInterval = 200;\nStatistics.pcStatsInterval = 10000;\nStatistics.disableThirdPartyRequests = false;\nStatistics.analytics = analytics;\n\nObject.defineProperty(Statistics, 'instances', {\n    /**\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\n     * initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<Statistics>}\n     */\n    get() {\n        if (!_instances) {\n            _instances = new Set();\n        }\n\n        return _instances;\n    }\n});\n\n/**\n * Starts collecting RTP stats for given peerconnection.\n * @param {TraceablePeerConnection} peerconnection\n */\nStatistics.prototype.startRemoteStats = function(peerconnection) {\n    this.stopRemoteStats(peerconnection);\n\n    try {\n        const rtpStats\n            = new RTPStats(\n                peerconnection,\n                Statistics.audioLevelsInterval,\n                Statistics.pcStatsInterval,\n                this.eventEmitter);\n\n        rtpStats.start(Statistics.audioLevelsEnabled);\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\n    } catch (e) {\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\n    }\n};\n\nStatistics.localStats = [];\n\nStatistics.startLocalStats = function(stream, callback) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\n        callback);\n\n    this.localStats.push(localStats);\n    localStats.start();\n};\n\nStatistics.prototype.addAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.removeAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.addConnectionStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\n};\n\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.CONNECTION_STATS,\n        listener);\n};\n\nStatistics.prototype.addByteSentStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\n};\n\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\n        listener);\n};\n\n/**\n * Add a listener that would be notified on a LONG_TASKS_STATS event.\n *\n * @param {Function} listener a function that would be called when notified.\n * @returns {void}\n */\nStatistics.prototype.addLongTasksStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Creates an instance of {@link PerformanceObserverStats} and starts the\n * observer that records the stats periodically.\n *\n * @returns {void}\n */\nStatistics.prototype.attachLongTasksStats = function(conference) {\n    if (!browser.supportsPerformanceObserver()) {\n        logger.warn('Performance observer for long tasks not supported by browser!');\n\n        return;\n    }\n\n    this.performanceObserverStats = new PerformanceObserverStats(\n        this.eventEmitter,\n        Statistics.longTasksStatsInterval);\n\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_JOINED,\n        () => this.performanceObserverStats.startObserver());\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_LEFT,\n        () => this.performanceObserverStats.stopObserver());\n};\n\n/**\n * Obtains the current value of the LongTasks event statistics.\n *\n * @returns {Object|null} stats object if the observer has been\n * created, null otherwise.\n */\nStatistics.prototype.getLongTasksStats = function() {\n    return this.performanceObserverStats\n        ? this.performanceObserverStats.getLongTasksStats()\n        : null;\n};\n\n/**\n * Removes the given listener for the LONG_TASKS_STATS event.\n *\n * @param {Function} listener the listener we want to remove.\n * @returns {void}\n */\nStatistics.prototype.removeLongTasksStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Updates the list of speakers for which the audio levels are to be calculated. This is needed for the jvb pc only.\n *\n * @param {Array<string>} speakerList The list of remote endpoint ids.\n * @returns {void}\n */\nStatistics.prototype.setSpeakerList = function(speakerList) {\n    for (const rtpStats of Array.from(this.rtpStatsMap.values())) {\n        if (!rtpStats.peerconnection.isP2P) {\n            rtpStats.setSpeakerList(speakerList);\n        }\n    }\n};\n\nStatistics.prototype.dispose = function() {\n    try {\n        // NOTE Before reading this please see the comment in stopCallStats...\n        //\n        // Here we prevent from emitting the event twice in case it will be\n        // triggered from stopCallStats.\n        // If the event is triggered from here it means that the logs will not\n        // be submitted anyway (because there is no CallStats instance), but\n        // we're doing that for the sake of some kind of consistency.\n        if (!this.callsStatsInstances.size) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        for (const callStats of this.callsStatsInstances.values()) {\n            this.stopCallStats(callStats.tpc);\n        }\n        for (const tpcId of this.rtpStatsMap.keys()) {\n            this._stopRemoteStats(tpcId);\n        }\n        if (this.eventEmitter) {\n            this.eventEmitter.removeAllListeners();\n        }\n    } finally {\n        Statistics.instances.delete(this);\n    }\n};\n\nStatistics.stopLocalStats = function(stream) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    for (let i = 0; i < Statistics.localStats.length; i++) {\n        if (Statistics.localStats[i].stream === stream) {\n            const localStats = Statistics.localStats.splice(i, 1);\n\n            localStats[0].stop();\n            break;\n        }\n    }\n};\n\n/**\n * Stops remote RTP stats for given peerconnection ID.\n * @param {string} tpcId {@link TraceablePeerConnection.id}\n * @private\n */\nStatistics.prototype._stopRemoteStats = function(tpcId) {\n    const rtpStats = this.rtpStatsMap.get(tpcId);\n\n    if (rtpStats) {\n        rtpStats.stop();\n        this.rtpStatsMap.delete(tpcId);\n    }\n};\n\n/**\n * Stops collecting RTP stats for given peerconnection\n * @param {TraceablePeerConnection} tpc\n */\nStatistics.prototype.stopRemoteStats = function(tpc) {\n    this._stopRemoteStats(tpc.id);\n};\n\n// CALSTATS METHODS\n\n/**\n * Initializes the callstats.io API.\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\n * instance for which CalStats will be started.\n * @param {string} remoteUserID\n */\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\n    if (!this.callStatsIntegrationEnabled) {\n        return;\n    } else if (this.callsStatsInstances.has(tpc.id)) {\n        logger.error('CallStats instance for ${tpc} exists already');\n\n        return;\n    }\n\n    logger.info(`Starting CallStats for ${tpc}...`);\n\n    const newInstance\n        = new CallStats(\n            tpc,\n            {\n                confID: this.options.confID,\n                remoteUserID\n            });\n\n    this.callsStatsInstances.set(tpc.id, newInstance);\n};\n\n/**\n * Obtains the list of *all* {@link CallStats} instances collected from every\n * valid {@link Statistics} instance.\n * @return {Set<CallStats>}\n * @private\n */\nStatistics._getAllCallStatsInstances = function() {\n    const csInstances = new Set();\n\n    for (const statistics of Statistics.instances) {\n        for (const cs of statistics.callsStatsInstances.values()) {\n            csInstances.add(cs);\n        }\n    }\n\n    return csInstances;\n};\n\n/**\n * Removes the callstats.io instances.\n */\nStatistics.prototype.stopCallStats = function(tpc) {\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\n\n    if (callStatsInstance) {\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\n        // able to submit the last log batch from jitsi-meet to CallStats. After\n        // recent changes we dispose the CallStats earlier\n        // (before Statistics.dispose), so we need to emit this event here to\n        // give this last chance for final log batch submission.\n        //\n        // Eventually there should be a separate module called \"log storage\"\n        // which should emit proper events when it's underlying\n        // CallStats instance is going away.\n        if (this.callsStatsInstances.size === 1) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        this.callsStatsInstances.delete(tpc.id);\n\n        // The fabric needs to be terminated when being stopped\n        callStatsInstance.sendTerminateEvent();\n    }\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nStatistics.prototype.isCallstatsEnabled = function() {\n    return this.callStatsIntegrationEnabled;\n};\n\n/**\n * Logs either resume or hold event for the given peer connection.\n * @param {TraceablePeerConnection} tpc the connection for which event will be\n * reported\n * @param {boolean} isResume true for resume or false for hold\n */\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendResumeOrHoldEvent(isResume);\n    }\n};\n\n/**\n * Notifies CallStats and analytics (if present) for ice connection failed\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendIceConnectionFailedEvent();\n    }\n};\n\n/**\n * Notifies CallStats for mute events\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n * @param {boolean} muted true for muted and false for not muted\n * @param {String} type \"audio\"/\"video\"\n */\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\n\n    CallStats.sendMuteEvent(muted, type, instance);\n};\n\n/**\n * Notifies CallStats for screen sharing events\n * @param start {boolean} true for starting screen sharing and\n * false for not stopping\n * @param {string|null} ssrc - optional ssrc value, used only when\n * starting screen sharing.\n */\nStatistics.prototype.sendScreenSharingEvent\n    = function(start, ssrc) {\n        for (const cs of this.callsStatsInstances.values()) {\n            cs.sendScreenSharingEvent(start, ssrc);\n        }\n    };\n\n/**\n * Notifies the statistics module that we are now the dominant speaker of the\n * conference.\n * @param {String} roomJid - The room jid where the speaker event occurred.\n */\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid) {\n    for (const cs of this.callsStatsInstances.values()) {\n        cs.sendDominantSpeakerEvent();\n    }\n\n    // xmpp send dominant speaker event\n    this.xmpp.sendDominantSpeakerEvent(roomJid);\n};\n\n/**\n * Notifies about active device.\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\n *      their data\n */\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\n        }\n    } else {\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Lets the underlying statistics module know where is given SSRC rendered by\n * providing renderer tag ID.\n * @param {TraceablePeerConnection} tpc the connection to which the stream\n * belongs to\n * @param {number} ssrc the SSRC of the stream\n * @param {boolean} isLocal\n * @param {string} userId\n * @param {string} usageLabel  meaningful usage label of this stream like\n *        'microphone', 'camera' or 'screen'.\n * @param {string} containerId the id of media 'audio' or 'video' tag which\n *        renders the stream.\n */\nStatistics.prototype.associateStreamWithVideoTag = function(\n        tpc,\n        ssrc,\n        isLocal,\n        userId,\n        usageLabel,\n        containerId) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            userId,\n            usageLabel,\n            containerId);\n    }\n};\n\n/* eslint-enable max-params */\n\n/**\n * Notifies CallStats that getUserMedia failed.\n *\n * @param {Error} e error to send\n */\nStatistics.sendGetUserMediaFailed = function(e) {\n    const error\n        = e instanceof JitsiTrackError\n            ? formatJitsiTrackErrorForCallStats(e) : e;\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendGetUserMediaFailed(error, cs);\n        }\n    } else {\n        CallStats.sendGetUserMediaFailed(error, null);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create offer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateOfferFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create answer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\n */\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateAnswerFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set local description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetLocalDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set remote description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetRemoteDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to add ICE candidate.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendAddIceCandidateFailed(e);\n    }\n};\n\n/**\n * Adds to CallStats an application log.\n *\n * @param {String} m a log message to send or an {Error} object to be reported\n */\nStatistics.sendLog = function(m) {\n    const globalSubSet = new Set();\n\n    // FIXME we don't want to duplicate logs over P2P instance, but\n    // here we should go over instances and call this method for each\n    // unique conference ID rather than selecting the first one.\n    // We don't have such use case though, so leaving as is for now.\n    for (const stats of Statistics.instances) {\n        if (stats.callStatsApplicationLogsDisabled) {\n            return;\n        }\n\n        if (stats.callsStatsInstances.size) {\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\n        }\n    }\n\n    if (globalSubSet.size) {\n        for (const csPerStats of globalSubSet) {\n            CallStats.sendApplicationLog(m, csPerStats);\n        }\n    } else {\n        CallStats.sendApplicationLog(m, null);\n    }\n};\n\n/**\n * Sends the given feedback through CallStats.\n *\n * @param overall an integer between 1 and 5 indicating the user's rating.\n * @param comment the comment from the user.\n * @returns {Promise} Resolves when callstats feedback has been submitted\n * successfully.\n */\nStatistics.prototype.sendFeedback = function(overall, comment) {\n    // Statistics.analytics.sendEvent is currently fire and forget, without\n    // confirmation of successful send.\n    Statistics.analytics.sendEvent(\n        FEEDBACK,\n        {\n            rating: overall,\n            comment\n        });\n\n    return CallStats.sendFeedback(this.options.confID, overall, comment);\n};\n\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\n\n/**\n * Reports global error to CallStats.\n *\n * @param {Error} error\n */\nStatistics.reportGlobalError = function(error) {\n    if (error instanceof JitsiTrackError && error.gum) {\n        Statistics.sendGetUserMediaFailed(error);\n    } else {\n        Statistics.sendLog(error);\n    }\n};\n\n/**\n * Sends event to analytics and logs a message to the logger/console. Console\n * messages might also be logged to callstats automatically.\n *\n * @param {string | Object} event the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event (if an event\n * name as opposed to an event object is provided).\n */\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\n    if (!event) {\n        logger.warn('No event or event name given.');\n\n        return;\n    }\n\n    let eventToLog;\n\n    // Also support an API with a single object as an event.\n    if (typeof event === 'object') {\n        eventToLog = event;\n    } else {\n        eventToLog = {\n            name: event,\n            properties\n        };\n    }\n\n    logger.log(JSON.stringify(eventToLog));\n\n    // We do this last, because it may modify the object which is passed.\n    this.analytics.sendEvent(event, properties);\n};\n\n/**\n * Sends event to analytics.\n *\n * @param {string | Object} eventName the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event\n */\nStatistics.sendAnalytics = function(eventName, properties = {}) {\n    this.analytics.sendEvent(eventName, properties);\n};\n","const RTCEvents = {\n    /**\n     * Indicates error while create answer call.\n     */\n    CREATE_ANSWER_FAILED: 'rtc.create_answer_failed',\n\n    /**\n     * Indicates error while create offer call.\n     */\n    CREATE_OFFER_FAILED: 'rtc.create_offer_failed',\n    DATA_CHANNEL_OPEN: 'rtc.data_channel_open',\n    ENDPOINT_CONN_STATUS_CHANGED: 'rtc.endpoint_conn_status_changed',\n    DOMINANT_SPEAKER_CHANGED: 'rtc.dominant_speaker_changed',\n    LASTN_ENDPOINT_CHANGED: 'rtc.lastn_endpoint_changed',\n\n    /**\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    PERMISSIONS_CHANGED: 'rtc.permissions_changed',\n\n    SENDER_VIDEO_CONSTRAINTS_CHANGED: 'rtc.sender_video_constraints_changed',\n\n    /**\n     * Event emitted when {@link RTC.setLastN} method is called to update with\n     * the new value set.\n     * The first argument is the value passed to {@link RTC.setLastN}.\n     */\n    LASTN_VALUE_CHANGED: 'rtc.lastn_value_changed',\n\n    /**\n     * Event emitted when ssrc for a local track is extracted and stored\n     * in {@link TraceablePeerConnection}.\n     * @param {JitsiLocalTrack} track which ssrc was updated\n     * @param {string} ssrc that was stored\n     */\n    LOCAL_TRACK_SSRC_UPDATED: 'rtc.local_track_ssrc_updated',\n\n    /**\n     * The max enabled resolution of a local video track was changed.\n     */\n    LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED: 'rtc.local_track_max_enabled_resolution_changed',\n\n    TRACK_ATTACHED: 'rtc.track_attached',\n\n    /**\n     * Event fired when we remote track is added to the conference.\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\n     **/\n    REMOTE_TRACK_ADDED: 'rtc.remote_track_added',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_MUTE: 'rtc.remote_track_mute',\n\n    /**\n     * Indicates that the remote track has been removed from the conference.\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\n     */\n    REMOTE_TRACK_REMOVED: 'rtc.remote_track_removed',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_UNMUTE: 'rtc.remote_track_unmute',\n\n    /**\n     * Indicates error while set local description.\n     */\n    SET_LOCAL_DESCRIPTION_FAILED: 'rtc.set_local_description_failed',\n\n    /**\n     * Indicates error while set remote description.\n     */\n    SET_REMOTE_DESCRIPTION_FAILED: 'rtc.set_remote_description_failed',\n    AUDIO_OUTPUT_DEVICE_CHANGED: 'rtc.audio_output_device_changed',\n    DEVICE_LIST_CHANGED: 'rtc.device_list_changed',\n\n    /**\n     * Indicates that the list with available devices will change.\n     */\n    DEVICE_LIST_WILL_CHANGE: 'rtc.device_list_will_change',\n    DEVICE_LIST_AVAILABLE: 'rtc.device_list_available',\n\n    /**\n     * Indicates that a message from another participant is received on\n     * data channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED: 'rtc.endpoint_message_received',\n\n    /**\n     * Indicates that the remote endpoint stats have been received on data channnel.\n     */\n    ENDPOINT_STATS_RECEIVED: 'rtc.endpoint_stats_received',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    LOCAL_UFRAG_CHANGED: 'rtc.local_ufrag_changed',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    REMOTE_UFRAG_CHANGED: 'rtc.remote_ufrag_changed'\n};\n\nmodule.exports = RTCEvents;\n","/**\n * This class exports constants and factory methods related to the analytics\n * API provided by AnalyticsAdapter. In order for entries in a database to be\n * somewhat easily traceable back to the code which produced them, events sent\n * through analytics should be defined here.\n *\n * Since the AnalyticsAdapter API can be used in different ways, for some events\n * it is more convenient to just define the event name as a constant. For other\n * events a factory function is easier.\n *\n * A general approach for adding a new event:\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\n * operational.\n * 2. Determine whether the event is related to other existing events, and\n * which fields are desired to be set: name, action, actionSubject, source.\n * 3. If the name is sufficient (the other fields are not important), use a\n * constant. Otherwise use a factory function.\n *\n * Note that the AnalyticsAdapter uses the events passed to its functions for\n * its own purposes, and might modify them. Because of this, factory functions\n * should create new objects.\n *\n */\n\n/**\n * The constant which identifies an event of type \"operational\".\n * @type {string}\n */\nexport const TYPE_OPERATIONAL = 'operational';\n\n/**\n * The constant which identifies an event of type \"page\".\n * @type {string}\n */\nexport const TYPE_PAGE = 'page';\n\n/**\n * The constant which identifies an event of type \"track\".\n * @type {string}\n */\nexport const TYPE_TRACK = 'track';\n\n/**\n * The constant which identifies an event of type \"ui\".\n * @type {string}\n */\nexport const TYPE_UI = 'ui';\n\n/**\n * The \"action\" value for Jingle events which indicates that the Jingle session\n * was restarted (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_RESTART = 'restart';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-accept\n * timed out (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * not arrived within a timeout (the value is specified in\n * the {@link JingleSessionPC}.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout';\n\n/**\n * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\n * the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TERMINATE = 'terminate';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_RECEIVED\n    = 'transport-replace.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * succeeded (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_SUCCESS\n    = 'transport-replace.success';\n\n/**\n * The \"action\" value for P2P events which indicates that P2P session initiate message has been rejected by the client\n * because the mandatory requirements were not met.\n * @type {string}\n */\nexport const ACTION_P2P_DECLINED = 'decline';\n\n/**\n * The \"action\" value for P2P events which indicates that a connection was\n * established (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_P2P_ESTABLISHED = 'established';\n\n/**\n * The \"action\" value for P2P events which indicates that something failed.\n * @type {string}\n */\nexport const ACTION_P2P_FAILED = 'failed';\n\n/**\n * The \"action\" value for P2P events which indicates that a switch to\n * jitsi-videobridge happened.\n * @type {string}\n */\nexport const ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb';\n\n/**\n * The name of an event which indicates an available device. We send one such\n * event per available device once when the available devices are first known,\n * and every time that they change\n * @type {string}\n *\n * Properties:\n *      audio_input_device_count: the number of audio input devices available at\n *          the time the event was sent.\n *      audio_output_device_count: the number of audio output devices available\n *          at the time the event was sent.\n *      video_input_device_count: the number of video input devices available at\n *          the time the event was sent.\n *      video_output_device_count: the number of video output devices available\n *          at the time the event was sent.\n *      device_id: an identifier of the device described in this event.\n *      device_group_id:\n *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\n *          'videooutput'.\n *      device_label: a string which describes the device.\n */\nexport const AVAILABLE_DEVICE = 'available.device';\n\n/**\n * This appears to be fired only in certain cases when the XMPP connection\n * disconnects (and it was intentional?). It is currently never observed to\n * fire in production.\n *\n * TODO: document\n *\n * Properties:\n *      message: an error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.disconnected';\n\n/**\n * Indicates that the user of the application provided feedback in terms of a\n * rating (an integer from 1 to 5) and an optional comment.\n * Properties:\n *      value: the user's rating (an integer from 1 to 5)\n *      comment: the user's comment\n */\nexport const FEEDBACK = 'feedback';\n\n/**\n * Indicates the duration of a particular phase of the ICE connectivity\n * establishment.\n *\n * Properties:\n *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\n *      value: the duration in milliseconds.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      initiator: whether the local Jingle peer is the initiator or responder\n *          in the Jingle session. XXX we probably actually care about the ICE\n *          role (controlling vs controlled), and we assume that this correlates\n *          with the Jingle initiator.\n */\nexport const ICE_DURATION = 'ice.duration';\n\n/**\n * Indicates the difference in milliseconds between the ICE establishment time\n * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\n * P2P connection took 10ms more than JVB connection to establish).\n *\n * Properties:\n *      value: the difference in establishment durations in milliseconds.\n *\n */\nexport const ICE_ESTABLISHMENT_DURATION_DIFF\n    = 'ice.establishment.duration.diff';\n\n/**\n * Indicates that the ICE state has changed.\n *\n * Properties:\n *      state: the ICE state which was entered (e.g. 'checking', 'connected',\n *          'completed', etc).\n *      value: the time in milliseconds (as reported by\n *          window.performance.now()) that the state change occurred.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      signalingState: The signaling state of the associated PeerConnection\n *      reconnect: whether the associated Jingle session is in the process of\n *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\n */\nexport const ICE_STATE_CHANGED = 'ice.state.changed';\n\n/**\n * Indicates that no bytes have been sent for the track.\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n */\nexport const NO_BYTES_SENT = 'track.no-bytes-sent';\n\n/**\n * Indicates that a track was unmuted (?).\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      trackType: the type of the track ('local' or 'remote').\n *      value: TODO: document\n */\nexport const TRACK_UNMUTED = 'track.unmuted';\n\n/**\n * Creates an operational event which indicates that we have received a\n * \"bridge down\" event from jicofo.\n */\nexport const createBridgeDownEvent = function() {\n    const bridgeDown = 'bridge.down';\n\n    return {\n        action: bridgeDown,\n        actionSubject: bridgeDown,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the XMPP connection failed\n * @param errorType TODO\n * @param errorMessage TODO\n * @param detail connection failed details.\n */\nexport const createConnectionFailedEvent\n    = function(errorType, errorMessage, details) {\n        return {\n            type: TYPE_OPERATIONAL,\n            action: 'connection.failed',\n            attributes: {\n                'error_type': errorType,\n                'error_message': errorMessage,\n                ...details\n            }\n        };\n    };\n\n/**\n * Creates a conference event.\n *\n * @param {string} action - The action of the event.\n * @param {Object} attributes - The attributes to be added to the event.\n * @returns {{type: string, source: string, action: string, attributes: object}}\n */\nexport function createConferenceEvent(action, attributes) {\n    return {\n        action,\n        attributes,\n        source: 'conference',\n        type: TYPE_OPERATIONAL\n    };\n}\n\n/**\n * Creates an operational event which indicates that a particular connection\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\n * state).\n *\n * @param stage the stage which was reached\n * @param attributes additional attributes for the event. This should be an\n * object with a \"value\" property indicating a timestamp in milliseconds\n * relative to the beginning of the document's lifetime.\n *\n */\nexport const createConnectionStageReachedEvent = function(stage, attributes) {\n    const action = 'connection.stage.reached';\n\n    return {\n        action,\n        actionSubject: stage,\n        attributes,\n        source: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an operational event for the end-to-end round trip time to a\n * specific remote participant.\n * @param participantId the ID of the remote participant.\n * @param region the region of the remote participant\n * @param rtt the rtt\n */\nexport const createE2eRttEvent = function(participantId, region, rtt) {\n    const attributes = {\n        'participant_id': participantId,\n        region,\n        rtt\n    };\n\n    return {\n        attributes,\n        name: 'e2e_rtt',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the focus has left the MUC.\n */\nexport const createFocusLeftEvent = function() {\n    const action = 'focus.left';\n\n    return {\n        action,\n        actionSubject: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event related to a getUserMedia call.\n *\n * @param action the type of the result that the event represents: 'error',\n * 'success', 'warning', etc.\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createGetUserMediaEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'get.user.media',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event related to remote participant connection status changes.\n *\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createParticipantConnectionStatusEvent = function(attributes = {}) {\n    const action = 'duration';\n\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'peer.conn.status',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event for a Jingle-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createJingleEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'jingle',\n        attributes\n    };\n};\n\n/**\n * Creates an event which indicates that a local track was not able to read\n * data from its source (a camera or a microphone).\n *\n * @param mediaType {String} the media type of the local track ('audio' or\n * 'video').\n */\nexport const createNoDataFromSourceEvent = function(mediaType, value) {\n    return {\n        attributes: {\n            'media_type': mediaType,\n            value\n        },\n        action: 'track.no.data.from.source',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event for a p2p-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createP2PEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'p2p',\n        attributes\n    };\n};\n\n/**\n * Indicates that we received a remote command to mute.\n */\nexport const createRemotelyMutedEvent = function(mediaType) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'remotely.muted',\n        mediaType\n    };\n};\n\n/**\n * Creates an event which contains RTP statistics such as RTT and packet loss.\n *\n * All average RTP stats are currently reported under 1 event name, but with\n * different properties that allows to distinguish between a P2P call, a\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\n *\n * The structure of the event is:\n *\n * {\n *      p2p: true,\n *      conferenceSize: 2,\n *      localCandidateType: \"relay\",\n *      remoteCandidateType: \"relay\",\n *      transportType: \"udp\",\n *\n *      // Average RTT of 200ms\n *      \"rtt.avg\": 200,\n *      \"rtt.samples\": \"[100, 200, 300]\",\n *\n *      // Average packet loss of 10%\n *      \"packet.loss.avg\": 10,\n *      \"packet.loss.samples\": '[5, 10, 15]'\n *\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\n *      // The e2e RTT through jvb is 15ms shorter:\n *      \"rtt.diff\": 15,\n *\n *      // End-to-end RTT through JVB is ms.\n *      \"end2end.rtt.avg\" = 100\n * }\n *\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\n * and not JSON arrays, as events' attributes can not be nested. The samples are\n * currently included for debug purposes only and can be removed anytime soon\n * from the structure.\n *\n * Also note that not all of values are present in each event, as values are\n * obtained and calculated as part of different process/event pipe. For example\n * {@link ConnectionAvgStats} instances are doing the reports for each\n * {@link TraceablePeerConnection} and work independently from the main stats\n * pipe.\n */\nexport const createRtpStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtp.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the round trip time (RTT) to a set of\n * regions.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createRttByRegionEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtt.by.region',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the local and remote ICE candidate types\n * for the transport that is currently selected.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createTransportStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'transport.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains information about the audio output problem (the user id of the affected participant,\n * the local audio levels and the remote audio levels that triggered the event).\n *\n * @param {string} userID - The user id of the affected participant.\n * @param {*} localAudioLevels - The local audio levels.\n * @param {*} remoteAudioLevels - The audio levels received from the participant.\n */\nexport function createAudioOutputProblemEvent(userID, localAudioLevels, remoteAudioLevels) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'audio.output.problem',\n        attributes: {\n            userID,\n            localAudioLevels,\n            remoteAudioLevels\n        }\n    };\n}\n\n/**\n * Creates an event which contains an information related to the bridge channel close event.\n *\n * @param {string} code - A code from {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * @param {string} reason - A string which describes the reason for closing the bridge channel.\n * @returns {{type: string, action: string, attributes: { code: string, reason: string }}}\n */\nexport const createBridgeChannelClosedEvent = function(code, reason) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'bridge-channel.error',\n        attributes: {\n            code,\n            reason\n        }\n    };\n};\n\n/**\n * Creates an event which indicates the Time To First Media (TTFM).\n * It is measured in milliseconds relative to the beginning of the document's\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\n * the following:\n * 1. The delay due to getUserMedia()\n * 2. The period between the MUC being joined and the reception of the Jingle\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\n * session until there are at least 2 participants in the room.\n *\n * @param attributes the attributes to add to the event. Currently used fields:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      muted: whether the track has ever been muted (?)\n *      value: the TTMF in milliseconds.\n */\nexport const createTtfmEvent = function(attributes) {\n    return createConnectionStageReachedEvent('ttfm', attributes);\n};\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport browser from '../browser';\nimport RandomUtil from '../util/RandomUtil';\n\nconst SDPUtil = {\n    filterSpecialChars(text) {\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\n        // \"\", etc.) \"contain\" special chars.\n        // eslint-disable-next-line no-useless-escape\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\n    },\n    iceparams(mediadesc, sessiondesc) {\n        let data = null;\n        let pwd, ufrag;\n\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\n                && (pwd\n                    = SDPUtil.findLine(\n                        mediadesc,\n                        'a=ice-pwd:',\n                        sessiondesc))) {\n            data = {\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\n                pwd: SDPUtil.parseICEPwd(pwd)\n            };\n        }\n\n        return data;\n    },\n    parseICEUfrag(line) {\n        return line.substring(12);\n    },\n    buildICEUfrag(frag) {\n        return `a=ice-ufrag:${frag}`;\n    },\n    parseICEPwd(line) {\n        return line.substring(10);\n    },\n    buildICEPwd(pwd) {\n        return `a=ice-pwd:${pwd}`;\n    },\n    parseMID(line) {\n        return line.substring(6);\n    },\n    parseMLine(line) {\n        const data = {};\n        const parts = line.substring(2).split(' ');\n\n        data.media = parts.shift();\n        data.port = parts.shift();\n        data.proto = parts.shift();\n        if (parts[parts.length - 1] === '') { // trailing whitespace\n            parts.pop();\n        }\n        data.fmt = parts;\n\n        return data;\n    },\n    buildMLine(mline) {\n        return (\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\n                mline.fmt.join(' ')}`);\n    },\n    parseRTPMap(line) {\n        const data = {};\n        let parts = line.substring(9).split(' ');\n\n        data.id = parts.shift();\n        parts = parts[0].split('/');\n        data.name = parts.shift();\n        data.clockrate = parts.shift();\n        data.channels = parts.length ? parts.shift() : '1';\n\n        return data;\n    },\n\n    /**\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\n     * @returns [SCTP port number, protocol, streams]\n     */\n    parseSCTPMap(line) {\n        const parts = line.substring(10).split(' ');\n        const sctpPort = parts[0];\n        const protocol = parts[1];\n\n        // Stream count is optional\n        const streamCount = parts.length > 2 ? parts[2] : null;\n\n\n        return [ sctpPort, protocol, streamCount ];// SCTP port\n    },\n    buildRTPMap(el) {\n        let line\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\n                el.getAttribute('clockrate')}`;\n\n        if (el.getAttribute('channels')\n            && el.getAttribute('channels') !== '1') {\n            line += `/${el.getAttribute('channels')}`;\n        }\n\n        return line;\n    },\n    parseCrypto(line) {\n        const data = {};\n        const parts = line.substring(9).split(' ');\n\n        data.tag = parts.shift();\n        data['crypto-suite'] = parts.shift();\n        data['key-params'] = parts.shift();\n        if (parts.length) {\n            data['session-params'] = parts.join(' ');\n        }\n\n        return data;\n    },\n    parseFingerprint(line) { // RFC 4572\n        const data = {};\n        const parts = line.substring(14).split(' ');\n\n        data.hash = parts.shift();\n        data.fingerprint = parts.shift();\n\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\n        return data;\n    },\n    parseFmtp(line) {\n        const data = [];\n        let parts = line.split(' ');\n\n        parts.shift();\n        parts = parts.join(' ').split(';');\n        for (let i = 0; i < parts.length; i++) {\n            let key = parts[i].split('=')[0];\n\n            while (key.length && key[0] === ' ') {\n                key = key.substring(1);\n            }\n            const value = parts[i].split('=')[1];\n\n            if (key && value) {\n                data.push({ name: key,\n                    value });\n            } else if (key) {\n                // rfc 4733 (DTMF) style stuff\n                data.push({ name: '',\n                    value: key });\n            }\n        }\n\n        return data;\n    },\n    parseICECandidate(line) {\n        const candidate = {};\n        const elems = line.split(' ');\n\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n        candidate.generation = 0; // default value, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.log(\n                    `parseICECandidate not translating \"${\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    buildICECandidate(cand) {\n        let line = [\n            `a=candidate:${cand.foundation}`,\n            cand.component,\n            cand.protocol,\n            cand.priority,\n            cand.ip,\n            cand.port,\n            'typ',\n            cand.type\n        ].join(' ');\n\n        line += ' ';\n        switch (cand.type) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.hasOwnAttribute('rel-addr')\n                    && cand.hasOwnAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand['rel-addr'];\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand['rel-port'];\n                line += ' ';\n            }\n            break;\n        }\n        if (cand.hasOwnAttribute('tcptype')) {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.tcptype;\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\n\n        return line;\n    },\n    parseSSRC(desc) {\n        // proprietary mapping of a=ssrc lines\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\n        // on google docs and parse according to that\n        const data = new Map();\n        const lines = desc.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\n                // FIXME: Use regex to smartly find the ssrc.\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\n\n                if (!data.get(ssrc)) {\n                    data.set(ssrc, []);\n                }\n\n                data.get(ssrc).push(lines[i]);\n            }\n        }\n\n        return data;\n    },\n    parseRTCPFB(line) {\n        const parts = line.substr(10).split(' ');\n        const data = {};\n\n        data.pt = parts.shift();\n        data.type = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    parseExtmap(line) {\n        const parts = line.substr(9).split(' ');\n        const data = {};\n\n        data.value = parts.shift();\n        if (data.value.indexOf('/') === -1) {\n            data.direction = 'both';\n        } else {\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\n            data.value = data.value.substr(0, data.value.indexOf('/'));\n        }\n        data.uri = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    findLine(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                return lines[i];\n            }\n        }\n        if (!sessionpart) {\n            return false;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                return lines[j];\n            }\n        }\n\n        return false;\n    },\n    findLines(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n        const needles = [];\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                needles.push(lines[i]);\n            }\n        }\n        if (needles.length || !sessionpart) {\n            return needles;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                needles.push(lines[j]);\n            }\n        }\n\n        return needles;\n    },\n    candidateToJingle(line) {\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\n        // generation 0\n        //      <candidate component=... foundation=... generation=... id=...\n        // ip=... network=... port=... priority=... protocol=... type=.../>\n        if (line.indexOf('candidate:') === 0) {\n            // eslint-disable-next-line no-param-reassign\n            line = `a=${line}`;\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\n            logger.log(\n                'parseCandidate called with a line that is not a candidate'\n                    + ' line');\n            logger.log(line);\n\n            return null;\n        }\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\n            // eslint-disable-next-line no-param-reassign\n            line = line.substring(0, line.length - 2);\n        }\n        const candidate = {};\n        const elems = line.split(' ');\n\n        if (elems[6] !== 'typ') {\n            logger.log('did not find typ in the right place');\n            logger.log(line);\n\n            return null;\n        }\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n\n        candidate.generation = '0'; // default, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.log(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    candidateFromJingle(cand) {\n        let line = 'a=candidate:';\n\n        line += cand.getAttribute('foundation');\n        line += ' ';\n        line += cand.getAttribute('component');\n        line += ' ';\n\n        let protocol = cand.getAttribute('protocol');\n\n        // use tcp candidates for FF\n\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\n            protocol = 'tcp';\n        }\n\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\n        line += ' ';\n        line += cand.getAttribute('priority');\n        line += ' ';\n        line += cand.getAttribute('ip');\n        line += ' ';\n        line += cand.getAttribute('port');\n        line += ' ';\n        line += 'typ';\n        line += ` ${cand.getAttribute('type')}`;\n        line += ' ';\n        switch (cand.getAttribute('type')) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.getAttribute('rel-addr')\n                    && cand.getAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand.getAttribute('rel-addr');\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand.getAttribute('rel-port');\n                line += ' ';\n            }\n            break;\n        }\n        if (protocol.toLowerCase() === 'tcp') {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.getAttribute('tcptype');\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.getAttribute('generation') || '0';\n\n        return `${line}\\r\\n`;\n    },\n\n    /**\n     * Parse the 'most' primary video ssrc from the given m line\n     * @param {object} mLine object as parsed from transform.parse\n     * @return {number} the primary video ssrc from the given m line\n     */\n    parsePrimaryVideoSsrc(videoMLine) {\n        const numSsrcs = videoMLine.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n            .length;\n        const numGroups\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\n\n        if (numSsrcs > 1 && numGroups === 0) {\n            // Ambiguous, can't figure out the primary\n            return;\n        }\n        let primarySsrc = null;\n\n        if (numSsrcs === 1) {\n            primarySsrc = videoMLine.ssrcs[0].id;\n        } else if (numSsrcs === 2) {\n            // Can figure it out if there's an FID group\n            const fidGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'FID');\n\n            if (fidGroup) {\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\n            }\n        } else if (numSsrcs >= 3) {\n            // Can figure it out if there's a sim group\n            const simGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'SIM');\n\n            if (simGroup) {\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\n            }\n        }\n\n        return primarySsrc;\n    },\n\n    /**\n     * Generate an ssrc\n     * @returns {number} an ssrc\n     */\n    generateSsrc() {\n        return RandomUtil.randomInt(1, 0xffffffff);\n    },\n\n    /**\n     * Get an attribute for the given ssrc with the given attributeName\n     *  from the given mline\n     * @param {object} mLine an mLine object as parsed from transform.parse\n     * @param {number} ssrc the ssrc for which an attribute is desired\n     * @param {string} attributeName the name of the desired attribute\n     * @returns {string} the value corresponding to the given ssrc\n     *  and attributeName\n     */\n    getSsrcAttribute(mLine, ssrc, attributeName) {\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\n            const ssrcLine = mLine.ssrcs[i];\n\n            if (ssrcLine.id === ssrc\n                && ssrcLine.attribute === attributeName) {\n                return ssrcLine.value;\n            }\n        }\n    },\n\n    /**\n     * Parses the ssrcs from the group sdp line and\n     *  returns them as a list of numbers\n     * @param {object} the ssrcGroup object as parsed from\n     *  sdp-transform\n     * @returns {list<number>} a list of the ssrcs in the group\n     *  parsed as numbers\n     */\n    parseGroupSsrcs(ssrcGroup) {\n        return ssrcGroup\n            .ssrcs\n            .split(' ')\n            .map(ssrcStr => parseInt(ssrcStr, 10));\n    },\n\n    /**\n     * Get the mline of the given type from the given sdp\n     * @param {object} sdp sdp as parsed from transform.parse\n     * @param {string} type the type of the desired mline (e.g. \"video\")\n     * @returns {object} a media object\n     */\n    getMedia(sdp, type) {\n        return sdp.media.find(m => m.type === type);\n    },\n\n    /**\n     * Extracts the ICE username fragment from an SDP string.\n     * @param {string} sdp the SDP in raw text format\n     */\n    getUfrag(sdp) {\n        const ufragLines\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\n\n        if (ufragLines.length > 0) {\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\n        }\n    },\n\n    /**\n     * Sets the given codecName as the preferred codec by moving it to the beginning\n     * of the payload types list (modifies the given mline in place). All instances\n     * of the codec are moved up.\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse\n     * @param {string} codecName the name of the preferred codec\n     */\n    preferCodec(mline, codecName) {\n        if (!mline || !codecName) {\n            return;\n        }\n\n        const matchingPayloadTypes = mline.rtp\n            .filter(rtp => rtp.codec && rtp.codec.toLowerCase() === codecName.toLowerCase())\n            .map(rtp => rtp.payload);\n\n        if (matchingPayloadTypes) {\n            // Call toString() on payloads to get around an issue within SDPTransform that sets\n            // payloads as a number, instead of a string, when there is only one payload.\n            const payloadTypes\n                = mline.payloads\n                .toString()\n                .split(' ')\n                .map(p => parseInt(p, 10));\n\n            for (const pt of matchingPayloadTypes.reverse()) {\n                const payloadIndex = payloadTypes.indexOf(pt);\n\n                payloadTypes.splice(payloadIndex, 1);\n                payloadTypes.unshift(pt);\n            }\n            mline.payloads = payloadTypes.join(' ');\n        }\n    },\n\n    /**\n     * Strips the given codec from the given mline. All related RTX payload\n     * types are also stripped. If the resulting mline would have no codecs,\n     * it's disabled.\n     *\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse.\n     * @param {string} codecName the name of the codec which will be stripped.\n     * @param {boolean} highProfile determines if only the high profile H264 codec needs to be\n     * stripped from the sdp when the passed codecName is H264.\n     */\n    stripCodec(mLine, codecName, highProfile = false) {\n        if (!mLine || !codecName) {\n            return;\n        }\n\n        const h264Pts = [];\n        let removePts = [];\n        const stripH264HighCodec = codecName.toLowerCase() === CodecMimeType.H264 && highProfile;\n\n        for (const rtp of mLine.rtp) {\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                if (stripH264HighCodec) {\n                    h264Pts.push(rtp.payload);\n                } else {\n                    removePts.push(rtp.payload);\n                }\n            }\n        }\n\n        // high profile H264 codecs have 64 as the first two bytes of the profile-level-id.\n        if (stripH264HighCodec) {\n            removePts = mLine.fmtp\n                .filter(item => h264Pts.indexOf(item.payload) > -1 && item.config.includes('profile-level-id=64'))\n                .map(item => item.payload);\n        }\n\n        if (removePts.length > 0) {\n            // We also need to remove the payload types that are related to RTX\n            // for the codecs we want to disable.\n            const rtxApts = removePts.map(item => `apt=${item}`);\n            const rtxPts = mLine.fmtp.filter(\n                item => rtxApts.indexOf(item.config) !== -1);\n\n            removePts.push(...rtxPts.map(item => item.payload));\n\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const allPts = mLine.payloads\n                .toString()\n                .split(' ')\n                .map(Number);\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\n\n            if (keepPts.length === 0) {\n                // There are no other codecs, disable the stream.\n                mLine.port = 0;\n                mLine.direction = 'inactive';\n                mLine.payloads = '*';\n            } else {\n                mLine.payloads = keepPts.join(' ');\n            }\n\n            mLine.rtp = mLine.rtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            mLine.fmtp = mLine.fmtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            if (mLine.rtcpFb) {\n                mLine.rtcpFb = mLine.rtcpFb.filter(\n                    item => keepPts.indexOf(item.payload) !== -1);\n            }\n        }\n    }\n};\n\nexport default SDPUtil;\n","/* global\n          __filename,\n          MediaStreamTrack,\n          RTCIceCandidate: true,\n          RTCPeerConnection,\n          RTCSessionDescription: true\n*/\n\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport clonedeep from 'lodash.clonedeep';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Resolutions from '../../service/RTC/Resolutions';\nimport VideoType from '../../service/RTC/VideoType';\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport SDPUtil from '../xmpp/SDPUtil';\n\nimport screenObtainer from './ScreenObtainer';\n\nconst logger = getLogger(__filename);\n\n// Require adapter only for certain browsers. This is being done for\n// react-native, which has its own shims, and while browsers are being migrated\n// over to use adapter's shims.\nif (browser.usesAdapter()) {\n    require('webrtc-adapter');\n}\n\nconst eventEmitter = new EventEmitter();\n\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\n\n/**\n * Default resolution to obtain for video tracks if no resolution is specified.\n * This default is used for old gum flow only, as new gum flow uses\n * {@link DEFAULT_CONSTRAINTS}.\n */\nconst OLD_GUM_DEFAULT_RESOLUTION = 720;\n\n/**\n * Default devices to obtain when no specific devices are specified. This\n * default is used for old gum flow only.\n */\nconst OLD_GUM_DEFAULT_DEVICES = [ 'audio', 'video' ];\n\n/**\n * Default MediaStreamConstraints to use for calls to getUserMedia.\n *\n * @private\n */\nconst DEFAULT_CONSTRAINTS = {\n    video: {\n        height: {\n            ideal: 720,\n            max: 720,\n            min: 180\n        },\n        width: {\n            ideal: 1280,\n            max: 1280,\n            min: 320\n        }\n    }\n};\n\n/**\n * The default frame rate for Screen Sharing.\n */\nexport const SS_DEFAULT_FRAME_RATE = 5;\n\n// Currently audio output device change is supported only in Chrome and\n// default output always has 'default' device ID\nlet audioOutputDeviceId = 'default'; // default device\n// whether user has explicitly set a device to use\nlet audioOutputChanged = false;\n\n// Disables all audio processing\nlet disableAP = false;\n\n// Disables Acoustic Echo Cancellation\nlet disableAEC = false;\n\n// Disables Noise Suppression\nlet disableNS = false;\n\n// Disables Automatic Gain Control\nlet disableAGC = false;\n\n// Disables Highpass Filter\nlet disableHPF = false;\n\n// Enables stereo.\nlet stereo = null;\n\nconst featureDetectionAudioEl = document.createElement('audio');\nconst isAudioOutputDeviceChangeAvailable\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\n\nlet availableDevices = [];\nlet availableDevicesPollTimer;\n\n/**\n * An empty function.\n */\nfunction emptyFuncton() {\n    // no-op\n}\n\n/**\n *\n * @param constraints\n * @param isNewStyleConstraintsSupported\n * @param resolution\n */\nfunction setResolutionConstraints(\n        constraints,\n        isNewStyleConstraintsSupported,\n        resolution) {\n    if (Resolutions[resolution]) {\n        if (isNewStyleConstraintsSupported) {\n            constraints.video.width = {\n                ideal: Resolutions[resolution].width\n            };\n            constraints.video.height = {\n                ideal: Resolutions[resolution].height\n            };\n        }\n\n        constraints.video.mandatory.minWidth = Resolutions[resolution].width;\n        constraints.video.mandatory.minHeight = Resolutions[resolution].height;\n    }\n\n    if (constraints.video.mandatory.minWidth) {\n        constraints.video.mandatory.maxWidth\n            = constraints.video.mandatory.minWidth;\n    }\n\n    if (constraints.video.mandatory.minHeight) {\n        constraints.video.mandatory.maxHeight\n            = constraints.video.mandatory.minHeight;\n    }\n}\n\n/**\n * @param {string[]} um required user media types\n *\n * @param {Object} [options={}] optional parameters\n * @param {string} options.resolution\n * @param {number} options.bandwidth\n * @param {number} options.fps\n * @param {string} options.desktopStream\n * @param {string} options.cameraDeviceId\n * @param {string} options.micDeviceId\n * @param {CameraFacingMode} options.facingMode\n * @param {bool} firefox_fake_device\n * @param {Object} options.frameRate - used only for dekstop sharing.\n * @param {Object} options.frameRate.min - Minimum fps\n * @param {Object} options.frameRate.max - Maximum fps\n * @param {bool}   options.screenShareAudio - Used by electron clients to\n * enable system audio screen sharing.\n */\nfunction getConstraints(um, options = {}) {\n    const constraints = {\n        audio: false,\n        video: false\n    };\n\n    // Don't mix new and old style settings for Chromium as this leads\n    // to TypeError in new Chromium versions. @see\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=614716\n    // This is a temporary solution, in future we will fully split old and\n    // new style constraints when new versions of Chromium and Firefox will\n    // have stable support of new constraints format. For more information\n    // @see https://github.com/jitsi/lib-jitsi-meet/pull/136\n    const isNewStyleConstraintsSupported\n        = browser.isFirefox()\n            || browser.isWebKitBased()\n            || browser.isReactNative();\n\n    if (um.indexOf('video') >= 0) {\n        // same behaviour as true\n        constraints.video = { mandatory: {},\n            optional: [] };\n\n        if (options.cameraDeviceId) {\n            if (isNewStyleConstraintsSupported) {\n                // New style of setting device id.\n                constraints.video.deviceId = options.cameraDeviceId;\n            }\n\n            // Old style.\n            constraints.video.mandatory.sourceId = options.cameraDeviceId;\n        } else {\n            // Prefer the front i.e. user-facing camera (to the back i.e.\n            // environment-facing camera, for example).\n            // TODO: Maybe use \"exact\" syntax if options.facingMode is defined,\n            // but this probably needs to be decided when updating other\n            // constraints, as we currently don't use \"exact\" syntax anywhere.\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            if (isNewStyleConstraintsSupported) {\n                constraints.video.facingMode = facingMode;\n            }\n            constraints.video.optional.push({\n                facingMode\n            });\n        }\n\n        if (options.minFps || options.maxFps || options.fps) {\n            // for some cameras it might be necessary to request 30fps\n            // so they choose 30fps mjpg over 10fps yuy2\n            if (options.minFps || options.fps) {\n                // Fall back to options.fps for backwards compatibility\n                options.minFps = options.minFps || options.fps;\n                constraints.video.mandatory.minFrameRate = options.minFps;\n            }\n            if (options.maxFps) {\n                constraints.video.mandatory.maxFrameRate = options.maxFps;\n            }\n        }\n\n        setResolutionConstraints(\n            constraints, isNewStyleConstraintsSupported, options.resolution);\n    }\n    if (um.indexOf('audio') >= 0) {\n        if (browser.isReactNative()) {\n            // The react-native-webrtc project that we're currently using\n            // expects the audio constraint to be a boolean.\n            constraints.audio = true;\n        } else if (browser.isFirefox()) {\n            if (options.micDeviceId) {\n                constraints.audio = {\n                    mandatory: {},\n                    deviceId: options.micDeviceId, // new style\n                    optional: [ {\n                        sourceId: options.micDeviceId // old style\n                    } ] };\n            } else {\n                constraints.audio = true;\n            }\n        } else {\n            // same behaviour as true\n            constraints.audio = { mandatory: {},\n                optional: [] };\n            if (options.micDeviceId) {\n                if (isNewStyleConstraintsSupported) {\n                    // New style of setting device id.\n                    constraints.audio.deviceId = options.micDeviceId;\n                }\n\n                // Old style.\n                constraints.audio.optional.push({\n                    sourceId: options.micDeviceId\n                });\n            }\n\n            // if it is good enough for hangouts...\n            constraints.audio.optional.push(\n                { echoCancellation: !disableAEC && !disableAP },\n                { googEchoCancellation: !disableAEC && !disableAP },\n                { googAutoGainControl: !disableAGC && !disableAP },\n                { googNoiseSuppression: !disableNS && !disableAP },\n                { googHighpassFilter: !disableHPF && !disableAP },\n                { googNoiseSuppression2: !disableNS && !disableAP },\n                { googEchoCancellation2: !disableAEC && !disableAP },\n                { googAutoGainControl2: !disableAGC && !disableAP }\n            );\n        }\n    }\n    if (um.indexOf('screen') >= 0) {\n        if (browser.isChrome()) {\n            constraints.video = {\n                mandatory: getSSConstraints({\n                    ...options,\n                    source: 'screen'\n                }),\n                optional: []\n            };\n\n        } else if (browser.isFirefox()) {\n            constraints.video = {\n                mozMediaSource: 'window',\n                mediaSource: 'window',\n                frameRate: options.frameRate || {\n                    min: SS_DEFAULT_FRAME_RATE,\n                    max: SS_DEFAULT_FRAME_RATE\n                }\n            };\n\n        } else {\n            const errmsg\n                = '\\'screen\\' WebRTC media source is supported only in Chrome'\n                    + ' and Firefox';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg);\n        }\n    }\n    if (um.indexOf('desktop') >= 0) {\n        constraints.video = {\n            mandatory: getSSConstraints({\n                ...options,\n                source: 'desktop'\n            }),\n            optional: []\n        };\n\n        // Audio screen sharing for electron only works for screen type devices.\n        // i.e. when the user shares the whole desktop.\n        if (browser.isElectron() && options.screenShareAudio\n            && (options.desktopStream.indexOf('screen') >= 0)) {\n\n            // Provide constraints as described by the electron desktop capturer\n            // documentation here:\n            // https://www.electronjs.org/docs/api/desktop-capturer\n            // Note. The documentation specifies that chromeMediaSourceId should not be present\n            // which, in the case a users has multiple monitors, leads to them being shared all\n            // at once. However we tested with chromeMediaSourceId present and it seems to be\n            // working properly and also takes care of the previously mentioned issue.\n            constraints.audio = { mandatory: {\n                chromeMediaSource: constraints.video.mandatory.chromeMediaSource\n            } };\n        }\n    }\n\n    if (options.bandwidth) {\n        if (!constraints.video) {\n            // same behaviour as true\n            constraints.video = { mandatory: {},\n                optional: [] };\n        }\n        constraints.video.optional.push({ bandwidth: options.bandwidth });\n    }\n\n    // we turn audio for both audio and video tracks, the fake audio & video\n    // seems to work only when enabled in one getUserMedia call, we cannot get\n    // fake audio separate by fake video this later can be a problem with some\n    // of the tests\n    if (browser.isFirefox() && options.firefox_fake_device) {\n        // seems to be fixed now, removing this experimental fix, as having\n        // multiple audio tracks brake the tests\n        // constraints.audio = true;\n        constraints.fake = true;\n    }\n\n    return constraints;\n}\n\n/**\n * Creates a constraints object to be passed into a call to getUserMedia.\n *\n * @param {Array} um - An array of user media types to get. The accepted\n * types are \"video\", \"audio\", and \"desktop.\"\n * @param {Object} options - Various values to be added to the constraints.\n * @param {string} options.cameraDeviceId - The device id for the video\n * capture device to get video from.\n * @param {Object} options.constraints - Default constraints object to use\n * as a base for the returned constraints.\n * @param {Object} options.desktopStream - The desktop source id from which\n * to capture a desktop sharing video.\n * @param {string} options.facingMode - Which direction the camera is\n * pointing to.\n * @param {string} options.micDeviceId - The device id for the audio capture\n * device to get audio from.\n * @param {Object} options.frameRate - used only for dekstop sharing.\n * @param {Object} options.frameRate.min - Minimum fps\n * @param {Object} options.frameRate.max - Maximum fps\n * @private\n * @returns {Object}\n */\nfunction newGetConstraints(um = [], options = {}) {\n    // Create a deep copy of the constraints to avoid any modification of\n    // the passed in constraints object.\n    const constraints = clonedeep(options.constraints || DEFAULT_CONSTRAINTS);\n\n    if (um.indexOf('video') >= 0) {\n        if (!constraints.video) {\n            constraints.video = {};\n        }\n\n        // Override the constraints on Safari because of the following webkit bug.\n        // https://bugs.webkit.org/show_bug.cgi?id=210932\n        // Camera doesn't start on older macOS versions if min/max constraints are specified.\n        // TODO: remove this hack when the bug fix is available on Mojave, Sierra and High Sierra.\n        if (browser.isWebKitBased()) {\n            if (constraints.video.height && constraints.video.height.ideal) {\n                constraints.video.height = { ideal: clonedeep(constraints.video.height.ideal) };\n            } else {\n                logger.warn('Ideal camera height missing, camera may not start properly');\n            }\n            if (constraints.video.width && constraints.video.width.ideal) {\n                constraints.video.width = { ideal: clonedeep(constraints.video.width.ideal) };\n            } else {\n                logger.warn('Ideal camera width missing, camera may not start properly');\n            }\n        }\n        if (options.cameraDeviceId) {\n            constraints.video.deviceId = options.cameraDeviceId;\n        } else {\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            constraints.video.facingMode = facingMode;\n        }\n    } else {\n        constraints.video = false;\n    }\n\n    if (um.indexOf('audio') >= 0) {\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\n            constraints.audio = {};\n        }\n\n        constraints.audio = {\n            autoGainControl: !disableAGC && !disableAP,\n            deviceId: options.micDeviceId,\n            echoCancellation: !disableAEC && !disableAP,\n            noiseSuppression: !disableNS && !disableAP\n        };\n\n        if (stereo) {\n            Object.assign(constraints.audio, { channelCount: 2 });\n        }\n    } else {\n        constraints.audio = false;\n    }\n\n    if (um.indexOf('desktop') >= 0) {\n        if (!constraints.video || typeof constraints.video === 'boolean') {\n            constraints.video = {};\n        }\n\n        constraints.video = {\n            mandatory: getSSConstraints({\n                ...options,\n                source: 'desktop'\n            })\n        };\n    }\n\n    return constraints;\n}\n\n/**\n * Generates GUM constraints for screen sharing.\n *\n * @param {Object} options - The options passed to\n * <tt>obtainAudioAndVideoPermissions</tt>.\n * @returns {Object} - GUM constraints.\n *\n * TODO: Currently only the new GUM flow and Chrome is using the method. We\n * should make it work for all use cases.\n */\nfunction getSSConstraints(options = {}) {\n    const {\n        desktopStream,\n        frameRate = {\n            min: SS_DEFAULT_FRAME_RATE,\n            max: SS_DEFAULT_FRAME_RATE\n        }\n    } = options;\n    const { max, min } = frameRate;\n\n    const constraints = {\n        chromeMediaSource: options.source,\n        maxWidth: window.screen.width,\n        maxHeight: window.screen.height\n    };\n\n    if (typeof min === 'number') {\n        constraints.minFrameRate = min;\n    }\n\n    if (typeof max === 'number') {\n        constraints.maxFrameRate = max;\n    }\n\n    if (typeof desktopStream !== 'undefined') {\n        constraints.chromeMediaSourceId = desktopStream;\n    }\n\n    return constraints;\n}\n\n/**\n * Updates the granted permissions based on the options we requested and the\n * streams we received.\n * @param um the options we requested to getUserMedia.\n * @param stream the stream we received from calling getUserMedia.\n */\nfunction updateGrantedPermissions(um, stream) {\n    const audioTracksReceived\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\n    const videoTracksReceived\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\n    const grantedPermissions = {};\n\n    if (um.indexOf('video') !== -1) {\n        grantedPermissions.video = videoTracksReceived;\n    }\n    if (um.indexOf('audio') !== -1) {\n        grantedPermissions.audio = audioTracksReceived;\n    }\n\n    eventEmitter.emit(RTCEvents.PERMISSIONS_CHANGED, grantedPermissions);\n}\n\n/**\n * Checks if new list of available media devices differs from previous one.\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\n * @returns {boolean} - true if list is different, false otherwise.\n */\nfunction compareAvailableMediaDevices(newDevices) {\n    if (newDevices.length !== availableDevices.length) {\n        return true;\n    }\n\n    /* eslint-disable newline-per-chained-call */\n\n    return (\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\n            !== availableDevices\n                .map(mediaDeviceInfoToJSON).sort().join(''));\n\n    /* eslint-enable newline-per-chained-call */\n\n    /**\n     *\n     * @param info\n     */\n    function mediaDeviceInfoToJSON(info) {\n        return JSON.stringify({\n            kind: info.kind,\n            deviceId: info.deviceId,\n            groupId: info.groupId,\n            label: info.label,\n            facing: info.facing\n        });\n    }\n}\n\n/**\n * Sends analytics event with the passed device list.\n *\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\n * available devices.\n * @returns {void}\n */\nfunction sendDeviceListToAnalytics(deviceList) {\n    const audioInputDeviceCount\n        = deviceList.filter(d => d.kind === 'audioinput').length;\n    const audioOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\n    const videoInputDeviceCount\n        = deviceList.filter(d => d.kind === 'videoinput').length;\n    const videoOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'videooutput').length;\n\n    deviceList.forEach(device => {\n        const attributes = {\n            'audio_input_device_count': audioInputDeviceCount,\n            'audio_output_device_count': audioOutputDeviceCount,\n            'video_input_device_count': videoInputDeviceCount,\n            'video_output_device_count': videoOutputDeviceCount,\n            'device_id': device.deviceId,\n            'device_group_id': device.groupId,\n            'device_kind': device.kind,\n            'device_label': device.label\n        };\n\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\n    });\n}\n\n\n/**\n * Update known devices.\n *\n * @param {Array<Object>} pds - The new devices.\n * @returns {void}\n *\n * NOTE: Use this function as a shared callback to handle both the devicechange event  and the polling implementations.\n * This prevents duplication and works around a chrome bug (verified to occur on 68) where devicechange fires twice in\n * a row, which can cause async post devicechange processing to collide.\n */\nfunction updateKnownDevices(pds) {\n    if (compareAvailableMediaDevices(pds)) {\n        onMediaDevicesListChanged(pds);\n    }\n}\n\n/**\n * Event handler for the 'devicechange' event.\n *\n * @param {MediaDeviceInfo[]} devices - list of media devices.\n * @emits RTCEvents.DEVICE_LIST_CHANGED\n */\nfunction onMediaDevicesListChanged(devicesReceived) {\n    availableDevices = devicesReceived.slice(0);\n    logger.info('list of media devices has changed:', availableDevices);\n\n    sendDeviceListToAnalytics(availableDevices);\n\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, availableDevices);\n\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, availableDevices);\n}\n\n/**\n * Handles the newly created Media Streams.\n * @param streams the new Media Streams\n * @param resolution the resolution of the video streams\n * @returns {*[]} object that describes the new streams\n */\nfunction handleLocalStream(streams, resolution) {\n    let audioStream, desktopStream, videoStream;\n    const res = [];\n\n    // XXX The function obtainAudioAndVideoPermissions has examined the type of\n    // the browser, its capabilities, etc. and has taken the decision whether to\n    // invoke getUserMedia per device (e.g. Firefox) or once for both audio and\n    // video (e.g. Chrome). In order to not duplicate the logic here, examine\n    // the specified streams and figure out what we've received based on\n    // obtainAudioAndVideoPermissions' decision.\n    if (streams) {\n        // As mentioned above, certian types of browser (e.g. Chrome) support\n        // (with a result which meets our requirements expressed bellow) calling\n        // getUserMedia once for both audio and video.\n        const audioVideo = streams.audioVideo;\n\n        if (audioVideo) {\n            const audioTracks = audioVideo.getAudioTracks();\n\n            if (audioTracks.length) {\n                audioStream = new MediaStream();\n                for (let i = 0; i < audioTracks.length; i++) {\n                    audioStream.addTrack(audioTracks[i]);\n                }\n            }\n\n            const videoTracks = audioVideo.getVideoTracks();\n\n            if (videoTracks.length) {\n                videoStream = new MediaStream();\n                for (let j = 0; j < videoTracks.length; j++) {\n                    videoStream.addTrack(videoTracks[j]);\n                }\n            }\n\n            audioVideo.release && audioVideo.release(false);\n        } else {\n            // On other types of browser (e.g. Firefox) we choose (namely,\n            // obtainAudioAndVideoPermissions) to call getUserMedia per device\n            // (type).\n            audioStream = streams.audio;\n            videoStream = streams.video;\n        }\n\n        desktopStream = streams.desktop;\n    }\n\n    if (desktopStream) {\n        const { stream, sourceId, sourceType } = desktopStream;\n\n        res.push({\n            stream,\n            sourceId,\n            sourceType,\n            track: stream.getVideoTracks()[0],\n            mediaType: MediaType.VIDEO,\n            videoType: VideoType.DESKTOP\n        });\n    }\n    if (audioStream) {\n        res.push({\n            stream: audioStream,\n            track: audioStream.getAudioTracks()[0],\n            mediaType: MediaType.AUDIO,\n            videoType: null\n        });\n    }\n    if (videoStream) {\n        res.push({\n            stream: videoStream,\n            track: videoStream.getVideoTracks()[0],\n            mediaType: MediaType.VIDEO,\n            videoType: VideoType.CAMERA,\n            resolution\n        });\n    }\n\n    return res;\n}\n\n/**\n *\n */\nclass RTCUtils extends Listenable {\n    /**\n     *\n     */\n    constructor() {\n        super(eventEmitter);\n    }\n\n    /**\n     * Depending on the browser, sets difference instance methods for\n     * interacting with user media and adds methods to native WebRTC-related\n     * objects. Also creates an instance variable for peer connection\n     * constraints.\n     *\n     * @param {Object} options\n     * @returns {void}\n     */\n    init(options = {}) {\n        if (typeof options.disableAEC === 'boolean') {\n            disableAEC = options.disableAEC;\n            logger.info(`Disable AEC: ${disableAEC}`);\n        }\n        if (typeof options.disableNS === 'boolean') {\n            disableNS = options.disableNS;\n            logger.info(`Disable NS: ${disableNS}`);\n        }\n        if (typeof options.disableAP === 'boolean') {\n            disableAP = options.disableAP;\n            logger.info(`Disable AP: ${disableAP}`);\n        }\n        if (typeof options.disableAGC === 'boolean') {\n            disableAGC = options.disableAGC;\n            logger.info(`Disable AGC: ${disableAGC}`);\n        }\n        if (typeof options.disableHPF === 'boolean') {\n            disableHPF = options.disableHPF;\n            logger.info(`Disable HPF: ${disableHPF}`);\n        }\n        if (typeof options.audioQuality?.stereo === 'boolean') {\n            stereo = options.audioQuality.stereo;\n            logger.info(`Stereo: ${stereo}`);\n        }\n\n        window.clearInterval(availableDevicesPollTimer);\n        availableDevicesPollTimer = undefined;\n\n        if (browser.usesNewGumFlow()) {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    if (element) {\n                        element.srcObject = stream;\n                    }\n                });\n\n            this.getStreamID = ({ id }) => id;\n            this.getTrackID = ({ id }) => id;\n        } else if (browser.isReactNative()) {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream = undefined; // Unused on React Native.\n\n            this.getStreamID = function({ id }) {\n                // The react-native-webrtc implementation that we use at the\n                // time of this writing returns a number for the id of\n                // MediaStream. Let's just say that a number contains no special\n                // characters.\n                return (\n                    typeof id === 'number'\n                        ? id\n                        : SDPUtil.filterSpecialChars(id));\n            };\n            this.getTrackID = ({ id }) => id;\n        } else {\n            const message = 'Endpoint does not appear to be WebRTC-capable';\n\n            logger.error(message);\n            throw new Error(message);\n        }\n\n        this.pcConstraints = browser.isChromiumBased() || browser.isReactNative()\n            ? { optional: [\n                { googScreencastMinBitrate: 100 },\n                { googCpuOveruseDetection: true }\n            ] }\n            : {};\n\n        screenObtainer.init(\n            options,\n            this.getUserMediaWithConstraints.bind(this));\n\n        if (this.isDeviceListAvailable()) {\n            this.enumerateDevices(ds => {\n                availableDevices = ds.slice(0);\n\n                logger.debug('Available devices: ', availableDevices);\n                sendDeviceListToAnalytics(availableDevices);\n\n                eventEmitter.emit(\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\n                    availableDevices);\n\n                if (browser.supportsDeviceChangeEvent()) {\n                    navigator.mediaDevices.addEventListener(\n                        'devicechange',\n                        () => this.enumerateDevices(emptyFuncton));\n                } else {\n                    // Periodically poll enumerateDevices() method to check if\n                    // list of media devices has changed.\n                    availableDevicesPollTimer = window.setInterval(\n                        () => this.enumerateDevices(emptyFuncton),\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\n                }\n            });\n        }\n    }\n\n    /**\n     *\n     * @param {Function} callback\n     */\n    enumerateDevices(callback) {\n        navigator.mediaDevices.enumerateDevices()\n            .then(devices => {\n                updateKnownDevices(devices);\n                callback(devices);\n            })\n            .catch(error => {\n                logger.warn(`Failed to  enumerate devices. ${error}`);\n                updateKnownDevices([]);\n                callback([]);\n            });\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n    * @param {string[]} um required user media types\n    * @param {Object} [options] optional parameters\n    * @param {string} options.resolution\n    * @param {number} options.bandwidth\n    * @param {number} options.fps\n    * @param {string} options.desktopStream\n    * @param {string} options.cameraDeviceId\n    * @param {string} options.micDeviceId\n    * @param {Object} options.frameRate - used only for dekstop sharing.\n    * @param {Object} options.frameRate.min - Minimum fps\n    * @param {Object} options.frameRate.max - Maximum fps\n    * @param {bool}   options.screenShareAudio - Used by electron clients to\n    * enable system audio screen sharing.\n    * @param {number} options.timeout - The timeout in ms for GUM.\n    * @returns {Promise} Returns a media stream on success or a JitsiTrackError\n    * on failure.\n    **/\n    getUserMediaWithConstraints(um, options = {}) {\n        const {\n            timeout,\n            ...otherOptions\n        } = options;\n        const constraints = getConstraints(um, otherOptions);\n\n        logger.info('Get media constraints', JSON.stringify(constraints));\n\n        return this._getUserMedia(um, constraints, timeout);\n    }\n\n    /**\n     * Acquires a media stream via getUserMedia that\n     * matches the given constraints\n     *\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\n     * @param {Object} constraints - Stream specifications to use.\n     * @param {number} timeout - The timeout in ms for GUM.\n     * @returns {Promise}\n     */\n    _getUserMedia(umDevices, constraints = {}, timeout = 0) {\n        return new Promise((resolve, reject) => {\n            let gumTimeout, timeoutExpired = false;\n\n            if (typeof timeout === 'number' && !isNaN(timeout) && timeout > 0) {\n                gumTimeout = setTimeout(() => {\n                    timeoutExpired = true;\n                    gumTimeout = undefined;\n                    reject(new JitsiTrackError(JitsiTrackErrors.TIMEOUT));\n                }, timeout);\n            }\n\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(umDevices, stream);\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        resolve(stream);\n                    }\n                })\n                .catch(error => {\n                    logger.warn(`Failed to get access to local media. ${error} ${JSON.stringify(constraints)}`);\n                    const jitsiError = new JitsiTrackError(error, constraints, umDevices);\n\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        reject(error);\n                    }\n\n                    if (jitsiError.name === JitsiTrackErrors.PERMISSION_DENIED) {\n                        updateGrantedPermissions(umDevices, undefined);\n                    }\n\n                    // else {\n                    // Probably the error is not caused by the lack of permissions and we don't need to update them.\n                    // }\n                });\n        });\n    }\n\n    /**\n     * Acquire a display stream via the screenObtainer. This requires extra\n     * logic compared to use screenObtainer versus normal device capture logic\n     * in RTCUtils#_getUserMedia.\n     *\n     * @param {Object} options\n     * @param {string[]} options.desktopSharingSources\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @returns {Promise} A promise which will be resolved with an object which\n     * contains the acquired display stream. If desktop sharing is not supported\n     * then a rejected promise will be returned.\n     */\n    _newGetDesktopMedia(options) {\n        if (!screenObtainer.isSupported()) {\n            return Promise.reject(new Error('Desktop sharing is not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            screenObtainer.obtainStream(\n                this._parseDesktopSharingOptions(options),\n                stream => {\n                    resolve(stream);\n                },\n                error => {\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {Object} [options] optional parameters\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    obtainAudioAndVideoPermissions(options = {}) {\n        options.devices = options.devices || [ ...OLD_GUM_DEFAULT_DEVICES ];\n        options.resolution = options.resolution || OLD_GUM_DEFAULT_RESOLUTION;\n\n        const requestingDesktop = options.devices.includes('desktop');\n\n        if (requestingDesktop && !screenObtainer.isSupported()) {\n            return Promise.reject(\n                new Error('Desktop sharing is not supported!'));\n        }\n\n        return this._getAudioAndVideoStreams(options).then(streams =>\n            handleLocalStream(streams, options.resolution));\n    }\n\n    /**\n     * Performs one call to getUserMedia for audio and/or video and another call\n     * for desktop.\n     *\n     * @param {Object} options - An object describing how the gUM request should\n     * be executed. See {@link obtainAudioAndVideoPermissions} for full options.\n     * @returns {*} Promise object that will receive the new JitsiTracks on\n     * success or a JitsiTrackError on failure.\n     */\n    _getAudioAndVideoStreams(options) {\n        const requestingDesktop = options.devices.includes('desktop');\n\n        options.devices = options.devices.filter(device =>\n            device !== 'desktop');\n\n        const gumPromise = options.devices.length\n            ? this.getUserMediaWithConstraints(options.devices, options)\n            : Promise.resolve(null);\n\n        return gumPromise\n            .then(avStream => {\n                // If any requested devices are missing, call gum again in\n                // an attempt to obtain the actual error. For example, the\n                // requested video device is missing or permission was\n                // denied.\n                const missingTracks\n                    = this._getMissingTracks(options.devices, avStream);\n\n                if (missingTracks.length) {\n                    this.stopMediaStream(avStream);\n\n                    return this.getUserMediaWithConstraints(\n                        missingTracks, options)\n\n                        // GUM has already failed earlier and this success\n                        // handling should not be reached.\n                        .then(() => Promise.reject(new JitsiTrackError(\n                            { name: 'UnknownError' },\n                            getConstraints(options.devices, options),\n                            missingTracks)));\n                }\n\n                return avStream;\n            })\n            .then(audioVideo => {\n                if (!requestingDesktop) {\n                    return { audioVideo };\n                }\n\n                if (options.desktopSharingSourceDevice) {\n                    this.stopMediaStream(audioVideo);\n\n                    throw new Error('Using a camera as screenshare source is'\n                        + 'not supported on this browser.');\n                }\n\n                return new Promise((resolve, reject) => {\n                    screenObtainer.obtainStream(\n                        this._parseDesktopSharingOptions(options),\n                        desktop => resolve({\n                            audioVideo,\n                            desktop\n                        }),\n                        error => {\n                            if (audioVideo) {\n                                this.stopMediaStream(audioVideo);\n                            }\n                            reject(error);\n                        });\n                });\n            });\n    }\n\n    /**\n     * Private utility for determining if the passed in MediaStream contains\n     * tracks of the type(s) specified in the requested devices.\n     *\n     * @param {string[]} requestedDevices - The track types that are expected to\n     * be includes in the stream.\n     * @param {MediaStream} stream - The MediaStream to check if it has the\n     * expected track types.\n     * @returns {string[]} An array of string with the missing track types. The\n     * array will be empty if all requestedDevices are found in the stream.\n     */\n    _getMissingTracks(requestedDevices = [], stream) {\n        const missingDevices = [];\n\n        const audioDeviceRequested = requestedDevices.includes('audio');\n        const audioTracksReceived\n            = stream && stream.getAudioTracks().length > 0;\n\n        if (audioDeviceRequested && !audioTracksReceived) {\n            missingDevices.push('audio');\n        }\n\n        const videoDeviceRequested = requestedDevices.includes('video');\n        const videoTracksReceived\n            = stream && stream.getVideoTracks().length > 0;\n\n        if (videoDeviceRequested && !videoTracksReceived) {\n            missingDevices.push('video');\n        }\n\n        return missingDevices;\n    }\n\n    /**\n     * Returns an object formatted for specifying desktop sharing parameters.\n     *\n     * @param {Object} options - Takes in the same options object as\n     * {@link obtainAudioAndVideoPermissions}.\n     * @returns {Object}\n     */\n    _parseDesktopSharingOptions(options) {\n        return {\n            desktopSharingSources: options.desktopSharingSources,\n            gumOptions: {\n                frameRate: options.desktopSharingFrameRate\n            }\n        };\n    }\n\n    /**\n     * Gets streams from specified device types. This function intentionally\n     * ignores errors for upstream to catch and handle instead.\n     *\n     * @param {Object} options - A hash describing what devices to get and\n     * relevant constraints.\n     * @param {string[]} options.devices - The types of media to capture. Valid\n     * values are \"desktop\", \"audio\", and \"video\".\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @param {String} options.desktopSharingSourceDevice - The device id or\n     * label for a video input source that should be used for screensharing.\n     * @returns {Promise} The promise, when successful, will return an array of\n     * meta data for the requested device type, which includes the stream and\n     * track. If an error occurs, it will be deferred to the caller for\n     * handling.\n     */\n    newObtainAudioAndVideoPermissions(options) {\n        logger.info('Using the new gUM flow');\n\n        const {\n            timeout,\n            ...otherOptions\n        } = options;\n\n        const mediaStreamsMetaData = [];\n\n        // Declare private functions to be used in the promise chain below.\n        // These functions are declared in the scope of this function because\n        // they are not being used anywhere else, so only this function needs to\n        // know about them.\n\n        /**\n         * Executes a request for desktop media if specified in options.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestDesktopDevice = function() {\n            const umDevices = otherOptions.devices || [];\n            const isDesktopDeviceRequested\n                = umDevices.indexOf('desktop') !== -1;\n\n            if (!isDesktopDeviceRequested) {\n                return Promise.resolve();\n            }\n\n            const {\n                desktopSharingSourceDevice,\n                desktopSharingSources,\n                desktopSharingFrameRate\n            } = otherOptions;\n\n            // Attempt to use a video input device as a screenshare source if\n            // the option is defined.\n            if (desktopSharingSourceDevice) {\n                const matchingDevice\n                    = availableDevices && availableDevices.find(device =>\n                        device.kind === 'videoinput'\n                            && (device.deviceId === desktopSharingSourceDevice\n                            || device.label === desktopSharingSourceDevice));\n\n                if (!matchingDevice) {\n                    return Promise.reject(new JitsiTrackError(\n                        { name: 'ConstraintNotSatisfiedError' },\n                        {},\n                        [ desktopSharingSourceDevice ]\n                    ));\n                }\n\n                const requestedDevices = [ 'video' ];\n\n                // Leverage the helper used by {@link _newGetDesktopMedia} to\n                // get constraints for the desktop stream.\n                const { gumOptions } = this._parseDesktopSharingOptions(otherOptions);\n\n                const constraints = {\n                    video: {\n                        ...gumOptions,\n                        deviceId: matchingDevice.deviceId\n                    }\n                };\n\n                return this._getUserMedia(requestedDevices, constraints, timeout)\n                    .then(stream => {\n                        return {\n                            sourceType: 'device',\n                            stream\n                        };\n                    });\n            }\n\n            return this._newGetDesktopMedia({\n                desktopSharingSources,\n                desktopSharingFrameRate\n            });\n        }.bind(this);\n\n        /**\n         * Creates a meta data object about the passed in desktopStream and\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\n         * returned later.\n         *\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\n         * capture.\n         * @returns {void}\n         */\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\n            if (!desktopStream) {\n                return;\n            }\n\n            const { stream, sourceId, sourceType } = desktopStream;\n\n            const desktopAudioTracks = stream.getAudioTracks();\n\n            if (desktopAudioTracks.length) {\n                const desktopAudioStream = new MediaStream(desktopAudioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopAudioStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopAudioStream.getAudioTracks()[0]\n                });\n            }\n\n            const desktopVideoTracks = stream.getVideoTracks();\n\n            if (desktopVideoTracks.length) {\n                const desktopVideoStream = new MediaStream(desktopVideoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopVideoStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopVideoStream.getVideoTracks()[0],\n                    videoType: VideoType.DESKTOP\n                });\n            }\n        };\n\n        /**\n         * Executes a request for audio and/or video, as specified in options.\n         * By default both audio and video will be captured if options.devices\n         * is not defined.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestCaptureDevices = function() {\n            const umDevices = otherOptions.devices || [ 'audio', 'video' ];\n            const requestedCaptureDevices = umDevices.filter(device => device === 'audio' || device === 'video');\n\n            if (!requestedCaptureDevices.length) {\n                return Promise.resolve();\n            }\n\n            const constraints = newGetConstraints(\n                requestedCaptureDevices, otherOptions);\n\n            logger.info('Got media constraints: ', JSON.stringify(constraints));\n\n            return this._getUserMedia(requestedCaptureDevices, constraints, timeout);\n        }.bind(this);\n\n        /**\n         * Splits the passed in media stream into separate audio and video\n         * streams and creates meta data objects for each and pushes them to the\n         * internal array mediaStreamsMetaData to be returned later.\n         *\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\n         * video track.\n         * @returns {void}\n         */\n        const maybeCreateAndAddAVTracks = function(avStream) {\n            if (!avStream) {\n                return;\n            }\n\n            const audioTracks = avStream.getAudioTracks();\n\n            if (audioTracks.length) {\n                const audioStream = new MediaStream(audioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: audioStream,\n                    track: audioStream.getAudioTracks()[0],\n                    effects: otherOptions.effects\n                });\n            }\n\n            const videoTracks = avStream.getVideoTracks();\n\n            if (videoTracks.length) {\n                const videoStream = new MediaStream(videoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: videoStream,\n                    track: videoStream.getVideoTracks()[0],\n                    videoType: VideoType.CAMERA,\n                    effects: otherOptions.effects\n                });\n            }\n        };\n\n        return maybeRequestDesktopDevice()\n            .then(maybeCreateAndAddDesktopTrack)\n            .then(maybeRequestCaptureDevices)\n            .then(maybeCreateAndAddAVTracks)\n            .then(() => mediaStreamsMetaData)\n            .catch(error => {\n                mediaStreamsMetaData.forEach(({ stream }) => {\n                    this.stopMediaStream(stream);\n                });\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Checks whether it is possible to enumerate available cameras/microphones.\n     *\n     * @returns {boolean} {@code true} if the device listing is available;\n     * {@code false}, otherwise.\n     */\n    isDeviceListAvailable() {\n        return Boolean(\n            navigator.mediaDevices\n                && navigator.mediaDevices.enumerateDevices);\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @params {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return deviceType === 'output' || deviceType === 'audiooutput'\n            ? isAudioOutputDeviceChangeAvailable\n            : true;\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param mediaStream MediaStream object to stop.\n     */\n    stopMediaStream(mediaStream) {\n        if (!mediaStream) {\n            return;\n        }\n\n        mediaStream.getTracks().forEach(track => {\n            if (track.stop) {\n                track.stop();\n            }\n        });\n\n        // leave stop for implementation still using it\n        if (mediaStream.stop) {\n            mediaStream.stop();\n        }\n\n        // The MediaStream implementation of the react-native-webrtc project has\n        // an explicit release method that is to be invoked in order to release\n        // used resources such as memory.\n        if (mediaStream.release) {\n            mediaStream.release();\n        }\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return screenObtainer.isSupported();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\n     *      device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        if (!this.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        return featureDetectionAudioEl.setSinkId(deviceId)\n            .then(() => {\n                audioOutputDeviceId = deviceId;\n                audioOutputChanged = true;\n\n                logger.log(`Audio output device set to ${deviceId}`);\n\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                    deviceId);\n            });\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return audioOutputDeviceId;\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {Array} list of available media devices.\n     */\n    getCurrentlyAvailableMediaDevices() {\n        return availableDevices;\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    arePermissionsGrantedForAvailableDevices() {\n        return availableDevices.some(device => Boolean(device.label));\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    getEventDataForActiveDevice(device) {\n        const deviceList = [];\n        const deviceData = {\n            'deviceId': device.deviceId,\n            'kind': device.kind,\n            'label': device.label,\n            'groupId': device.groupId\n        };\n\n        deviceList.push(deviceData);\n\n        return { deviceList };\n    }\n\n    /**\n     * Configures the given PeerConnection constraints to either enable or\n     * disable (according to the value of the 'enable' parameter) the\n     * 'googSuspendBelowMinBitrate' option.\n     * @param constraints the constraints on which to operate.\n     * @param enable {boolean} whether to enable or disable the suspend video\n     * option.\n     */\n    setSuspendVideo(constraints, enable) {\n        if (!constraints.optional) {\n            constraints.optional = [];\n        }\n\n        // Get rid of all \"googSuspendBelowMinBitrate\" constraints (we assume\n        // that the elements of constraints.optional contain a single property).\n        constraints.optional\n            = constraints.optional.filter(\n                c => !c.hasOwnProperty('googSuspendBelowMinBitrate'));\n\n        if (enable) {\n            constraints.optional.push({ googSuspendBelowMinBitrate: 'true' });\n        }\n    }\n}\n\nconst rtcUtils = new RTCUtils();\n\n/**\n * Wraps original attachMediaStream function to set current audio output device\n * if this is supported.\n * @param {Function} origAttachMediaStream\n * @returns {Function}\n */\nfunction wrapAttachMediaStream(origAttachMediaStream) {\n    return function(element, stream) {\n        // eslint-disable-next-line prefer-rest-params\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\n\n        if (stream\n                && rtcUtils.isDeviceChangeAvailable('output')\n                && stream.getAudioTracks\n                && stream.getAudioTracks().length\n\n                // we skip setting audio output if there was no explicit change\n                && audioOutputChanged) {\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\n                .catch(function(ex) {\n                    const err\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\n\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\n                        promise: this, // eslint-disable-line no-invalid-this\n                        reason: err\n                    });\n\n                    logger.warn(\n                        'Failed to set audio output device for the element.'\n                            + ' Default audio output device will be used'\n                            + ' instead',\n                        element,\n                        err);\n                });\n        }\n\n        return res;\n    };\n}\n\nexport default rtcUtils;\n","/**\n * This utility class defines custom onerror and onunhandledrejection functions.\n * The custom error handlers respect the previously-defined error handlers.\n * GlobalOnErrorHandler class provides utilities to add many custom error\n * handlers and to execute the error handlers directly.\n */\n\n\n/**\n * List with global error handlers that will be executed.\n */\nconst handlers = [];\n\n// If an old handler exists, also fire its events.\nconst oldOnErrorHandler = window.onerror;\n\n/**\n * Custom error handler that calls the old global error handler and executes\n * all handlers that were previously added.\n */\nfunction JitsiGlobalErrorHandler(...args) {\n    handlers.forEach(handler => handler(...args));\n    oldOnErrorHandler && oldOnErrorHandler(...args);\n}\n\n// If an old handler exists, also fire its events.\nconst oldOnUnhandledRejection = window.onunhandledrejection;\n\n/**\n * Custom handler that calls the old global handler and executes all handlers\n * that were previously added. This handler handles rejected Promises.\n */\nfunction JitsiGlobalUnhandledRejection(event) {\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\n}\n\n// Setting the custom error handlers.\nwindow.onerror = JitsiGlobalErrorHandler;\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\n\nconst GlobalOnErrorHandler = {\n    /**\n     * Adds new error handlers.\n     * @param handler the new handler.\n     */\n    addHandler(handler) {\n        handlers.push(handler);\n    },\n\n    /**\n     * Calls the global error handler if there is one.\n     * @param error the error to pass to the error handler\n     */\n    callErrorHandler(error) {\n        const errHandler = window.onerror;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(null, null, null, null, error);\n    },\n\n    /**\n     * Calls the global rejection handler if there is one.\n     * @param error the error to pass to the rejection handler.\n     */\n    callUnhandledRejectionHandler(error) {\n        const errHandler = window.onunhandledrejection;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(error);\n    }\n};\n\n\nmodule.exports = GlobalOnErrorHandler;\n","/* global module */\n/**\n * Enumeration of the video types\n * @type {{CAMERA: string, DESKTOP: string, NONE: string}}\n */\nconst VideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The desktop video type.\n     */\n    DESKTOP: 'desktop',\n\n    /**\n     * No local video source.\n     */\n    NONE: 'none'\n};\n\nmodule.exports = VideoType;\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport VideoType from '../../service/RTC/VideoType';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport { safeCounterIncrement } from '../util/MathUtil';\n\nimport BridgeChannel from './BridgeChannel';\nimport JitsiLocalTrack from './JitsiLocalTrack';\nimport RTCUtils from './RTCUtils';\nimport TraceablePeerConnection from './TraceablePeerConnection';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * The counter used to generated id numbers assigned to peer connections\n * @type {number}\n */\nlet peerConnectionIdCounter = 0;\n\n/**\n * The counter used to generate id number for the local\n * <code>MediaStreamTrack</code>s.\n * @type {number}\n */\nlet rtcTrackIdCounter = 0;\n\n/**\n *\n * @param tracksInfo\n * @param options\n */\nfunction createLocalTracks(tracksInfo, options) {\n    const newTracks = [];\n    let deviceId = null;\n\n    tracksInfo.forEach(trackInfo => {\n        if (trackInfo.mediaType === MediaType.AUDIO) {\n            deviceId = options.micDeviceId;\n        } else if (trackInfo.videoType === VideoType.CAMERA) {\n            deviceId = options.cameraDeviceId;\n        }\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n        const localTrack = new JitsiLocalTrack({\n            ...trackInfo,\n            deviceId,\n            facingMode: options.facingMode,\n            rtcId: rtcTrackIdCounter,\n            effects: options.effects\n        });\n\n        newTracks.push(localTrack);\n    });\n\n    return newTracks;\n}\n\n/**\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\n * about MedieaTracks.\n *\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\n * MediaTrack instances. Each can look like:\n * {{\n *     stream: MediaStream instance that holds a track with audio or video,\n *     track: MediaTrack within the MediaStream,\n *     videoType: \"camera\" or \"desktop\" or falsy,\n *     sourceId: ID of the desktopsharing source,\n *     sourceType: The desktopsharing source type,\n *     effects: Array of effect types\n * }}\n */\nfunction _newCreateLocalTracks(mediaStreamMetaData = []) {\n    return mediaStreamMetaData.map(metaData => {\n        const {\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType,\n            effects\n        } = metaData;\n\n        const { deviceId, facingMode } = track.getSettings();\n\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\n        // so RTC does not need to handle ID management. This move would be\n        // safer to do once the old createLocalTracks is removed.\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n\n        return new JitsiLocalTrack({\n            deviceId,\n            facingMode,\n            mediaType: track.kind,\n            rtcId: rtcTrackIdCounter,\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType: videoType || null,\n            effects\n        });\n    });\n}\n\n/**\n *\n */\nexport default class RTC extends Listenable {\n    /**\n     *\n     * @param conference\n     * @param options\n     */\n    constructor(conference, options = {}) {\n        super();\n        this.conference = conference;\n\n        /**\n         * A map of active <tt>TraceablePeerConnection</tt>.\n         * @type {Map.<number, TraceablePeerConnection>}\n         */\n        this.peerConnections = new Map();\n\n        this.localTracks = [];\n\n        this.options = options;\n\n        // BridgeChannel instance.\n        // @private\n        // @type {BridgeChannel}\n        this._channel = null;\n\n        /**\n         * The value specified to the last invocation of setLastN before the\n         * channel completed opening. If non-null, the value will be sent\n         * through a channel (once) as soon as it opens and will then be\n         * discarded.\n         * @private\n         * @type {number}\n         */\n        this._lastN = -1;\n\n        /**\n         * Defines the last N endpoints list. It can be null or an array once\n         * initialised with a channel last N event.\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._lastNEndpoints = null;\n\n        /**\n         * The number representing the maximum video height the local client\n         * should receive from the bridge.\n         *\n         * @type {number|undefined}\n         * @private\n         */\n        this._maxFrameHeight = undefined;\n\n        /**\n         * The endpoint IDs of currently selected participants.\n         *\n         * @type {Array}\n         * @private\n         */\n        this._selectedEndpoints = [];\n\n        // The last N change listener.\n        this._lastNChangeListener = this._onLastNChanged.bind(this);\n\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\n        this._updateAudioOutputForAudioTracks\n            = this._updateAudioOutputForAudioTracks.bind(this);\n\n        // The default video type assumed by the bridge.\n        this._videoType = VideoType.CAMERA;\n\n        // Switch audio output device on all remote audio tracks. Local audio\n        // tracks handle this event by themselves.\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._updateAudioOutputForAudioTracks\n            );\n\n            RTCUtils.addListener(\n                RTCEvents.DEVICE_LIST_CHANGED,\n                this._onDeviceListChanged\n            );\n        }\n    }\n\n    /**\n     * Removes any listeners and stored state from this {@code RTC} instance.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED, this._updateAudioOutputForAudioTracks);\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_CHANGED, this._onDeviceListChanged);\n\n        if (this._channelOpenListener) {\n            this.removeListener(\n                RTCEvents.DATA_CHANNEL_OPEN,\n                this._channelOpenListener\n            );\n        }\n    }\n\n    /**\n     * Exposes the private helper for converting a WebRTC MediaStream to a\n     * JitsiLocalTrack.\n     *\n     * @param {Array<Object>} tracksInfo\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    static newCreateLocalTracks(tracksInfo) {\n        return _newCreateLocalTracks(tracksInfo);\n    }\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {object} [options] Optional parameters.\n     * @param {array} options.devices The devices that will be requested.\n     * @param {string} options.resolution Resolution constraints.\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    static obtainAudioAndVideoPermissions(options) {\n        const usesNewGumFlow = browser.usesNewGumFlow();\n        const obtainMediaPromise = usesNewGumFlow\n            ? RTCUtils.newObtainAudioAndVideoPermissions(options)\n            : RTCUtils.obtainAudioAndVideoPermissions(options);\n\n        return obtainMediaPromise.then(tracksInfo => {\n            if (usesNewGumFlow) {\n                return _newCreateLocalTracks(tracksInfo);\n            }\n\n            return createLocalTracks(tracksInfo, options);\n        });\n    }\n\n    /**\n     * Initializes the bridge channel of this instance.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     */\n    initializeBridgeChannel(peerconnection, wsUrl) {\n        this._channel = new BridgeChannel(peerconnection, wsUrl, this.eventEmitter);\n\n        this._channelOpenListener = () => {\n            // When the channel becomes available, tell the bridge about video selections so that it can do adaptive\n            // simulcast, we want the notification to trigger even if userJid is undefined, or null.\n            if (this._receiverVideoConstraints) {\n                try {\n                    this._channel.sendNewReceiverVideoConstraintsMessage(this._receiverVideoConstraints);\n                } catch (error) {\n                    GlobalOnErrorHandler.callErrorHandler(error);\n                    logger.error(`Cannot send ReceiverVideoConstraints(\n                        ${JSON.stringify(this._receiverVideoConstraints)}) endpoint message`, error);\n                }\n            } else {\n                try {\n                    this._channel.sendSelectedEndpointsMessage(this._selectedEndpoints);\n                    if (typeof this._maxFrameHeight !== 'undefined') {\n                        this._channel.sendReceiverVideoConstraintMessage(this._maxFrameHeight);\n                    }\n                    if (this._lastN !== -1) {\n                        this._channel.sendSetLastNMessage(this._lastN);\n                    }\n                } catch (error) {\n                    GlobalOnErrorHandler.callErrorHandler(error);\n                    logger.error(`Cannot send selected(${this._selectedEndpoint}), lastN(${this._lastN}),`\n                        + ` frameHeight(${this._maxFrameHeight}) endpoint message`, error);\n                }\n            }\n\n            try {\n                this._channel.sendVideoTypeMessage(this._videoType);\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(`Cannot send VideoTypeMessage ${this._videoType}`, error);\n            }\n\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n            this._channelOpenListener = null;\n        };\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n\n        // Add Last N change listener.\n        this.addListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n    }\n\n    /**\n     * Callback invoked when the list of known audio and video devices has\n     * been updated. Attempts to update the known available audio output\n     * devices.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onDeviceListChanged() {\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\n    }\n\n    /**\n     * Receives events when Last N had changed.\n     * @param {array} lastNEndpoints The new Last N endpoints.\n     * @private\n     */\n    _onLastNChanged(lastNEndpoints = []) {\n        const oldLastNEndpoints = this._lastNEndpoints || [];\n        let leavingLastNEndpoints = [];\n        let enteringLastNEndpoints = [];\n\n        this._lastNEndpoints = lastNEndpoints;\n\n        leavingLastNEndpoints = oldLastNEndpoints.filter(\n            id => !this.isInLastN(id));\n\n        enteringLastNEndpoints = lastNEndpoints.filter(\n            id => oldLastNEndpoints.indexOf(id) === -1);\n\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            leavingLastNEndpoints,\n            enteringLastNEndpoints);\n    }\n\n    /**\n     * Should be called when current media session ends and after the\n     * PeerConnection has been closed using PeerConnection.close() method.\n     */\n    onCallEnded() {\n        if (this._channel) {\n            // The BridgeChannel is not explicitly closed as the PeerConnection\n            // is closed on call ended which triggers datachannel onclose\n            // events. If using a WebSocket, the channel must be closed since\n            // it is not managed by the PeerConnection.\n            // The reference is cleared to disable any logic related to the\n            // channel.\n            if (this._channel && this._channel.mode === 'websocket') {\n                this._channel.close();\n            }\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Sets the receiver video constraints that determine how bitrate is allocated to each of the video streams\n     * requested from the bridge. The constraints are cached and sent through the bridge channel once the channel\n     * is established.\n     * @param {*} constraints\n     */\n    setNewReceiverVideoConstraints(constraints) {\n        this._receiverVideoConstraints = constraints;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendNewReceiverVideoConstraintsMessage(constraints);\n        }\n    }\n\n    /**\n     * Sets the maximum video size the local participant should receive from\n     * remote participants. Will cache the value and send it through the channel\n     * once it is created.\n     *\n     * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\n     * this receiver is willing to receive.\n     * @returns {void}\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendReceiverVideoConstraintMessage(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sets the video type and availability for the local video source.\n     *\n     * @param {string} videoType 'camera' for camera, 'desktop' for screenshare and\n     * 'none' for when local video source is muted or removed from the peerconnection.\n     * @returns {void}\n     */\n    setVideoType(videoType) {\n        if (this._videoType !== videoType) {\n            this._videoType = videoType;\n\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendVideoTypeMessage(videoType);\n            }\n        }\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected\n     * participants in order to always receive video for this participant (even\n     * when last n is enabled). If there is no channel we store it and send it\n     * through the channel once it is created.\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendSelectedEndpointsMessage(ids);\n        }\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static addListener(eventType, listener) {\n        RTCUtils.addListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static removeListener(eventType, listener) {\n        RTCUtils.removeListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param options\n     */\n    static init(options = {}) {\n        this.options = options;\n\n        return RTCUtils.init(this.options);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>TraceablePeerConnection</tt>\n     * @param {SignalingLayer} signaling The signaling layer that will\n     *      provide information about the media or participants which is not\n     *      carried over SDP.\n     * @param {object} iceConfig An object describing the ICE config like\n     *      defined in the WebRTC specification.\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used\n     *      in a peer to peer type of session.\n     * @param {object} options The config options.\n     * @param {boolean} options.enableInsertableStreams - Set to true when the insertable streams constraints is to be\n     * enabled on the PeerConnection.\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable\n     *      the simulcast.\n     * @param {boolean} options.disableRtx If set to 'true' will disable the\n     *      RTX.\n     * @param {boolean} options.disableH264 If set to 'true' H264 will be\n     *      disabled by removing it from the SDP.\n     * @param {boolean} options.preferH264 If set to 'true' H264 will be\n     *      preferred over other video codecs.\n     * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n     * @return {TraceablePeerConnection}\n     */\n    createPeerConnection(signaling, iceConfig, isP2P, options) {\n        const pcConstraints = JSON.parse(JSON.stringify(RTCUtils.pcConstraints));\n\n        if (typeof options.abtestSuspendVideo !== 'undefined') {\n            RTCUtils.setSuspendVideo(pcConstraints, options.abtestSuspendVideo);\n\n            Statistics.analytics.addPermanentProperties(\n                { abtestSuspendVideo: options.abtestSuspendVideo });\n        }\n\n        // FIXME: We should rename iceConfig to pcConfig.\n\n        if (options.enableInsertableStreams) {\n            logger.debug('E2EE - setting insertable streams constraints');\n            iceConfig.encodedInsertableStreams = true;\n            iceConfig.forceEncodedAudioInsertableStreams = true; // legacy, to be removed in M88.\n            iceConfig.forceEncodedVideoInsertableStreams = true; // legacy, to be removed in M88.\n        }\n\n        if (browser.supportsSdpSemantics()) {\n            iceConfig.sdpSemantics = 'plan-b';\n        }\n\n        if (options.forceTurnRelay) {\n            iceConfig.iceTransportPolicy = 'relay';\n        }\n\n        // Set the RTCBundlePolicy to max-bundle so that only one set of ice candidates is generated.\n        // The default policy generates separate ice candidates for audio and video connections.\n        // This change is necessary for Unified plan to work properly on Chrome and Safari.\n        iceConfig.bundlePolicy = 'max-bundle';\n\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\n\n        const newConnection\n            = new TraceablePeerConnection(\n                this,\n                peerConnectionIdCounter,\n                signaling,\n                iceConfig, pcConstraints,\n                isP2P, options);\n\n        this.peerConnections.set(newConnection.id, newConnection);\n\n        return newConnection;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Removed given peer connection from this RTC module instance.\n     * @param {TraceablePeerConnection} traceablePeerConnection\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\n     * this RTC instance.\n     */\n    _removePeerConnection(traceablePeerConnection) {\n        const id = traceablePeerConnection.id;\n\n        if (this.peerConnections.has(id)) {\n            // NOTE Remote tracks are not removed here.\n            this.peerConnections.delete(id);\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param track\n     */\n    addLocalTrack(track) {\n        if (!track) {\n            throw new Error('track must not be null nor undefined');\n        }\n\n        this.localTracks.push(track);\n\n        track.conference = this.conference;\n    }\n\n    /**\n     * Get local video track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalVideoTrack() {\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\n\n\n        return localVideo.length ? localVideo[0] : undefined;\n    }\n\n    /**\n     * Get local audio track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalAudioTrack() {\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\n\n\n        return localAudio.length ? localAudio[0] : undefined;\n    }\n\n    /**\n     * Returns the local tracks of the given media type, or all local tracks if\n     * no specific type is given.\n     * @param {MediaType} [mediaType] Optional media type filter.\n     * (audio or video).\n     */\n    getLocalTracks(mediaType) {\n        let tracks = this.localTracks.slice();\n\n        if (mediaType !== undefined) {\n            tracks = tracks.filter(\n                track => track.getType() === mediaType);\n        }\n\n        return tracks;\n    }\n\n    /**\n     * Obtains all remote tracks currently known to this RTC module instance.\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\n     *      by their media type if this argument is specified.\n     * @return {Array<JitsiRemoteTrack>}\n     */\n    getRemoteTracks(mediaType) {\n        let remoteTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\n\n            if (pcRemoteTracks) {\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\n            }\n        }\n\n        return remoteTracks;\n    }\n\n    /**\n     * Set mute for all local audio streams attached to the conference.\n     * @param value The mute value.\n     * @returns {Promise}\n     */\n    setAudioMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\n            // this is a Promise\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\n        });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n    * Set mute for all local video streams attached to the conference.\n    * @param value The mute value.\n    * @returns {Promise}\n    */\n    setVideoMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.VIDEO).concat(this.getLocalTracks(MediaType.PRESENTER))\n            .forEach(videoTrack => {\n                // this is a Promise\n                mutePromises.push(value ? videoTrack.mute() : videoTrack.unmute());\n            });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n     *\n     * @param track\n     */\n    removeLocalTrack(track) {\n        const pos = this.localTracks.indexOf(track);\n\n        if (pos === -1) {\n            return;\n        }\n\n        this.localTracks.splice(pos, 1);\n    }\n\n    /**\n     *\n     * @param elSelector\n     * @param stream\n     */\n    static attachMediaStream(elSelector, stream) {\n        return RTCUtils.attachMediaStream(elSelector, stream);\n    }\n\n    /**\n     * Returns the id of the given stream.\n     * @param {MediaStream} stream\n     */\n    static getStreamID(stream) {\n        return RTCUtils.getStreamID(stream);\n    }\n\n    /**\n     * Returns the id of the given track.\n     * @param {MediaStreamTrack} track\n     */\n    static getTrackID(track) {\n        return RTCUtils.getTrackID(track);\n    }\n\n    /**\n     * Returns true if retrieving the list of input devices is supported\n     * and false if not.\n     */\n    static isDeviceListAvailable() {\n        return RTCUtils.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] Type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    static isDeviceChangeAvailable(deviceType) {\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    static isWebRtcSupported() {\n        return browser.isSupported();\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    static getAudioOutputDevice() {\n        return RTCUtils.getAudioOutputDevice();\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {array} list of available media devices.\n     */\n    static getCurrentlyAvailableMediaDevices() {\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    static arePermissionsGrantedForAvailableDevices() {\n        return RTCUtils.arePermissionsGrantedForAvailableDevices();\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    static getEventDataForActiveDevice(device) {\n        return RTCUtils.getEventDataForActiveDevice(device);\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId Id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices().\n     * @returns {Promise} resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    static setAudioOutputDevice(deviceId) {\n        return RTCUtils.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\n     * \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\n     * @returns {boolean}\n     */\n    static isUserStream(stream) {\n        return RTC.isUserStreamById(RTCUtils.getStreamID(stream));\n    }\n\n    /**\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\n     * ID is considered a valid \"user\" stream which means that it's not a\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {string} streamId The id of WebRTC MediaStream.\n     * @returns {boolean}\n     */\n    static isUserStreamById(streamId) {\n        return streamId && streamId !== 'mixedmslabel'\n            && streamId !== 'default';\n    }\n\n    /**\n     * Allows to receive list of available cameras/microphones.\n     * @param {function} callback Would receive array of devices as an\n     *      argument.\n     */\n    static enumerateDevices(callback) {\n        RTCUtils.enumerateDevices(callback);\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param {MediaStream} mediaStream MediaStream object to stop.\n     */\n    static stopMediaStream(mediaStream) {\n        RTCUtils.stopMediaStream(mediaStream);\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    static isDesktopSharingEnabled() {\n        return RTCUtils.isDesktopSharingEnabled();\n    }\n\n    /**\n     * Closes the currently opened bridge channel.\n     */\n    closeBridgeChannel() {\n        if (this._channel) {\n            this._channel.close();\n            this._channel = null;\n\n            this.removeListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {number} ssrc\n     * @param {number} audioLevel\n     * @param {boolean} isLocal\n     */\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\n        const track = tpc.getTrackBySSRC(ssrc);\n\n        if (!track) {\n            return;\n        } else if (!track.isAudioTrack()) {\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\n\n            return;\n        } else if (track.isLocal() !== isLocal) {\n            logger.error(\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\n        }\n\n        track.setAudioLevel(audioLevel, tpc);\n    }\n\n    /**\n     * Sends message via the bridge channel.\n     * @param {string} to The id of the endpoint that should receive the\n     *      message. If \"\" the message will be sent to all participants.\n     * @param {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails or there is no data channel created.\n     */\n    sendChannelMessage(to, payload) {\n        if (this._channel) {\n            this._channel.sendMessage(to, payload);\n        } else {\n            throw new Error('Channel support is disabled!');\n        }\n    }\n\n    /**\n     * Sends the local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendEndpointStatsMessage(payload);\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\n     * all available videos.\n     * @param {number} value the new value for lastN.\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendSetLastNMessage(value);\n            }\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\n        }\n    }\n\n    /**\n     * Indicates if the endpoint id is currently included in the last N.\n     * @param {string} id The endpoint id that we check for last N.\n     * @returns {boolean} true if the endpoint id is in the last N or if we\n     * don't have bridge channel support, otherwise we return false.\n     */\n    isInLastN(id) {\n        return !this._lastNEndpoints // lastNEndpoints not initialised yet.\n            || this._lastNEndpoints.indexOf(id) > -1;\n    }\n\n    /**\n     * Updates the target audio output device for all remote audio tracks.\n     *\n     * @param {string} deviceId - The device id of the audio ouput device to\n     * use for all remote tracks.\n     * @private\n     * @returns {void}\n     */\n    _updateAudioOutputForAudioTracks(deviceId) {\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\n\n        for (const track of remoteAudioTracks) {\n            track.setAudioOutput(deviceId);\n        }\n    }\n}\n","/**\n * The errors for the JitsiTrack objects.\n */\n\n/**\n * An error which indicates that some of requested constraints in\n * getUserMedia call were not satisfied.\n */\nexport const CONSTRAINT_FAILED = 'gum.constraint_failed';\n\n/**\n * A generic error which indicates an error occurred while selecting\n * a DesktopCapturerSource from the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_ERROR\n    = 'gum.electron_desktop_picker_error';\n\n/**\n * An error which indicates a custom desktop picker could not be detected\n * for the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND\n    = 'gum.electron_desktop_picker_not_found';\n\n/**\n * Generic getUserMedia error.\n */\nexport const GENERAL = 'gum.general';\n\n/**\n * An error which indicates that requested device was not found.\n */\nexport const NOT_FOUND = 'gum.not_found';\n\n/**\n * An error which indicates that user denied permission to share requested\n * device.\n */\nexport const PERMISSION_DENIED = 'gum.permission_denied';\n\n/**\n * Generic error for screensharing failure.\n */\nexport const SCREENSHARING_GENERIC_ERROR\n    = 'gum.screensharing_generic_error';\n\n/**\n * An error which indicates that user canceled screen sharing window\n * selection dialog.\n */\nexport const SCREENSHARING_USER_CANCELED\n    = 'gum.screensharing_user_canceled';\n\n\n/**\n * Indicates that the timeout passed to the obtainAudioAndVideoPermissions has expired without GUM resolving.\n */\nexport const TIMEOUT = 'gum.timeout';\n\n/**\n * An error which indicates that track has been already disposed and cannot\n * be longer used.\n */\nexport const TRACK_IS_DISPOSED = 'track.track_is_disposed';\n\n/**\n * An error which indicates that track has no MediaStream associated.\n */\nexport const TRACK_NO_STREAM_FOUND = 'track.no_stream_found';\n\n/**\n * An error which indicates that requested video resolution is not supported\n * by a webcam.\n */\nexport const UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution';\n","/**\n * The media track was removed to the conference.\n */\nexport const LOCAL_TRACK_STOPPED = 'track.stopped';\n\n/**\n * Audio levels of a this track was changed.\n * The first argument is a number with audio level value in range [0, 1].\n * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\n * connection which measured the audio level (one audio track can be added\n * to multiple peer connection at the same time). This argument is optional for\n * local tracks for which we can measure audio level without the peer\n * connection (the value will be <tt>undefined</tt>).\n *\n * NOTE The second argument should be treated as library internal and can be\n * removed at any time.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged';\n\n/**\n * The audio output of the track was changed.\n */\nexport const TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged';\n\n/**\n * A media track mute status was changed.\n */\nexport const TRACK_MUTE_CHANGED = 'track.trackMuteChanged';\n\n/**\n * The video type(\"camera\" or \"desktop\") of the track was changed.\n */\nexport const TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged';\n\n/**\n * Indicates that the track is not receiving any data even though we expect it\n * to receive data (i.e. the stream is not stopped).\n */\nexport const NO_DATA_FROM_SOURCE = 'track.no_data_from_source';\n\n/**\n * Indicates that the local audio track is not receiving any audio input from\n * the microphone that is currently selected.\n */\nexport const NO_AUDIO_INPUT = 'track.no_audio_input';\n","/**\n * The errors for the conference.\n */\n\n/**\n * Indicates that client must be authenticated to create the conference.\n */\nexport const AUTHENTICATION_REQUIRED = 'conference.authenticationRequired';\n\n/**\n * Indicates that chat error occurred.\n */\nexport const CHAT_ERROR = 'conference.chatError';\n\n/**\n * Indicates that conference has been destroyed.\n */\nexport const CONFERENCE_DESTROYED = 'conference.destroyed';\n\n/**\n * Indicates that max users limit has been reached.\n */\nexport const CONFERENCE_MAX_USERS = 'conference.max_users';\n\n/**\n * Indicates that a connection error occurred when trying to join a conference.\n */\nexport const CONNECTION_ERROR = 'conference.connectionError';\n\n/**\n * Indicates that the client has been forced to restart by jicofo when the\n * conference was migrated from one bridge to another.\n */\nexport const CONFERENCE_RESTARTED = 'conference.restarted';\n\n/**\n * Indicates that a connection error is due to not allowed,\n * occurred when trying to join a conference.\n */\nexport const NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed';\n\n/**\n * Indicates that a connection error is due to not allowed,\n * occurred when trying to join a conference, only approved members are allowed to join.\n */\nexport const MEMBERS_ONLY_ERROR = 'conference.connectionError.membersOnly';\n\n/**\n * Indicates that a connection error is due to denied access to the room,\n * occurred after joining a lobby room and access is denied by the room moderators.\n */\nexport const CONFERENCE_ACCESS_DENIED = 'conference.connectionError.accessDenied';\n\n/**\n * Indicates that focus error happened.\n */\nexport const FOCUS_DISCONNECTED = 'conference.focusDisconnected';\n\n/**\n * Indicates that focus left the conference.\n */\nexport const FOCUS_LEFT = 'conference.focusLeft';\n\n/**\n * Indicates that graceful shutdown happened.\n */\nexport const GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown';\n\n/**\n * Indicates that the media connection has failed.\n */\nexport const ICE_FAILED = 'conference.iceFailed';\n\n/**\n * Indicates that the versions of the server side components are incompatible\n * with the client side.\n */\nexport const INCOMPATIBLE_SERVER_VERSIONS\n    = 'conference.incompatible_server_versions';\n\n/**\n * Indicates that offer/answer had failed.\n */\nexport const OFFER_ANSWER_FAILED = 'conference.offerAnswerFailed';\n\n/**\n * Indicates that password cannot be set for this conference.\n */\nexport const PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'conference.passwordRequired';\n\n/**\n * Indicates that reservation system returned error.\n */\nexport const RESERVATION_ERROR = 'conference.reservationError';\n\n/**\n * Indicates that there is no available videobridge.\n */\nexport const VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable';\n","/* global $ */\n\nimport browser from '../browser';\n\nimport SDPUtil from './SDPUtil';\n\n/**\n *\n * @param sdp\n */\nexport default function SDP(sdp) {\n    const media = sdp.split('\\r\\nm=');\n\n    for (let i = 1, length = media.length; i < length; i++) {\n        let mediaI = `m=${media[i]}`;\n\n        if (i !== length - 1) {\n            mediaI += '\\r\\n';\n        }\n        media[i] = mediaI;\n    }\n    const session = `${media.shift()}\\r\\n`;\n\n    this.media = media;\n    this.raw = session + media.join('');\n    this.session = session;\n}\n\n/**\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\n * failure. The flag is used in the automated testing.\n * @type {boolean}\n */\nSDP.prototype.failICE = false;\n\n/**\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeTcpCandidates = false;\n\n/**\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeUdpCandidates = false;\n\n/**\n * Returns map of MediaChannel mapped per channel idx.\n */\nSDP.prototype.getMediaSsrcMap = function() {\n    const mediaSSRCs = {};\n\n    for (let mediaindex = 0; mediaindex < this.media.length; mediaindex++) {\n        const mid\n            = SDPUtil.parseMID(\n                SDPUtil.findLine(this.media[mediaindex], 'a=mid:'));\n        const media = {\n            mediaindex,\n            mid,\n            ssrcs: {},\n            ssrcGroups: []\n        };\n\n        mediaSSRCs[mediaindex] = media;\n\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc:').forEach(line => {\n            const linessrc = line.substring(7).split(' ')[0];\n\n            // allocate new ChannelSsrc\n\n            if (!media.ssrcs[linessrc]) {\n                media.ssrcs[linessrc] = {\n                    ssrc: linessrc,\n                    lines: []\n                };\n            }\n            media.ssrcs[linessrc].lines.push(line);\n        });\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc-group:').forEach(line => {\n            const idx = line.indexOf(' ');\n            const semantics = line.substr(0, idx).substr(13);\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n            if (ssrcs.length) {\n                media.ssrcGroups.push({\n                    semantics,\n                    ssrcs\n                });\n            }\n        });\n    }\n\n    return mediaSSRCs;\n};\n\n/**\n * Returns <tt>true</tt> if this SDP contains given SSRC.\n * @param ssrc the ssrc to check.\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\n */\nSDP.prototype.containsSSRC = function(ssrc) {\n    // FIXME this code is really strange - improve it if you can\n    const medias = this.getMediaSsrcMap();\n    let result = false;\n\n    Object.keys(medias).forEach(mediaindex => {\n        if (result) {\n            return;\n        }\n        if (medias[mediaindex].ssrcs[ssrc]) {\n            result = true;\n        }\n    });\n\n    return result;\n};\n\n// add content's to a jingle element\nSDP.prototype.toJingle = function(elem, thecreator) {\n    // https://xmpp.org/extensions/xep-0338.html\n    SDPUtil.findLines(this.session, 'a=group:').forEach(line => {\n        const parts = line.split(' ');\n        const semantics = parts.shift().substr(8);\n\n        elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\n            semantics });\n        for (let j = 0; j < parts.length; j++) {\n            elem.c('content', { name: parts[j] }).up();\n        }\n        elem.up();\n    });\n\n    for (let i = 0; i < this.media.length; i++) {\n        const mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\n\n        if (!(mline.media === 'audio'\n              || mline.media === 'video'\n              || mline.media === 'application')) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        let ssrc;\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\n\n        if (assrcline) {\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\n        } else {\n            ssrc = false;\n        }\n\n        elem.c('content', { creator: thecreator,\n            name: mline.media });\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\n\n        if (amidline) {\n            // prefer identifier from a=mid if present\n            const mid = SDPUtil.parseMID(amidline);\n\n            elem.attrs({ name: mid });\n        }\n\n        if (mline.media === 'audio' || mline.media === 'video') {\n            elem.c('description',\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                    media: mline.media });\n            if (ssrc) {\n                elem.attrs({ ssrc });\n            }\n            for (let j = 0; j < mline.fmt.length; j++) {\n                const rtpmap\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=rtpmap:${mline.fmt[j]}`);\n\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\n\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\n                // value=bar/>\n                const afmtpline\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=fmtp:${mline.fmt[j]}`);\n\n                if (afmtpline) {\n                    const fmtpParameters = SDPUtil.parseFmtp(afmtpline);\n\n                    // eslint-disable-next-line max-depth\n                    for (let k = 0; k < fmtpParameters.length; k++) {\n                        elem.c('parameter', fmtpParameters[k]).up();\n                    }\n                }\n\n                // XEP-0293 -- map a=rtcp-fb\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\n\n                elem.up();\n            }\n\n            if (ssrc) {\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\n\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\n                    elem.c('source', {\n                        ssrc: availableSsrc,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n\n                    ssrcParameters.forEach(ssrcSdpLine => {\n                        // get everything after first space\n                        const idx = ssrcSdpLine.indexOf(' ');\n                        const kv = ssrcSdpLine.substr(idx + 1);\n\n                        elem.c('parameter');\n                        if (kv.indexOf(':') === -1) {\n                            elem.attrs({ name: kv });\n                        } else {\n                            const name = kv.split(':', 2)[0];\n\n                            elem.attrs({ name });\n\n                            let v = kv.split(':', 2)[1];\n\n                            v = SDPUtil.filterSpecialChars(v);\n                            elem.attrs({ value: v });\n                        }\n                        elem.up();\n                    });\n\n                    elem.up();\n                }\n\n                // XEP-0339 handle ssrc-group attributes\n                const ssrcGroupLines\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\n\n                ssrcGroupLines.forEach(line => {\n                    const idx = line.indexOf(' ');\n                    const semantics = line.substr(0, idx).substr(13);\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n                    if (ssrcs.length) {\n                        elem.c('ssrc-group', { semantics,\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\n                        elem.up();\n                    }\n                });\n            }\n\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid:');\n\n            if (ridLines.length && browser.usesRidsForSimulcast()) {\n                // Map a line which looks like \"a=rid:2 send\" to just\n                // the rid (\"2\")\n                const rids = ridLines\n                    .map(ridLine => ridLine.split(':')[1])\n                    .map(ridInfo => ridInfo.split(' ')[0]);\n\n                rids.forEach(rid => {\n                    elem.c('source', {\n                        rid,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    elem.up();\n                });\n                const unifiedSimulcast\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast:');\n\n                if (unifiedSimulcast) {\n                    elem.c('rid-group', {\n                        semantics: 'SIM',\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    rids.forEach(rid => {\n                        elem.c('source', { rid }).up();\n                    });\n                    elem.up();\n                }\n            }\n\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\n                elem.c('rtcp-mux').up();\n            }\n\n            // XEP-0293 -- map a=rtcp-fb:*\n            this.rtcpFbToJingle(i, elem, '*');\n\n            // XEP-0294\n            const extmapLines = SDPUtil.findLines(this.media[i], 'a=extmap:');\n\n            for (let j = 0; j < extmapLines.length; j++) {\n                const extmap = SDPUtil.parseExtmap(extmapLines[j]);\n\n                elem.c('rtp-hdrext', {\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\n                    uri: extmap.uri,\n                    id: extmap.value\n                });\n\n                // eslint-disable-next-line max-depth\n                if (extmap.hasOwnProperty('direction')) {\n\n                    // eslint-disable-next-line max-depth\n                    switch (extmap.direction) {\n                    case 'sendonly':\n                        elem.attrs({ senders: 'responder' });\n                        break;\n                    case 'recvonly':\n                        elem.attrs({ senders: 'initiator' });\n                        break;\n                    case 'sendrecv':\n                        elem.attrs({ senders: 'both' });\n                        break;\n                    case 'inactive':\n                        elem.attrs({ senders: 'none' });\n                        break;\n                    }\n                }\n\n                // TODO: handle params\n                elem.up();\n            }\n            elem.up(); // end of description\n        }\n\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\n        this.transportToJingle(i, elem);\n\n        const m = this.media[i];\n\n        if (SDPUtil.findLine(m, 'a=sendrecv', this.session)) {\n            elem.attrs({ senders: 'both' });\n        } else if (SDPUtil.findLine(m, 'a=sendonly', this.session)) {\n            elem.attrs({ senders: 'initiator' });\n        } else if (SDPUtil.findLine(m, 'a=recvonly', this.session)) {\n            elem.attrs({ senders: 'responder' });\n        } else if (SDPUtil.findLine(m, 'a=inactive', this.session)) {\n            elem.attrs({ senders: 'none' });\n        }\n\n        // Reject an m-line only when port is 0 and a=bundle-only is not present in the section.\n        // The port is automatically set to 0 when bundle-only is used.\n        if (mline.port === '0' && !SDPUtil.findLine(m, 'a=bundle-only', this.session)) {\n            // estos hack to reject an m-line\n            elem.attrs({ senders: 'rejected' });\n        }\n        elem.up(); // end of content\n    }\n    elem.up();\n\n    return elem;\n};\n\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\n    elem.c('transport');\n\n    // XEP-0343 DTLS/SCTP\n    const sctpmap\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', this.session);\n\n    if (sctpmap) {\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs[0], /* SCTP port */\n            protocol: sctpAttrs[1] /* protocol */\n        });\n\n        // Optional stream count attribute\n        if (sctpAttrs.length > 2) {\n            elem.attrs({ streams: sctpAttrs[2] });\n        }\n        elem.up();\n    }\n\n    // XEP-0320\n    const fingerprints\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            'a=fingerprint:',\n            this.session);\n\n    fingerprints.forEach(line => {\n        const fingerprint = SDPUtil.parseFingerprint(line);\n\n        fingerprint.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\n        elem.c('fingerprint').t(fingerprint.fingerprint);\n        delete fingerprint.fingerprint;\n\n        const setupLine\n            = SDPUtil.findLine(\n                this.media[mediaindex],\n                'a=setup:',\n                this.session);\n\n        if (setupLine) {\n            fingerprint.setup = setupLine.substr(8);\n        }\n        elem.attrs(fingerprint);\n        elem.up(); // end of fingerprint\n    });\n    const iceParameters = SDPUtil.iceparams(this.media[mediaindex], this.session);\n\n    if (iceParameters) {\n        iceParameters.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n        elem.attrs(iceParameters);\n\n        // XEP-0176\n        const candidateLines\n            = SDPUtil.findLines(\n                this.media[mediaindex],\n                'a=candidate:',\n                this.session);\n\n        candidateLines.forEach(line => { // add any a=candidate lines\n            const candidate = SDPUtil.candidateToJingle(line);\n\n            if (this.failICE) {\n                candidate.ip = '1.1.1.1';\n            }\n            const protocol\n                = candidate && typeof candidate.protocol === 'string'\n                    ? candidate.protocol.toLowerCase()\n                    : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            }\n            elem.c('candidate', candidate).up();\n        });\n    }\n    elem.up(); // end of transport\n};\n\n// XEP-0293\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\n    const lines\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            `a=rtcp-fb:${payloadtype}`);\n\n    lines.forEach(line => {\n        const feedback = SDPUtil.parseRTCPFB(line);\n\n        if (feedback.type === 'trr-int') {\n            elem.c('rtcp-fb-trr-int', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                value: feedback.params[0]\n            });\n            elem.up();\n        } else {\n            elem.c('rtcp-fb', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                type: feedback.type\n            });\n            if (feedback.params.length > 0) {\n                elem.attrs({ 'subtype': feedback.params[0] });\n            }\n            elem.up();\n        }\n    });\n};\n\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\n    let sdp = '';\n    const feedbackElementTrrInt\n        = elem.find(\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    if (feedbackElementTrrInt.length) {\n        sdp += 'a=rtcp-fb:* trr-int ';\n        if (feedbackElementTrrInt.attr('value')) {\n            sdp += feedbackElementTrrInt.attr('value');\n        } else {\n            sdp += '0';\n        }\n        sdp += '\\r\\n';\n    }\n\n    const feedbackElements = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    feedbackElements.each((_, fb) => {\n        sdp += `a=rtcp-fb:${payloadtype} ${fb.getAttribute('type')}`;\n        if (fb.hasAttribute('subtype')) {\n            sdp += ` ${fb.getAttribute('subtype')}`;\n        }\n        sdp += '\\r\\n';\n    });\n\n    return sdp;\n};\n\n// construct an SDP from a jingle stanza\nSDP.prototype.fromJingle = function(jingle) {\n    const sessionId = Date.now();\n\n    // Use a unique session id for every TPC.\n    this.raw = 'v=0\\r\\n'\n        + `o=- ${sessionId} 2 IN IP4 0.0.0.0\\r\\n`\n        + 's=-\\r\\n'\n        + 't=0 0\\r\\n';\n\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\n    // #section-8\n    const groups\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\n\n    if (groups.length) {\n        groups.each((idx, group) => {\n            const contents\n                = $(group)\n                    .find('>content')\n                    .map((_, content) => content.getAttribute('name'))\n                    .get();\n\n            if (contents.length > 0) {\n                this.raw\n                    += `a=group:${\n                        group.getAttribute('semantics')\n                            || group.getAttribute('type')} ${\n                        contents.join(' ')}\\r\\n`;\n            }\n        });\n    }\n\n    this.session = this.raw;\n    jingle.find('>content').each((_, content) => {\n        const m = this.jingle2media($(content));\n\n        this.media.push(m);\n    });\n\n    // reconstruct msid-semantic -- apparently not necessary\n    /*\n     var msid = SDPUtil.parseSSRC(this.raw);\n     if (msid.hasOwnProperty('mslabel')) {\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\n     }\n     */\n\n    this.raw = this.session + this.media.join('');\n};\n\n// translate a jingle content element into an an SDP media part\nSDP.prototype.jingle2media = function(content) {\n    const desc = content.find('>description');\n    const transport = content.find('>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\n    let sdp = '';\n    const sctp = transport.find(\n        '>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\n\n    const media = { media: desc.attr('media') };\n\n    media.port = '1';\n    if (content.attr('senders') === 'rejected') {\n        // estos hack to reject an m-line.\n        media.port = '0';\n    }\n    if (transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').length) {\n        media.proto = sctp.length ? 'DTLS/SCTP' : 'RTP/SAVPF';\n    } else {\n        media.proto = 'RTP/AVPF';\n    }\n    if (sctp.length) {\n        sdp += `m=application ${media.port} DTLS/SCTP ${\n            sctp.attr('number')}\\r\\n`;\n        sdp += `a=sctpmap:${sctp.attr('number')} ${sctp.attr('protocol')}`;\n\n        const streamCount = sctp.attr('streams');\n\n        if (streamCount) {\n            sdp += ` ${streamCount}\\r\\n`;\n        } else {\n            sdp += '\\r\\n';\n        }\n    } else {\n        media.fmt\n            = desc\n                .find('>payload-type')\n                .map((_, payloadType) => payloadType.getAttribute('id'))\n                .get();\n        sdp += `${SDPUtil.buildMLine(media)}\\r\\n`;\n    }\n\n    sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n    if (!sctp.length) {\n        sdp += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\n    }\n\n    // XEP-0176 ICE parameters\n    if (transport.length) {\n        if (transport.attr('ufrag')) {\n            sdp += `${SDPUtil.buildICEUfrag(transport.attr('ufrag'))}\\r\\n`;\n        }\n        if (transport.attr('pwd')) {\n            sdp += `${SDPUtil.buildICEPwd(transport.attr('pwd'))}\\r\\n`;\n        }\n        transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').each((_, fingerprint) => {\n            sdp += `a=fingerprint:${fingerprint.getAttribute('hash')}`;\n            sdp += ` ${$(fingerprint).text()}`;\n            sdp += '\\r\\n';\n            if (fingerprint.hasAttribute('setup')) {\n                sdp += `a=setup:${fingerprint.getAttribute('setup')}\\r\\n`;\n            }\n        });\n    }\n\n    // XEP-0176 ICE candidates\n    transport.find('>candidate')\n        .each((_, candidate) => {\n            let protocol = candidate.getAttribute('protocol');\n\n            protocol\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            } else if (this.failICE) {\n                candidate.setAttribute('ip', '1.1.1.1');\n            }\n\n            sdp += SDPUtil.candidateFromJingle(candidate);\n        });\n\n    switch (content.attr('senders')) {\n    case 'initiator':\n        sdp += 'a=sendonly\\r\\n';\n        break;\n    case 'responder':\n        sdp += 'a=recvonly\\r\\n';\n        break;\n    case 'none':\n        sdp += 'a=inactive\\r\\n';\n        break;\n    case 'both':\n        sdp += 'a=sendrecv\\r\\n';\n        break;\n    }\n    sdp += `a=mid:${content.attr('name')}\\r\\n`;\n\n    // <description><rtcp-mux/></description>\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\n    // though\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\n    if (desc.find('>rtcp-mux').length) {\n        sdp += 'a=rtcp-mux\\r\\n';\n    }\n\n    desc.find('>payload-type').each((_, payloadType) => {\n        sdp += `${SDPUtil.buildRTPMap(payloadType)}\\r\\n`;\n        if ($(payloadType).find('>parameter').length) {\n            sdp += `a=fmtp:${payloadType.getAttribute('id')} `;\n            sdp\n                += $(payloadType)\n                    .find('>parameter')\n                    .map((__, parameter) => {\n                        const name = parameter.getAttribute('name');\n\n                        return (\n                            (name ? `${name}=` : '')\n                                + parameter.getAttribute('value'));\n                    })\n                    .get()\n                    .join('; ');\n            sdp += '\\r\\n';\n        }\n\n        // xep-0293\n        sdp += this.rtcpFbFromJingle($(payloadType), payloadType.getAttribute('id'));\n    });\n\n    // xep-0293\n    sdp += this.rtcpFbFromJingle(desc, '*');\n\n    // xep-0294\n    desc\n        .find('>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]')\n        .each((_, hdrExt) => {\n            sdp\n                += `a=extmap:${hdrExt.getAttribute('id')} ${\n                    hdrExt.getAttribute('uri')}\\r\\n`;\n        });\n\n    // XEP-0339 handle ssrc-group attributes\n    desc\n        .find('>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, ssrcGroup) => {\n            const semantics = ssrcGroup.getAttribute('semantics');\n            const ssrcs\n                = $(ssrcGroup)\n                    .find('>source')\n                    .map((__, source) => source.getAttribute('ssrc'))\n                    .get();\n\n            if (ssrcs.length) {\n                sdp += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n            }\n        });\n\n    // XEP-0339 handle source attributes\n    desc\n        .find('>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, source) => {\n            const ssrc = source.getAttribute('ssrc');\n\n            $(source)\n                .find('>parameter')\n                .each((__, parameter) => {\n                    const name = parameter.getAttribute('name');\n                    let value = parameter.getAttribute('value');\n\n                    value = SDPUtil.filterSpecialChars(value);\n                    sdp += `a=ssrc:${ssrc} ${name}`;\n                    if (value && value.length) {\n                        sdp += `:${value}`;\n                    }\n                    sdp += '\\r\\n';\n                });\n        });\n\n    return sdp;\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\n\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\n\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\n    = 'Video resolution is not supported: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_USER_CANCELED]\n    = 'User canceled screen sharing prompt';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR]\n    = 'Unknown error from screensharing';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\n    = 'Unkown error from desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\n    = 'Failed to detect desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\n    = 'Generic getUserMedia error';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\n    = 'User denied permission to use device(s): ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\n    = 'Requested device(s) was/were not found: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\n    = 'Constraint could not be satisfied: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TIMEOUT]\n    = 'Could not start media source. Timeout occured!';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\n    = 'Track has been already disposed';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\n    = 'Track does not have an associated Media Stream';\n\n// FIXME: Using prototype inheritance because otherwise instanceof is not\n// working properly (see https://github.com/babel/babel/issues/3083)\n\n/**\n *\n * Represents an error that occurred to a JitsiTrack. Can represent various\n * types of errors. For error descriptions (@see JitsiTrackErrors).\n *\n * @extends Error\n *\n *\n * @constructor\n * @param {Object|string} error - error object or error name\n * @param {Object|string} (options) - getUserMedia constraints object or\n * error message\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\n * list of getUserMedia requested devices\n */\nfunction JitsiTrackError(error, options, devices) {\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\n        /**\n         * Additional information about original getUserMedia error\n         * and constraints.\n         * @type {{\n         *     error: Object,\n         *     constraints: Object,\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\n         * }}\n         */\n        this.gum = {\n            error,\n            constraints: options,\n            devices: devices && Array.isArray(devices)\n                ? devices.slice(0)\n                : undefined\n        };\n\n        switch (error.name) {\n        case 'NotAllowedError':\n        case 'PermissionDeniedError':\n        case 'SecurityError':\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'DevicesNotFoundError':\n        case 'NotFoundError':\n            this.name = JitsiTrackErrors.NOT_FOUND;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'ConstraintNotSatisfiedError':\n        case 'OverconstrainedError': {\n            const constraintName = error.constraintName || error.constraint;\n\n            // we treat deviceId as unsupported resolution, as we want to\n            // retry and finally if everything fails to remove deviceId from\n            // mandatory constraints\n            if (options\n                    && options.video\n                    && (!devices || devices.indexOf('video') > -1)\n                    && (constraintName === 'minWidth'\n                        || constraintName === 'maxWidth'\n                        || constraintName === 'minHeight'\n                        || constraintName === 'maxHeight'\n                        || constraintName === 'width'\n                        || constraintName === 'height'\n                        || constraintName === 'deviceId')) {\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + getResolutionFromFailedConstraint(\n                            constraintName,\n                            options);\n            } else {\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + error.constraintName;\n            }\n            break;\n        }\n\n        default:\n            this.name = JitsiTrackErrors.GENERAL;\n            this.message\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\n            break;\n        }\n    } else if (typeof error === 'string') {\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\n            this.name = error;\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\n        } else {\n            // this is some generic error that do not fit any of our\n            // pre-defined errors, so don't give it any specific name, just\n            // store message\n            this.message = error;\n        }\n    } else {\n        throw new Error('Invalid arguments');\n    }\n\n    this.stack = error.stack || (new Error()).stack;\n}\n\nJitsiTrackError.prototype = Object.create(Error.prototype);\nJitsiTrackError.prototype.constructor = JitsiTrackError;\n\n/**\n * Gets failed resolution constraint from corresponding object.\n * @param {string} failedConstraintName\n * @param {Object} constraints\n * @returns {string|number}\n */\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\n    if (constraints && constraints.video && constraints.video.mandatory) {\n        switch (failedConstraintName) {\n        case 'width':\n            return constraints.video.mandatory.minWidth;\n        case 'height':\n            return constraints.video.mandatory.minHeight;\n        default:\n            return constraints.video.mandatory[failedConstraintName] || '';\n        }\n    }\n\n    return '';\n}\n\nexport default JitsiTrackError;\n","/* global module */\n/**\n * Enumeration of the codec mime types\n * @type {{H264: string, OPUS: string, VP8: string, VP9: string}}\n */\nconst CodecMimeType = {\n    /**\n     * The h264 codec mime type.\n     */\n    H264: 'h264',\n\n    /**\n     * The opus codec mime type.\n     */\n    OPUS: 'opus',\n\n    /**\n     * The vp8 codec mime type.\n     */\n    VP8: 'vp8',\n\n    /**\n     * The vp9 codec mime type.\n     */\n    VP9: 'vp9'\n\n};\n\nmodule.exports = CodecMimeType;\n","import EventEmitter from 'events';\n\n/**\n * The class implements basic event operations - add/remove listener.\n * NOTE: The purpose of the class is to be extended in order to add\n * this functionality to other classes.\n */\nexport default class Listenable {\n    /**\n     * Creates new instance.\n     * @param {EventEmitter} eventEmitter\n     * @constructor\n     */\n    constructor(eventEmitter = new EventEmitter()) {\n        this.eventEmitter = eventEmitter;\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.on = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n    }\n\n    /**\n     * Adds new listener.\n     * @param {String} eventName the name of the event\n     * @param {Function} listener the listener.\n     * @returns {Function} - The unsubscribe function.\n     */\n    addListener(eventName, listener) {\n        this.eventEmitter.addListener(eventName, listener);\n\n        return () => this.removeEventListener(eventName, listener);\n    }\n\n    /**\n     * Removes listener.\n     * @param {String} eventName the name of the event that triggers the\n     * listener\n     * @param {Function} listener the listener.\n     */\n    removeListener(eventName, listener) {\n        this.eventEmitter.removeListener(eventName, listener);\n    }\n}\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","/**\n * Event triggered by a audio detector indicating that its active state has changed from active to inactive or vice\n * versa.\n * @event\n * @type {boolean} - true when service has changed to active false otherwise.\n */\nexport const DETECTOR_STATE_CHANGE = 'detector_state_change';\n\n/** Event triggered by {@link NoAudioSignalDetector} when the local audio device associated with a JitsiConference\n * starts receiving audio levels with the value of 0 meaning no audio is being captured on that device, or when\n * it starts receiving audio levels !== 0 after being in a state of no audio.\n * @event\n * @type {boolean} - true when the current conference audio track has audio input false otherwise.\n */\nexport const AUDIO_INPUT_STATE_CHANGE = 'audio_input_state_changed';\n\n/** Event triggered by NoAudioSignalDetector when the local audio device associated with a JitsiConference goes silent\n * for a period of time, meaning that the device is either broken or hardware/software muted.\n * @event\n * @type {void}\n */\nexport const NO_AUDIO_INPUT = 'no_audio_input_detected';\n\n/**\n *  Event generated by {@link VADNoiseDetection} when the tracked device is considered noisy.\n *  @event\n *  @type {Object}\n */\nexport const VAD_NOISY_DEVICE = 'detection.vad_noise_device';\n\n/**\n * Event generated by VADReportingService when if finishes creating a VAD report for the monitored devices.\n * The generated objects are of type Array<Object>, one score for each monitored device.\n * @event VAD_REPORT_PUBLISHED\n * @type Array<Object> with the following structure:\n * @property {Date} timestamp - Timestamp at which the compute took place.\n * @property {number} avgVAD - Average VAD score over monitored period of time.\n * @property {string} deviceId - Associate local audio device ID.\n */\nexport const VAD_REPORT_PUBLISHED = 'vad-report-published';\n\n/**\n * Event generated by {@link TrackVADEmitter} when PCM sample VAD score is available.\n *\n * @event\n * @type {Object}\n * @property {Date}   timestamp - Exact time at which processed PCM sample was generated.\n * @property {number} score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n * @property {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n * @property {string} deviceId - Device id of the associated track.\n */\nexport const VAD_SCORE_PUBLISHED = 'detection.vad_score_published';\n\n/**\n *  Event generated by {@link VADTalkMutedDetection} when a user is talking while the mic is muted.\n *\n *  @event\n *  @type {Object}\n */\nexport const VAD_TALK_WHILE_MUTED = 'detection.vad_talk_while_muted';\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $msg, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-disco';\n\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport browser from '../browser';\nimport { E2EEncryption } from '../e2ee/E2EEncryption';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport RandomUtil from '../util/RandomUtil';\n\nimport Caps, { parseDiscoInfo } from './Caps';\nimport XmppConnection from './XmppConnection';\nimport MucConnectionPlugin from './strophe.emuc';\nimport JingleConnectionPlugin from './strophe.jingle';\nimport initStropheLogger from './strophe.logger';\nimport RayoConnectionPlugin from './strophe.rayo';\nimport initStropheUtil from './strophe.util';\n\nconst logger = getLogger(__filename);\n\n/**\n* Regex to extract exact error message on jwt error.\n*/\nconst FAILURE_REGEX = /<failure.*><not-allowed\\/><text>(.*)<\\/text><\\/failure>/gi;\n\n/**\n * Creates XMPP connection.\n *\n * @param {Object} options\n * @param {string} [options.token] - JWT token used for authentication(JWT authentication module must be enabled in\n * Prosody).\n * @param {string} options.serviceUrl - The service URL for XMPP connection.\n * @param {string} options.shard - The shard where XMPP connection initially landed.\n * @param {string} options.enableWebsocketResume - True to enable stream resumption.\n * @param {number} [options.websocketKeepAlive] - See {@link XmppConnection} constructor.\n * @param {number} [options.websocketKeepAliveUrl] - See {@link XmppConnection} constructor.\n * @param {Object} [options.xmppPing] - See {@link XmppConnection} constructor.\n * @returns {XmppConnection}\n */\nfunction createConnection({\n    enableWebsocketResume,\n    serviceUrl = '/http-bind',\n    shard,\n    token,\n    websocketKeepAlive,\n    websocketKeepAliveUrl,\n    xmppPing }) {\n\n    // Append token as URL param\n    if (token) {\n        // eslint-disable-next-line no-param-reassign\n        serviceUrl += `${serviceUrl.indexOf('?') === -1 ? '?' : '&'}token=${token}`;\n    }\n\n    return new XmppConnection({\n        enableWebsocketResume,\n        serviceUrl,\n        websocketKeepAlive,\n        websocketKeepAliveUrl,\n        xmppPing,\n        shard\n    });\n}\n\n/**\n * Initializes Strophe plugins that need to work with Strophe.Connection directly rather than the lib-jitsi-meet's\n * {@link XmppConnection} wrapper.\n *\n * @returns {void}\n */\nfunction initStropheNativePlugins() {\n    initStropheUtil();\n    initStropheLogger();\n}\n\n// FIXME: remove once we have a default config template. -saghul\n/**\n * A list of ice servers to use by default for P2P.\n */\nexport const DEFAULT_STUN_SERVERS = [\n    { urls: 'stun:meet-jit-si-turnrelay.jitsi.net:443' }\n];\n\n/**\n * The name of the field used to recognize a chat message as carrying a JSON\n * payload from another endpoint.\n * If the json-message of a chat message contains a valid JSON object, and\n * the JSON has this key, then it is a valid json-message to be sent.\n */\nexport const JITSI_MEET_MUC_TYPE = 'type';\n\n/**\n * The feature used by jigasi participants.\n * @type {string}\n */\nexport const FEATURE_JIGASI = 'http://jitsi.org/protocol/jigasi';\n\n/**\n * The feature used by the lib to mark support for e2ee. We use the feature by putting it in the presence\n * to avoid additional signaling (disco-info).\n * @type {string}\n */\nexport const FEATURE_E2EE = 'https://jitsi.org/meet/e2ee';\n\n/**\n *\n */\nexport default class XMPP extends Listenable {\n    /**\n     * FIXME describe all options\n     * @param {Object} options\n     * @param {String} options.serviceUrl - URL passed to the XMPP client which will be used to establish XMPP\n     * connection with the server.\n     * @param {String} options.bosh - Deprecated, use {@code serviceUrl}.\n     * @param {boolean} options.enableWebsocketResume - Enables XEP-0198 stream management which will make the XMPP\n     * module try to resume the session in case the Websocket connection breaks.\n     * @param {number} [options.websocketKeepAlive] - The websocket keep alive interval. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {number} [options.websocketKeepAliveUrl] - The websocket keep alive url. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     * @param {Array<Object>} options.p2pStunServers see {@link JingleConnectionPlugin} for more details.\n     * @param token\n     */\n    constructor(options, token) {\n        super();\n        this.connection = null;\n        this.disconnectInProgress = false;\n        this.connectionTimes = {};\n        this.options = options;\n        this.token = token;\n        this.authenticatedUser = false;\n\n        initStropheNativePlugins();\n\n        const xmppPing = options.xmppPing || {};\n\n        // let's ping the main domain (in case a guest one is used for the connection)\n        xmppPing.domain = options.hosts.domain;\n\n        this.connection = createConnection({\n            enableWebsocketResume: options.enableWebsocketResume,\n\n            // FIXME remove deprecated bosh option at some point\n            serviceUrl: options.serviceUrl || options.bosh,\n            token,\n            websocketKeepAlive: options.websocketKeepAlive,\n            websocketKeepAliveUrl: options.websocketKeepAliveUrl,\n            xmppPing,\n            shard: options.deploymentInfo?.shard\n        });\n\n        // forwards the shard changed event\n        this.connection.on(XmppConnection.Events.CONN_SHARD_CHANGED, () => {\n            /* eslint-disable camelcase */\n            const details = {\n                shard_changed: true,\n                suspend_time: this.connection.ping.getPingSuspendTime(),\n                time_since_last_success: this.connection.getTimeSinceLastSuccess()\n            };\n            /* eslint-enable camelcase */\n\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.OTHER_ERROR,\n                undefined,\n                undefined,\n                details);\n        });\n\n        this._initStrophePlugins();\n\n        this.caps = new Caps(this.connection, this.options.clientNode);\n\n        // Initialize features advertised in disco-info\n        this.initFeaturesList();\n\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\n        // sounds like they would want that. A problem for them though may be if\n        // they wanted to utilize the connected connection in an unload handler\n        // of their own. However, it should be fairly easy for them to do that\n        // by registering their unload handler before us.\n        $(window).on('beforeunload unload', ev => {\n            this.disconnect(ev).catch(() => {\n                // ignore errors in order to not brake the unload.\n            });\n        });\n    }\n\n    /**\n     * Initializes the list of feature advertised through the disco-info\n     * mechanism.\n     */\n    initFeaturesList() {\n        // http://xmpp.org/extensions/xep-0167.html#support\n        // http://xmpp.org/extensions/xep-0176.html#support\n        this.caps.addFeature('urn:xmpp:jingle:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\n\n        // Disable RTX on Firefox 83 and older versions because of\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1668028\n        if (!(this.options.disableRtx || (browser.isFirefox() && browser.isVersionLessThan(84)))) {\n            this.caps.addFeature('urn:ietf:rfc:4588');\n        }\n        if (this.options.enableOpusRed === true && browser.supportsAudioRed()) {\n            this.caps.addFeature('http://jitsi.org/opus-red');\n        }\n\n        if (typeof this.options.enableRemb === 'undefined' || this.options.enableRemb) {\n            this.caps.addFeature('http://jitsi.org/remb');\n        }\n        if (typeof this.options.enableTcc === 'undefined' || this.options.enableTcc) {\n            this.caps.addFeature('http://jitsi.org/tcc');\n        }\n\n        // this is dealt with by SDP O/A so we don't need to announce this\n        // XEP-0293\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\n        // XEP-0294\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\n\n        this.caps.addFeature('urn:ietf:rfc:5761'); // rtcp-mux\n        this.caps.addFeature('urn:ietf:rfc:5888'); // a=group, e.g. bundle\n\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\n\n        // Enable Lipsync ?\n        if (browser.isChromiumBased() && this.options.enableLipSync === true) {\n            logger.info('Lip-sync enabled !');\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\n        }\n\n        if (this.connection.rayo) {\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\n        }\n\n        if (E2EEncryption.isSupported(this.options)) {\n            this.caps.addFeature(FEATURE_E2EE, false, true);\n        }\n    }\n\n    /**\n     *\n     */\n    getConnection() {\n        return this.connection;\n    }\n\n    /**\n     * Receive connection status changes and handles them.\n     *\n     * @param {Object} credentials\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\n     * connect method. For example, 'user@xmpp.com'.\n     * @param {string} credentials.password - The password passed to the connect\n     * method.\n     * @param {string} status - One of Strophe's connection status strings.\n     * @param {string} [msg] - The connection error message provided by Strophe.\n     */\n    connectionHandler(credentials = {}, status, msg) {\n        const now = window.performance.now();\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\n\n        this.connectionTimes[statusStr] = now;\n        logger.log(\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\n            now);\n\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            // once connected or attached we no longer need this handle, drop it if it exist\n            if (this._sysMessageHandler) {\n                this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n            }\n\n            this.sendDiscoInfo && this.connection.jingle.getStunAndTurnCredentials();\n\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\n\n            // XmppConnection emits CONNECTED again on reconnect - a good opportunity to clear any \"last error\" flags\n            this._resetState();\n\n            this.sendDiscoInfo && this.caps.getFeaturesAndIdentities(this.options.hosts.domain)\n                .then(({ features, identities }) => {\n                    if (!features.has(Strophe.NS.PING)) {\n                        logger.error(`Ping NOT supported by ${\n                            this.options.hosts.domain} - please enable ping in your XMPP server config`);\n                    }\n\n                    this._processDiscoInfoIdentities(\n                        identities, undefined /* when querying we will query for features */);\n                })\n                .catch(error => {\n                    const errmsg = 'Feature discovery error';\n\n                    GlobalOnErrorHandler.callErrorHandler(\n                        new Error(`${errmsg}: ${error}`));\n                    logger.error(errmsg, error);\n                });\n\n            // make sure we don't query again\n            this.sendDiscoInfo = false;\n\n            if (credentials.password) {\n                this.authenticatedUser = true;\n            }\n            if (this.connection && this.connection.connected\n                && Strophe.getResourceFromJid(this.connection.jid)) {\n                // .connected is true while connecting?\n                // this.connection.send($pres());\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\n                    Strophe.getResourceFromJid(this.connection.jid));\n            }\n        } else if (status === Strophe.Status.CONNFAIL) {\n            if (msg === 'x-strophe-bad-non-anon-jid') {\n                this.anonymousConnectionFailed = true;\n            } else {\n                this.connectionFailed = true;\n            }\n            this.lastErrorMsg = msg;\n            if (msg === 'giving-up') {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\n            }\n        } else if (status === Strophe.Status.ERROR) {\n            this.lastErrorMsg = msg;\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // Stop ping interval\n            this.connection.ping.stopInterval();\n            const wasIntentionalDisconnect = Boolean(this.disconnectInProgress);\n            const errMsg = msg || this.lastErrorMsg;\n\n            if (this.anonymousConnectionFailed) {\n                // prompt user for username and password\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\n            } else if (this.connectionFailed) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR,\n                    errMsg,\n                    undefined, /* credentials */\n                    this._getConnectionFailedReasonDetails());\n            } else if (wasIntentionalDisconnect) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\n            } else {\n                // XXX if Strophe drops the connection while not being asked to,\n                // it means that most likely some serious error has occurred.\n                // One currently known case is when a BOSH request fails for\n                // more than 4 times. The connection is dropped without\n                // supplying a reason(error message/event) through the API.\n                logger.error('XMPP connection dropped!');\n\n                // XXX if the last request error is within 5xx range it means it\n                // was a server failure\n                const lastErrorStatus = Strophe.getLastErrorStatus();\n\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.SERVER_ERROR,\n                        errMsg || 'server-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                } else {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\n                        errMsg || 'connection-dropped-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                }\n            }\n        } else if (status === Strophe.Status.AUTHFAIL) {\n            const lastFailedRawMessage = this.getConnection().getLastFailedMessage();\n\n            // wrong password or username, prompt user\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\n                msg || this._parseConnectionFailedMessage(lastFailedRawMessage),\n                credentials);\n        }\n    }\n\n    /**\n     * Process received identities.\n     * @param {Set<String>} identities The identities to process.\n     * @param {Set<String>} features The features to process, optional. If missing lobby component will be queried\n     * for more features.\n     * @private\n     */\n    _processDiscoInfoIdentities(identities, features) {\n        // check for speakerstats\n        identities.forEach(identity => {\n            if (identity.type === 'speakerstats') {\n                this.speakerStatsComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'conference_duration') {\n                this.conferenceDurationComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'lobbyrooms') {\n                this.lobbySupported = true;\n                const processLobbyFeatures = f => {\n                    f.forEach(fr => {\n                        if (fr.endsWith('#displayname_required')) {\n                            this.eventEmitter.emit(JitsiConnectionEvents.DISPLAY_NAME_REQUIRED);\n                        }\n                    });\n                };\n\n                if (features) {\n                    processLobbyFeatures(features);\n                } else {\n                    identity.name && this.caps.getFeaturesAndIdentities(identity.name, identity.type)\n                        .then(({ features: f }) => processLobbyFeatures(f))\n                        .catch(e => logger.warn('Error getting features from lobby.', e && e.message));\n                }\n            }\n        });\n\n        if (this.speakerStatsComponentAddress\n            || this.conferenceDurationComponentAddress) {\n            this.connection.addHandler(this._onPrivateMessage.bind(this), null, 'message', null, null);\n        }\n    }\n\n    /**\n    * Parses a raw failure xmpp xml message received on auth failed.\n    *\n    * @param {string} msg - The raw failure message from xmpp.\n    * @returns {string|null} - The parsed message from the raw xmpp message.\n    */\n    _parseConnectionFailedMessage(msg) {\n        if (!msg) {\n            return null;\n        }\n\n        const matches = FAILURE_REGEX.exec(msg);\n\n        return matches ? matches[1] : null;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    _connect(jid, password) {\n        // connection.connect() starts the connection process.\n        //\n        // As the connection process proceeds, the user supplied callback will\n        // be triggered multiple times with status updates. The callback should\n        // take two arguments - the status code and the error condition.\n        //\n        // The status code will be one of the values in the Strophe.Status\n        // constants. The error condition will be one of the conditions defined\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\n        //\n        // The Parameters wait, hold and route are optional and only relevant\n        // for BOSH connections. Please see XEP 124 for a more detailed\n        // explanation of the optional parameters.\n        //\n        // Connection status constants for use by the connection handler\n        // callback.\n        //\n        //  Status.ERROR - An error has occurred (websockets specific)\n        //  Status.CONNECTING - The connection is currently being made\n        //  Status.CONNFAIL - The connection attempt failed\n        //  Status.AUTHENTICATING - The connection is authenticating\n        //  Status.AUTHFAIL - The authentication attempt failed\n        //  Status.CONNECTED - The connection has succeeded\n        //  Status.DISCONNECTED - The connection has been terminated\n        //  Status.DISCONNECTING - The connection is currently being terminated\n        //  Status.ATTACHED - The connection has been attached\n\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n\n        if (this.connection._stropheConn && this.connection._stropheConn._addSysHandler) {\n            this._sysMessageHandler = this._onSystemMessage.bind(this);\n            this.connection._stropheConn._addSysHandler(this._sysMessageHandler, null, 'message');\n        } else {\n            logger.warn('Cannot attach strophe system handler, jiconop cannot operate');\n        }\n\n        this.connection.connect(\n            jid,\n            password,\n            this.connectionHandler.bind(this, {\n                jid,\n                password\n            }));\n    }\n\n    /**\n     * Receives system messages during the connect/login process and checks for services or\n     * @param msg The received message.\n     * @returns {void}\n     * @private\n     */\n    _onSystemMessage(msg) {\n        this.sendDiscoInfo = false;\n\n        const foundIceServers = this.connection.jingle.onReceiveStunAndTurnCredentials(msg);\n\n        const { features, identities } = parseDiscoInfo(msg);\n\n        this._processDiscoInfoIdentities(identities, features);\n\n        // check for shard name in identities\n        identities.forEach(i => {\n            if (i.type === 'shard') {\n                this.options.deploymentInfo.shard = i.name;\n            }\n        });\n\n        if (foundIceServers || identities.size > 0 || features.size > 0) {\n            this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n            this._sysMessageHandler = null;\n        }\n    }\n\n    /**\n     * Attach to existing connection. Can be used for optimizations. For\n     * example: if the connection is created on the server we can attach to it\n     * and start using it.\n     *\n     * @param options {object} connecting options - rid, sid, jid and password.\n     */\n    attach(options) {\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n\n        const now = this.connectionTimes.attaching = window.performance.now();\n\n        logger.log('(TIME) Strophe Attaching:\\t', now);\n        this.connection.attach(options.jid, options.sid,\n            parseInt(options.rid, 10) + 1,\n            this.connectionHandler.bind(this, {\n                jid: options.jid,\n                password: options.password\n            }));\n    }\n\n    /**\n     * Resets any state/flag before starting a new connection.\n     * @private\n     */\n    _resetState() {\n        this.anonymousConnectionFailed = false;\n        this.connectionFailed = false;\n        this.lastErrorMsg = undefined;\n        this.disconnectInProgress = undefined;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    connect(jid, password) {\n        if (!jid) {\n            const { anonymousdomain, domain } = this.options.hosts;\n            let configDomain = anonymousdomain || domain;\n\n            // Force authenticated domain if room is appended with '?login=true'\n            // or if we're joining with the token\n\n            // FIXME Do not rely on window.location because (1) React Native\n            // does not have a window.location by default and (2) here we cannot\n            // know for sure that query/search has not be stripped from\n            // window.location by the time the following executes.\n            const { location } = window;\n\n            if (anonymousdomain) {\n                const search = location && location.search;\n\n                if ((search && search.indexOf('login=true') !== -1)\n                        || this.token) {\n                    configDomain = domain;\n                }\n            }\n\n            // eslint-disable-next-line no-param-reassign\n            jid = configDomain || (location && location.hostname);\n        }\n\n        return this._connect(jid, password);\n    }\n\n    /**\n     * Joins or creates a muc with the provided jid, created from the passed\n     * in room name and muc host and onCreateResource result.\n     *\n     * @param {string} roomName - The name of the muc to join.\n     * @param {Object} options - Configuration for how to join the muc.\n     * @param {Function} [onCreateResource] - Callback to invoke when a resource\n     * is to be added to the jid.\n     * @returns {Promise} Resolves with an instance of a strophe muc.\n     */\n    createRoom(roomName, options, onCreateResource) {\n        // There are cases (when using subdomain) where muc can hold an uppercase part\n        let roomjid = `${roomName}@${options.customDomain\n            ? options.customDomain : this.options.hosts.muc.toLowerCase()}/`;\n\n        const mucNickname = onCreateResource\n            ? onCreateResource(this.connection.jid, this.authenticatedUser)\n            : RandomUtil.randomHexString(8).toLowerCase();\n\n        logger.info(`JID ${this.connection.jid} using MUC nickname ${mucNickname}`);\n        roomjid += mucNickname;\n\n        return this.connection.emuc.createRoom(roomjid, null, options);\n    }\n\n    /**\n     * Returns the jid of the participant associated with the Strophe connection.\n     *\n     * @returns {string} The jid of the participant.\n     */\n    getJid() {\n        return this.connection.jid;\n    }\n\n    /**\n     * Returns the logs from strophe.jingle.\n     * @returns {Object}\n     */\n    getJingleLog() {\n        const jingle = this.connection.jingle;\n\n\n        return jingle ? jingle.getLog() : {};\n    }\n\n    /**\n     * Returns the logs from strophe.\n     */\n    getXmppLog() {\n        return (this.connection.logger || {}).log || null;\n    }\n\n    /**\n     *\n     */\n    dial(...args) {\n        this.connection.rayo.dial(...args);\n    }\n\n    /**\n     * Pings the server.\n     * @param timeout how many ms before a timeout should occur.\n     * @returns {Promise} resolved on ping success and reject on an error or\n     * a timeout.\n     */\n    ping(timeout) {\n        return new Promise((resolve, reject) => {\n            this.connection.ping.ping(this.connection.pingDomain, resolve, reject, timeout);\n        });\n    }\n\n    /**\n     *\n     */\n    getSessions() {\n        return this.connection.jingle.sessions;\n    }\n\n    /**\n     * Disconnects this from the XMPP server (if this is connected).\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n     */\n    disconnect(ev) {\n        if (this.disconnectInProgress) {\n            return this.disconnectInProgress;\n        } else if (!this.connection) {\n            return Promise.resolve();\n        }\n\n        this.disconnectInProgress = new Promise(resolve => {\n            const disconnectListener = (credentials, status) => {\n                if (status === Strophe.Status.DISCONNECTED) {\n                    resolve();\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n                }\n            };\n\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n        });\n\n        this._cleanupXmppConnection(ev);\n\n        return this.disconnectInProgress;\n    }\n\n    /**\n     * The method is supposed to gracefully close the XMPP connection and the main goal is to make sure that the current\n     * participant will be removed from the conference XMPP MUC, so that it doesn't leave a \"ghost\" participant behind.\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to disconnect from the XMPP server\n     * (e.g. beforeunload, unload).\n     * @private\n     * @returns {void}\n     */\n    _cleanupXmppConnection(ev) {\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that means that there may not be enough time\n        // to send an unavailable presence or disconnect at all. Switching Strophe to synchronous sending is not much of\n        // an option because it may lead to a noticeable delay in navigating away from the current location. As\n        // a compromise, we will try to increase the chances of sending an unavailable presence and/or disconnecting\n        // within the short time span that we have upon unloading by invoking flush() on the connection. We flush() once\n        // before disconnect() in order to attempt to have its unavailable presence at the top of the send queue. We\n        // flush() once more after disconnect() in order to attempt to have its unavailable presence sent as soon as\n        // possible.\n        !this.connection.isUsingWebSocket && this.connection.flush();\n\n        if (!this.connection.isUsingWebSocket && ev !== null && typeof ev !== 'undefined') {\n            const evType = ev.type;\n\n            if (evType === 'beforeunload' || evType === 'unload') {\n                // XXX Whatever we said above, synchronous sending is the best (known) way to properly disconnect from\n                // the XMPP server. Consequently, it may be fine to have the source code and comment it in or out\n                // depending on whether we want to run with it for some time.\n                this.connection.options.sync = true;\n\n                // This is needed in some browsers where sync xhr sending is disabled by default on unload.\n                if (this.connection.sendUnavailableBeacon()) {\n\n                    return;\n                }\n            }\n        }\n\n        this.connection.disconnect();\n\n        if (this.connection.options.sync !== true) {\n            this.connection.flush();\n        }\n    }\n\n    /**\n     *\n     */\n    _initStrophePlugins() {\n        const iceConfig = {\n            jvb: { iceServers: [ ] },\n            p2p: { iceServers: [ ] }\n        };\n\n        const p2pStunServers = (this.options.p2p\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\n\n        if (Array.isArray(p2pStunServers)) {\n            logger.info('P2P STUN servers: ', p2pStunServers);\n            iceConfig.p2p.iceServers = p2pStunServers;\n        }\n\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\n            logger.info('P2P ICE transport policy: ',\n                this.options.p2p.iceTransportPolicy);\n\n            iceConfig.p2p.iceTransportPolicy\n                = this.options.p2p.iceTransportPolicy;\n        }\n\n        this.connection.addConnectionPlugin('emuc', new MucConnectionPlugin(this));\n        this.connection.addConnectionPlugin('jingle', new JingleConnectionPlugin(this, this.eventEmitter, iceConfig));\n        this.connection.addConnectionPlugin('rayo', new RayoConnectionPlugin());\n    }\n\n    /**\n     * Returns details about connection failure. Shard change or is it after\n     * suspend.\n     * @returns {object} contains details about a connection failure.\n     * @private\n     */\n    _getConnectionFailedReasonDetails() {\n        const details = {};\n\n        // check for moving between shard if information is available\n        if (this.options.deploymentInfo\n            && this.options.deploymentInfo.shard\n            && this.connection.lastResponseHeaders) {\n\n            // split headers by line\n            const headersArr = this.connection.lastResponseHeaders\n                .trim().split(/[\\r\\n]+/);\n            const headers = {};\n\n            headersArr.forEach(line => {\n                const parts = line.split(': ');\n                const header = parts.shift();\n                const value = parts.join(': ');\n\n                headers[header] = value;\n            });\n\n            /* eslint-disable camelcase */\n            details.shard_changed\n                = this.options.deploymentInfo.shard\n                    !== headers['x-jitsi-shard'];\n            /* eslint-enable camelcase */\n        }\n\n        /* eslint-disable camelcase */\n        // check for possible suspend\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\n        details.time_since_last_success = this.connection.getTimeSinceLastSuccess();\n        /* eslint-enable camelcase */\n\n        return details;\n    }\n\n    /**\n     * Notifies speaker stats component if available that we are the new\n     * dominant speaker in the conference.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     */\n    sendDominantSpeakerEvent(roomJid) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('speakerstats', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid })\n            .up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\n     * parsing it and checking if it has a field called 'type'.\n     *\n     * @param {string} jsonString check if this string is a valid json string\n     * and contains the special structure.\n     * @returns {boolean, object} if given object is a valid JSON string, return\n     * the json object. Otherwise, returns false.\n     */\n    tryParseJSONAndVerify(jsonString) {\n        try {\n            const json = JSON.parse(jsonString);\n\n            // Handle non-exception-throwing cases:\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\n            // hence the type-checking,\n            // but... JSON.parse(null) returns null, and\n            // typeof null === \"object\",\n            // so we must check for that, too.\n            // Thankfully, null is falsey, so this suffices:\n            if (json && typeof json === 'object') {\n                const type = json[JITSI_MEET_MUC_TYPE];\n\n                if (typeof type !== 'undefined') {\n                    return json;\n                }\n\n                logger.debug('parsing valid json but does not have correct '\n                    + 'structure', 'topic: ', type);\n            }\n        } catch (e) {\n            logger.error(e);\n\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     * A private message is received, message that is not addressed to the muc.\n     * We expect private message coming from plugins component if it is\n     * enabled and running.\n     *\n     * @param {string} msg - The message.\n     */\n    _onPrivateMessage(msg) {\n        const from = msg.getAttribute('from');\n\n        if (!(from === this.speakerStatsComponentAddress\n            || from === this.conferenceDurationComponentAddress)) {\n            return true;\n        }\n\n        const jsonMessage = $(msg).find('>json-message')\n            .text();\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\n\n        if (parsedJson\n            && parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats'\n            && parsedJson.users) {\n            this.eventEmitter.emit(\n                XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\n        }\n\n        if (parsedJson\n            && parsedJson[JITSI_MEET_MUC_TYPE] === 'conference_duration'\n            && parsedJson.created_timestamp) {\n            this.eventEmitter.emit(\n                XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED, parsedJson.created_timestamp);\n        }\n\n        return true;\n    }\n}\n","/**\n * Status that video SIP GW service is available.\n * @type {string}\n */\nexport const STATUS_AVAILABLE = 'available';\n\n/**\n * Status that video SIP GW service is not available.\n * @type {string}\n */\nexport const STATUS_UNDEFINED = 'undefined';\n\n/**\n * Status that video SIP GW service is available but there are no free nodes\n * at the moment to serve new requests.\n * @type {string}\n */\nexport const STATUS_BUSY = 'busy';\n\n/**\n * Video SIP GW session state, currently running.\n * @type {string}\n */\nexport const STATE_ON = 'on';\n\n/**\n * Video SIP GW session state, currently stopped and not running.\n * @type {string}\n */\nexport const STATE_OFF = 'off';\n\n/**\n * Video SIP GW session state, currently is starting.\n * @type {string}\n */\nexport const STATE_PENDING = 'pending';\n\n/**\n * Video SIP GW session state, has observed some issues and is retrying at the\n * moment.\n * @type {string}\n */\nexport const STATE_RETRYING = 'retrying';\n\n/**\n * Video SIP GW session state, tried to start but it failed.\n * @type {string}\n */\nexport const STATE_FAILED = 'failed';\n\n/**\n * Error on trying to create video SIP GW session in conference where\n * there is no room connection (hasn't joined or has left the room).\n * @type {string}\n */\nexport const ERROR_NO_CONNECTION = 'error_no_connection';\n\n/**\n * Error on trying to create video SIP GW session with address for which\n * there is an already created session.\n * @type {string}\n */\nexport const ERROR_SESSION_EXISTS = 'error_session_already_exists';\n","/**\n * The events for the connection.\n */\n\n/**\n * Indicates that the connection has been disconnected. The event provides\n * the following parameters to its listeners:\n *\n * @param msg {string} a message associated with the disconnect such as the\n * last (known) error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.connectionDisconnected';\n\n/**\n * Indicates that the connection has been established. The event provides\n * the following parameters to its listeners:\n *\n * @param id {string} the ID of the local endpoint/participant/peer (within\n * the context of the established connection)\n */\nexport const CONNECTION_ESTABLISHED = 'connection.connectionEstablished';\n\n/**\n * Indicates that the connection has been failed for some reason. The event\n * provides the following parameters to its listeners:\n *\n * @param errType {JitsiConnectionErrors} the type of error associated with\n * the failure\n * @param errReason {string} the error (message) associated with the failure\n * @param credentials {object} the credentials used to connect (if any)\n * @param errReasonDetails {object} an optional object with details about\n * the error, like shard moving, suspending. Used for analytics purposes.\n */\nexport const CONNECTION_FAILED = 'connection.connectionFailed';\n\n/**\n * Indicates that the performed action cannot be executed because the\n * connection is not in the correct state(connected, disconnected, etc.)\n */\nexport const WRONG_STATE = 'connection.wrongState';\n\n/**\n * Indicates that the display name is required over this connection and need to be supplied when\n * joining the room.\n * There are cases like lobby room where display name is required.\n */\nexport const DISPLAY_NAME_REQUIRED = 'connection.display_name_required';\n","/**\n * Notifies about audio level in RTP statistics by SSRC.\n *\n * @param ssrc - The synchronization source identifier (SSRC) of the\n * endpoint/participant whose audio level is being reported.\n * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\n * RTP statistics.\n * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\n * local endpoint/participant; otherwise, <tt>false</tt>.\n */\nexport const AUDIO_LEVEL = 'statistics.audioLevel';\n\n/**\n * An event fired just before the statistics module gets disposes and it's\n * the last chance to submit some logs that will end up in stats services like\n * CallStats (if enabled).\n */\nexport const BEFORE_DISPOSED = 'statistics.before_disposed';\n\n/**\n * An event carrying all statistics by ssrc.\n */\nexport const BYTE_SENT_STATS = 'statistics.byte_sent_stats';\n\n/**\n * An event carrying connection statistics.\n *\n * @param {object} connectionStats - The connection statistics carried by the\n * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\n * <tt>resolution</tt>, and <tt>transport</tt>.\n */\nexport const CONNECTION_STATS = 'statistics.connectionstats';\n\n/**\n * An event carrying performance stats.\n */\nexport const LONG_TASKS_STATS = 'statistics.long_tasks_stats';\n","\n/**\n * The method will increase the given number by 1. If the given counter is equal\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\n * 1.\n * @param {number} number - An integer counter value to be incremented.\n * @return {number} the next counter value increased by 1 (see the description\n * above for exception).\n */\nexport function safeCounterIncrement(number) {\n    let nextValue = number;\n\n    if (number >= Number.MAX_SAFE_INTEGER) {\n        nextValue = 0;\n    }\n\n    return nextValue + 1;\n}\n\n/**\n * Calculates the average value of am Array of numbers.\n *\n * @param {Float32Array} valueArray - Array of numbers.\n * @returns {number} - Number array average.\n */\nexport function calculateAverage(valueArray) {\n    return valueArray.length > 0 ? valueArray.reduce((a, b) => a + b) / valueArray.length : 0;\n}\n\n/**\n * Calculates a unique hash for a given string similar to Java's\n * implementation of String.hashCode()\n *\n * @param {String} string - String whose hash has to be calculated.\n * @returns {number} - Unique hash code calculated.\n */\nexport function hashString(string) {\n    let hash = 0;\n\n    for (let i = 0; i < string.length; i++) {\n        hash += Math.pow(string.charCodeAt(i) * 31, string.length - i);\n\n        /* eslint-disable no-bitwise */\n        hash = hash & hash; // Convert to 32bit integer\n    }\n\n    return Math.abs(hash);\n}\n\n/**\n * Returns only the positive values from an array of numbers.\n *\n * @param {Float32Array} valueArray - Array of vad scores.\n * @returns {Array} - Array of positive numbers.\n */\nexport function filterPositiveValues(valueArray) {\n    return valueArray.filter(value => value >= 0);\n}\n\n/**\n * This class calculates a simple running average that continually changes\n * as more data points are collected and added.\n */\nexport class RunningAverage {\n    /**\n     * Creates an instance of the running average calculator.\n     */\n    constructor() {\n        this.average = 0;\n        this.n = 0;\n    }\n\n    /**\n     * Adds a new data point to the existing set of values and recomputes\n     * the running average.\n     * @param {number} value\n     * @returns {void}\n     */\n    addNext(value) {\n        if (typeof value !== 'number') {\n            return;\n        }\n        this.n += 1;\n        this.average = this.average + ((value - this.average) / this.n);\n    }\n\n    /**\n     * Obtains the average value for the current subset of values.\n     * @returns {number} - computed average.\n     */\n    getAverage() {\n        return this.average;\n    }\n}\n","import { jitsiLocalStorage } from '@jitsi/js-utils';\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\nimport UsernameGenerator from '../util/UsernameGenerator';\n\nlet _callStatsUserName;\n\nlet _machineId;\n\n/**\n *\n */\nexport default {\n\n    /**\n     * The storage used to store the settings.\n     */\n    _storage: jitsiLocalStorage,\n\n    /**\n     * Initializes the Settings class.\n     *\n     * @param {Storage|undefined} externalStorage - Object that implements the Storage interface. This object will be\n     * used for storing data instead of jitsiLocalStorage if specified.\n     */\n    init(externalStorage) {\n        this._storage = externalStorage || jitsiLocalStorage;\n    },\n\n    /**\n     * Returns fake username for callstats\n     * @returns {string} fake username for callstats\n     */\n    get callStatsUserName() {\n        if (!_callStatsUserName) {\n            _callStatsUserName = this._storage.getItem('callStatsUserName');\n            if (!_callStatsUserName) {\n                _callStatsUserName = generateCallStatsUserName();\n                this._storage.setItem('callStatsUserName', _callStatsUserName);\n            }\n        }\n\n        return _callStatsUserName;\n    },\n\n    /**\n     * Returns current machine id.\n     * @returns {string} machine id\n     */\n    get machineId() {\n        if (!_machineId) {\n            const amDid = this._storage.getItem('billingId');\n\n            _machineId = amDid || this._storage.getItem('jitsiMeetId');\n\n            if (amDid) {\n                this._storage.setItem('jitsiMeetId', amDid);\n            } else if (!_machineId) {\n                _machineId = generateJitsiMeetId();\n                this._storage.setItem('jitsiMeetId', _machineId);\n            }\n        }\n\n        return _machineId;\n    },\n\n    /**\n     * Returns current session id.\n     * @returns {string} current session id\n     */\n    get sessionId() {\n        // We may update sessionId in localStorage from another JitsiConference\n        // instance and that's why we should always re-read it.\n        return this._storage.getItem('sessionId');\n    },\n\n    /**\n     * Save current session id.\n     * @param {string} sessionId session id\n     */\n    set sessionId(sessionId) {\n        if (sessionId) {\n            this._storage.setItem('sessionId', sessionId);\n        } else {\n            this._storage.removeItem('sessionId');\n        }\n    }\n};\n\n/**\n * Generate fake username for callstats.\n * @returns {string} fake random username\n */\nfunction generateCallStatsUserName() {\n    const username = UsernameGenerator.generateUsername();\n\n    logger.log('generated callstats uid', username);\n\n    return username;\n}\n\n/**\n * Generate unique id.\n * @returns {string} random unique id\n */\nfunction generateJitsiMeetId() {\n    const jitsiMeetId = generateUniqueId();\n\n    logger.log('generated id', jitsiMeetId);\n\n    return jitsiMeetId;\n}\n\n/**\n *\n */\nfunction generateUniqueId() {\n    return _p8() + _p8() + _p8() + _p8();\n}\n\n/**\n *\n */\nfunction _p8() {\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\n}\n","import * as transform from 'sdp-transform';\n\n/**\n * Parses the primary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the primary SSRC number\n */\nexport function parsePrimarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[0], 10);\n}\n\n/**\n * Parses the secondary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the secondary SSRC number\n */\nexport function parseSecondarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[1], 10);\n}\n\n/**\n * Tells how many distinct SSRCs are contained in given media line.\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\n * @return {number}\n */\nfunction _getSSRCCount(mLine) {\n    if (!mLine.ssrcs) {\n        return 0;\n    }\n\n    return mLine.ssrcs\n        .map(ssrcInfo => ssrcInfo.id)\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n        .length;\n}\n\n/**\n * A wrapper around 'sdp-transform' media description object which provides\n * utility methods for common SDP/SSRC related operations.\n */\nclass MLineWrap {\n\n    /**\n     * Creates new <tt>MLineWrap</t>>\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\n     * lib.\n     */\n    constructor(mLine) {\n        if (!mLine) {\n            throw new Error('mLine is undefined');\n        }\n\n        this.mLine = mLine;\n    }\n\n    /**\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\n     * one will be preassigned.\n     *\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    get ssrcs() {\n        if (!this.mLine.ssrcs) {\n            this.mLine.ssrcs = [];\n        }\n\n        return this.mLine.ssrcs;\n    }\n\n    /**\n     * Setter for the mLine's \"ssrcs\" array.\n     *\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    set ssrcs(ssrcs) {\n        this.mLine.ssrcs = ssrcs;\n    }\n\n    /**\n     * Returns the direction of the underlying media description.\n     * @return {string} the media direction name as defined in the SDP.\n     */\n    get direction() {\n        return this.mLine.direction;\n    }\n\n    /**\n     * Modifies the direction of the underlying media description.\n     * @param {string} direction the new direction to be set\n     */\n    set direction(direction) {\n        this.mLine.direction = direction;\n    }\n\n    /**\n     * Exposes the SSRC group array of the underlying media description object.\n     * @return {Array.<Object>}\n     */\n    get ssrcGroups() {\n        if (!this.mLine.ssrcGroups) {\n            this.mLine.ssrcGroups = [];\n        }\n\n        return this.mLine.ssrcGroups;\n    }\n\n    /**\n     * Modifies the SSRC groups array of the underlying media description\n     * object.\n     * @param {Array.<Object>} ssrcGroups\n     */\n    set ssrcGroups(ssrcGroups) {\n        this.mLine.ssrcGroups = ssrcGroups;\n    }\n\n    /**\n     * Obtains value from SSRC attribute.\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\n     * found\n     * @param {string} attrName the name of the SSRC attribute to be found.\n     * @return {string|undefined} the value of SSRC attribute or\n     * <tt>undefined</tt> if no such attribute exists.\n     */\n    getSSRCAttrValue(ssrcNumber, attrName) {\n        const attribute = this.ssrcs.find(\n            ssrcObj => ssrcObj.id === ssrcNumber\n            && ssrcObj.attribute === attrName);\n\n\n        return attribute && attribute.value;\n    }\n\n    /**\n     * Removes all attributes for given SSRC number.\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\n     * removed.\n     */\n    removeSSRC(ssrcNum) {\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\n            return;\n        }\n\n        this.mLine.ssrcs\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\n    }\n\n    /**\n     * Adds SSRC attribute\n     * @param {object} ssrcObj the SSRC attribute object as defined in\n     * the 'sdp-transform' lib.\n     */\n    addSSRCAttribute(ssrcObj) {\n        this.ssrcs.push(ssrcObj);\n    }\n\n    /**\n     * Finds a SSRC group matching both semantics and SSRCs in order.\n     * @param {string} semantics the name of the semantics\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\n     * not found.\n     */\n    findGroup(semantics, ssrcs) {\n        return this.ssrcGroups.find(\n            group =>\n                group.semantics === semantics\n                    && (!ssrcs || ssrcs === group.ssrcs));\n    }\n\n    /**\n     * Finds all groups matching given semantic's name.\n     * @param {string} semantics the name of the semantics\n     * @return {Array.<object>} an array of SSRC group objects as defined by\n     * the 'sdp-transform' lib.\n     */\n    findGroups(semantics) {\n        return this.ssrcGroups.filter(\n            group => group.semantics === semantics);\n    }\n\n    /**\n     * Finds all groups matching given semantic's name and group's primary SSRC.\n     * @param {string} semantics the name of the semantics\n     * @param {number} primarySSRC the primary SSRC number to be matched\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\n     */\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\n        return this.ssrcGroups.find(\n            group => group.semantics === semantics\n                && parsePrimarySSRC(group) === primarySSRC);\n    }\n\n    /**\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\n     * the first SSRC object with any 'msid' value.\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\n     * lib.\n     */\n    findSSRCByMSID(msid) {\n        return this.ssrcs.find(\n            ssrcObj => ssrcObj.attribute === 'msid'\n                && (msid === null || ssrcObj.value === msid));\n    }\n\n    /**\n     * Gets the SSRC count for the underlying media description.\n     * @return {number}\n     */\n    getSSRCCount() {\n        return _getSSRCCount(this.mLine);\n    }\n\n    /**\n     * Checks whether the underlying media description contains any SSRC groups.\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\n     * <tt>false</tt> otherwise.\n     */\n    containsAnySSRCGroups() {\n        return this.mLine.ssrcGroups !== undefined;\n    }\n\n    /**\n     * Finds the primary video SSRC.\n     * @returns {number|undefined} the primary video ssrc\n     * @throws Error if the underlying media description is not a video\n     */\n    getPrimaryVideoSsrc() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\n        }\n\n        const numSsrcs = _getSSRCCount(this.mLine);\n\n        if (numSsrcs === 1) {\n            // Not using \"ssrcs\" getter on purpose here\n            return this.mLine.ssrcs[0].id;\n        }\n\n        // Look for a SIM, FID, or FEC-FR group\n        if (this.mLine.ssrcGroups) {\n            const simGroup = this.findGroup('SIM');\n\n            if (simGroup) {\n                return parsePrimarySSRC(simGroup);\n            }\n            const fidGroup = this.findGroup('FID');\n\n            if (fidGroup) {\n                return parsePrimarySSRC(fidGroup);\n            }\n            const fecGroup = this.findGroup('FEC-FR');\n\n            if (fecGroup) {\n                return parsePrimarySSRC(fecGroup);\n            }\n        }\n\n    }\n\n    /**\n     * Obtains RTX SSRC from the underlying video description (the\n     * secondary SSRC of the first \"FID\" group found)\n     * @param {number} primarySsrc the video ssrc for which to find the\n     * corresponding rtx ssrc\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\n     * one)\n     */\n    getRtxSSRC(primarySsrc) {\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\n\n\n        return fidGroup && parseSecondarySSRC(fidGroup);\n    }\n\n    /**\n     * Obtains all SSRCs contained in the underlying media description.\n     * @return {Array.<number>} an array with all SSRC as numbers.\n     */\n    getSSRCs() {\n        return this.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\n    }\n\n    /**\n     * Obtains primary video SSRCs.\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\n     * @throws Error if the wrapped media description is not a video.\n     */\n    getPrimaryVideoSSRCs() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\n        }\n\n        const videoSSRCs = this.getSSRCs();\n\n        for (const ssrcGroupInfo of this.ssrcGroups) {\n            // Right now, FID and FEC-FR groups are the only ones we parse to\n            // disqualify streams.  If/when others arise we'll\n            // need to add support for them here\n            if (ssrcGroupInfo.semantics === 'FID'\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\n                // secondary streams should be filtered out\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\n\n                videoSSRCs.splice(\n                    videoSSRCs.indexOf(secondarySsrc), 1);\n            }\n        }\n\n        return videoSSRCs;\n    }\n\n    /**\n     * Dumps all SSRC groups of this media description to JSON.\n     */\n    dumpSSRCGroups() {\n        return JSON.stringify(this.mLine.ssrcGroups);\n    }\n\n    /**\n     * Removes all SSRC groups which contain given SSRC number at any position.\n     * @param {number} ssrc the SSRC for which all matching groups are to be\n     * removed.\n     */\n    removeGroupsWithSSRC(ssrc) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\n    }\n\n    /**\n     * Removes groups that match given semantics.\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\n     */\n    removeGroupsBySemantics(semantics) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups\n            = this.mLine.ssrcGroups\n                .filter(groupInfo => groupInfo.semantics !== semantics);\n    }\n\n    /**\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\n     * @param {number} oldSSRC the old SSRC number\n     * @param {number} newSSRC the new SSRC number\n     */\n    replaceSSRC(oldSSRC, newSSRC) {\n        if (this.mLine.ssrcs) {\n            this.mLine.ssrcs.forEach(ssrcInfo => {\n                if (ssrcInfo.id === oldSSRC) {\n                    ssrcInfo.id = newSSRC;\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds given SSRC group to this media description.\n     * @param {object} group the SSRC group object as defined by\n     * the 'sdp-transform' lib.\n     */\n    addSSRCGroup(group) {\n        this.ssrcGroups.push(group);\n    }\n}\n\n/**\n * Utility class for SDP manipulation using the 'sdp-transform' library.\n *\n * Typical use usage scenario:\n *\n * const transformer = new SdpTransformWrap(rawSdp);\n * const videoMLine = transformer.selectMedia('video);\n * if (videoMLine) {\n *     videoMLiner.addSSRCAttribute({\n *         id: 2342343,\n *         attribute: \"cname\",\n *         value: \"someCname\"\n *     });\n *     rawSdp = transformer.toRawSdp();\n * }\n */\nexport class SdpTransformWrap {\n\n    /**\n     * Creates new instance and parses the raw SDP into objects using\n     * 'sdp-transform' lib.\n     * @param {string} rawSDP the SDP in raw text format.\n     */\n    constructor(rawSDP) {\n        this.parsedSDP = transform.parse(rawSDP);\n    }\n\n    /**\n     * Selects the first media SDP of given name.\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video',\n     * 'data'.\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media\n     * line or <tt>null</tt> if not found. The object returned references\n     * the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance\n     * (it's not a copy).\n     */\n    selectMedia(mediaType) {\n        const selectedMLine\n            = this.parsedSDP.media.find(mLine => mLine.type === mediaType);\n\n        return selectedMLine ? new MLineWrap(selectedMLine) : null;\n    }\n\n    /**\n     * Converts the currently stored SDP state in this instance to raw text SDP\n     * format.\n     * @return {string}\n     */\n    toRawSDP() {\n        return transform.write(this.parsedSDP);\n    }\n}\n","/**\n * Indicates that the local connection statistics were updated.\n */\nexport const LOCAL_STATS_UPDATED = 'cq.local_stats_updated';\n\n/**\n * Indicates that the connection statistics for a particular remote participant\n * were updated.\n */\nexport const REMOTE_STATS_UPDATED = 'cq.remote_stats_updated';\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","/**\n * The pending Jingle session state which means the session as defined in\n * XEP-0166(before 'session-invite/session-accept' took place).\n *\n * @type {string}\n */\nexport const PENDING = 'pending';\n\n/**\n * The active Jingle session state as defined in XEP-0166\n * (after 'session-invite'/'session-accept').\n *\n * @type {string}\n */\nexport const ACTIVE = 'active';\n\n/**\n * The ended Jingle session state as defined in XEP-0166\n * (after 'session-terminate').\n * @type {string}\n */\nexport const ENDED = 'ended';\n","/**\n * The know jingle actions that can be sent and should be acted upon by\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\n */\nexport const ACTIONS = {\n    ACCEPT: 'session-accept',\n    CONNECTION_ERROR: 'connection-error-encountered',\n    INITIATE: 'session-initiate',\n    TERMINATE: 'session-terminate',\n    TRANSPORT_INFO: 'transport-info',\n    UNAVAILABLE: 'unavailable'\n};\n","const Resolutions = {\n    '1080': {\n        width: 1920,\n        height: 1080,\n        order: 8\n    },\n    'fullhd': {\n        width: 1920,\n        height: 1080,\n        order: 8\n    },\n    '720': {\n        width: 1280,\n        height: 720,\n        order: 7\n    },\n    'hd': {\n        width: 1280,\n        height: 720,\n        order: 7\n    },\n    '960': {\n        width: 960,\n        height: 720,\n        order: 6\n    },\n    '540': {\n        width: 960,\n        height: 540,\n        order: 5\n    },\n    'qhd': {\n        width: 960,\n        height: 540,\n        order: 5\n    },\n\n    // 16:9 resolution first.\n    '360': {\n        width: 640,\n        height: 360,\n        order: 4\n    },\n    '640': {\n        width: 640,\n        height: 480,\n        order: 3\n    },\n    'vga': {\n        width: 640,\n        height: 480,\n        order: 3\n    },\n\n    // 16:9 resolution first.\n    '180': {\n        width: 320,\n        height: 180,\n        order: 2\n    },\n    '320': {\n        width: 320,\n        height: 240,\n        order: 1\n    }\n};\n\nmodule.exports = Resolutions;\n","/* global callstats */\n\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * We define enumeration of wrtcFuncNames as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\n */\nconst wrtcFuncNames = {\n    createOffer: 'createOffer',\n    createAnswer: 'createAnswer',\n    setLocalDescription: 'setLocalDescription',\n    setRemoteDescription: 'setRemoteDescription',\n    addIceCandidate: 'addIceCandidate',\n    getUserMedia: 'getUserMedia',\n    iceConnectionFailure: 'iceConnectionFailure',\n    signalingError: 'signalingError',\n    applicationLog: 'applicationLog'\n};\n\n/**\n * We define enumeration of fabricEvent as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\n */\nconst fabricEvent = {\n    fabricHold: 'fabricHold',\n    fabricResume: 'fabricResume',\n    audioMute: 'audioMute',\n    audioUnmute: 'audioUnmute',\n    videoPause: 'videoPause',\n    videoResume: 'videoResume',\n    fabricUsageEvent: 'fabricUsageEvent',\n    fabricStats: 'fabricStats',\n    fabricTerminated: 'fabricTerminated',\n    screenShareStart: 'screenShareStart',\n    screenShareStop: 'screenShareStop',\n    dominantSpeaker: 'dominantSpeaker',\n    activeDeviceList: 'activeDeviceList'\n};\n\n/**\n * The user id to report to callstats as destination.\n * @type {string}\n */\nconst DEFAULT_REMOTE_USER = 'jitsi';\n\n/**\n * Type of pending reports, can be event or an error.\n * @type {{ERROR: string, EVENT: string}}\n */\nconst reportType = {\n    ERROR: 'error',\n    EVENT: 'event',\n    MST_WITH_USERID: 'mstWithUserID'\n};\n\n/**\n * Set of currently existing {@link CallStats} instances.\n * @type {Set<CallStats>}\n */\nlet _fabrics;\n\n/**\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\n * reports one peer connection to the CallStats backend and is allocated with\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\n * reporting various events. A fabric is considered disposed when\n * {@link CallStats.sendTerminateEvent} is executed.\n *\n * Currently only one backend instance can be created ever and it's done using\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\n * explicitly shutdown the backend, but it's supposed to close it's connection\n * automatically, after all fabrics have been terminated.\n */\nexport default class CallStats {\n    /**\n     * A callback passed to {@link callstats.addNewFabric}.\n     * @param {string} error 'success' means ok\n     * @param {string} msg some more details\n     * @private\n     */\n    static _addNewFabricCallback(error, msg) {\n        if (CallStats.backend && error !== 'success') {\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\n        }\n    }\n\n    /**\n     * Callback passed to {@link callstats.initialize} (backend initialization)\n     * @param {string} error 'success' means ok\n     * @param {String} msg\n     * @private\n     */\n    static _initCallback(error, msg) {\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\n\n        // there is no lib, nothing to report to\n        if (error !== 'success') {\n            return;\n        }\n\n        CallStats.backendInitialized = true;\n\n        // I hate that\n        let atLeastOneFabric = false;\n        let defaultInstance = null;\n\n        for (const callStatsInstance of CallStats.fabrics.values()) {\n            if (!callStatsInstance.hasFabric) {\n                logger.debug('addNewFabric - initCallback');\n                if (callStatsInstance._addNewFabric()) {\n                    atLeastOneFabric = true;\n                    if (!defaultInstance) {\n                        defaultInstance = callStatsInstance;\n                    }\n                }\n            }\n        }\n\n        if (!atLeastOneFabric) {\n            return;\n        }\n\n        CallStats._emptyReportQueue(defaultInstance);\n    }\n\n    /**\n     * Empties report queue.\n     *\n     * @param {CallStats} csInstance - The callstats instance.\n     * @private\n     */\n    static _emptyReportQueue(csInstance) {\n        // There is no conference ID nor a PeerConnection available when some of\n        // the events are scheduled on the reportsQueue, so those will be\n        // reported on the first initialized fabric.\n        const defaultConfID = csInstance.confID;\n        const defaultPC = csInstance.peerconnection;\n\n        // notify callstats about failures if there were any\n        for (const report of CallStats.reportsQueue) {\n            if (report.type === reportType.ERROR) {\n                const errorData = report.data;\n\n                CallStats._reportError(\n                    csInstance,\n                    errorData.type,\n                    errorData.error,\n                    errorData.pc || defaultPC);\n            } else if (report.type === reportType.EVENT) {\n                // if we have and event to report and we failed to add\n                // fabric this event will not be reported anyway, returning\n                // an error\n                const eventData = report.data;\n\n                CallStats.backend.sendFabricEvent(\n                    report.pc || defaultPC,\n                    eventData.event,\n                    defaultConfID,\n                    eventData.eventData);\n            } else if (report.type === reportType.MST_WITH_USERID) {\n                const data = report.data;\n\n                CallStats.backend.associateMstWithUserID(\n                    report.pc || defaultPC,\n                    data.callStatsId,\n                    defaultConfID,\n                    data.ssrc,\n                    data.usageLabel,\n                    data.containerId\n                );\n            }\n        }\n        CallStats.reportsQueue.length = 0;\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} [cs]\n     * @param type the type of the error, which will be one of the wrtcFuncNames\n     * @param error the error\n     * @param pc the peerconnection\n     * @private\n     */\n    static _reportError(cs, type, error, pc) {\n        let _error = error;\n\n        if (!_error) {\n            logger.warn('No error is passed!');\n            _error = new Error('Unknown error');\n        }\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.ERROR,\n                data: {\n                    error: _error,\n                    pc,\n                    type\n                }\n            });\n        }\n\n        // else just ignore it\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} cs\n     * @param event the type of the event, which will be one of the fabricEvent\n     * @param eventData additional data to pass to event\n     * @private\n     */\n    static _reportEvent(cs, event, eventData) {\n        const pc = cs && cs.peerconnection;\n        const confID = cs && cs.confID;\n\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\n        } else {\n            CallStats.reportsQueue.push({\n                confID,\n                pc,\n                type: reportType.EVENT,\n                data: { event,\n                    eventData }\n            });\n        }\n    }\n\n    /**\n     * Wraps some of the CallStats API method and logs their calls with\n     * arguments on the debug logging level. Also wraps some of the backend\n     * methods execution into try catch blocks to not crash the app in case\n     * there is a problem with the backend itself.\n     * @param {callstats} theBackend\n     * @private\n     */\n    static _traceAndCatchBackendCalls(theBackend) {\n        const tryCatchMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of tryCatchMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                try {\n                    return originalMethod.apply(theBackend, theArguments);\n                } catch (e) {\n                    GlobalOnErrorHandler.callErrorHandler(e);\n                }\n            };\n        }\n        const debugMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of debugMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                logger.debug(methodName, theArguments);\n                originalMethod.apply(theBackend, theArguments);\n            };\n        }\n        const originalReportError = theBackend.reportError;\n\n        /* eslint-disable max-params */\n        theBackend.reportError = function(pc, cs, type, ...args) {\n            // Logs from the logger are submitted on the applicationLog event\n            // \"type\". Logging the arguments on the logger will create endless\n            // loop, because it will put all the logs to the logger queue again.\n            if (type === wrtcFuncNames.applicationLog) {\n                // NOTE otherArguments are not logged to the console on purpose\n                // to not log the whole log batch\n                // FIXME check the current logging level (currently not exposed\n                // by the logger implementation)\n                // NOTE it is not safe to log whole objects on react-native as\n                // those contain too many circular references and may crash\n                // the app.\n                if (!browser.isReactNative()) {\n                    console && console.debug('reportError', pc, cs, type);\n                }\n            } else {\n                logger.debug('reportError', pc, cs, type, ...args);\n            }\n            try {\n                originalReportError.call(theBackend, pc, cs, type, ...args);\n            } catch (exception) {\n                if (type === wrtcFuncNames.applicationLog) {\n                    console && console.error('reportError', exception);\n                } else {\n                    GlobalOnErrorHandler.callErrorHandler(exception);\n                }\n            }\n        };\n\n        /* eslint-enable max-params */\n    }\n\n    /**\n     * Returns the Set with the currently existing {@link CallStats} instances.\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<CallStats>}\n     */\n    static get fabrics() {\n        if (!_fabrics) {\n            _fabrics = new Set();\n        }\n\n        return _fabrics;\n    }\n\n    /**\n     * Initializes the CallStats backend. Should be called only if\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\n     * @param {object} options\n     * @param {String} options.callStatsID CallStats credentials - ID\n     * @param {String} options.callStatsSecret CallStats credentials - secret\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\n     * @param {string} options.userName the <tt>userName</tt> part of\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\n     *\n     */\n    static initBackend(options) {\n        if (CallStats.backend) {\n            throw new Error('CallStats backend has been initialized already!');\n        }\n        try {\n            const CallStatsBackend = callstats;\n\n            CallStats.backend = new CallStatsBackend();\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\n            CallStats.userID = {\n                aliasName: options.aliasName,\n                userName: options.userName\n            };\n            CallStats.callStatsID = options.callStatsID;\n            CallStats.callStatsSecret = options.callStatsSecret;\n\n            let configParams;\n\n            if (options.applicationName) {\n                configParams = {\n                    applicationVersion:\n                        `${options.applicationName} (${\n                            browser.getName()})`\n                };\n            }\n\n            if (options.confID) {\n                // we first check is there a tenant in the confID\n                const match = options.confID.match(/.*\\/(.*)\\/.*/);\n\n                // if there is no tenant, we will just set '/'\n                configParams.siteID = options.siteID || (match && match[1]) || '/';\n            }\n\n            // userID is generated or given by the origin server\n            CallStats.backend.initialize(\n                CallStats.callStatsID,\n                CallStats.callStatsSecret,\n                CallStats.userID,\n                CallStats._initCallback,\n                undefined,\n                configParams);\n\n            const getWiFiStatsMethod = options.getWiFiStatsMethod;\n\n            if (getWiFiStatsMethod) {\n                CallStats.backend.attachWifiStatsHandler(getWiFiStatsMethod);\n\n                getWiFiStatsMethod().then(result => {\n                    if (result) {\n                        logger.info('Reported wifi addresses:'\n                            , JSON.parse(result).addresses);\n                    }\n                })\n                .catch(() => {});// eslint-disable-line no-empty-function\n            }\n\n            return true;\n        } catch (e) {\n            // The callstats.io API failed to initialize (e.g. because its\n            // download did not succeed in general or on time). Further attempts\n            // to utilize it cannot possibly succeed.\n            GlobalOnErrorHandler.callErrorHandler(e);\n            CallStats.backend = null;\n            logger.error(e);\n\n            return false;\n        }\n    }\n\n    /**\n     * Checks if the CallStats backend has been created. It does not mean that\n     * it has been initialized, but only that the API instance has been\n     * allocated successfully.\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\n     * otherwise\n     */\n    static isBackendInitialized() {\n        return Boolean(CallStats.backend);\n    }\n\n    /**\n     * Notifies CallStats about active device.\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\n     * their data\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendActiveDeviceListEvent(devicesData, cs) {\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\n    }\n\n    /**\n     * Notifies CallStats that there is a log we want to report.\n     *\n     * @param {Error} e error to send or {String} message\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendApplicationLog(e, cs) {\n        try {\n            CallStats._reportError(\n                cs,\n                wrtcFuncNames.applicationLog,\n                e,\n                cs && cs.peerconnection);\n        } catch (error) {\n            // If sendApplicationLog fails it should not be printed to\n            // the logger, because it will try to push the logs again\n            // (through sendApplicationLog) and an endless loop is created.\n            if (console && (typeof console.error === 'function')) {\n                // FIXME send analytics event as well\n                console.error('sendApplicationLog failed', error);\n            }\n        }\n    }\n\n    /**\n     * Sends the given feedback through CallStats.\n     *\n     * @param {string} conferenceID the conference ID for which the feedback\n     * will be reported.\n     * @param overall an integer between 1 and 5 indicating the\n     * user feedback\n     * @param comment detailed feedback from the user.\n     */\n    static sendFeedback(conferenceID, overall, comment) {\n        return new Promise((resolve, reject) => {\n            if (CallStats.backend) {\n                CallStats.backend.sendUserFeedback(\n                    conferenceID,\n                    {\n                        userID: CallStats.userID,\n                        overall,\n                        comment\n                    },\n                    (status, message) => {\n                        if (status === 'success') {\n                            resolve(message);\n                        } else {\n                            reject(message);\n                        }\n                    });\n            } else {\n                const reason = 'Failed to submit feedback to CallStats - no backend';\n\n                logger.error(reason);\n                reject(reason);\n            }\n        });\n    }\n\n    /**\n     * Notifies CallStats that getUserMedia failed.\n     *\n     * @param {Error} e error to send\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendGetUserMediaFailed(e, cs) {\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\n    }\n\n    /**\n     * Notifies CallStats for mute events\n     * @param mute {boolean} true for muted and false for not muted\n     * @param type {String} \"audio\"/\"video\"\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendMuteEvent(mute, type, cs) {\n        let event;\n\n        if (type === 'video') {\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\n        } else {\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\n        }\n\n        CallStats._reportEvent(cs, event);\n    }\n\n    /**\n     * Creates new CallStats instance that handles all callstats API calls for\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\n     * one CallStats fabric added with 'addFabric' API method for the\n     * {@link TraceablePeerConnection} instance passed in the constructor.\n     * @param {TraceablePeerConnection} tpc\n     * @param {Object} options\n     * @param {string} options.confID the conference ID that wil be used to\n     * report the session.\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\n     * which given <tt>tpc</tt> is connected.\n     */\n    constructor(tpc, options) {\n        this.confID = options.confID;\n        this.tpc = tpc;\n        this.peerconnection = tpc.peerconnection;\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\n        this.hasFabric = false;\n\n        CallStats.fabrics.add(this);\n\n        if (CallStats.backendInitialized) {\n            this._addNewFabric();\n\n            // if this is the first fabric let's try to empty the\n            // report queue. Reports all events that we recorded between\n            // backend initialization and receiving the first fabric\n            if (CallStats.fabrics.size === 1) {\n                CallStats._emptyReportQueue(this);\n            }\n        }\n    }\n\n    /**\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\n     * the peer connection associated with this instance.\n     * @return {boolean} true if the call was successful or false otherwise.\n     */\n    _addNewFabric() {\n        logger.info('addNewFabric', this.remoteUserID);\n        try {\n            const fabricAttributes = {\n                remoteEndpointType:\n                    this.tpc.isP2P\n                        ? CallStats.backend.endpointType.peer\n                        : CallStats.backend.endpointType.server\n            };\n            const ret\n                = CallStats.backend.addNewFabric(\n                    this.peerconnection,\n                    this.remoteUserID,\n                    CallStats.backend.fabricUsage.multiplex,\n                    this.confID,\n                    fabricAttributes,\n                    CallStats._addNewFabricCallback);\n\n            this.hasFabric = true;\n\n            const success = ret.status === 'success';\n\n            if (!success) {\n                logger.error('callstats fabric not initilized', ret.message);\n            }\n\n            return success;\n\n        } catch (error) {\n            GlobalOnErrorHandler.callErrorHandler(error);\n\n            return false;\n        }\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Lets CallStats module know where is given SSRC rendered by providing\n     * renderer tag ID.\n     * If the lib is not initialized yet queue the call for later, when it's\n     * ready.\n     * @param {number} ssrc the SSRC of the stream\n     * @param {boolean} isLocal indicates whether this the stream is local\n     * @param {string|null} streamEndpointId if the stream is not local the it\n     * needs to contain the stream owner's ID\n     * @param {string} usageLabel meaningful usage label of this stream like\n     *        'microphone', 'camera' or 'screen'.\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\n     *        renders the stream.\n     */\n    associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            streamEndpointId,\n            usageLabel,\n            containerId) {\n        if (!CallStats.backend) {\n            return;\n        }\n\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\n\n        if (CallStats.backendInitialized) {\n            CallStats.backend.associateMstWithUserID(\n                this.peerconnection,\n                callStatsId,\n                this.confID,\n                ssrc,\n                usageLabel,\n                containerId);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.MST_WITH_USERID,\n                pc: this.peerconnection,\n                data: {\n                    callStatsId,\n                    containerId,\n                    ssrc,\n                    usageLabel\n                }\n            });\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Notifies CallStats that we are the new dominant speaker in the\n     * conference.\n     */\n    sendDominantSpeakerEvent() {\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\n    }\n\n    /**\n     * Notifies CallStats that the fabric for the underlying peerconnection was\n     * closed and no evens should be reported, after this call.\n     */\n    sendTerminateEvent() {\n        if (CallStats.backendInitialized) {\n            CallStats.backend.sendFabricEvent(\n                this.peerconnection,\n                CallStats.backend.fabricEvent.fabricTerminated,\n                this.confID);\n        }\n        CallStats.fabrics.delete(this);\n    }\n\n    /**\n     * Notifies CallStats for ice connection failed\n     */\n    sendIceConnectionFailedEvent() {\n        CallStats._reportError(\n            this,\n            wrtcFuncNames.iceConnectionFailure,\n            null,\n            this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create offer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateOfferFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create answer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateAnswerFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\n    }\n\n    /**\n     * Sends either resume or hold event for the fabric associated with\n     * the underlying peerconnection.\n     * @param {boolean} isResume true to resume or false to hold\n     */\n    sendResumeOrHoldEvent(isResume) {\n        CallStats._reportEvent(\n            this,\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\n    }\n\n    /**\n     * Notifies CallStats for screen sharing events\n     * @param {boolean} start true for starting screen sharing and\n     * false for not stopping\n     * @param {string|null} ssrc - optional ssrc value, used only when\n     * starting screen sharing.\n     */\n    sendScreenSharingEvent(start, ssrc) {\n        let eventData;\n\n        if (ssrc) {\n            eventData = { ssrc };\n        }\n\n        CallStats._reportEvent(\n            this,\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\n            eventData);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set local description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetLocalDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set remote description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetRemoteDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to add ICE candidate.\n     *\n     * @param {Error} e error to send\n     */\n    sendAddIceCandidateFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\n    }\n}\n\n/**\n * The CallStats API backend instance\n * @type {callstats}\n */\nCallStats.backend = null;\n\n// some errors/events may happen before CallStats init\n// in this case we accumulate them in this array\n// and send them to callstats on init\nCallStats.reportsQueue = [];\n\n/**\n * Whether the library was successfully initialized(the backend) using its\n * initialize method.\n * @type {boolean}\n */\nCallStats.backendInitialized = false;\n\n/**\n * Part of the CallStats credentials - application ID\n * @type {string}\n */\nCallStats.callStatsID = null;\n\n/**\n * Part of the CallStats credentials - application secret\n * @type {string}\n */\nCallStats.callStatsSecret = null;\n\n/**\n * Local CallStats user ID structure. Can be set only once when\n * {@link backend} is initialized, so it's static for the time being.\n * See CallStats API for more info:\n * https://www.callstats.io/api/#userid\n * @type {object}\n */\nCallStats.userID = null;\n","/**\n * @const\n */\nconst ALPHANUM\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * Hexadecimal digits.\n * @const\n */\nconst HEX_DIGITS = '0123456789abcdef';\n\n/**\n * Generates random int within the range [min, max]\n * @param min the minimum value for the generated number\n * @param max the maximum value for the generated number\n * @returns random int number\n */\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Get random element from array or string.\n * @param {Array|string} arr source\n * @returns array element or string character\n */\nfunction randomElement(arr) {\n    return arr[randomInt(0, arr.length - 1)];\n}\n\n/**\n * Generate random alphanumeric string.\n * @param {number} length expected string length\n * @returns {string} random string of specified length\n */\nfunction randomAlphanumStr(length) {\n    let result = '';\n\n    for (let i = 0; i < length; i += 1) {\n        result += randomElement(ALPHANUM);\n    }\n\n    return result;\n}\n\n/**\n * Exported interface.\n */\nconst RandomUtil = {\n    /**\n     * Returns a random hex digit.\n     * @returns {*}\n     */\n    randomHexDigit() {\n        return randomElement(HEX_DIGITS);\n    },\n\n    /**\n     * Returns a random string of hex digits with length 'len'.\n     * @param len the length.\n     */\n    randomHexString(len) {\n        let ret = '';\n\n        while (len--) { // eslint-disable-line no-param-reassign\n            ret += this.randomHexDigit();\n        }\n\n        return ret;\n    },\n    randomElement,\n    randomAlphanumStr,\n    randomInt\n};\n\nmodule.exports = RandomUtil;\n","import Listenable from '../util/Listenable';\n\n/**\n * Creates ConnectionPlugin class that extends the passed class.\n * @param {Class} base the definition of the class that will be extended by\n * ConnectionPlugin\n */\nfunction getConnectionPluginDefinition(base = class {}) {\n    /**\n     * Base class for strophe connection plugins.\n     */\n    return class extends base {\n        /**\n         *\n         */\n        constructor(...args) {\n            super(...args);\n            this.connection = null;\n        }\n\n        /**\n         *\n         * @param connection\n         */\n        init(connection) {\n            this.connection = connection;\n        }\n    };\n}\n\n/**\n * ConnectionPlugin class.\n */\nexport default getConnectionPluginDefinition();\n\n/**\n * ConnectionPlugin class that extends Listenable.\n */\nexport const ConnectionPluginListenable\n    = getConnectionPluginDefinition(Listenable);\n","/**\n * The errors for the connection.\n */\n\n/**\n * Indicates that the connection was dropped with an error which was most likely\n * caused by some networking issues. The dropped term in this context means that\n * the connection was closed unexpectedly (not on user's request).\n *\n * One example is 'item-not-found' error thrown by Prosody when the BOSH session\n * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\n * could also happen when BOSH request is sent to the server with the session-id\n * that is not know to the server. But this should not happen in lib-jitsi-meet\n * case as long as the service is configured correctly (there is no bug).\n */\nexport const CONNECTION_DROPPED_ERROR = 'connection.droppedError';\n\n/**\n * Not specified errors.\n */\nexport const OTHER_ERROR = 'connection.otherError';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'connection.passwordRequired';\n\n/**\n * Indicates that the connection was dropped, because of too many 5xx HTTP\n * errors on BOSH requests.\n */\nexport const SERVER_ERROR = 'connection.serverError';\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $pres, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-stream-management';\n\nimport Listenable from '../util/Listenable';\n\nimport ResumeTask from './ResumeTask';\nimport LastSuccessTracker from './StropheLastSuccess';\nimport PingConnectionPlugin from './strophe.ping';\n\nconst logger = getLogger(__filename);\n\n/**\n * The lib-jitsi-meet layer for {@link Strophe.Connection}.\n */\nexport default class XmppConnection extends Listenable {\n    /**\n     * The list of {@link XmppConnection} events.\n     *\n     * @returns {Object}\n     */\n    static get Events() {\n        return {\n            CONN_STATUS_CHANGED: 'CONN_STATUS_CHANGED',\n            CONN_SHARD_CHANGED: 'CONN_SHARD_CHANGED'\n        };\n    }\n\n    /**\n     * The list of Xmpp connection statuses.\n     *\n     * @returns {Strophe.Status}\n     */\n    static get Status() {\n        return Strophe.Status;\n    }\n\n    /**\n     * Initializes new connection instance.\n     *\n     * @param {Object} options\n     * @param {String} options.serviceUrl - The BOSH or WebSocket service URL.\n     * @param {String} options.shard - The BOSH or WebSocket is connecting to this shard.\n     * Useful for detecting when shard changes.\n     * @param {String} [options.enableWebsocketResume=true] - True/false to control the stream resumption functionality.\n     * It will enable automatically by default if supported by the XMPP server.\n     * @param {Number} [options.websocketKeepAlive=60000] - The websocket keep alive interval.\n     * It's the interval + a up to a minute of jitter. Pass -1 to disable.\n     * The keep alive is HTTP GET request to {@link options.serviceUrl} or to {@link options.websocketKeepAliveUrl}.\n     * @param {Number} [options.websocketKeepAliveUrl] - The websocket keep alive url to use if any,\n     * if missing the serviceUrl url will be used.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     */\n    constructor({ enableWebsocketResume, websocketKeepAlive, websocketKeepAliveUrl, serviceUrl, shard, xmppPing }) {\n        super();\n        this._options = {\n            enableWebsocketResume: typeof enableWebsocketResume === 'undefined' ? true : enableWebsocketResume,\n            pingOptions: xmppPing,\n            shard,\n            websocketKeepAlive: typeof websocketKeepAlive === 'undefined' ? 60 * 1000 : Number(websocketKeepAlive),\n            websocketKeepAliveUrl\n        };\n\n        this._stropheConn = new Strophe.Connection(serviceUrl);\n        this._usesWebsocket = serviceUrl.startsWith('ws:') || serviceUrl.startsWith('wss:');\n\n        // The default maxRetries is 5, which is too long.\n        this._stropheConn.maxRetries = 3;\n\n        this._rawInputTracker = new LastSuccessTracker();\n        this._rawInputTracker.startTracking(this, this._stropheConn);\n\n        this._resumeTask = new ResumeTask(this._stropheConn);\n\n        /**\n         * @typedef DeferredSendIQ Object\n         * @property {Element} iq - The IQ to send.\n         * @property {function} resolve - The resolve method of the deferred Promise.\n         * @property {function} reject - The reject method of the deferred Promise.\n         * @property {number} timeout - The ID of the timeout task that needs to be cleared, before sending the IQ.\n         */\n        /**\n         * Deferred IQs to be sent upon reconnect.\n         * @type {Array<DeferredSendIQ>}\n         * @private\n         */\n        this._deferredIQs = [];\n\n        // Ping plugin is mandatory for the Websocket mode to work correctly. It's used to detect when the connection\n        // is broken (WebSocket/TCP connection not closed gracefully).\n        this.addConnectionPlugin(\n            'ping',\n            new PingConnectionPlugin({\n                getTimeSinceLastServerResponse: () => this.getTimeSinceLastSuccess(),\n                onPingThresholdExceeded: () => this._onPingErrorThresholdExceeded(),\n                pingOptions: xmppPing\n            }));\n\n        // tracks whether this is the initial connection or a reconnect\n        this._oneSuccessfulConnect = false;\n    }\n\n    /**\n     * A getter for the connected state.\n     *\n     * @returns {boolean}\n     */\n    get connected() {\n        const websocket = this._stropheConn && this._stropheConn._proto && this._stropheConn._proto.socket;\n\n        return (this._status === Strophe.Status.CONNECTED || this._status === Strophe.Status.ATTACHED)\n            && (!this.isUsingWebSocket || (websocket && websocket.readyState === WebSocket.OPEN));\n    }\n\n    /**\n     * Retrieves the feature discovery plugin instance.\n     *\n     * @returns {Strophe.Connection.disco}\n     */\n    get disco() {\n        return this._stropheConn.disco;\n    }\n\n    /**\n     * A getter for the disconnecting state.\n     *\n     * @returns {boolean}\n     */\n    get disconnecting() {\n        return this._stropheConn.disconnecting === true;\n    }\n\n    /**\n     * A getter for the domain.\n     *\n     * @returns {string|null}\n     */\n    get domain() {\n        return this._stropheConn.domain;\n    }\n\n    /**\n     * Tells if Websocket is used as the transport for the current XMPP connection. Returns true for Websocket or false\n     * for BOSH.\n     * @returns {boolean}\n     */\n    get isUsingWebSocket() {\n        return this._usesWebsocket;\n    }\n\n    /**\n     * A getter for the JID.\n     *\n     * @returns {string|null}\n     */\n    get jid() {\n        return this._stropheConn.jid;\n    }\n\n    /**\n     * Returns headers for the last BOSH response received.\n     *\n     * @returns {string}\n     */\n    get lastResponseHeaders() {\n        return this._stropheConn._proto && this._stropheConn._proto.lastResponseHeaders;\n    }\n\n    /**\n     * A getter for the logger plugin instance.\n     *\n     * @returns {*}\n     */\n    get logger() {\n        return this._stropheConn.logger;\n    }\n\n    /**\n     * A getter for the connection options.\n     *\n     * @returns {*}\n     */\n    get options() {\n        return this._stropheConn.options;\n    }\n\n    /**\n     * A getter for the domain to be used for ping.\n     */\n    get pingDomain() {\n        return this._options.pingOptions?.domain || this.domain;\n    }\n\n    /**\n     * A getter for the service URL.\n     *\n     * @returns {string}\n     */\n    get service() {\n        return this._stropheConn.service;\n    }\n\n    /**\n     * Returns the current connection status.\n     *\n     * @returns {Strophe.Status}\n     */\n    get status() {\n        return this._status;\n    }\n\n    /**\n     * Adds a connection plugin to this instance.\n     *\n     * @param {string} name - The name of the plugin or rather a key under which it will be stored on this connection\n     * instance.\n     * @param {ConnectionPluginListenable} plugin - The plugin to add.\n     */\n    addConnectionPlugin(name, plugin) {\n        this[name] = plugin;\n        plugin.init(this);\n    }\n\n    /**\n     * See {@link Strophe.Connection.addHandler}\n     *\n     * @returns {void}\n     */\n    addHandler(...args) {\n        this._stropheConn.addHandler(...args);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Wraps {@link Strophe.Connection.attach} method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.attach} for the params description.\n     *\n     * @returns {void}\n     */\n    attach(jid, sid, rid, callback, ...args) {\n        this._stropheConn.attach(jid, sid, rid, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /**\n     * Wraps Strophe.Connection.connect method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.connect} for the params description.\n     *\n     * @returns {void}\n     */\n    connect(jid, pass, callback, ...args) {\n        this._stropheConn.connect(jid, pass, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Handles {@link Strophe.Status} updates for the current connection.\n     *\n     * @param {function} targetCallback - The callback passed by the {@link XmppConnection} consumer to one of\n     * the connect methods.\n     * @param {Strophe.Status} status - The new connection status.\n     * @param {*} args - The rest of the arguments passed by Strophe.\n     * @private\n     */\n    _stropheConnectionCb(targetCallback, status, ...args) {\n        this._status = status;\n\n        let blockCallback = false;\n\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            this._maybeEnableStreamResume();\n\n            // after connecting - immediately check whether shard changed,\n            // we need this only when using websockets as bosh checks headers from every response\n            if (this._usesWebsocket && this._oneSuccessfulConnect) {\n                this._keepAliveAndCheckShard();\n            }\n            this._oneSuccessfulConnect = true;\n\n            this._maybeStartWSKeepAlive();\n            this._processDeferredIQs();\n            this._resumeTask.cancel();\n            this.ping.startInterval(this._options.pingOptions?.domain || this.domain);\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            this.ping.stopInterval();\n\n            // FIXME add RECONNECTING state instead of blocking the DISCONNECTED update\n            blockCallback = this._tryResumingConnection();\n            if (!blockCallback) {\n                clearTimeout(this._wsKeepAlive);\n            }\n        }\n\n        if (!blockCallback) {\n            targetCallback(status, ...args);\n            this.eventEmitter.emit(XmppConnection.Events.CONN_STATUS_CHANGED, status);\n        }\n    }\n\n    /**\n     * Clears the list of IQs and rejects deferred Promises with an error.\n     *\n     * @private\n     */\n    _clearDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            deferred.reject(new Error('disconnect'));\n        }\n        this._deferredIQs = [];\n    }\n\n    /**\n     * The method is meant to be used for testing. It's a shortcut for closing the WebSocket.\n     *\n     * @returns {void}\n     */\n    closeWebsocket() {\n        if (this._stropheConn && this._stropheConn._proto) {\n            this._stropheConn._proto._closeSocket();\n            this._stropheConn._proto._onClose(null);\n        }\n    }\n\n    /**\n     * See {@link Strophe.Connection.disconnect}.\n     *\n     * @returns {void}\n     */\n    disconnect(...args) {\n        this._resumeTask.cancel();\n        clearTimeout(this._wsKeepAlive);\n        this._clearDeferredIQs();\n        this._stropheConn.disconnect(...args);\n    }\n\n    /**\n     * See {@link Strophe.Connection.flush}.\n     *\n     * @returns {void}\n     */\n    flush(...args) {\n        this._stropheConn.flush(...args);\n    }\n\n    /**\n     * See {@link LastRequestTracker.getTimeSinceLastSuccess}.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._rawInputTracker.getTimeSinceLastSuccess();\n    }\n\n    /**\n     * See {@link LastRequestTracker.getLastFailedMessage}.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._rawInputTracker.getLastFailedMessage();\n    }\n\n    /**\n     * Requests a resume token from the server if enabled and all requirements are met.\n     *\n     * @private\n     */\n    _maybeEnableStreamResume() {\n        if (!this._options.enableWebsocketResume) {\n\n            return;\n        }\n\n        const { streamManagement } = this._stropheConn;\n\n        if (!this.isUsingWebSocket) {\n            logger.warn('Stream resume enabled, but WebSockets are not enabled');\n        } else if (!streamManagement) {\n            logger.warn('Stream resume enabled, but Strophe streamManagement plugin is not installed');\n        } else if (!streamManagement.isSupported()) {\n            logger.warn('Stream resume enabled, but XEP-0198 is not supported by the server');\n        } else if (!streamManagement.getResumeToken()) {\n            logger.info('Enabling XEP-0198 stream management');\n            streamManagement.enable(/* resume */ true);\n        }\n    }\n\n    /**\n     * Starts the Websocket keep alive if enabled.\n     *\n     * @private\n     * @returns {void}\n     */\n    _maybeStartWSKeepAlive() {\n        const { websocketKeepAlive } = this._options;\n\n        if (this._usesWebsocket && websocketKeepAlive > 0) {\n            this._wsKeepAlive || logger.info(`WebSocket keep alive interval: ${websocketKeepAlive}ms`);\n            clearTimeout(this._wsKeepAlive);\n\n            const intervalWithJitter = /* base */ websocketKeepAlive + /* jitter */ (Math.random() * 60 * 1000);\n\n            logger.debug(`Scheduling next WebSocket keep-alive in ${intervalWithJitter}ms`);\n\n            this._wsKeepAlive = setTimeout(\n                () => this._keepAliveAndCheckShard()\n                    .then(() => this._maybeStartWSKeepAlive()),\n                intervalWithJitter);\n        }\n    }\n\n    /**\n     * Do a http GET to the shard and if shard change will throw an event.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _keepAliveAndCheckShard() {\n        const { shard, websocketKeepAliveUrl } = this._options;\n        const url = websocketKeepAliveUrl ? websocketKeepAliveUrl\n            : this.service.replace('wss://', 'https://').replace('ws://', 'http://');\n\n        return fetch(url)\n            .then(response => {\n\n                // skips header checking if there is no info in options\n                if (!shard) {\n                    return;\n                }\n\n                const responseShard = response.headers.get('x-jitsi-shard');\n\n                if (responseShard !== shard) {\n                    logger.error(\n                        `Detected that shard changed from ${shard} to ${responseShard}`);\n                    this.eventEmitter.emit(XmppConnection.Events.CONN_SHARD_CHANGED);\n                }\n            })\n            .catch(error => {\n                logger.error(`Websocket Keep alive failed for url: ${url}`, { error });\n            });\n    }\n\n    /**\n     * Goes over the list of {@link DeferredSendIQ} tasks and sends them.\n     *\n     * @private\n     * @returns {void}\n     */\n    _processDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            if (deferred.iq) {\n                clearTimeout(deferred.timeout);\n\n                const timeLeft = Date.now() - deferred.start;\n\n                this.sendIQ(\n                    deferred.iq,\n                    result => deferred.resolve(result),\n                    error => deferred.reject(error),\n                    timeLeft);\n            }\n        }\n\n        this._deferredIQs = [];\n    }\n\n    /**\n     * Send a stanza. This function is called to push data onto the send queue to go out over the wire.\n     *\n     * @param {Element|Strophe.Builder} stanza - The stanza to send.\n     * @returns {void}\n     */\n    send(stanza) {\n        if (!this.connected) {\n            throw new Error('Not connected');\n        }\n        this._stropheConn.send(stanza);\n    }\n\n    /**\n     * Helper function to send IQ stanzas.\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request.  On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the IQ.\n     */\n    sendIQ(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n\n        return this._stropheConn.sendIQ(elem, callback, errback, timeout);\n    }\n\n    /**\n     * Sends an IQ immediately if connected or puts it on the send queue otherwise(in contrary to other send methods\n     * which would fail immediately if disconnected).\n     *\n     * @param {Element} iq - The IQ to send.\n     * @param {number} timeout - How long to wait for the response. The time when the connection is reconnecting is\n     * included, which means that the IQ may never be sent and still fail with a timeout.\n     */\n    sendIQ2(iq, { timeout }) {\n        return new Promise((resolve, reject) => {\n            if (this.connected) {\n                this.sendIQ(\n                    iq,\n                    result => resolve(result),\n                    error => reject(error),\n                    timeout);\n            } else {\n                const deferred = {\n                    iq,\n                    resolve,\n                    reject,\n                    start: Date.now(),\n                    timeout: setTimeout(() => {\n                        // clears the IQ on timeout and invalidates the deferred task\n                        deferred.iq = undefined;\n\n                        // Strophe calls with undefined on timeout\n                        reject(undefined);\n                    }, timeout)\n                };\n\n                this._deferredIQs.push(deferred);\n            }\n        });\n    }\n\n    /**\n     * Called by the ping plugin when ping fails too many times.\n     *\n     * @returns {void}\n     */\n    _onPingErrorThresholdExceeded() {\n        if (this.isUsingWebSocket) {\n            logger.warn('Ping error threshold exceeded - killing the WebSocket');\n            this.closeWebsocket();\n        }\n    }\n\n    /**\n     *  Helper function to send presence stanzas. The main benefit is for sending presence stanzas for which you expect\n     *  a responding presence stanza with the same id (for example when leaving a chat room).\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request. On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the presence.\n     */\n    sendPresence(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n        this._stropheConn.sendPresence(elem, callback, errback, timeout);\n    }\n\n    /**\n     * The method gracefully closes the BOSH connection by using 'navigator.sendBeacon'.\n     *\n     * @returns {boolean} - true if the beacon was sent.\n     */\n    sendUnavailableBeacon() {\n        if (!navigator.sendBeacon || this._stropheConn.disconnecting || !this._stropheConn.connected) {\n            return false;\n        }\n\n        this._stropheConn._changeConnectStatus(Strophe.Status.DISCONNECTING);\n        this._stropheConn.disconnecting = true;\n\n        const body = this._stropheConn._proto._buildBody()\n            .attrs({\n                type: 'terminate'\n            });\n        const pres = $pres({\n            xmlns: Strophe.NS.CLIENT,\n            type: 'unavailable'\n        });\n\n        body.cnode(pres.tree());\n\n        const res = navigator.sendBeacon(\n            this.service.indexOf('https://') === -1 ? `https:${this.service}` : this.service,\n            Strophe.serialize(body.tree()));\n\n        logger.info(`Successfully send unavailable beacon ${res}`);\n\n        this._stropheConn._proto._abortAllRequests();\n        this._stropheConn._doDisconnect();\n\n        return true;\n    }\n\n    /**\n     * Tries to use stream management plugin to resume dropped XMPP connection. The streamManagement plugin clears\n     * the resume token if any connection error occurs which would put it in unrecoverable state, so as long as\n     * the token is present it means the connection can be resumed.\n     *\n     * @private\n     * @returns {boolean}\n     */\n    _tryResumingConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement && streamManagement.getResumeToken();\n\n        if (resumeToken) {\n            this._resumeTask.schedule();\n\n            return true;\n        }\n\n        return false;\n    }\n}\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","/**\n * Event triggered when participant's muted status changes.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new muted state\n */\nexport const PEER_MUTED_CHANGED = 'signaling.peerMuted';\n\n/**\n * Event triggered when participant's video type changes.\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n */\nexport const PEER_VIDEO_TYPE_CHANGED = 'signaling.peerVideoType';\n","export const CALLSTATS_SCRIPT_URL = 'https://api.callstats.io/static/callstats-ws.min.js';\n\n/**\n * The number of remote speakers for which the audio levels will be calculated using\n * RTCRtpReceiver#getSynchronizationSources. Limit the number of endpoints to save cpu on the client as this API call\n * is known to take longer to execute when there are many audio receivers.\n */\nexport const SPEAKERS_AUDIO_LEVELS = 5;\n","/**\n * The possible camera facing modes. For now support only 'user' and\n * 'environment' because 'left' and 'right' are not used anywhere in our\n * projects at the time of this writing. For more information please refer to\n * https://w3c.github.io/mediacapture-main/getusermedia.html\n * #def-constraint-facingMode.\n *\n * @enum {string}\n */\nconst CameraFacingMode = {\n    /**\n     * The mode which specifies the environment-facing camera.\n     */\n    ENVIRONMENT: 'environment',\n\n    /**\n     * The mode which specifies the user-facing camera.\n     */\n    USER: 'user'\n};\n\nmodule.exports = CameraFacingMode;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","\n/**\n * Promise-like object which can be passed around for resolving it later. It\n * implements the \"thenable\" interface, so it can be used wherever a Promise\n * could be used.\n *\n * In addition a \"reject on timeout\" functionality is provided.\n */\nexport default class Deferred {\n    /**\n     * Instantiates a Deferred object.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = (...args) => {\n                this.clearRejectTimeout();\n                resolve(...args);\n            };\n            this.reject = (...args) => {\n                this.clearRejectTimeout();\n                reject(...args);\n            };\n        });\n        this.then = this.promise.then.bind(this.promise);\n        this.catch = this.promise.catch.bind(this.promise);\n    }\n\n    /**\n     * Clears the reject timeout.\n     */\n    clearRejectTimeout() {\n        clearTimeout(this._timeout);\n    }\n\n    /**\n     * Rejects the promise after the given timeout.\n     */\n    setRejectTimeout(ms) {\n        this._timeout = setTimeout(() => {\n            this.reject(new Error('timeout'));\n        }, ms);\n    }\n}\n","/**\n * The events for the media devices.\n */\n\n/**\n * Indicates that the list of available media devices has been changed. The\n * event provides the following parameters to its listeners:\n *\n * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\n *  MediaDeviceInfo-like objects that are currently connected.\n *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\n */\nexport const DEVICE_LIST_CHANGED = 'mediaDevices.devicechange';\n\n/**\n * Event emitted when the user granted/blocked a permission for the camera / mic.\n * Used to keep track of the granted permissions on browsers which don't\n * support the Permissions API.\n */\nexport const PERMISSIONS_CHANGED = 'rtc.permissions_changed';\n\n/**\n * Indicates that the environment is currently showing permission prompt to\n * access camera and/or microphone. The event provides the following\n * parameters to its listeners:\n *\n * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\n *  |'react-native'|'android'} environmentType - type of browser or\n *  other execution environment.\n */\nexport const PERMISSION_PROMPT_IS_SHOWN\n    = 'mediaDevices.permissionPromptIsShown';\n\nexport const SLOW_GET_USER_MEDIA = 'mediaDevices.slowGetUserMedia';\n","\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport browser from '../browser';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\nlet gumFunction = null;\n\n/**\n * Handles obtaining a stream from a screen capture on different browsers.\n */\nconst ScreenObtainer = {\n    /**\n     * If not <tt>null</tt> it means that the initialization process is still in\n     * progress. It is used to make desktop stream request wait and continue\n     * after it's done.\n     * {@type Promise|null}\n     */\n\n    obtainStream: null,\n\n    /**\n     * Initializes the function used to obtain a screen capture\n     * (this.obtainStream).\n     *\n     * @param {object} options\n     * @param {Function} gum GUM method\n     */\n    init(options = {}, gum) {\n        this.options = options;\n        gumFunction = gum;\n\n        this.obtainStream = this._createObtainStreamMethod();\n\n        if (!this.obtainStream) {\n            logger.info('Desktop sharing disabled');\n        }\n    },\n\n    /**\n     * Returns a method which will be used to obtain the screen sharing stream\n     * (based on the browser type).\n     *\n     * @returns {Function}\n     * @private\n     */\n    _createObtainStreamMethod() {\n        if (browser.isNWJS()) {\n            return (_, onSuccess, onFailure) => {\n                window.JitsiMeetNW.obtainDesktopStream(\n                    onSuccess,\n                    (error, constraints) => {\n                        let jitsiError;\n\n                        // FIXME:\n                        // This is very very dirty fix for recognising that the\n                        // user have clicked the cancel button from the Desktop\n                        // sharing pick window. The proper solution would be to\n                        // detect this in the NWJS application by checking the\n                        // streamId === \"\". Even better solution would be to\n                        // stop calling GUM from the NWJS app and just pass the\n                        // streamId to lib-jitsi-meet. This way the desktop\n                        // sharing implementation for NWJS and chrome extension\n                        // will be the same and lib-jitsi-meet will be able to\n                        // control the constraints, check the streamId, etc.\n                        //\n                        // I cannot find documentation about \"InvalidStateError\"\n                        // but this is what we are receiving from GUM when the\n                        // streamId for the desktop sharing is \"\".\n\n                        if (error && error.name === 'InvalidStateError') {\n                            jitsiError = new JitsiTrackError(\n                                JitsiTrackErrors.SCREENSHARING_USER_CANCELED\n                            );\n                        } else {\n                            jitsiError = new JitsiTrackError(\n                                error, constraints, [ 'desktop' ]);\n                        }\n                        (typeof onFailure === 'function')\n                            && onFailure(jitsiError);\n                    });\n            };\n        } else if (browser.isElectron()) {\n            return this.obtainScreenOnElectron;\n        } else if (browser.isReactNative() && browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMediaRN;\n        } else if (browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMedia;\n        }\n        logger.log('Screen sharing not supported on ', browser.getName());\n\n        return null;\n    },\n\n    /**\n     * Checks whether obtaining a screen capture is supported in the current\n     * environment.\n     * @returns {boolean}\n     */\n    isSupported() {\n        return this.obtainStream !== null;\n    },\n\n    /**\n     * Obtains a screen capture stream on Electron.\n     *\n     * @param {Object} [options] - Screen sharing options.\n     * @param {Array<string>} [options.desktopSharingSources] - Array with the\n     * sources that have to be displayed in the desktop picker window ('screen',\n     * 'window', etc.).\n     * @param onSuccess - Success callback.\n     * @param onFailure - Failure callback.\n     */\n    obtainScreenOnElectron(options = {}, onSuccess, onFailure) {\n        if (window.JitsiMeetScreenObtainer\n            && window.JitsiMeetScreenObtainer.openDesktopPicker) {\n            const { desktopSharingSources, gumOptions } = options;\n\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\n                {\n                    desktopSharingSources: desktopSharingSources || [ 'screen', 'window' ]\n                },\n                (streamId, streamType, screenShareAudio = false) =>\n                    onGetStreamResponse(\n                        {\n                            response: {\n                                streamId,\n                                streamType,\n                                screenShareAudio\n                            },\n                            gumOptions\n                        },\n                        onSuccess,\n                        onFailure\n                    ),\n                err => onFailure(new JitsiTrackError(\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\n                    err\n                ))\n            );\n        } else {\n            onFailure(new JitsiTrackError(\n                JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\n        }\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMedia(options, callback, errorCallback) {\n        let getDisplayMedia;\n\n        if (navigator.getDisplayMedia) {\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\n        } else {\n            // eslint-disable-next-line max-len\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\n        }\n\n        const { audioQuality } = this.options;\n        const audio = audioQuality?.stereo ? {\n            autoGainControl: false,\n            channelCount: 2,\n            echoCancellation: false,\n            noiseSuppression: false\n        } : true;\n\n        const video = Object.keys(options.gumOptions).length > 0 ? options.gumOptions : true;\n\n        // At the time of this writing 'min' constraint for fps is not supported by getDisplayMedia.\n        video.frameRate && delete video.frameRate.min;\n\n        const constraints = {\n            video,\n            audio,\n            cursor: 'always'\n        };\n\n        logger.info('Using getDisplayMedia for screen sharing', constraints);\n\n        getDisplayMedia(constraints)\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id\n                });\n            })\n            .catch(error => {\n                const errorDetails = {\n                    errorName: error && error.name,\n                    errorMsg: error && error.message,\n                    errorStack: error && error.stack\n                };\n\n                logger.error('getDisplayMedia error', constraints, errorDetails);\n\n                if (errorDetails.errorMsg && errorDetails.errorMsg.indexOf('denied by system') !== -1) {\n                    // On Chrome this is the only thing different between error returned when user cancels\n                    // and when no permission was given on the OS level.\n                    errorCallback(new JitsiTrackError(JitsiTrackErrors.PERMISSION_DENIED));\n\n                    return;\n                }\n\n                errorCallback(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMediaRN(options, callback, errorCallback) {\n        logger.info('Using getDisplayMedia for screen sharing');\n\n        navigator.mediaDevices.getDisplayMedia({ video: true })\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id });\n            })\n            .catch(() => {\n                errorCallback(new JitsiTrackError(JitsiTrackErrors\n                    .SCREENSHARING_USER_CANCELED));\n            });\n    }\n};\n\n/**\n * Handles response from external application / extension and calls GUM to\n * receive the desktop streams or reports error.\n * @param {object} options\n * @param {object} options.response\n * @param {string} options.response.streamId - the streamId for the desktop\n * stream.\n * @param {bool}   options.response.screenShareAudio - Used by electron clients to\n * enable system audio screen sharing.\n * @param {string} options.response.error - error to be reported.\n * @param {object} options.gumOptions - options passed to GUM.\n * @param {Function} onSuccess - callback for success.\n * @param {Function} onFailure - callback for failure.\n * @param {object} gumOptions - options passed to GUM.\n */\nfunction onGetStreamResponse(\n        options = {\n            response: {},\n            gumOptions: {}\n        },\n        onSuccess,\n        onFailure) {\n    const { streamId, streamType, screenShareAudio, error } = options.response || {};\n\n    if (streamId) {\n        const gumOptions = {\n            desktopStream: streamId,\n            screenShareAudio,\n            ...options.gumOptions\n        };\n\n        gumFunction([ 'desktop' ], gumOptions)\n            .then(stream => onSuccess({\n                stream,\n                sourceId: streamId,\n                sourceType: streamType\n            }), onFailure);\n    } else {\n        // As noted in Chrome Desktop Capture API:\n        // If user didn't select any source (i.e. canceled the prompt)\n        // then the callback is called with an empty streamId.\n        if (streamId === '') {\n            onFailure(new JitsiTrackError(\n                JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n\n            return;\n        }\n\n        onFailure(new JitsiTrackError(\n            JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR,\n            error));\n    }\n}\n\nexport default ScreenObtainer;\n","const currentExecutingScript = require('current-executing-script');\n\n/* eslint-disable max-params */\n\n/**\n * Implements utility functions which facilitate the dealing with scripts such\n * as the download and execution of a JavaScript file.\n */\nconst ScriptUtil = {\n    /**\n     * Loads a script from a specific source.\n     *\n     * @param src the source from the which the script is to be (down)loaded\n     * @param async true to asynchronously load the script or false to\n     * synchronously load the script\n     * @param prepend true to schedule the loading of the script as soon as\n     * possible or false to schedule the loading of the script at the end of the\n     * scripts known at the time\n     * @param relativeURL whether we need load the library from url relative\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\n     * library from different location than the app that is using it\n     * @param loadCallback on load callback function\n     * @param errorCallback callback to be called on error loading the script\n     */\n    loadScript(\n            src,\n            async,\n            prepend,\n            relativeURL,\n            loadCallback,\n            errorCallback) {\n        const d = document;\n        const tagName = 'script';\n        const script = d.createElement(tagName);\n        const referenceNode = d.getElementsByTagName(tagName)[0];\n\n        script.async = async;\n\n        if (relativeURL) {\n            // finds the src url of the current loaded script\n            // and use it as base of the src supplied argument\n            const scriptEl = currentExecutingScript();\n\n            if (scriptEl) {\n                const scriptSrc = scriptEl.src;\n                const baseScriptSrc\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n\n                if (scriptSrc && baseScriptSrc) {\n                    // eslint-disable-next-line no-param-reassign\n                    src = baseScriptSrc + src;\n                }\n            }\n        }\n\n        if (loadCallback) {\n            script.onload = loadCallback;\n        }\n        if (errorCallback) {\n            script.onerror = errorCallback;\n        }\n\n        script.src = src;\n        if (prepend) {\n            referenceNode.parentNode.insertBefore(script, referenceNode);\n        } else {\n            referenceNode.parentNode.appendChild(script);\n        }\n    }\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = ScriptUtil;\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createParticipantConnectionStatusEvent } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for\n * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_NOT_IN_LAST_N_TIMEOUT = 500;\n\n/**\n * Default value of 2000 milliseconds for\n * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of lastN\n * should be inactive and when entering lastN it becomes restoring and when\n * data is received from bridge it will become active, but if no data is\n * received for some time we set status of that participant connection to\n * interrupted.\n * @type {number}\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Participant connection statuses.\n *\n * @type {{\n *      ACTIVE: string,\n *      INACTIVE: string,\n *      INTERRUPTED: string,\n *      RESTORING: string\n * }}\n */\nexport const ParticipantConnectionStatus = {\n    /**\n     * Status indicating that connection is currently active.\n     */\n    ACTIVE: 'active',\n\n    /**\n     * Status indicating that connection is currently inactive.\n     * Inactive means the connection was stopped on purpose from the bridge,\n     * like exiting lastN or adaptivity decided to drop video because of not\n     * enough bandwidth.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Status indicating that connection is currently interrupted.\n     */\n    INTERRUPTED: 'interrupted',\n\n    /**\n     * Status indicating that connection is currently restoring.\n     */\n    RESTORING: 'restoring'\n};\n\n/**\n * Class is responsible for emitting\n * JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED events.\n */\nexport default class ParticipantConnectionStatusHandler {\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link ParticipantConnectionStatus} based on\n     * the values given for some specific remote user. It is assumed that\n     * the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param {boolean} isConnectionActiveByJvb true if the JVB did not get any\n     * data from the user for the last 15 seconds.\n     * @param {boolean} isInLastN indicates whether the user is in the last N\n     * set. When set to false it means that JVB is not sending any video for\n     * the user.\n     * @param {boolean} isRestoringTimedout if true it means that the user has\n     * been outside of last N too long to be considered\n     * {@link ParticipantConnectionStatus.RESTORING}.\n     * @param {boolean} isVideoMuted true if the user is video muted and we\n     * should not expect to receive any video.\n     * @param {boolean} isVideoTrackFrozen if the current browser support video\n     * frozen detection then it will be set to true when the video track is\n     * frozen. If the current browser does not support frozen detection the it's\n     * always false.\n     * @return {ParticipantConnectionStatus} the new connection status for\n     * the user for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isConnectionActiveByJvb,\n            isInLastN,\n            isRestoringTimedout,\n            isVideoMuted,\n            isVideoTrackFrozen) {\n        if (!isConnectionActiveByJvb) {\n            // when there is a connection problem signaled from jvb\n            // it means no media was flowing for at least 15secs, so both audio\n            // and video are most likely interrupted\n            return ParticipantConnectionStatus.INTERRUPTED;\n        } else if (isVideoMuted) {\n            // If the connection is active according to JVB and the user is\n            // video muted there is no way for the connection to be inactive,\n            // because the detection logic below only makes sense for video.\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return ParticipantConnectionStatus.ACTIVE;\n            } else if (isInLastN) {\n                return isRestoringTimedout\n                    ? ParticipantConnectionStatus.INTERRUPTED\n                    : ParticipantConnectionStatus.RESTORING;\n            }\n\n            return ParticipantConnectionStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must\n        // rely on the lastN value\n        return isInLastN\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and\n     * the connection status can be only active or interrupted.\n     * @param {boolean} isVideoMuted the user if video muted\n     * @param {boolean} isVideoTrackFrozen true if the video track for\n     * the remote user is currently frozen. If the current browser does not\n     * support video frozen detection then it's always false.\n     * @return {ParticipantConnectionStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted, isVideoTrackFrozen) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video\n            // track frozen detection...\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>ParticipantConnectionStatus</tt>.\n     *\n     * @constructor\n     * @param {RTC} rtc the RTC service instance\n     * @param {JitsiConference} conference parent conference instance\n     * @param {Object} options\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n     * @param {number} [options.outOfLastNTimeout=500] custom value for\n     * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n     */\n    constructor(rtc, conference, options) {\n        this.rtc = rtc;\n        this.conference = conference;\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the timeout callback IDs scheduled using\n         * window.setTimeout.\n         * @type {Object.<string, number>}\n         */\n        this.trackTimers = {};\n\n        /**\n         * This map holds the endpoint connection status received from the JVB\n         * (as it might be different than the one stored in JitsiParticipant).\n         * Required for getting back in sync when remote video track is removed.\n         * @type {Object.<string, boolean>}\n         */\n        this.connStatusFromJvb = { };\n\n        /**\n         * If video track frozen detection through RTC mute event is supported,\n         * we wait some time until video track is considered frozen. But because\n         * when the user falls out of last N it is expected for the video to\n         * freeze this timeout must be significantly reduced in \"out of last N\"\n         * case.\n         *\n         * Basically this value is used instead of {@link rtcMuteTimeout} when\n         * user is not in last N.\n         * @type {number}\n         */\n        this.outOfLastNTimeout\n            = typeof options.outOfLastNTimeout === 'number'\n                ? options.outOfLastNTimeout : DEFAULT_NOT_IN_LAST_N_TIMEOUT;\n\n        /**\n         * How long we're going to wait after the RTC video track muted event\n         * for the corresponding signalling mute event, before the connection\n         * interrupted is fired. The default value is\n         * {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds\n         */\n        this.rtcMuteTimeout\n            = typeof options.rtcMuteTimeout === 'number'\n                ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n\n        /**\n         * This map holds a timestamp indicating  when participant's video track\n         * was RTC muted (it is assumed that each participant can have only 1\n         * video track at a time). The purpose of storing the timestamp is to\n         * avoid the transition to disconnected status in case of legitimate\n         * video mute operation where the signalling video muted event can\n         * arrive shortly after RTC muted event.\n         *\n         * The key is participant's ID which is the same as endpoint id in\n         * the Colibri conference allocated on the JVB.\n         *\n         * The value is a timestamp measured in milliseconds obtained with\n         * <tt>Date.now()</tt>.\n         *\n         * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n         *       implemented in JitsiLocalTrack by extending the event to\n         *       the remote track and allowing to set different timeout for\n         *       local and remote tracks.\n         *\n         * @type {Object.<string, number>}\n         */\n        this.rtcMutedTimestamp = { };\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n\n        /**\n         * This map holds the timestamps indicating when participant's video\n         * entered lastN set. Participants entering lastN will have connection\n         * status restoring and when we start receiving video will become\n         * active, but if video is not received for certain time\n         * {@link DEFAULT_RESTORING_TIMEOUT} that participant connection status\n         * will become interrupted.\n         *\n         * @type {Map<string, number>}\n         */\n        this.enteredLastNTimestamp = new Map();\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the restoring timeout callback IDs\n         * scheduled using window.setTimeout.\n         *\n         * @type {Map<string, number>}\n         */\n        this.restoringTimers = new Map();\n\n        /**\n         * A map that holds the current connection status (along with all the internal events that happen\n         * while in that state).\n         *\n         * The goal is to send this information to the analytics backend for post-mortem analysis.\n         */\n        this.connectionStatusMap = new Map();\n    }\n\n    /**\n     * Gets the video frozen timeout for given user.\n     * @param {string} id endpoint/participant ID\n     * @return {number} how long are we going to wait since RTC video muted\n     * even, before a video track is considered frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(id) {\n        return this.rtc.isInLastN(id)\n            ? this.rtcMuteTimeout : this.outOfLastNTimeout;\n    }\n\n    /**\n     * Initializes <tt>ParticipantConnectionStatus</tt> and bind required event\n     * listeners.\n     */\n    init() {\n\n        this._onEndpointConnStatusChanged\n            = this.onEndpointConnStatusChanged.bind(this);\n\n        this.rtc.addListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        // Handles P2P status changes\n        this._onP2PStatus = this.refreshConnectionStatusForAll.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\"\n        // events for video type tracks when they stop receiving data which is\n        // often a sign that remote user is having connectivity issues\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Track added/removed listeners are used to bind \"mute\"/\"unmute\"\n            // event handlers\n            this._onRemoteTrackAdded = this.onRemoteTrackAdded.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n\n            this._onRemoteTrackRemoved = this.onRemoteTrackRemoved.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for\n            // signalling mute/unmute events.\n            this._onSignallingMuteChanged\n                = this.onSignallingMuteChanged.bind(this);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged\n                = this.onTrackVideoTypeChanged.bind(this);\n        }\n\n        this._onLastNChanged = this._onLastNChanged.bind(this);\n        this.conference.on(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this._onLastNValueChanged\n            = this.refreshConnectionStatusForAll.bind(this);\n        this.rtc.on(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this\n     * instance.\n     */\n    dispose() {\n\n        this.rtc.removeListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_MUTE,\n                this._onTrackRtcMuted);\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE,\n                this._onTrackRtcUnmuted);\n\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n        }\n\n        this.conference.off(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this.rtc.removeListener(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.conference.off(\n            JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        const participantIds = Object.keys(this.trackTimers);\n\n        for (const participantId of participantIds) {\n            this.clearTimeout(participantId);\n            this.clearRtcMutedTimestamp(participantId);\n        }\n\n        for (const id in this.connectionStatusMap) {\n            if (this.connectionStatusMap.hasOwnProperty(id)) {\n                this.onUserLeft(id);\n            }\n        }\n\n        // Clear RTC connection status cache\n        this.connStatusFromJvb = {};\n    }\n\n    /**\n     * Handles RTCEvents.ENDPOINT_CONN_STATUS_CHANGED triggered when we receive\n     * notification over the data channel from the bridge about endpoint's\n     * connection status update.\n     * @param {string} endpointId - The endpoint ID(MUC nickname/resource JID).\n     * @param {boolean} isActive - true if the connection is OK or false otherwise.\n     */\n    onEndpointConnStatusChanged(endpointId, isActive) {\n\n        logger.debug(\n            `Detector RTCEvents.ENDPOINT_CONN_STATUS_CHANGED(${Date.now()}): ${\n                endpointId}: ${isActive}`);\n\n        // Filter out events for the local JID for now\n        if (endpointId !== this.conference.myUserId()) {\n            // Store the status received over the data channels\n            this.connStatusFromJvb[endpointId] = isActive;\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Changes connection status.\n     * @param {JitsiParticipant} participant\n     * @param newStatus\n     */\n    _changeConnectionStatus(participant, newStatus) {\n        if (participant.getConnectionStatus() !== newStatus) {\n\n            const endpointId = participant.getId();\n\n            participant._setConnectionStatus(newStatus);\n\n            logger.debug(\n                `Emit endpoint conn status(${Date.now()}) ${endpointId}: ${\n                    newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'peer.conn.status',\n                    participant: endpointId,\n                    status: newStatus\n                }));\n\n\n            this.conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED,\n                endpointId, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"connection interrupted\" event which was previously\n     * scheduled as a timeout on RTC 'onmute' event.\n     *\n     * @param {string} participantId - The participant for which the \"connection\n     * interrupted\" timeout was scheduled.\n     */\n    clearTimeout(participantId) {\n        if (this.trackTimers[participantId]) {\n            window.clearTimeout(this.trackTimers[participantId]);\n            this.trackTimers[participantId] = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for participant's video track\n     * @param {string} participantId the id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    clearRtcMutedTimestamp(participantId) {\n        this.rtcMutedTimestamp[participantId] = null;\n    }\n\n    /**\n     * Bind signalling mute event listeners for video {JitsiRemoteTrack} when\n     * a new one is added to the conference.\n     *\n     * @param {JitsiTrack} remoteTrack - The {JitsiTrack} which is being added to\n     * the conference.\n     */\n    onRemoteTrackAdded(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            logger.debug(\n                `Detector on remote track added for: ${\n                    remoteTrack.getParticipantId()}`);\n\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED,\n                videoType => this._onTrackVideoTypeChanged(remoteTrack, videoType));\n        }\n    }\n\n    /**\n     * Removes all event listeners bound to the remote video track and clears\n     * any related timeouts.\n     *\n     * @param {JitsiRemoteTrack} remoteTrack - The remote track which is being\n     * removed from the conference.\n     */\n    onRemoteTrackRemoved(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            const endpointId = remoteTrack.getParticipantId();\n\n            logger.debug(`Detector on remote track removed: ${endpointId}`);\n\n            remoteTrack.off(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n\n            this.clearTimeout(endpointId);\n            this.clearRtcMutedTimestamp(endpointId);\n\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Checks if given participant's video is considered frozen.\n     * @param {JitsiParticipant} participant - The participant.\n     * @return {boolean} <tt>true</tt> if the video has frozen for given\n     * participant or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n     *       implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for\n     *       local and remote tracks.\n     *\n     */\n    isVideoTrackFrozen(participant) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const id = participant.getId();\n        const hasAnyVideoRTCMuted = participant.hasAnyVideoTrackWebRTCMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp[id];\n        const timeout = this._getVideoFrozenTimeout(id);\n\n        return hasAnyVideoRTCMuted\n            && typeof rtcMutedTimestamp === 'number'\n            && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Goes over every participant and updates connectivity status.\n     * Should be called when a parameter which affects all of the participants\n     * is changed (P2P for example).\n     */\n    refreshConnectionStatusForAll() {\n        const participants = this.conference.getParticipants();\n\n        for (const participant of participants) {\n            this.figureOutConnectionStatus(participant.getId());\n        }\n    }\n\n    /**\n     * Figures out (and updates) the current connectivity status for\n     * the participant identified by the given id.\n     *\n     * @param {string} id - The participant's id (MUC nickname or Colibri endpoint ID).\n     */\n    figureOutConnectionStatus(id) {\n        const participant = this.conference.getParticipantById(id);\n\n        if (!participant) {\n            // Probably the participant is no longer in the conference\n            // (at the time of writing this code, participant is\n            // detached from the conference and TRACK_REMOVED events are\n            // fired),\n            // so we don't care, but let's print a log message for debugging purposes.\n            logger.debug(`figure out conn status - no participant for: ${id}`);\n\n            return;\n        }\n\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout(id);\n        const audioOnlyMode = this.conference.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable\n        // any detection based on video playback or the last N.\n        const isVideoMuted = participant.isVideoMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen(participant);\n        const isInLastN = this.rtc.isInLastN(id);\n        let isConnActiveByJvb = this.connStatusFromJvb[id];\n\n        if (typeof isConnActiveByJvb !== 'boolean') {\n            // If no status was received from the JVB it means that it's active\n            // (the bridge does not send notification unless there is a problem)\n            logger.debug('Assuming connection active by JVB - no notification');\n            isConnActiveByJvb = true;\n        }\n\n        const newState\n            = inP2PMode\n                ? ParticipantConnectionStatusHandler._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : ParticipantConnectionStatusHandler._getNewStateForJvbMode(\n                    isConnActiveByJvb,\n                    isInLastN,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps\n        // that we use to track the restoring state\n        if (newState !== ParticipantConnectionStatus.RESTORING) {\n            this._clearRestoringTimer(id);\n        }\n\n        logger.debug(\n            `Figure out conn status for ${id}, is video muted: ${\n                isVideoMuted} is active(jvb): ${\n                isConnActiveByJvb} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in last N: ${\n                isInLastN} currentStatus => newStatus: ${\n                participant.getConnectionStatus()} => ${newState}`);\n\n        const oldConnectionStatus = this.connectionStatusMap[id] || {};\n\n        // Send an analytics event (guard on either the p2p flag or the connection status has changed\n        // since the last time this code block run).\n        if (!('p2p' in oldConnectionStatus)\n            || !('connectionStatus' in oldConnectionStatus)\n            || oldConnectionStatus.p2p !== inP2PMode\n            || oldConnectionStatus.connectionStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n            this.connectionStatusMap[id] = {\n                ...oldConnectionStatus,\n                connectionStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the\n            // video type is not in oldConnectionStatus.\n            if (!('videoType' in this.connectionStatusMap[id])) {\n                const videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n\n                if (Array.isArray(videoTracks) && videoTracks.length !== 0) {\n                    this.connectionStatusMap[id].videoType = videoTracks[0].videoType;\n                }\n            }\n        }\n        this._changeConnectionStatus(participant, newState);\n    }\n\n    /**\n     * Computes the duration of the current connection status for the participant with the specified id (i.e. 15 seconds\n     * in the INTERRUPTED state) and sends a participant connection status event.\n     * @param {string} id - The jid of the participant.\n     * @param {Number} nowMs - The current time (in millis).\n     * @returns {void}\n     */\n    maybeSendParticipantConnectionStatusEvent(id, nowMs) {\n        const participantConnectionStatus = this.connectionStatusMap[id];\n\n        if (participantConnectionStatus\n            && 'startedMs' in participantConnectionStatus\n            && 'videoType' in participantConnectionStatus\n            && 'connectionStatus' in participantConnectionStatus\n            && 'p2p' in participantConnectionStatus) {\n            participantConnectionStatus.value = nowMs - participantConnectionStatus.startedMs;\n            Statistics.sendAnalytics(\n                createParticipantConnectionStatusEvent(participantConnectionStatus));\n        }\n    }\n\n    /**\n     * On change in Last N set check all leaving and entering participants to\n     * change their corresponding statuses.\n     *\n     * @param {Array<string>} leavingLastN - The array of ids leaving lastN.\n     * @param {Array<string>} enteringLastN - The array of ids entering lastN.\n     * @private\n     */\n    _onLastNChanged(leavingLastN = [], enteringLastN = []) {\n        const now = Date.now();\n\n        logger.debug(\n            'leaving/entering lastN', leavingLastN, enteringLastN, now);\n\n        for (const id of leavingLastN) {\n            this.enteredLastNTimestamp.delete(id);\n            this._clearRestoringTimer(id);\n            this.figureOutConnectionStatus(id);\n        }\n        for (const id of enteringLastN) {\n            // store the timestamp this id is entering lastN\n            this.enteredLastNTimestamp.set(id, now);\n            this.figureOutConnectionStatus(id);\n        }\n    }\n\n    /**\n     * Clears the restoring timer for participant's video track and the\n     * timestamp for entering lastN.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    _clearRestoringTimer(participantId) {\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimers.delete(participantId);\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares\n     * current time and the time the track entered in lastN. If it hasn't\n     * timedout and there is no timer added, add new timer in order to give it\n     * more time to become active or mark it as interrupted on next check.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     * @returns {boolean} <tt>true</tt> if the track was in restoring state\n     * more than the timeout ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to\n     * set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(participantId) {\n        const enteredLastNTimestamp\n            = this.enteredLastNTimestamp.get(participantId);\n\n        if (enteredLastNTimestamp\n            && (Date.now() - enteredLastNTimestamp)\n                >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled,\n        // schedule one so we can track the restoring state and change it after\n        // reaching the timeout\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (!rTimer) {\n            this.restoringTimers.set(participantId, setTimeout(\n                () => this.figureOutConnectionStatus(participantId),\n                DEFAULT_RESTORING_TIMEOUT));\n        }\n\n        return false;\n    }\n\n    /**\n     * Sends a last/final participant connection status event for the participant that left the conference.\n     * @param {string} id - The id of the participant that left the conference.\n     * @returns {void}\n     */\n    onUserLeft(id) {\n        this.maybeSendParticipantConnectionStatusEvent(id, Date.now());\n        delete this.connectionStatusMap[id];\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onmute' event\n     * will be processed.\n     */\n    onTrackRtcMuted(track) {\n        const participantId = track.getParticipantId();\n        const participant = this.conference.getParticipantById(participantId);\n\n        logger.debug(`Detector track RTC muted: ${participantId}`, Date.now());\n        if (!participant) {\n            logger.error(`No participant for id: ${participantId}`);\n\n            return;\n        }\n        this.rtcMutedTimestamp[participantId] = Date.now();\n        if (!participant.isVideoMuted()) {\n            // If the user is not muted according to the signalling we'll give\n            // it some time, before the connection interrupted event is\n            // triggered.\n            this.clearTimeout(participantId);\n\n            // The timeout is reduced when user is not in the last N\n            const timeout = this._getVideoFrozenTimeout(participantId);\n\n            this.trackTimers[participantId] = window.setTimeout(() => {\n                logger.debug(\n                    `Set RTC mute timeout for: ${participantId}\\\n                     of ${timeout} ms`);\n                this.clearTimeout(participantId);\n                this.figureOutConnectionStatus(participantId);\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onunmute'\n     * event will be processed.\n     */\n    onTrackRtcUnmuted(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector track RTC unmuted: ${participantId}`, Date.now());\n\n        this.clearTimeout(participantId);\n        this.clearRtcMutedTimestamp(participantId);\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param {JitsiRemoteTrack} track - The remote video track for which\n     * the signalling mute/unmute event will be processed.\n     */\n    onSignallingMuteChanged(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector on track signalling mute changed: ${participantId}`,\n            track.isMuted());\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Sends a participant connection status event as a result of the video type\n     * changing.\n     * @param {JitsiRemoteTrack} track - The track.\n     * @param {VideoType} type - The video type.\n     * @returns {void}\n     */\n    onTrackVideoTypeChanged(track, type) {\n        const id = track.getParticipantId();\n        const nowMs = Date.now();\n\n        this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n        this.connectionStatusMap[id] = {\n            ...this.connectionStatusMap[id] || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport Listenable from '../util/Listenable';\n\nexport const NETWORK_INFO_EVENT = 'NETWORK_INFO_CHANGED';\n\nconst logger = getLogger(__filename);\n\n/**\n * Module provides information about the current status of the internet\n * connection. Lib-jitsi-meet doesn't have any logic for detecting internet\n * online/offline, but rather it relies on the information supplied by the app\n * that uses it. By default the online state is assumed and the lib acts as if\n * it was connected. See {@link JitsiMeetJS.setNetworkInfo}.\n */\nexport class NetworkInfo extends Listenable {\n    /**\n     * Creates new {@link NetworkInfo} instance.\n     */\n    constructor() {\n        super();\n        this._current = {\n            isOnline: true\n        };\n    }\n\n    /**\n     * Updates the network info state.\n     * @param {boolean} isOnline - {@code true} if internet is online or {@code false} otherwise.\n     */\n    updateNetworkInfo({ isOnline }) {\n        logger.debug('updateNetworkInfo', { isOnline });\n        this._current = {\n            isOnline: isOnline === true\n        };\n        this.eventEmitter.emit(NETWORK_INFO_EVENT, this._current);\n    }\n\n    /**\n     * Returns the online/offline internet status. By default the value is {@code true} and changes only if\n     * the lib's user wires the state through {@link JitsiMeetJS.setNetworkInfo} like the jitsi-meet does. Because of\n     * that any logic should still assume that the internet may be offline and should handle the failure gracefully.\n     * It's only a good hint in the other way around: to pause internet operations until it comes back online.\n     * @returns {boolean}\n     */\n    isOnline() {\n        return this._current.isOnline === true;\n    }\n}\n\nconst networkInfo = new NetworkInfo();\n\nexport default networkInfo;\n","/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nvar SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(function(line) {\n    return line.trim();\n  });\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  var parts = blob.split('\\nm=');\n  return parts.map(function(part, index) {\n    return (index > 0 ? 'm=' + part : part).trim() + '\\r\\n';\n  });\n};\n\n// returns the session description.\nSDPUtils.getDescription = function(blob) {\n  var sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  var sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(function(line) {\n    return line.indexOf(prefix) === 0;\n  });\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\nSDPUtils.parseCandidate = function(line) {\n  var parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  var candidate = {\n    foundation: parts[0],\n    component: parseInt(parts[1], 10),\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7]\n  };\n\n  for (var i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compability.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag\n        candidate[parts[i]] = parts[i + 1];\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\nSDPUtils.writeCandidate = function(candidate) {\n  var sdp = [];\n  sdp.push(candidate.foundation);\n  sdp.push(candidate.component);\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  var type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  var parts = line.substr(9).split(' ');\n  var parsed = {\n    payloadType: parseInt(parts.shift(), 10) // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generate an a=rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  var channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses an a=extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1]\n  };\n};\n\n// Generates a=extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses an ftmp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  var parsed = {};\n  var kv;\n  var parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (var j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  var line = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    var params = [];\n    Object.keys(codec.parameters).forEach(function(param) {\n      if (codec.parameters[param]) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  var parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' ')\n  };\n};\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  var lines = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(function(fb) {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses an RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  var sp = line.indexOf(' ');\n  var parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10)\n  };\n  var colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\nSDPUtils.parseSsrcGroup = function(line) {\n  var parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(function(ssrc) {\n      return parseInt(ssrc, 10);\n    })\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\nSDPUtils.parseFingerprint = function(line) {\n  var parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1]\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role.\n  // Note2: 'algorithm' is not case sensitive except in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint)\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  var sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(function(fp) {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  var parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES paramters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  var ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  var pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  return 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  var description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: []\n  };\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    var pt = mline[i];\n    var rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      var codec = SDPUtils.parseRtpMap(rtpmapline);\n      var fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function(line) {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  var sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(function(codec) {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(function(codec) {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  var maxptime = 0;\n  caps.codecs.forEach(function(codec) {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n  sdp += 'a=rtcp-mux\\r\\n';\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(function(extension) {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  var encodingParameters = [];\n  var description = SDPUtils.parseRtpParameters(mediaSection);\n  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(parts) {\n      return parts.attribute === 'cname';\n    });\n  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  var secondarySsrc;\n\n  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(function(line) {\n      var parts = line.substr(17).split(' ');\n      return parts.map(function(part) {\n        return parseInt(part, 10);\n      });\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(function(codec) {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      var encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10)\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(function(params) {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  var rtcpParameters = {};\n\n  // Gets the first SSRC. Note tha with RTX there might be multiple\n  // SSRCs.\n  var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(obj) {\n      return obj.attribute === 'cname';\n    })[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  var parts;\n  var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(msidParts) {\n      return msidParts.attribute === 'msid';\n    });\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  var mline = SDPUtils.parseMLine(mediaSection);\n  var maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  var maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  var sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize: maxMessageSize\n    };\n  }\n  var sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    var parts = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:')[0]\n      .substr(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize: maxMessageSize\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  var output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n'\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n'\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boilder plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  var sessionId;\n  var version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  var user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\nSDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\n\n  // Map ICE parameters (ufrag, pwd) to SDP.\n  sdp += SDPUtils.writeIceParameters(\n    transceiver.iceGatherer.getLocalParameters());\n\n  // Map DTLS parameters to SDP.\n  sdp += SDPUtils.writeDtlsParameters(\n    transceiver.dtlsTransport.getLocalParameters(),\n    type === 'offer' ? 'actpass' : 'active');\n\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n  if (transceiver.direction) {\n    sdp += 'a=' + transceiver.direction + '\\r\\n';\n  } else if (transceiver.rtpSender && transceiver.rtpReceiver) {\n    sdp += 'a=sendrecv\\r\\n';\n  } else if (transceiver.rtpSender) {\n    sdp += 'a=sendonly\\r\\n';\n  } else if (transceiver.rtpReceiver) {\n    sdp += 'a=recvonly\\r\\n';\n  } else {\n    sdp += 'a=inactive\\r\\n';\n  }\n\n  if (transceiver.rtpSender) {\n    // spec.\n    var msid = 'msid:' + stream.id + ' ' +\n        transceiver.rtpSender.track.id + '\\r\\n';\n    sdp += 'a=' + msid;\n\n    // for Chrome.\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n        ' ' + msid;\n    if (transceiver.sendEncodingParameters[0].rtx) {\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n          ' ' + msid;\n      sdp += 'a=ssrc-group:FID ' +\n          transceiver.sendEncodingParameters[0].ssrc + ' ' +\n          transceiver.sendEncodingParameters[0].rtx.ssrc +\n          '\\r\\n';\n    }\n  }\n  // FIXME: this should be written by writeRtpDescription.\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n        ' cname:' + SDPUtils.localCName + '\\r\\n';\n  }\n  return sdp;\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  var lines = SDPUtils.splitLines(mediaSection);\n  for (var i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' ')\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  var line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  var parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5]\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  var lines = SDPUtils.splitLines(blob);\n  for (var i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","/**\n * A collection of utility functions for taking in XML and parsing it to return\n * certain values.\n */\nexport default {\n    /**\n     * Parses the presence update of the focus and returns an object with the\n     * statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getFocusRecordingUpdate(presence) {\n        const jibriStatus = presence\n            && presence.getElementsByTagName('jibri-recording-status')[0];\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        return {\n            error: jibriStatus.getAttribute('failure_reason'),\n            initiator: jibriStatus.getAttribute('initiator'),\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\n            sessionID: jibriStatus.getAttribute('session_id'),\n            status: jibriStatus.getAttribute('status')\n        };\n    },\n\n    /**\n     * Parses the presence update from a hidden domain participant and returns\n     * an object with the statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getHiddenDomainUpdate(presence) {\n        const liveStreamViewURLContainer\n            = presence.getElementsByTagName('live-stream-view-url')[0];\n        const liveStreamViewURL = liveStreamViewURLContainer\n            && liveStreamViewURLContainer.textContent;\n        const modeContainer\n            = presence.getElementsByTagName('mode')[0];\n        const mode = modeContainer\n            && modeContainer.textContent\n            && modeContainer.textContent.toLowerCase();\n        const sessionIDContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionID\n            = sessionIDContainer && sessionIDContainer.textContent;\n\n        return {\n            liveStreamViewURL,\n            mode,\n            sessionID\n        };\n    },\n\n    /**\n     * Returns the recording session ID from a successful IQ.\n     *\n     * @param {Node} response - The response from the IQ.\n     * @returns {string} The session ID of the recording session.\n     */\n    getSessionIdFromIq(response) {\n        const jibri = response && response.getElementsByTagName('jibri')[0];\n\n        return jibri && jibri.getAttribute('session_id');\n    },\n\n    /**\n     * Returns the recording session ID from a presence, if it exists.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {string|undefined} The session ID of the recording session.\n     */\n    getSessionId(presence) {\n        const sessionIdContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\n\n        return sessionId;\n    },\n\n    /**\n     * Returns whether or not a presence is from the focus.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {boolean} True if the presence is from the focus.\n     */\n    isFromFocus(presence) {\n        return presence.getAttribute('from').includes('focus');\n    }\n};\n","/* global __filename, Olm */\n\nimport base64js from 'base64-js';\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\nimport { FEATURE_E2EE, JITSI_MEET_MUC_TYPE } from '../xmpp/xmpp';\n\nconst logger = getLogger(__filename);\n\nconst REQ_TIMEOUT = 5 * 1000;\nconst OLM_MESSAGE_TYPE = 'olm';\nconst OLM_MESSAGE_TYPES = {\n    ERROR: 'error',\n    KEY_INFO: 'key-info',\n    KEY_INFO_ACK: 'key-info-ack',\n    SESSION_ACK: 'session-ack',\n    SESSION_INIT: 'session-init'\n};\n\nconst kOlmData = Symbol('OlmData');\n\nconst OlmAdapterEvents = {\n    OLM_ID_KEY_READY: 'olm.id_key_ready',\n    PARTICIPANT_E2EE_CHANNEL_READY: 'olm.participant_e2ee_channel_ready',\n    PARTICIPANT_KEY_UPDATED: 'olm.partitipant_key_updated'\n};\n\n/**\n * This class implements an End-to-End Encrypted communication channel between every two peers\n * in the conference. This channel uses libolm to achieve E2EE.\n *\n * The created channel is then used to exchange the secret key that each participant will use\n * to encrypt the actual media (see {@link E2EEContext}).\n *\n * A simple JSON message based protocol is implemented, which follows a request - response model:\n * - session-init: Initiates an olm session establishment procedure. This message will be sent\n *                 by the participant who just joined, to everyone else.\n * - session-ack: Completes the olm session etablishment. This messsage may contain ancilliary\n *                encrypted data, more specifically the sender's current key.\n * - key-info: Includes the sender's most up to date key information.\n * - key-info-ack: Acknowledges the reception of a key-info request. In addition, it may contain\n *                 the sender's key information, if available.\n * - error: Indicates a request processing error has occurred.\n *\n * These requessts and responses are transport independent. Currently they are sent using XMPP\n * MUC private messages.\n */\nexport class OlmAdapter extends Listenable {\n    /**\n     * Creates an adapter instance for the given conference.\n     */\n    constructor(conference) {\n        super();\n\n        this._conf = conference;\n        this._init = new Deferred();\n        this._key = undefined;\n        this._keyIndex = -1;\n        this._reqs = new Map();\n        this._sessionInitialization = undefined;\n\n        if (OlmAdapter.isSupported()) {\n            this._bootstrapOlm();\n\n            this._conf.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this._onEndpointMessageReceived.bind(this));\n            this._conf.on(JitsiConferenceEvents.CONFERENCE_LEFT, this._onConferenceLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.USER_LEFT, this._onParticipantLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this._onParticipantPropertyChanged.bind(this));\n        } else {\n            this._init.reject(new Error('Olm not supported'));\n        }\n    }\n\n    /**\n     * Starts new olm sessions with every other participant that has the participantId \"smaller\" the localParticipantId.\n     */\n    async initSessions() {\n        if (this._sessionInitialization) {\n            throw new Error('OlmAdapte initSessions called multiple times');\n        } else {\n            this._sessionInitialization = new Deferred();\n\n            await this._init;\n\n            const promises = [];\n            const localParticipantId = this._conf.myUserId();\n\n            for (const participant of this._conf.getParticipants()) {\n                const participantFeatures = await participant.getFeatures();\n\n                if (participantFeatures.has(FEATURE_E2EE) && localParticipantId < participant.getId()) {\n                    promises.push(this._sendSessionInit(participant));\n                }\n            }\n\n            await Promise.allSettled(promises);\n\n            // TODO: retry failed ones.\n\n            this._sessionInitialization.resolve();\n            this._sessionInitialization = undefined;\n        }\n    }\n\n    /**\n     * Indicates if olm is supported on the current platform.\n     *\n     * @returns {boolean}\n     */\n    static isSupported() {\n        return typeof window.Olm !== 'undefined';\n    }\n\n    /**\n     * Updates the current participant key and distributes it to all participants in the conference\n     * by sending a key-info message.\n     *\n     * @param {Uint8Array|boolean} key - The new key.\n     * @retrns {Promise<Number>}\n     */\n    async updateKey(key) {\n        // Store it locally for new sessions.\n        this._key = key;\n        this._keyIndex++;\n\n        // Broadcast it.\n        const promises = [];\n\n        for (const participant of this._conf.getParticipants()) {\n            const pId = participant.getId();\n            const olmData = this._getParticipantOlmData(participant);\n\n            // TODO: skip those who don't support E2EE.\n            if (!olmData.session) {\n                logger.warn(`Tried to send key to participant ${pId} but we have no session`);\n\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            const uuid = uuidv4();\n            const data = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.KEY_INFO,\n                    data: {\n                        ciphertext: this._encryptKeyInfo(olmData.session),\n                        uuid\n                    }\n                }\n            };\n            const d = new Deferred();\n\n            d.setRejectTimeout(REQ_TIMEOUT);\n            d.catch(() => {\n                this._reqs.delete(uuid);\n            });\n            this._reqs.set(uuid, d);\n            promises.push(d);\n\n            this._sendMessage(data, pId);\n        }\n\n        await Promise.allSettled(promises);\n\n        // TODO: retry failed ones?\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Updates the current participant key.\n     * @param {Uint8Array|boolean} key - The new key.\n     * @returns {number}\n    */\n    updateCurrentKey(key) {\n        this._key = key;\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Frees the olmData session for the given participant.\n     *\n     */\n    clearParticipantSession(participant) {\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            olmData.session.free();\n            olmData.session = undefined;\n        }\n    }\n\n    /**\n     * Internal helper to bootstrap the olm library.\n     *\n     * @returns {Promise<void>}\n     * @private\n     */\n    async _bootstrapOlm() {\n        logger.debug('Initializing Olm...');\n\n        try {\n            await Olm.init();\n\n            this._olmAccount = new Olm.Account();\n            this._olmAccount.create();\n\n            const idKeys = JSON.parse(this._olmAccount.identity_keys());\n\n            this._idKey = idKeys.curve25519;\n\n            logger.debug(`Olm ${Olm.get_library_version().join('.')} initialized`);\n            this._init.resolve();\n            this.eventEmitter.emit(OlmAdapterEvents.OLM_ID_KEY_READY, this._idKey);\n        } catch (e) {\n            logger.error('Failed to initialize Olm', e);\n            this._init.reject(e);\n        }\n\n    }\n\n    /**\n     * Internal helper for encrypting the current key information for a given participant.\n     *\n     * @param {Olm.Session} session - Participant's session.\n     * @returns {string} - The encrypted text with the key information.\n     * @private\n     */\n    _encryptKeyInfo(session) {\n        const keyInfo = {};\n\n        if (this._key !== undefined) {\n            keyInfo.key = this._key ? base64js.fromByteArray(this._key) : false;\n            keyInfo.keyIndex = this._keyIndex;\n        }\n\n        return session.encrypt(JSON.stringify(keyInfo));\n    }\n\n    /**\n     * Internal helper for getting the olm related data associated with a participant.\n     *\n     * @param {JitsiParticipant} participant - Participant whose data wants to be extracted.\n     * @returns {Object}\n     * @private\n     */\n    _getParticipantOlmData(participant) {\n        participant[kOlmData] = participant[kOlmData] || {};\n\n        return participant[kOlmData];\n    }\n\n    /**\n     * Handles leaving the conference, cleaning up olm sessions.\n     *\n     * @private\n     */\n    async _onConferenceLeft() {\n        logger.debug('Conference left');\n\n        await this._init;\n\n        for (const participant of this._conf.getParticipants()) {\n            this._onParticipantLeft(participant.getId(), participant);\n        }\n\n        if (this._olmAccount) {\n            this._olmAccount.free();\n            this._olmAccount = undefined;\n        }\n    }\n\n    /**\n     * Main message handler. Handles 1-to-1 messages received from other participants\n     * and send the appropriate replies.\n     *\n     * @private\n     */\n    async _onEndpointMessageReceived(participant, payload) {\n        if (payload[JITSI_MEET_MUC_TYPE] !== OLM_MESSAGE_TYPE) {\n            return;\n        }\n\n        if (!payload.olm) {\n            logger.warn('Incorrectly formatted message');\n\n            return;\n        }\n\n        await this._init;\n\n        const msg = payload.olm;\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        switch (msg.type) {\n        case OLM_MESSAGE_TYPES.SESSION_INIT: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'Session already established');\n            } else {\n                // Create a session for communicating with this participant.\n\n                const session = new Olm.Session();\n\n                session.create_outbound(this._olmAccount, msg.data.idKey, msg.data.otKey);\n                olmData.session = session;\n\n                // Send ACK\n                const ack = {\n                    [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                    olm: {\n                        type: OLM_MESSAGE_TYPES.SESSION_ACK,\n                        data: {\n                            ciphertext: this._encryptKeyInfo(session),\n                            uuid: msg.data.uuid\n                        }\n                    }\n                };\n\n                this._sendMessage(ack, pId);\n                this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_E2EE_CHANNEL_READY, pId);\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SESSION_ACK: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'No session found');\n            } else if (msg.data.uuid === olmData.pendingSessionUuid) {\n                const { ciphertext } = msg.data;\n                const d = this._reqs.get(msg.data.uuid);\n                const session = new Olm.Session();\n\n                session.create_inbound(this._olmAccount, ciphertext.body);\n\n                // Remove OT keys that have been used to setup this session.\n                this._olmAccount.remove_one_time_keys(session);\n\n                // Decrypt first message.\n                const data = session.decrypt(ciphertext.type, ciphertext.body);\n\n                olmData.session = session;\n                olmData.pendingSessionUuid = undefined;\n\n                this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_E2EE_CHANNEL_READY, pId);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n\n                const json = safeJsonParse(data);\n\n                if (json.key) {\n                    const key = base64js.toByteArray(json.key);\n                    const keyIndex = json.keyIndex;\n\n                    olmData.lastKey = key;\n                    this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                }\n            } else {\n                logger.warn('Received ACK with the wrong UUID');\n\n                this._sendError(participant, 'Invalid UUID');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.ERROR: {\n            logger.error(msg.data.error);\n\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n\n                    // Send ACK.\n                    const ack = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO_ACK,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid: msg.data.uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(ack, pId);\n                }\n            } else {\n                logger.debug(`Received key info message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO_ACK: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n                }\n\n                const d = this._reqs.get(msg.data.uuid);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n            } else {\n                logger.debug(`Received key info ack message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info-ack');\n            }\n            break;\n        }\n        }\n    }\n\n    /**\n     * Handles a participant leaving. When a participant leaves their olm session is destroyed.\n     *\n     * @private\n     */\n    _onParticipantLeft(id, participant) {\n        logger.debug(`Participant ${id} left`);\n\n        this.clearParticipantSession(participant);\n    }\n\n    /**\n    * Handles an update in a participant's presence property.\n    *\n    * @param {JitsiParticipant} participant - The participant.\n    * @param {string} name - The name of the property that changed.\n    * @param {*} oldValue - The property's previous value.\n    * @param {*} newValue - The property's new value.\n    * @private\n    */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.enabled':\n            if (newValue && this._conf.isE2EEEnabled()) {\n                const localParticipantId = this._conf.myUserId();\n                const participantId = participant.getId();\n                const participantFeatures = await participant.getFeatures();\n\n                if (participantFeatures.has(FEATURE_E2EE) && localParticipantId < participantId) {\n                    if (this._sessionInitialization) {\n                        await this._sessionInitialization;\n                    }\n                    await this._sendSessionInit(participant);\n\n                    const olmData = this._getParticipantOlmData(participant);\n                    const uuid = uuidv4();\n                    const data = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(data, participantId);\n                }\n            }\n            break;\n        }\n    }\n\n    /**\n     * Builds and sends an error message to the target participant.\n     *\n     * @param {JitsiParticipant} participant - The target participant.\n     * @param {string} error - The error message.\n     * @returns {void}\n     */\n    _sendError(participant, error) {\n        const pId = participant.getId();\n        const err = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.ERROR,\n                data: {\n                    error\n                }\n            }\n        };\n\n        this._sendMessage(err, pId);\n    }\n\n    /**\n     * Internal helper to send the given object to the given participant ID.\n     * This function merely exists so the transport can be easily swapped.\n     * Currently messages are transmitted via XMPP MUC private messages.\n     *\n     * @param {object} data - The data that will be sent to the target participant.\n     * @param {string} participantId - ID of the target participant.\n     */\n    _sendMessage(data, participantId) {\n        this._conf.sendMessage(data, participantId);\n    }\n\n    /**\n     * Builds and sends the session-init request to the target participant.\n     *\n     * @param {JitsiParticipant} participant - Participant to whom we'll send the request.\n     * @returns {Promise} - The promise will be resolved when the session-ack is received.\n     * @private\n     */\n    _sendSessionInit(participant) {\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a session`);\n\n            return Promise.reject();\n        }\n\n        if (olmData.pendingSessionUuid !== undefined) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a pending session`);\n\n            return Promise.reject();\n        }\n\n        // Generate a One Time Key.\n        this._olmAccount.generate_one_time_keys(1);\n\n        const otKeys = JSON.parse(this._olmAccount.one_time_keys());\n        const otKey = Object.values(otKeys.curve25519)[0];\n\n        if (!otKey) {\n            return Promise.reject(new Error('No one-time-keys generated'));\n        }\n\n        // Mark the OT keys (one really) as published so they are not reused.\n        this._olmAccount.mark_keys_as_published();\n\n        const uuid = uuidv4();\n        const init = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.SESSION_INIT,\n                data: {\n                    idKey: this._idKey,\n                    otKey,\n                    uuid\n                }\n            }\n        };\n\n        const d = new Deferred();\n\n        d.setRejectTimeout(REQ_TIMEOUT);\n        d.catch(() => {\n            this._reqs.delete(uuid);\n            olmData.pendingSessionUuid = undefined;\n        });\n        this._reqs.set(uuid, d);\n\n        this._sendMessage(init, pId);\n\n        // Store the UUID for matching with the ACK.\n        olmData.pendingSessionUuid = uuid;\n\n        return d;\n    }\n}\n\nOlmAdapter.events = OlmAdapterEvents;\n\n/**\n * Helper to ensure JSON parsing always returns an object.\n *\n * @param {string} data - The data that needs to be parsed.\n * @returns {object} - Parsed data or empty object in case of failure.\n */\nfunction safeJsonParse(data) {\n    try {\n        return JSON.parse(data);\n    } catch (e) {\n        return {};\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport debounce from 'lodash.debounce';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport Deferred from '../util/Deferred';\n\nimport E2EEContext from './E2EEContext';\nimport { OlmAdapter } from './OlmAdapter';\nimport { importKey, ratchet } from './crypto-utils';\n\nconst logger = getLogger(__filename);\n\n// Period which we'll wait before updating / rotating our keys when a participant\n// joins or leaves.\nconst DEBOUNCE_PERIOD = 5000;\n\n/**\n * This module integrates {@link E2EEContext} with {@link JitsiConference} in order to enable E2E encryption.\n */\nexport class E2EEncryption {\n    /**\n     * A constructor.\n     * @param {JitsiConference} conference - The conference instance for which E2E encryption is to be enabled.\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        this._conferenceJoined = false;\n        this._enabled = false;\n        this._initialized = false;\n        this._key = undefined;\n        this._enabling = undefined;\n\n        this._e2eeCtx = new E2EEContext();\n        this._olmAdapter = new OlmAdapter(conference);\n\n        // Debounce key rotation / ratcheting to avoid a storm of messages.\n        this._ratchetKey = debounce(this._ratchetKeyImpl, DEBOUNCE_PERIOD);\n        this._rotateKey = debounce(this._rotateKeyImpl, DEBOUNCE_PERIOD);\n\n        // Participant join / leave operations. Used for key advancement / rotation.\n        //\n\n        this.conference.on(\n            JitsiConferenceEvents.CONFERENCE_JOINED,\n            () => {\n                this._conferenceJoined = true;\n            });\n        this.conference.on(\n            JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n            this._onParticipantPropertyChanged.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onParticipantJoined.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onParticipantLeft.bind(this));\n\n        // Conference media events in order to attach the encryptor / decryptor.\n        // FIXME add events to TraceablePeerConnection which will allow to see when there's new receiver or sender\n        // added instead of shenanigans around conference track events and track muted.\n        //\n\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            this._onMediaSessionStarted.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_ADDED,\n            track => track.isLocal() && this._onLocalTrackAdded(track));\n        this.conference.rtc.on(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            (track, tpc) => this._setupReceiverE2EEForTrack(tpc, track));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n            this._trackMuteChanged.bind(this));\n\n        // Olm signalling events.\n        this._olmAdapter.on(\n            OlmAdapter.events.OLM_ID_KEY_READY,\n            this._onOlmIdKeyReady.bind(this));\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_E2EE_CHANNEL_READY,\n            this._onParticipantE2EEChannelReady.bind(this));\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_KEY_UPDATED,\n            this._onParticipantKeyUpdated.bind(this));\n    }\n\n    /**\n     * Indicates if E2EE is supported in the current platform.\n     *\n     * @param {object} config - Global configuration.\n     * @returns {boolean}\n     */\n    static isSupported(config) {\n        return browser.supportsInsertableStreams()\n            && OlmAdapter.isSupported()\n            && !(config.testing && config.testing.disableE2EE);\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this._enabled;\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        if (enabled === this._enabled) {\n            return;\n        }\n\n        this._enabling && await this._enabling;\n\n        this._enabling = new Deferred();\n\n        this._enabled = enabled;\n\n        if (enabled) {\n            await this._olmAdapter.initSessions();\n        }\n\n        this.conference.setLocalParticipantProperty('e2ee.enabled', enabled);\n\n        if (!this._initialized && enabled) {\n            // Need to re-create the peerconnections in order to apply the insertable streams constraint.\n            // TODO: this was necessary due to some audio issues when indertable streams are used\n            // even though encryption is not performed. This should be fixed in the browser eventually.\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=1103280\n            this.conference._restartMediaSessions();\n\n            this._initialized = true;\n        }\n\n        // Generate a random key in case we are enabling.\n        this._key = enabled ? this._generateKey() : false;\n\n        // Send it to others using the E2EE olm channel.\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        // Set our key so we begin encrypting.\n        this._e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n\n        this._enabling.resolve();\n    }\n\n    /**\n     * Generates a new 256 bit random key.\n     *\n     * @returns {Uint8Array}\n     * @private\n     */\n    _generateKey() {\n        return window.crypto.getRandomValues(new Uint8Array(32));\n    }\n\n    /**\n     * Setup E2EE on the new track that has been added to the conference, apply it on all the open peerconnections.\n     * @param {JitsiLocalTrack} track - the new track that's being added to the conference.\n     * @private\n     */\n    _onLocalTrackAdded(track) {\n        for (const session of this.conference._getMediaSessions()) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setups E2E encryption for the new session.\n     * @param {JingleSessionPC} session - the new media session.\n     * @private\n     */\n    _onMediaSessionStarted(session) {\n        const localTracks = this.conference.getLocalTracks();\n\n        for (const track of localTracks) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Publushes our own Olmn id key in presence.\n     * @private\n     */\n    _onOlmIdKeyReady(idKey) {\n        logger.debug(`Olm id key ready: ${idKey}`);\n\n        // Publish it in presence.\n        this.conference.setLocalParticipantProperty('e2ee.idKey', idKey);\n    }\n\n    /**\n     * Advances (using ratcheting) the current key when a new participant joins the conference.\n     * @private\n     */\n    _onParticipantJoined(id) {\n        logger.debug(`Participant ${id} joined`);\n\n        if (this._conferenceJoined && this._enabled) {\n            this._ratchetKey();\n        }\n    }\n\n    /**\n     * Rotates the current key when a participant leaves the conference.\n     * @private\n     */\n    _onParticipantLeft(id) {\n        logger.debug(`Participant ${id} left`);\n\n        this._e2eeCtx.cleanup(id);\n\n        if (this._enabled) {\n            this._rotateKey();\n        }\n    }\n\n    /**\n     * Event posted when the E2EE signalling channel has been established with the given participant.\n     * @private\n     */\n    _onParticipantE2EEChannelReady(id) {\n        logger.debug(`E2EE channel with participant ${id} is ready`);\n    }\n\n    /**\n     * Handles an update in a participant's key.\n     *\n     * @param {string} id - The participant ID.\n     * @param {Uint8Array | boolean} key - The new key for the participant.\n     * @param {Number} index - The new key's index.\n     * @private\n     */\n    _onParticipantKeyUpdated(id, key, index) {\n        logger.debug(`Participant ${id} updated their key`);\n\n        this._e2eeCtx.setKey(id, key, index);\n    }\n\n    /**\n     * Handles an update in a participant's presence property.\n     *\n     * @param {JitsiParticipant} participant - The participant.\n     * @param {string} name - The name of the property that changed.\n     * @param {*} oldValue - The property's previous value.\n     * @param {*} newValue - The property's new value.\n     * @private\n     */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.idKey':\n            logger.debug(`Participant ${participant.getId()} updated their id key: ${newValue}`);\n            break;\n        case 'e2ee.enabled':\n            if (!newValue && this._enabled) {\n                this._olmAdapter.clearParticipantSession(participant);\n\n                this._rotateKey();\n            }\n            break;\n        }\n    }\n\n    /**\n     * Advances the current key by using ratcheting.\n     *\n     * @private\n     */\n    async _ratchetKeyImpl() {\n        logger.debug('Ratchetting key');\n\n        const material = await importKey(this._key);\n        const newKey = await ratchet(material);\n\n        this._key = new Uint8Array(newKey);\n\n        const index = this._olmAdapter.updateCurrentKey(this._key);\n\n        this._e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Rotates the local key. Rotating the key implies creating a new one, then distributing it\n     * to all participants and once they all received it, start using it.\n     *\n     * @private\n     */\n    async _rotateKeyImpl() {\n        logger.debug('Rotating key');\n\n        this._key = this._generateKey();\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        this._e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Setup E2EE for the receiving side.\n     *\n     * @private\n     */\n    _setupReceiverE2EEForTrack(tpc, track) {\n        if (!this._enabled) {\n            return;\n        }\n\n        const receiver = tpc.findReceiverForTrack(track.track);\n\n        if (receiver) {\n            this._e2eeCtx.handleReceiver(receiver, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: receiver not found in: ${tpc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE for the sending side.\n     *\n     * @param {JingleSessionPC} session - the session which sends the media produced by the track.\n     * @param {JitsiLocalTrack} track - the local track for which e2e encoder will be configured.\n     * @private\n     */\n    _setupSenderE2EEForTrack(session, track) {\n        if (!this._enabled) {\n            return;\n        }\n\n        const pc = session.peerconnection;\n        const sender = pc && pc.findSenderForTrack(track.track);\n\n        if (sender) {\n            this._e2eeCtx.handleSender(sender, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: sender not found in ${pc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE on the sender that is created for the unmuted local video track.\n     * @param {JitsiLocalTrack} track - the track for which muted status has changed.\n     * @private\n     */\n    _trackMuteChanged(track) {\n        if (browser.doesVideoMuteByStreamRemove() && track.isLocal() && track.isVideoTrack() && !track.isMuted()) {\n            for (const session of this.conference._getMediaSessions()) {\n                this._setupSenderE2EEForTrack(session, track);\n            }\n        }\n    }\n}\n","/* global __filename, $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport {\n    ICE_DURATION,\n    ICE_STATE_CHANGED\n} from '../../service/statistics/AnalyticsEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/RTCUtils';\nimport Statistics from '../statistics/statistics';\nimport AsyncQueue from '../util/AsyncQueue';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport { integerHash } from '../util/StringUtils';\n\nimport browser from './../browser';\nimport JingleSession from './JingleSession';\nimport * as JingleSessionState from './JingleSessionState';\nimport MediaSessionEvents from './MediaSessionEvents';\nimport SDP from './SDP';\nimport SDPDiffer from './SDPDiffer';\nimport SDPUtil from './SDPUtil';\nimport SignalingLayerImpl from './SignalingLayerImpl';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger(__filename);\n\n/**\n * Constant tells how long we're going to wait for IQ response, before timeout\n * error is  triggered.\n * @type {number}\n */\nconst IQ_TIMEOUT = 10000;\n\n/*\n * The default number of samples (per stat) to keep when webrtc stats gathering\n * is enabled in TraceablePeerConnection.\n */\nconst DEFAULT_MAX_STATS = 300;\n\n/**\n * The time duration for which the client keeps gathering ICE candidates to be sent out in a single IQ.\n * @type {number} timeout in ms.\n */\nconst ICE_CAND_GATHERING_TIMEOUT = 150;\n\n/**\n * @typedef {Object} JingleSessionPCOptions\n * @property {Object} abTesting - A/B testing related options (ask George).\n * @property {boolean} abTesting.enableSuspendVideoTest - enables the suspend\n * video test ?(ask George).\n * @property {boolean} disableH264 - Described in the config.js[1].\n * @property {boolean} disableRtx - Described in the config.js[1].\n * @property {boolean} disableSimulcast - Described in the config.js[1].\n * @property {boolean} enableInsertableStreams - Set to true when the insertable streams constraints is to be enabled\n * on the PeerConnection.\n * @property {boolean} enableLayerSuspension - Described in the config.js[1].\n * @property {boolean} failICE - it's an option used in the tests. Set to\n * <tt>true</tt> to block any real candidates and make the ICE fail.\n * @property {boolean} gatherStats - Described in the config.js[1].\n * @property {object} p2p - Peer to peer related options (FIXME those could be\n * fetched from config.p2p on the upper level).\n * @property {boolean} preferH264 - Described in the config.js[1].\n * @property {Object} testing - Testing and/or experimental options.\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\n *\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\n */\n/**\n *\n */\nexport default class JingleSessionPC extends JingleSession {\n    /**\n     * Parses 'senders' attribute of the video content.\n     * @param {jQuery} jingleContents\n     * @return {string|null} one of the values of content \"senders\" attribute\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\n     * invalid then <tt>null</tt> will be returned.\n     * @private\n     */\n    static parseVideoSenders(jingleContents) {\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\n\n        if (videoContents.length) {\n            const senders = videoContents[0].getAttribute('senders');\n\n            if (senders === 'both'\n                || senders === 'initiator'\n                || senders === 'responder'\n                || senders === 'none') {\n                return senders;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Parses the video max frame height value out of the 'content-modify' IQ.\n     *\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\n     * @returns {Number|null}\n     */\n    static parseMaxFrameHeight(jingleContents) {\n        const maxFrameHeightSel = jingleContents.find('>content[name=\"video\"]>max-frame-height');\n\n        return maxFrameHeightSel.length ? Number(maxFrameHeightSel.text()) : null;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt>\n     * @param {string} sid the Jingle Session ID - random string which\n     * identifies the session\n     * @param {string} localJid our JID\n     * @param {string} remoteJid remote peer JID\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param mediaConstraints the media constraints object passed to\n     * createOffer/Answer, as defined by the WebRTC standard\n     * @param iceConfig the ICE servers config object as defined by the WebRTC\n     * standard.\n     * @param {boolean} isP2P indicates whether this instance is\n     * meant to be used in a direct, peer to peer connection or <tt>false</tt>\n     * if it's a JVB connection.\n     * @param {boolean} isInitiator indicates if it will be the side which\n     * initiates the session.\n     * @constructor\n     *\n     * @implements {SignalingLayer}\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            iceConfig,\n            isP2P,\n            isInitiator) {\n        super(\n            sid,\n            localJid,\n            remoteJid, connection, mediaConstraints, iceConfig, isInitiator);\n\n        /**\n         * The bridge session's identifier. One Jingle session can during\n         * it's lifetime participate in multiple bridge sessions managed by\n         * Jicofo. A new bridge session is started whenever Jicofo sends\n         * 'session-initiate' or 'transport-replace'.\n         *\n         * @type {?string}\n         * @private\n         */\n        this._bridgeSessionId = null;\n\n        /**\n         * The oldest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedOldLocalSdp = undefined;\n\n        /**\n         * The latest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedNewLocalSdp = undefined;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * ICE enters 'checking' state.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._iceCheckingStartedTimestamp = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * first ICE candidate is spawned by the peerconnection to mark when\n         * ICE gathering started. That's, because ICE gathering state changed\n         * events are not supported by most of the browsers, so we try something\n         * that will work everywhere. It may not be as accurate, but given that\n         * 'host' candidate usually comes first, the delay should be minimal.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._gatheringStartedTimestamp = null;\n\n        /**\n         * Local preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.localRecvMaxFrameHeight = undefined;\n\n        /**\n         * Indicates whether or not this session is willing to send/receive\n         * video media. When set to <tt>false</tt> the underlying peer\n         * connection will disable local video transfer and the remote peer will\n         * be will be asked to stop sending video via 'content-modify' IQ\n         * (the senders attribute of video contents will be adjusted\n         * accordingly). Note that this notification is sent only in P2P\n         * session, because Jicofo does not support it yet. Obviously when\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\n         * notification will be sent to resume video transfer on the remote\n         * side.\n         * @type {boolean}\n         * @private\n         */\n        this._localVideoActive = true;\n\n        /**\n         * Indicates whether or not the remote peer has video transfer active.\n         * When set to <tt>true</tt> it means that remote peer is neither\n         * sending nor willing to receive video. In such case we'll ask\n         * our peerconnection to stop sending video by calling\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\n         * <tt>false</tt>.\n         * @type {boolean}\n         * @private\n         */\n        this._remoteVideoActive = true;\n\n        /**\n         * Marks that ICE gathering duration has been reported already. That\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\n         * conference migration/ICE restart).\n         * @type {boolean}\n         * @private\n         */\n        this._gatheringReported = false;\n\n        this.lasticecandidate = false;\n        this.closed = false;\n\n        /**\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\n         * a peer to peer type of session.\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\n         * session or <tt>false</tt> if it's a JVB session\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * Remote preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.remoteRecvMaxFrameHeight = undefined;\n\n        /**\n         * The signaling layer implementation.\n         * @type {SignalingLayerImpl}\n         */\n        this.signalingLayer = new SignalingLayerImpl();\n\n        /**\n         * The queue used to serialize operations done on the peerconnection.\n         *\n         * @type {AsyncQueue}\n         */\n        this.modificationQueue = new AsyncQueue();\n\n        /**\n         * Flag used to guarantee that the connection established event is\n         * triggered just once.\n         * @type {boolean}\n         */\n        this.wasConnected = false;\n\n        /**\n         * Keeps track of how long (in ms) it took from ICE start to ICE\n         * connect.\n         *\n         * @type {number}\n         */\n        this.establishmentDuration = undefined;\n\n        this._xmppListeners = [];\n        this._xmppListeners.push(\n            connection.addEventListener(\n                XmppConnection.Events.CONN_STATUS_CHANGED,\n                this.onXmppStatusChanged.bind(this))\n        );\n\n        this._removeSenderVideoConstraintsChangeListener = undefined;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Checks whether or not this session instance is still operational.\n     * @private\n     * @returns {boolean} {@code true} if operation or {@code false} otherwise.\n     */\n    _assertNotEnded() {\n        return this.state !== JingleSessionState.ENDED;\n    }\n\n    /**\n     * @inheritDoc\n     * @param {JingleSessionPCOptions} options  - a set of config options.\n     */\n    doInitialize(options) {\n        this.failICE = Boolean(options.failICE);\n        this.lasticecandidate = false;\n        this.options = options;\n\n        /**\n         * {@code true} if reconnect is in progress.\n         * @type {boolean}\n         */\n        this.isReconnect = false;\n\n        /**\n         * Set to {@code true} if the connection was ever stable\n         * @type {boolean}\n         */\n        this.wasstable = false;\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\n\n        const pcOptions = { disableRtx: options.disableRtx };\n\n        if (options.gatherStats) {\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\n        }\n        pcOptions.capScreenshareBitrate = false;\n        pcOptions.enableInsertableStreams = options.enableInsertableStreams;\n        pcOptions.videoQuality = options.videoQuality;\n        pcOptions.forceTurnRelay = options.forceTurnRelay;\n        pcOptions.audioQuality = options.audioQuality;\n\n        if (this.isP2P) {\n            // simulcast needs to be disabled for P2P (121) calls\n            pcOptions.disableSimulcast = true;\n            const abtestSuspendVideo = this._abtestSuspendVideoEnabled(options);\n\n            if (typeof abtestSuspendVideo !== 'undefined') {\n                pcOptions.abtestSuspendVideo = abtestSuspendVideo;\n            }\n        } else {\n            // H264 does not support simulcast, so it needs to be disabled.\n            pcOptions.disableSimulcast\n                = options.disableSimulcast\n                    || (options.preferH264 && !options.disableH264)\n                    || (options.videoQuality && options.videoQuality.preferredCodec === CodecMimeType.H264);\n\n            // Disable simulcast for low fps screenshare and enable it for high fps screenshare.\n            // testing.capScreenshareBitrate config.js setting has now been deprecated.\n            pcOptions.capScreenshareBitrate = !(typeof options.desktopSharingFrameRate?.max === 'number'\n                && options.desktopSharingFrameRate?.max > SS_DEFAULT_FRAME_RATE);\n\n            // add the capScreenshareBitrate to the permanent properties so that it's included with every event that we\n            // send to the analytics backend.\n            Statistics.analytics.addPermanentProperties({ capScreenshareBitrate: pcOptions.capScreenshareBitrate });\n        }\n\n        if (options.startSilent) {\n            pcOptions.startSilent = true;\n        }\n\n        this.peerconnection\n            = this.rtc.createPeerConnection(\n                    this.signalingLayer,\n                    this.iceConfig,\n                    this.isP2P,\n                    pcOptions);\n\n        this.peerconnection.onicecandidate = ev => {\n            if (!ev) {\n                // There was an incomplete check for ev before which left\n                // the last line of the function unprotected from a potential\n                // throw of an exception. Consequently, it may be argued that\n                // the check is unnecessary. Anyway, I'm leaving it and making\n                // the check complete.\n                return;\n            }\n\n            // XXX this is broken, candidate is not parsed.\n            const candidate = ev.candidate;\n            const now = window.performance.now();\n\n            if (candidate) {\n                if (this._gatheringStartedTimestamp === null) {\n                    this._gatheringStartedTimestamp = now;\n                }\n\n                // Discard candidates of disabled protocols.\n                let protocol = candidate.protocol;\n\n                if (typeof protocol === 'string') {\n                    protocol = protocol.toLowerCase();\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\n                        if (this.webrtcIceTcpDisable) {\n                            return;\n                        }\n                    } else if (protocol === 'udp') {\n                        if (this.webrtcIceUdpDisable) {\n                            return;\n                        }\n                    }\n                }\n            } else if (!this._gatheringReported) {\n                // End of gathering\n                Statistics.sendAnalytics(\n                    ICE_DURATION,\n                    {\n                        phase: 'gathering',\n                        value: now - this._gatheringStartedTimestamp,\n                        p2p: this.isP2P,\n                        initiator: this.isInitiator\n                    });\n                this._gatheringReported = true;\n            }\n            this.sendIceCandidate(candidate);\n        };\n\n        // Note there is a change in the spec about closed:\n        // This value moved into the RTCPeerConnectionState enum in\n        // the May 13, 2016 draft of the specification, as it reflects the state\n        // of the RTCPeerConnection, not the signaling connection. You now\n        // detect a closed connection by checking for connectionState to be\n        // \"closed\" instead.\n        // I suppose at some point this will be moved to onconnectionstatechange\n        this.peerconnection.onsignalingstatechange = () => {\n            if (this.peerconnection.signalingState === 'stable') {\n                this.wasstable = true;\n            } else if (this.peerconnection.signalingState === 'closed'\n                || this.peerconnection.connectionState === 'closed') {\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\n            }\n        };\n\n        /**\n         * The oniceconnectionstatechange event handler contains the code to\n         * execute when the iceconnectionstatechange event, of type Event,\n         * is received by this RTCPeerConnection. Such an event is sent when\n         * the value of RTCPeerConnection.iceConnectionState changes.\n         */\n        this.peerconnection.oniceconnectionstatechange = () => {\n            const now = window.performance.now();\n\n            if (!this.isP2P) {\n                this.room.connectionTimes[\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\n                    = now;\n            }\n            logger.log(\n                `(TIME) ICE ${this.peerconnection.iceConnectionState}`\n                    + ` P2P? ${this.isP2P}:\\t`,\n                now);\n\n            Statistics.sendAnalytics(\n                ICE_STATE_CHANGED,\n                {\n                    p2p: this.isP2P,\n                    state: this.peerconnection.iceConnectionState,\n                    'signaling_state': this.peerconnection.signalingState,\n                    reconnect: this.isReconnect,\n                    value: now\n                });\n\n            this.room.eventEmitter.emit(\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n                this,\n                this.peerconnection.iceConnectionState);\n            switch (this.peerconnection.iceConnectionState) {\n            case 'checking':\n                this._iceCheckingStartedTimestamp = now;\n                break;\n            case 'connected':\n                // Informs interested parties that the connection has been restored. This includes the case when\n                // media connection to the bridge has been restored after an ICE failure by using session-terminate.\n                if (this.peerconnection.signalingState === 'stable') {\n                    const usesTerminateForRestart = !this.options.enableIceRestart\n                        && this.room.supportsRestartByTerminate();\n\n                    if (this.isReconnect || usesTerminateForRestart) {\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.CONNECTION_RESTORED, this);\n                    }\n                }\n\n                if (!this.wasConnected && this.wasstable) {\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'checking',\n                            value: now - this._iceCheckingStartedTimestamp,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    // Switch between ICE gathering and ICE checking whichever\n                    // started first (scenarios are different for initiator\n                    // vs responder)\n                    const iceStarted\n                        = Math.min(\n                            this._iceCheckingStartedTimestamp,\n                            this._gatheringStartedTimestamp);\n\n                    this.establishmentDuration = now - iceStarted;\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'establishment',\n                            value: this.establishmentDuration,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    this.wasConnected = true;\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\n                }\n                this.isReconnect = false;\n                break;\n            case 'disconnected':\n                this.isReconnect = true;\n\n                // Informs interested parties that the connection has been\n                // interrupted.\n                if (this.wasstable) {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\n                }\n                break;\n            case 'failed':\n                this.room.eventEmitter.emit(\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\n                break;\n            }\n        };\n\n        /**\n         * The negotiationneeded event is fired whenever we shake the media on the\n         * RTCPeerConnection object.\n         */\n        this.peerconnection.onnegotiationneeded = () => {\n            const state = this.peerconnection.signalingState;\n            const remoteDescription = this.peerconnection.remoteDescription;\n\n            if (browser.usesUnifiedPlan() && state === 'stable'\n                && remoteDescription && typeof remoteDescription.sdp === 'string') {\n                logger.debug(`onnegotiationneeded fired on ${this.peerconnection} in state: ${state}`);\n                const workFunction = finishedCallback => {\n                    const oldSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                    this._renegotiate()\n                        .then(() => {\n                            const newSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(oldSdp, newSdp);\n                            finishedCallback();\n                        },\n                        finishedCallback /* will be called with en error */);\n                };\n\n                this.modificationQueue.push(\n                    workFunction,\n                    error => {\n                        if (error) {\n                            logger.error(`onnegotiationneeded error on ${this}`, error);\n                        } else {\n                            logger.debug(`onnegotiationneeded executed - OK on ${this}`);\n                        }\n                    });\n            }\n        };\n\n        // The signaling layer will bind it's listeners at this point\n        this.signalingLayer.setChatRoom(this.room);\n    }\n\n    /**\n     * Remote preference for receive video max frame height.\n     *\n     * @returns {Number|undefined}\n     */\n    getRemoteRecvMaxFrameHeight() {\n        if (this.isP2P) {\n            return this.remoteRecvMaxFrameHeight;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Sends given candidate in Jingle 'transport-info' message.\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\n     * @private\n     */\n    sendIceCandidate(candidate) {\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        if (candidate && candidate.candidate.length && !this.lasticecandidate) {\n            const ice = SDPUtil.iceparams(localSDP.media[candidate.sdpMLineIndex], localSDP.session);\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\n\n            if (!(ice && jcand)) {\n                const errorMesssage = 'failed to get ice && jcand';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\n                logger.error(errorMesssage);\n\n                return;\n            }\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n\n            if (this.usedrip) {\n                if (this.dripContainer.length === 0) {\n                    setTimeout(() => {\n                        if (this.dripContainer.length === 0) {\n                            return;\n                        }\n                        this.sendIceCandidates(this.dripContainer);\n                        this.dripContainer = [];\n                    }, ICE_CAND_GATHERING_TIMEOUT);\n                }\n                this.dripContainer.push(candidate);\n            } else {\n                this.sendIceCandidates([ candidate ]);\n            }\n        } else {\n            logger.log('sendIceCandidate: last candidate.');\n\n            // FIXME: remember to re-think in ICE-restart\n            this.lasticecandidate = true;\n        }\n    }\n\n    /**\n     * Sends given candidates in Jingle 'transport-info' message.\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\n     * candidate instances\n     * @private\n     */\n    sendIceCandidates(candidates) {\n        if (!this._assertNotEnded('sendIceCandidates')) {\n\n            return;\n        }\n\n        logger.log('sendIceCandidates', candidates);\n        const cand = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-info',\n                initiator: this.initiatorJid,\n                sid: this.sid });\n\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\n            const mline\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\n\n            if (cands.length > 0) {\n                const ice\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\n\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n                cand.c('content', {\n                    creator: this.initiatorJid === this.localJid\n                        ? 'initiator' : 'responder',\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\n                }).c('transport', ice);\n                for (let i = 0; i < cands.length; i++) {\n                    const candidate\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\n\n                    // Mangle ICE candidate if 'failICE' test option is enabled\n\n                    if (this.failICE) {\n                        candidate.ip = '1.1.1.1';\n                    }\n                    cand.c('candidate', candidate).up();\n                }\n\n                // add fingerprint\n                const fingerprintLine\n                    = SDPUtil.findLine(\n                        localSDP.media[mid],\n                        'a=fingerprint:', localSDP.session);\n\n                if (fingerprintLine) {\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\n\n                    tmp.required = true;\n                    cand.c(\n                        'fingerprint',\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\n                        .t(tmp.fingerprint);\n                    delete tmp.fingerprint;\n                    cand.attrs(tmp);\n                    cand.up();\n                }\n                cand.up(); // transport\n                cand.up(); // content\n            }\n        }\n\n        // might merge last-candidate notification into this, but it is called\n        // a lot later. See webrtc issue #2340\n        // logger.log('was this the last candidate', this.lasticecandidate);\n        this.connection.sendIQ(\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\n     * that the ICE connection has entered the failed state. It can then\n     * choose to re-create JVB channels and send 'transport-replace' to\n     * retry the connection.\n     */\n    sendIceFailedNotification() {\n        const sessionInfo\n            = $iq({\n                to: this.remoteJid,\n                type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-info',\n                initiator: this.initiatorJid,\n                sid: this.sid })\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\n            .t('failed')\n            .up();\n\n        this._bridgeSessionId\n            && sessionInfo.c(\n                'bridge-session', {\n                    xmlns: 'http://jitsi.org/protocol/focus',\n                    id: this._bridgeSessionId\n                });\n\n        this.connection.sendIQ2(\n            sessionInfo, {\n                /*\n                 * This message will be often sent when there are connectivity\n                 * issues, so make it slightly longer than Prosody's default BOSH\n                 * inactivity timeout of 60 seconds.\n                 */\n                timeout: 65\n            })\n            .catch(this.newJingleErrorHandler(sessionInfo));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    addIceCandidates(elem) {\n        if (this.peerconnection.signalingState === 'closed') {\n            logger.warn('Ignored add ICE candidate when in closed state');\n\n            return;\n        }\n\n        const iceCandidates = [];\n\n        elem.find('>content>transport>candidate')\n            .each((idx, candidate) => {\n                let line = SDPUtil.candidateFromJingle(candidate);\n\n                line = line.replace('\\r\\n', '').replace('a=', '');\n\n                // FIXME this code does not care to handle\n                // non-bundle transport\n                const rtcCandidate = new RTCIceCandidate({\n                    sdpMLineIndex: 0,\n\n                    // FF comes up with more complex names like audio-23423,\n                    // Given that it works on both Chrome and FF without\n                    // providing it, let's leave it like this for the time\n                    // being...\n                    // sdpMid: 'audio',\n                    sdpMid: '',\n                    candidate: line\n                });\n\n                iceCandidates.push(rtcCandidate);\n            });\n\n        if (!iceCandidates.length) {\n            logger.error(\n                'No ICE candidates to add ?', elem[0] && elem[0].outerHTML);\n\n            return;\n        }\n\n        // We want to have this task queued, so that we know it is executed,\n        // after the initial sRD/sLD offer/answer cycle was done (based on\n        // the assumption that candidates are spawned after the offer/answer\n        // and XMPP preserves order).\n        const workFunction = finishedCallback => {\n            for (const iceCandidate of iceCandidates) {\n                this.peerconnection.addIceCandidate(iceCandidate)\n                    .then(\n                        () => logger.debug('addIceCandidate ok!'),\n                        err => logger.error('addIceCandidate failed!', err));\n            }\n\n            finishedCallback();\n            logger.debug(`ICE candidates task finished on ${this}`);\n        };\n\n        logger.debug(\n            `Queued add (${iceCandidates.length}) ICE candidates task...`);\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     *\n     * @param contents\n     */\n    readSsrcInfo(contents) {\n        const ssrcs\n            = $(contents).find(\n                '>description>'\n                    + 'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n        ssrcs.each((i, ssrcElement) => {\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\n\n            if (this.isP2P) {\n                // In P2P all SSRCs are owner by the remote peer\n                this.signalingLayer.setSSRCOwner(\n                    ssrc, Strophe.getResourceFromJid(this.remoteJid));\n            } else {\n                $(ssrcElement)\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\n                    .each((i3, ssrcInfoElement) => {\n                        const owner = ssrcInfoElement.getAttribute('owner');\n\n                        if (owner && owner.length) {\n                            if (isNaN(ssrc) || ssrc < 0) {\n                                logger.warn(\n                                    `Invalid SSRC ${ssrc} value received`\n                                        + ` for ${owner}`);\n                            } else {\n                                this.signalingLayer.setSSRCOwner(\n                                    ssrc,\n                                    Strophe.getResourceFromJid(owner));\n                            }\n                        }\n                    });\n            }\n        });\n    }\n\n    /**\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\n     * the recvonly video stream.\n     * @deprecated\n     */\n    generateRecvonlySsrc() {\n        if (this.peerconnection) {\n            this.peerconnection.generateRecvonlySsrc();\n        } else {\n            logger.error(\n                'Unable to generate recvonly SSRC - no peerconnection');\n        }\n    }\n\n    /**\n     * Returns the video codec configured as the preferred codec on the peerconnection.\n     */\n    getConfiguredVideoCodec() {\n        return this.peerconnection.getConfiguredVideoCodec();\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Accepts incoming Jingle 'session-initiate' and should send\n     * 'session-accept' in result.\n     * @param jingleOffer jQuery selector pointing to the jingle element of\n     * the offer IQ\n     * @param success callback called when we accept incoming session\n     * successfully and receive RESULT packet to 'session-accept' sent.\n     * @param failure function(error) called if for any reason we fail to accept\n     * the incoming offer. 'error' argument can be used to log some details\n     * about the error.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes. We allow the localTracks to optionally be passed in so that\n     * the addition of the local tracks and the processing of the initial offer\n     * can all be done atomically. We want to make sure that any other\n     * operations which originate in the XMPP Jingle messages related with\n     * this session to be executed with an assumption that the initial\n     * offer/answer cycle has been executed already.\n     */\n    acceptOffer(jingleOffer, success, failure, localTracks) {\n        this.setOfferAnswerCycle(\n            jingleOffer,\n            () => {\n                // FIXME we may not care about RESULT packet for session-accept\n                // then we should either call 'success' here immediately or\n                // modify sendSessionAccept method to do that\n                this.sendSessionAccept(success, failure);\n            },\n            failure,\n            localTracks);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be\n     * added, before the offer/answer cycle executes (for the local track\n     * addition to be an atomic operation together with the offer/answer).\n     */\n    invite(localTracks = []) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to invite from the responder session');\n        }\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n\n            for (const localTrack of localTracks) {\n                addTracks.push(this.peerconnection.addTrack(localTrack, this.isInitiator));\n            }\n\n            Promise.all(addTracks)\n                .then(() => this.peerconnection.createOffer(this.mediaConstraints))\n                .then(offerSdp => this.peerconnection.setLocalDescription(offerSdp))\n                .then(() => {\n                    // NOTE that the offer is obtained from the localDescription getter as it needs to go though\n                    // the transformation chain.\n                    this.sendSessionInitiate(this.peerconnection.localDescription.sdp);\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`Queued invite task on ${this}.`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`invite error on ${this}`, error);\n                } else {\n                    logger.debug(`invite executed - OK on ${this}`);\n                }\n            });\n    }\n\n    /**\n     * Sends 'session-initiate' to the remote peer.\n     *\n     * NOTE this method is synchronous and we're not waiting for the RESULT\n     * response which would delay the startup process.\n     *\n     * @param {string} offerSdp  - The local session description which will be\n     * used to generate an offer.\n     * @private\n     */\n    sendSessionInitiate(offerSdp) {\n        let init = $iq({\n            to: this.remoteJid,\n            type: 'set'\n        }).c('jingle', {\n            xmlns: 'urn:xmpp:jingle:1',\n            action: 'session-initiate',\n            initiator: this.initiatorJid,\n            sid: this.sid\n        });\n\n        new SDP(offerSdp).toJingle(\n            init,\n            this.isInitiator ? 'initiator' : 'responder');\n        init = init.tree();\n        logger.info('Session-initiate: ', init);\n        this.connection.sendIQ(init,\n            () => {\n                logger.info('Got RESULT for \"session-initiate\"');\n            },\n            error => {\n                logger.error('\"session-initiate\" error', error);\n            },\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the answer received from the remote peer.\n     * @param jingleAnswer\n     */\n    setAnswer(jingleAnswer) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to set an answer on the responder session');\n        }\n        this.setOfferAnswerCycle(\n            jingleAnswer,\n            () => {\n                logger.info('setAnswer - succeeded');\n            },\n            error => {\n                logger.error('setAnswer failed: ', error);\n            });\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at\n     * converting Strophe Jingle IQ into remote offer SDP. Once converted\n     * setRemoteDescription, createAnswer and setLocalDescription calls follow.\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element\n     *        of the offer (or answer) IQ\n     * @param success callback called when sRD/sLD cycle finishes successfully.\n     * @param failure callback called with an error object as an argument if we\n     *        fail at any point during setRD, createAnswer, setLD.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes (for the local track addition to be an atomic operation together\n     * with the offer/answer).\n     */\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks = []) {\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n\n            for (const track of localTracks) {\n                addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\n            }\n\n            const newRemoteSdp\n                = this._processNewJingleOfferIq(jingleOfferAnswerIq);\n            const oldLocalSdp\n                = this.peerconnection.localDescription.sdp;\n\n            const bridgeSession\n                = $(jingleOfferAnswerIq)\n                    .find('>bridge-session['\n                        + 'xmlns=\"http://jitsi.org/protocol/focus\"]');\n            const bridgeSessionId = bridgeSession.attr('id');\n\n            if (bridgeSessionId !== this._bridgeSessionId) {\n                this._bridgeSessionId = bridgeSessionId;\n            }\n\n            Promise.all(addTracks)\n                .then(() => this._renegotiate(newRemoteSdp.raw))\n                .then(() => {\n                    if (this.state === JingleSessionState.PENDING) {\n                        this.state = JingleSessionState.ACTIVE;\n\n                        // #1 Sync up video transfer active/inactive only after\n                        // the initial O/A cycle. We want to adjust the video\n                        // media direction only in the local SDP and the Jingle\n                        // contents direction included in the initial\n                        // offer/answer is mapped to the remote SDP. Jingle\n                        // 'content-modify' IQ is processed in a way that it\n                        // will only modify local SDP when remote peer is no\n                        // longer interested in receiving video content.\n                        // Changing media direction in the remote SDP will mess\n                        // up our SDP translation chain (simulcast, video mute,\n                        // RTX etc.)\n                        //\n                        // #2 Sends the max frame height if it was set, before the session-initiate/accept\n                        if (this.isP2P\n                            && (!this._localVideoActive || this.localRecvMaxFrameHeight)) {\n                            this.sendContentModify();\n                        }\n                    }\n\n                    // Old local SDP will be available when we're setting answer\n                    // for the first time, but not when offer and it's fine\n                    // since we're generating an answer now it will contain all\n                    // our SSRCs\n                    if (oldLocalSdp) {\n                        const newLocalSdp\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(\n                            new SDP(oldLocalSdp), newLocalSdp);\n                    }\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`Queued setOfferAnswerCycle task on ${this}`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`setOfferAnswerCycle task on ${this} failed: ${error}`);\n                    failure(error);\n                } else {\n                    logger.debug(`setOfferAnswerCycle task on ${this} done.`);\n                    success();\n                }\n            });\n    }\n\n    /**\n     * Updates the codecs on the peerconnection and initiates a renegotiation for the\n     * new codec config to take effect.\n     *\n     * @param {CodecMimeType} preferred the preferred codec.\n     * @param {CodecMimeType} disabled the codec that needs to be disabled.\n     */\n    setVideoCodecs(preferred = null, disabled = null) {\n        const current = this.peerconnection.getConfiguredVideoCodec();\n\n        if (this._assertNotEnded() && preferred !== current) {\n            logger.info(`${this} Switching video codec from ${current} to ${preferred}`);\n            this.peerconnection.setVideoCodecs(preferred, disabled);\n\n            // Initiate a renegotiate for the codec setting to take effect.\n            const workFunction = finishedCallback => {\n                this._renegotiate().then(\n                    () => {\n                        logger.debug(`setVideoCodecs task on ${this} is done.`);\n\n                        return finishedCallback();\n                    }, error => {\n                        logger.error(`setVideoCodecs task on ${this} failed: ${error}`);\n\n                        return finishedCallback(error);\n                    });\n            };\n\n            logger.debug(`Queued setVideoCodecs task on ${this}`);\n\n            // Queue and execute\n            this.modificationQueue.push(workFunction);\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Although it states \"replace transport\" it does accept full Jingle offer\n     * which should contain new ICE transport details.\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\n     *        transport info.\n     * @param success callback called when we succeed to accept new offer.\n     * @param failure function(error) called when we fail to accept new offer.\n     */\n    replaceTransport(jingleOfferElem, success, failure) {\n        if (this.options.enableForcedReload) {\n            const sdp = new SDP(this.peerconnection.localDescription.sdp);\n\n            this.sendTransportAccept(sdp, success, failure);\n            this.room.eventEmitter.emit(XMPPEvents.CONNECTION_RESTARTED, this);\n\n            return;\n        }\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\n\n        // We need to first reject the 'data' section to have the SCTP stack\n        // cleaned up to signal the known data channel is now invalid. After\n        // that the original offer is set to have the SCTP connection\n        // established with the new bridge.\n        const originalOffer = jingleOfferElem.clone();\n\n        jingleOfferElem\n            .find('>content[name=\\'data\\']')\n            .attr('senders', 'rejected');\n\n        // Remove all remote sources in order to reset the client's state\n        // for the remote MediaStreams. When a conference is moved to\n        // another bridge it will start streaming with a sequence number\n        // that is not in sync with the most recently seen by the client.\n        // The symptoms include frozen or black video and lots of \"failed to\n        // unprotect SRTP packets\" in Chrome logs.\n        jingleOfferElem\n            .find('>content>description>source')\n            .remove();\n        jingleOfferElem\n            .find('>content>description>ssrc-group')\n            .remove();\n\n        // On the JVB it's not a real ICE restart and all layers are re-initialized from scratch as Jicofo does\n        // the restart by re-allocating new channels. Chrome (or WebRTC stack) needs to have the DTLS transport layer\n        // reset to start a new handshake with fresh DTLS transport on the bridge. Make it think that the DTLS\n        // fingerprint has changed by setting an all zeros key.\n        const newFingerprint = jingleOfferElem.find('>content>transport>fingerprint');\n\n        newFingerprint.attr('hash', 'sha-1');\n        newFingerprint.text('00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00');\n\n        // First set an offer with a rejected 'data' section\n        this.setOfferAnswerCycle(\n            jingleOfferElem,\n            () => {\n                // Now set the original offer(with the 'data' section)\n                this.setOfferAnswerCycle(\n                    originalOffer,\n                    () => {\n                        const localSDP\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.sendTransportAccept(localSDP, success, failure);\n\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.ICE_RESTART_SUCCESS,\n                            this,\n                            originalOffer);\n                    },\n                    failure);\n            },\n            failure\n        );\n    }\n\n    /**\n     * Sends Jingle 'session-accept' message.\n     * @param {function()} success callback called when we receive 'RESULT'\n     *        packet for the 'session-accept'\n     * @param {function(error)} failure called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendSessionAccept(success, failure) {\n        // NOTE: since we're just reading from it, we don't need to be within\n        //  the modification queue to access the local description\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n        let accept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-accept',\n                initiator: this.initiatorJid,\n                responder: this.responderJid,\n                sid: this.sid });\n\n        if (this.webrtcIceTcpDisable) {\n            localSDP.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            localSDP.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            localSDP.failICE = true;\n        }\n        localSDP.toJingle(\n            accept,\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder',\n            null);\n\n        // Calling tree() to print something useful\n        accept = accept.tree();\n        logger.info('Sending session-accept', accept);\n        this.connection.sendIQ(accept,\n            success,\n            this.newJingleErrorHandler(accept, error => {\n                failure(error);\n\n                // 'session-accept' is a critical timeout and we'll\n                // have to restart\n                this.room.eventEmitter.emit(\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\n            }),\n            IQ_TIMEOUT);\n\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\n        // fingerprint and setup) ASAP in order to start the connection\n        // establishment.\n        //\n        // FIXME Flushing the connection at this point triggers an issue with\n        // BOSH request handling in Prosody on slow connections.\n        //\n        // The problem is that this request will be quite large and it may take\n        // time before it reaches Prosody. In the meantime Strophe may decide\n        // to send the next one. And it was observed that a small request with\n        // 'transport-info' usually follows this one. It does reach Prosody\n        // before the previous one was completely received. 'rid' on the server\n        // is increased and Prosody ignores the request with 'session-accept'.\n        // It will never reach Jicofo and everything in the request table is\n        // lost. Removing the flush does not guarantee it will never happen, but\n        // makes it much less likely('transport-info' is bundled with\n        // 'session-accept' and any immediate requests).\n        //\n        // this.connection.flush();\n    }\n\n    /**\n     * Will send 'content-modify' IQ in order to ask the remote peer to\n     * either stop or resume sending video media or to adjust sender's video constraints.\n     * @private\n     */\n    sendContentModify() {\n        const maxFrameHeight = this.localRecvMaxFrameHeight;\n        const senders = this._localVideoActive ? 'both' : 'none';\n\n        let sessionModify\n            = $iq({\n                to: this.remoteJid,\n                type: 'set'\n            })\n                .c('jingle', {\n                    xmlns: 'urn:xmpp:jingle:1',\n                    action: 'content-modify',\n                    initiator: this.initiatorJid,\n                    sid: this.sid\n                })\n                .c('content', {\n                    name: 'video',\n                    senders\n                });\n\n        if (typeof maxFrameHeight !== 'undefined') {\n            sessionModify = sessionModify\n                .c('max-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\n                .t(maxFrameHeight);\n        }\n\n        logger.info(`${this} sending content-modify, video senders: ${senders}, max frame height: ${maxFrameHeight}`);\n\n        this.connection.sendIQ(\n            sessionModify,\n            null,\n            this.newJingleErrorHandler(sessionModify),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Adjust the preference for max video frame height that the local party is willing to receive. Signals\n     * the remote party.\n     *\n     * @param {Number} maxFrameHeight - the new value to set.\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        logger.info(`${this} setReceiverVideoConstraint - max frame height: ${maxFrameHeight}`);\n\n        this.localRecvMaxFrameHeight = maxFrameHeight;\n\n        if (this.isP2P) {\n            // Tell the remote peer about our receive constraint. If Jingle session is not yet active the state will\n            // be synced after offer/answer.\n            if (this.state === JingleSessionState.ACTIVE) {\n                this.sendContentModify();\n            }\n        } else {\n            this.rtc.setReceiverVideoConstraint(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sends Jingle 'transport-accept' message which is a response to\n     * 'transport-replace'.\n     * @param localSDP the 'SDP' object with local session description\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendTransportAccept(localSDP, success, failure) {\n        let transportAccept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-accept',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        localSDP.media.forEach((medialines, idx) => {\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\n\n            transportAccept.c('content',\n                {\n                    creator:\n                        this.initiatorJid === this.localJid\n                            ? 'initiator'\n                            : 'responder',\n                    name: mline.media\n                }\n            );\n            localSDP.transportToJingle(idx, transportAccept);\n            transportAccept.up();\n        });\n\n        // Calling tree() to print something useful to the logger\n        transportAccept = transportAccept.tree();\n        logger.info('Sending transport-accept: ', transportAccept);\n\n        this.connection.sendIQ(transportAccept,\n            success,\n            this.newJingleErrorHandler(transportAccept, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-reject' message which is a response to\n     * 'transport-replace'.\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     *\n     * FIXME method should be marked as private, but there's some spaghetti that\n     *       needs to be fixed prior doing that\n     */\n    sendTransportReject(success, failure) {\n        // Send 'transport-reject', so that the focus will\n        // know that we've failed\n        let transportReject = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-reject',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        transportReject = transportReject.tree();\n        logger.info('Sending \\'transport-reject', transportReject);\n\n        this.connection.sendIQ(transportReject,\n            success,\n            this.newJingleErrorHandler(transportReject, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the maximum bitrates on the local video track. Bitrate values from\n     * videoQuality settings in config.js will be used for configuring the sender.\n     * @returns {Promise<void>} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderMaxBitrates() {\n        if (this._assertNotEnded()) {\n            return this.peerconnection.setMaxBitRate();\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Sets the resolution constraint on the local camera track.\n     * @param {number} maxFrameHeight - The user preferred max frame height.\n     * @returns {Promise} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderVideoConstraint(maxFrameHeight) {\n        if (this._assertNotEnded()) {\n            logger.info(`${this} setSenderVideoConstraint: ${maxFrameHeight}`);\n\n            // RN doesn't support RTCRtpSenders yet, aggresive layer suspension on RN is implemented\n            // by changing the media direction in the SDP. This is applicable to jvb sessions only.\n            if (!this.isP2P && browser.isReactNative() && typeof maxFrameHeight !== 'undefined') {\n                const videoActive = maxFrameHeight > 0;\n\n                return this.setMediaTransferActive(true, videoActive);\n            }\n\n            return this.peerconnection.setSenderVideoConstraint(maxFrameHeight);\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Sets the degradation preference on the video sender. This setting determines if\n     * resolution or framerate will be preferred when bandwidth or cpu is constrained.\n     * @returns {Promise<void>} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderVideoDegradationPreference() {\n        if (this._assertNotEnded()) {\n            return this.peerconnection.setSenderVideoDegradationPreference();\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    terminate(success, failure, options) {\n        if (this.state === JingleSessionState.ENDED) {\n            return;\n        }\n\n        if (!options || Boolean(options.sendSessionTerminate)) {\n            let sessionTerminate\n                = $iq({\n                    to: this.remoteJid,\n                    type: 'set'\n                })\n                    .c('jingle', {\n                        xmlns: 'urn:xmpp:jingle:1',\n                        action: 'session-terminate',\n                        initiator: this.initiatorJid,\n                        sid: this.sid\n                    })\n                    .c('reason')\n                    .c((options && options.reason) || 'success')\n                    .up();\n\n            if (options && options.reasonDescription) {\n                sessionTerminate\n                    .c('text')\n                    .t(options.reasonDescription)\n                    .up()\n                    .up();\n            } else {\n                sessionTerminate.up();\n            }\n\n            this._bridgeSessionId\n                && sessionTerminate.c(\n                    'bridge-session', {\n                        xmlns: 'http://jitsi.org/protocol/focus',\n                        id: this._bridgeSessionId,\n                        restart: options && options.requestRestart === true\n                    }).up();\n\n            // Calling tree() to print something useful\n            sessionTerminate = sessionTerminate.tree();\n            logger.info('Sending session-terminate', sessionTerminate);\n            this.connection.sendIQ(\n                sessionTerminate,\n                success,\n                this.newJingleErrorHandler(sessionTerminate, failure),\n                IQ_TIMEOUT);\n        } else {\n            logger.info(`Skipped sending session-terminate for ${this}`);\n        }\n\n        // this should result in 'onTerminated' being called by strope.jingle.js\n        this.connection.jingle.terminate(this.sid);\n    }\n\n    /**\n     *\n     * @param reasonCondition\n     * @param reasonText\n     */\n    onTerminated(reasonCondition, reasonText) {\n        // Do something with reason and reasonCondition when we start to care\n        // this.reasonCondition = reasonCondition;\n        // this.reasonText = reasonText;\n        logger.info(`Session terminated ${this}`, reasonCondition, reasonText);\n\n        this._xmppListeners.forEach(removeListener => removeListener());\n        this._xmppListeners = [];\n\n        if (this._removeSenderVideoConstraintsChangeListener) {\n            this._removeSenderVideoConstraintsChangeListener();\n        }\n\n        this.close();\n    }\n\n    /**\n     * Handles XMPP connection state changes.\n     *\n     * @param {XmppConnection.Status} status - The new status.\n     */\n    onXmppStatusChanged(status) {\n        if (status === XmppConnection.Status.CONNECTED && this._cachedOldLocalSdp) {\n            logger.info('Sending SSRC update on reconnect');\n            this.notifyMySSRCUpdate(\n                this._cachedOldLocalSdp,\n                this._cachedNewLocalSdp);\n        }\n    }\n\n    /**\n     * Parse the information from the xml sourceAddElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceAddElem the source-add\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-add)\n     * @returns {list} a list of SDP line strings that should\n     *  be added to the remote SDP\n     */\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\n        const addSsrcInfo = [];\n\n        $(sourceAddElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this) // eslint-disable-line no-invalid-this\n                            .find('>source')\n                            .map(function() {\n                                // eslint-disable-next-line no-invalid-this\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n                });\n\n            // handles both >source and >description>source\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            /* eslint-disable no-invalid-this */\n            tmp.each(function() {\n                const ssrc = $(this).attr('ssrc');\n\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\n                    logger.warn(\n                        `Source-add request for existing SSRC: ${ssrc}`);\n\n                    return;\n                }\n\n                // eslint-disable-next-line newline-per-chained-call\n                $(this).find('>parameter').each(function() {\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\n                    if ($(this).attr('value') && $(this).attr('value').length) {\n                        lines += `:${$(this).attr('value')}`;\n                    }\n                    lines += '\\r\\n';\n                });\n            });\n\n            /* eslint-enable no-invalid-this */\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!addSsrcInfo[i2]) {\n                    addSsrcInfo[i2] = '';\n                }\n                addSsrcInfo[i2] += lines;\n            });\n        });\n\n        return addSsrcInfo;\n    }\n\n    /**\n     * Handles a Jingle source-add message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    addRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(true /* add */, elem);\n    }\n\n    /**\n     * Handles a Jingle source-remove message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    removeRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\n    }\n\n    /**\n     * Handles the deletion of the remote tracks and SSRCs associated with a remote endpoint.\n     *\n     * @param {string} id Endpoint id of the participant that has left the call.\n     * @returns {Promise<JitsiRemoteTrack>} Promise that resolves with the tracks that are removed or error if the\n     * operation fails.\n     */\n    removeRemoteStreamsOnLeave(id) {\n        let remoteTracks = [];\n\n        const workFunction = finishCallback => {\n            const removeSsrcInfo = this.peerconnection.getRemoteSourceInfoByParticipant(id);\n\n            if (removeSsrcInfo.length) {\n                const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n                const newRemoteSdp = this._processRemoteRemoveSource(removeSsrcInfo);\n\n                remoteTracks = this.peerconnection.removeRemoteTracks(id);\n                this._renegotiate(newRemoteSdp.raw)\n                    .then(() => {\n                        const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(oldLocalSdp, newLocalSDP);\n                        finishCallback();\n                    })\n                    .catch(err => finishCallback(err));\n            } else {\n                finishCallback();\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`Queued removeRemoteStreamsOnLeave task for participant ${id} on ${this}`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`removeRemoteStreamsOnLeave error on ${this}:`, error);\n                        reject(error);\n                    } else {\n                        logger.info(`removeRemoteStreamsOnLeave done on ${this}!`);\n                        resolve(remoteTracks);\n                    }\n                });\n        });\n    }\n\n    /**\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\n     * Jingle session.\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\n     * otherwise.\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\n     * @private\n     */\n    _addOrRemoveRemoteStream(isAdd, elem) {\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\n\n        if (isAdd) {\n            this.readSsrcInfo(elem);\n        }\n\n        const workFunction = finishedCallback => {\n            if (!this.peerconnection.localDescription\n                || !this.peerconnection.localDescription.sdp) {\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\n\n                logger.error(errMsg);\n                finishedCallback(errMsg);\n\n                return;\n            }\n\n            logger.log(`Processing ${logPrefix}`);\n            logger.log(\n                'ICE connection state: ',\n                this.peerconnection.iceConnectionState);\n\n            const oldLocalSdp\n                = new SDP(this.peerconnection.localDescription.sdp);\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\n            const addOrRemoveSsrcInfo\n                = isAdd\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\n            const newRemoteSdp\n                = isAdd\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\n\n            this._renegotiate(newRemoteSdp.raw)\n                .then(() => {\n                    const newLocalSdp\n                        = new SDP(this.peerconnection.localDescription.sdp);\n\n                    logger.log(\n                        `${logPrefix} - OK, SDPs: `, oldLocalSdp, newLocalSdp);\n                    this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                    finishedCallback();\n                }, error => {\n                    logger.error(`${logPrefix} failed:`, error);\n                    finishedCallback(error);\n                });\n        };\n\n        logger.debug(`Queued ${logPrefix} task on ${this}`);\n\n        // Queue and execute\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     * Takes in a jingle offer iq, returns the new sdp offer\n     * @param {jquery xml element} offerIq the incoming offer\n     * @returns {SDP object} the jingle offer translated to SDP\n     */\n    _processNewJingleOfferIq(offerIq) {\n        const remoteSdp = new SDP('');\n\n        if (this.webrtcIceTcpDisable) {\n            remoteSdp.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            remoteSdp.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            remoteSdp.failICE = true;\n        }\n\n        remoteSdp.fromJingle(offerIq);\n        this.readSsrcInfo($(offerIq).find('>content'));\n\n        return remoteSdp;\n    }\n\n    /**\n     * Remove the given ssrc lines from the current remote sdp\n     * @param {list} removeSsrcInfo a list of SDP line strings that\n     *  should be removed from the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteRemoveSource(removeSsrcInfo) {\n        const remoteSdp = browser.usesPlanB()\n            ? new SDP(this.peerconnection.remoteDescription.sdp)\n            : new SDP(this.peerconnection.peerconnection.remoteDescription.sdp);\n\n        removeSsrcInfo.forEach((lines, idx) => {\n            // eslint-disable-next-line no-param-reassign\n            lines = lines.split('\\r\\n');\n            lines.pop(); // remove empty last element;\n            if (browser.usesPlanB()) {\n                lines.forEach(line => {\n                    remoteSdp.media[idx]\n                        = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\n                });\n            } else {\n                lines.forEach(line => {\n                    const mid = remoteSdp.media.findIndex(mLine => mLine.includes(line));\n\n                    if (mid > -1) {\n                        remoteSdp.media[mid] = remoteSdp.media[mid].replace(`${line}\\r\\n`, '');\n\n                        // Change the direction to \"inactive\" only on Firefox. Audio fails on\n                        // Safari (possibly Chrome in unified plan mode) when we try to re-use inactive\n                        // m-lines due to a webkit bug.\n                        // https://bugs.webkit.org/show_bug.cgi?id=211181\n                        if (browser.isFirefox()) {\n                            remoteSdp.media[mid] = remoteSdp.media[mid].replace('a=sendonly', 'a=inactive');\n                        }\n                    }\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Add the given ssrc lines to the current remote sdp\n     * @param {list} addSsrcInfo a list of SDP line strings that\n     *  should be added to the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteAddSource(addSsrcInfo) {\n        const remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        addSsrcInfo.forEach((lines, idx) => {\n            remoteSdp.media[idx] += lines;\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Do a new o/a flow using the existing remote description\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\n     *  to use.  If not provided, the remote sdp from the\n     *  peerconnection will be used\n     * @returns {Promise} promise which resolves when the\n     *  o/a flow is complete with no arguments or\n     *  rejects with an error {string}\n     */\n    _renegotiate(optionalRemoteSdp) {\n        if (this.peerconnection.signalingState === 'closed') {\n            const error = new Error('Attempted to renegotiate in state closed');\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteSdp\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\n\n        if (!remoteSdp) {\n            const error = new Error(`Can not renegotiate without remote description, current state: ${this.state}`);\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteDescription = new RTCSessionDescription({\n            type: this.isInitiator ? 'answer' : 'offer',\n            sdp: remoteSdp\n        });\n\n        if (this.isInitiator) {\n            return this._initiatorRenegotiate(remoteDescription);\n        }\n\n        return this._responderRenegotiate(remoteDescription);\n    }\n\n    /**\n     * Renegotiate cycle implementation for the responder case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _responderRenegotiate(remoteDescription) {\n        logger.debug('Renegotiate: setting remote description');\n\n        return this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                logger.debug('Renegotiate: creating answer');\n\n                return this.peerconnection.createAnswer(this.mediaConstraints)\n                    .then(answer => {\n                        logger.debug('Renegotiate: setting local description');\n\n                        return this.peerconnection.setLocalDescription(answer);\n                    });\n            });\n    }\n\n    /**\n     * Renegotiate cycle implementation for the initiator's case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _initiatorRenegotiate(remoteDescription) {\n        logger.debug('Renegotiate: creating offer');\n\n        return this.peerconnection.createOffer(this.mediaConstraints)\n            .then(offer => {\n                logger.debug('Renegotiate: setting local description');\n\n                return this.peerconnection.setLocalDescription(offer)\n                    .then(() => {\n                        logger.debug(\n                            'Renegotiate: setting remote description');\n\n                        // eslint-disable-next-line max-len\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\n                    });\n            });\n    }\n\n    /**\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\n     * offer/answer cycle after both operations are done. Either\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n     * <tt>oldTrack</tt>\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\n     * replaced\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\n     * @returns {Promise} which resolves once the replacement is complete\n     *  with no arguments or rejects with an error {string}\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const workFunction = finishedCallback => {\n            logger.debug(`replaceTrack worker started. oldTrack = ${oldTrack}, newTrack = ${newTrack}, ${this}`);\n\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            if (browser.usesPlanB()) {\n                // NOTE the code below assumes that no more than 1 video track\n                // can be added to the peer connection.\n                // Transition from camera to desktop share\n                // or transition from one camera source to another.\n                if (this.peerconnection.options.capScreenshareBitrate\n                    && oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the old video stream.\n                    // 2. source-add for the new video stream.\n                    this.peerconnection.clearRecvonlySsrc();\n                }\n\n                // Transition from no video to video (unmute).\n                if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the recvonly\n                    // 2. source-add for the new video stream\n                    this.peerconnection.clearRecvonlySsrc();\n\n                // Transition from video to no video\n                } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\n                    // Clearing current primary SSRC and generating the recvonly\n                    // will result in:\n                    // 1. source-remove for the old video stream\n                    // 2. source-add for the recvonly stream\n                    this.peerconnection.clearRecvonlySsrc();\n                    this.peerconnection.generateRecvonlySsrc();\n                }\n            }\n\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\n                .then(shouldRenegotiate => {\n                    let promise = Promise.resolve();\n\n                    logger.debug(`TPC.replaceTrack finished. shouldRenegotiate = ${\n                        shouldRenegotiate}, JingleSessionState = ${this.state}, ${this}`);\n\n                    if (shouldRenegotiate\n                        && (oldTrack || newTrack)\n                        && this.state === JingleSessionState.ACTIVE) {\n                        promise = this._renegotiate().then(() => {\n                            const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSDP);\n                        });\n                    }\n\n                    return promise.then(() => {\n                        if (newTrack && newTrack.isVideoTrack()) {\n                            logger.debug(`replaceTrack worker: setSenderVideoDegradationPreference(), ${this}`);\n\n                            // FIXME set all sender parameters in one go?\n                            // Set the degradation preference on the new video sender.\n                            return this.peerconnection.setSenderVideoDegradationPreference()\n\n                                // Apply the cached video constraints on the new video sender.\n                                .then(() => {\n                                    logger.debug(`replaceTrack worker: setSenderVideoConstraint(), ${this}`);\n\n                                    return this.peerconnection.setSenderVideoConstraint();\n                                })\n                                .then(() => {\n                                    logger.debug(`replaceTrack worker: setMaxBitRate(), ${this}`);\n\n                                    return this.peerconnection.setMaxBitRate();\n                                });\n                        }\n                    });\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`Queued replaceTrack task. Old track = ${\n                oldTrack}, new track = ${newTrack}, ${this}`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`Replace track error on ${this}:`, error);\n                        reject(error);\n                    } else {\n                        logger.info(`Replace track done on ${this}!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Parse the information from the xml sourceRemoveElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceRemoveElem the source-remove\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-remove)\n     * @returns {list} a list of SDP line strings that should\n     *  be removed from the remote SDP\n     */\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\n        const removeSsrcInfo = [];\n\n        $(sourceRemoveElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    /* eslint-disable no-invalid-this */\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this)\n                            .find('>source')\n                            .map(function() {\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n\n                    /* eslint-enable no-invalid-this */\n                });\n            const ssrcs = [];\n\n            // handles both >source and >description>source versions\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            tmp.each(function() {\n                // eslint-disable-next-line no-invalid-this\n                const ssrc = $(this).attr('ssrc');\n\n                ssrcs.push(ssrc);\n            });\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!removeSsrcInfo[i2]) {\n                    removeSsrcInfo[i2] = '';\n                }\n                ssrcs.forEach(ssrc => {\n                    const ssrcLines\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n                    if (ssrcLines.length) {\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                    }\n                });\n                removeSsrcInfo[i2] += lines;\n            });\n        });\n\n        return removeSsrcInfo;\n    }\n\n    /**\n     * Will print an error if there is any difference, between the SSRCs given\n     * in the <tt>oldSDP</tt> and the ones currently described in\n     * the peerconnection's local description.\n     * @param {string} operationName the operation's name which will be printed\n     * in the error message.\n     * @param {SDP} oldSDP the old local SDP which will be compared with\n     * the current one.\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\n     * otherwise.\n     * @private\n     */\n    _verifyNoSSRCChanged(operationName, oldSDP) {\n        const currentLocalSDP\n            = new SDP(this.peerconnection.localDescription.sdp);\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\n        const addedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(addedMedia).length) {\n            logger.error(\n                `${this} - some SSRC were added on ${operationName}`,\n                addedMedia);\n\n            return false;\n        }\n\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\n        const removedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(removedMedia).length) {\n            logger.error(\n                `${this} - some SSRCs were removed on ${operationName}`,\n                removedMedia);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds local track back to this session, as part of the unmute operation.\n     * @param {JitsiLocalTrack} track\n     * @return {Promise} a promise that will resolve once the local track is\n     * added back to this session and renegotiation succeeds. Will be rejected\n     * with a <tt>string</tt> that provides some error details in case something\n     * goes wrong.\n     */\n    addTrackAsUnmute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            false /* add as unmute */, track)\n            .then(() => {\n                // Apply the video constraints, max bitrates and degradation preference on\n                // the video sender if needed.\n                if (track.isVideoTrack() && browser.doesVideoMuteByStreamRemove()) {\n                    return this.setSenderMaxBitrates()\n                        .then(() => this.setSenderVideoDegradationPreference())\n                        .then(() => this.setSenderVideoConstraint());\n                }\n            });\n    }\n\n    /**\n     * Remove local track as part of the mute operation.\n     * @param {JitsiLocalTrack} track the local track to be removed\n     * @return {Promise} a promise which will be resolved once the local track\n     * is removed from this session and the renegotiation is performed.\n     * The promise will be rejected with a <tt>string</tt> that the describes\n     * the error if anything goes wrong.\n     */\n    removeTrackAsMute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            true /* remove as mute */, track);\n    }\n\n    /**\n     * See {@link addTrackAsUnmute} and {@link removeTrackAsMute}.\n     * @param {boolean} isMute <tt>true</tt> for \"remove as mute\" or\n     * <tt>false</tt> for \"add as unmute\".\n     * @param {JitsiLocalTrack} track the track that will be added/removed\n     * @private\n     */\n    _addRemoveTrackAsMuteUnmute(isMute, track) {\n        if (!track) {\n            return Promise.reject('invalid \"track\" argument value');\n        }\n        const operationName = isMute ? 'removeTrackMute' : 'addTrackUnmute';\n        const workFunction = finishedCallback => {\n            const tpc = this.peerconnection;\n\n            if (!tpc) {\n                finishedCallback(\n                    `Error:  tried ${operationName} track with no active peer`\n                        + 'connection');\n\n                return;\n            }\n            const oldLocalSDP = tpc.localDescription.sdp;\n            const operationPromise\n                = isMute\n                    ? tpc.removeTrackMute(track)\n                    : tpc.addTrackUnmute(track);\n\n            operationPromise\n                .then(shouldRenegotiate => {\n                    if (shouldRenegotiate && oldLocalSDP && tpc.remoteDescription.sdp) {\n                        this._renegotiate()\n                            .then(() => {\n                                // The results are ignored, as this check failure is not\n                                // enough to fail the whole operation. It will log\n                                // an error inside.\n                                this._verifyNoSSRCChanged(\n                                    operationName, new SDP(oldLocalSDP));\n                                finishedCallback();\n                            });\n                    } else {\n                        finishedCallback();\n                    }\n                },\n                finishedCallback /* will be called with an error */);\n        };\n\n        logger.debug(`Queued _addRemoveTrackAsMuteUnmute task on ${this}. Operation - ${operationName}`);\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`_addRemoveTrackAsMuteUnmute failed. Operation - ${\n                            operationName}, peerconnection = ${this}`);\n\n                        reject(error);\n                    } else {\n                        logger.debug(`_addRemoveTrackAsMuteUnmute done. Operation - ${\n                            operationName}, peerconnection = ${this}`);\n\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Resumes or suspends media transfer over the underlying peer connection.\n     * @param {boolean} audioActive <tt>true</tt> to enable audio media\n     * transfer or <tt>false</tt> to suspend audio media transmission.\n     * @param {boolean} videoActive <tt>true</tt> to enable video media\n     * transfer or <tt>false</tt> to suspend video media transmission.\n     * @return {Promise} a <tt>Promise</tt> which will resolve once\n     * the operation is done. It will be rejected with an error description as\n     * a string in case anything goes wrong.\n     */\n    setMediaTransferActive(audioActive, videoActive) {\n        if (!this.peerconnection) {\n            return Promise.reject(\n                'Can not modify transfer active state,'\n                    + ' before \"initialize\" is called');\n        }\n\n        const logAudioStr = audioActive ? 'audio active' : 'audio inactive';\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\n\n        logger.info(`Queued make ${logVideoStr}, ${logAudioStr} task...`);\n\n        const workFunction = finishedCallback => {\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\n\n            // Because the value is modified on the queue it's impossible to\n            // check it's final value reliably prior to submitting the task.\n            // The rule here is that the last submitted state counts.\n            // Check the values here to avoid unnecessary renegotiation cycle.\n            const audioActiveChanged\n                = this.peerconnection.setAudioTransferActive(audioActive);\n\n            if (this._localVideoActive !== videoActive) {\n                this._localVideoActive = videoActive;\n\n                // Do only for P2P - Jicofo will reply with 'bad-request'\n                // We don't want to send 'content-modify', before the initial\n                // O/A (state === JingleSessionState.ACTIVE), because that will\n                // mess up video media direction in the remote SDP.\n                // 'content-modify' when processed only affects the media\n                // direction in the local SDP. We're doing that, because setting\n                // 'inactive' on video media in remote SDP will mess up our SDP\n                // translation chain (simulcast, RTX, video mute etc.).\n                if (this.isP2P && isSessionActive) {\n                    this.sendContentModify();\n                }\n            }\n\n            const pcVideoActiveChanged\n                = this.peerconnection.setVideoTransferActive(\n                    this._localVideoActive && this._remoteVideoActive);\n\n            // Will do the sRD/sLD cycle to update SDPs and adjust the media\n            // direction\n            if (isSessionActive\n                    && (audioActiveChanged || pcVideoActiveChanged)) {\n                this._renegotiate()\n                    .then(\n                        finishedCallback,\n                        finishedCallback /* will be called with an error */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`Make ${logVideoStr}, ${logAudioStr} task failed!`);\n                        reject(error);\n                    } else {\n                        logger.debug(`Make ${logVideoStr}, ${logAudioStr} task done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Will put and execute on the queue a session modify task. Currently it\n     * only checks the senders attribute of the video content in order to figure\n     * out if the remote peer has video in the inactive state (stored locally\n     * in {@link _remoteVideoActive} - see field description for more info).\n     * @param {jQuery} jingleContents jQuery selector pointing to the jingle\n     * element of the session modify IQ.\n     * @see {@link _remoteVideoActive}\n     * @see {@link _localVideoActive}\n     */\n    modifyContents(jingleContents) {\n        const newVideoSenders\n            = JingleSessionPC.parseVideoSenders(jingleContents);\n        const newMaxFrameHeight\n            = JingleSessionPC.parseMaxFrameHeight(jingleContents);\n\n        // frame height is optional in our content-modify protocol\n        if (newMaxFrameHeight) {\n            logger.info(`${this} received remote max frame height: ${newMaxFrameHeight}`);\n            this.remoteRecvMaxFrameHeight = newMaxFrameHeight;\n            this.eventEmitter.emit(\n                MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED, this);\n        }\n\n        if (newVideoSenders === null) {\n            logger.error(\n                `${this} - failed to parse video \"senders\" attribute in`\n                    + '\"content-modify\" action');\n\n            return;\n        }\n\n        const workFunction = finishedCallback => {\n            if (this._assertNotEnded('content-modify')\n                    && this._modifyRemoteVideoActive(newVideoSenders)) {\n                // Will do the sRD/sLD cycle to update SDPs and adjust\n                // the media direction\n                this._renegotiate()\n                    .then(finishedCallback, finishedCallback /* (error) */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        logger.debug(`${this} queued \"content-modify\" task(video senders=\"${newVideoSenders}\")`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`\"content-modify\" failed on PC - ${this}`, error);\n                } else {\n                    logger.debug(`\"content-modify\" task(video senders=\"${newVideoSenders}\") done. PC = ${this}`);\n                }\n            });\n    }\n\n    /**\n     * Processes new value of remote video \"senders\" Jingle attribute and tries\n     * to apply it for {@link _remoteVideoActive}.\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of\n     * Jingle video content element advertised by remote peer.\n     * @return {boolean} <tt>true</tt> if the change affected state of\n     * the underlying peerconnection and renegotiation is required for\n     * the changes to take effect.\n     * @private\n     */\n    _modifyRemoteVideoActive(remoteVideoSenders) {\n        const isRemoteVideoActive\n            = remoteVideoSenders === 'both'\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\n\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\n            logger.debug(\n                `${this} new remote video active: ${isRemoteVideoActive}`);\n            this._remoteVideoActive = isRemoteVideoActive;\n        }\n\n        return this.peerconnection.setVideoTransferActive(\n            this._localVideoActive && this._remoteVideoActive);\n    }\n\n    /**\n     * Figures out added/removed ssrcs and send update IQs.\n     * @param oldSDP SDP object for old description.\n     * @param newSDP SDP object for new description.\n     */\n    notifyMySSRCUpdate(oldSDP, newSDP) {\n\n        if (this.state !== JingleSessionState.ACTIVE) {\n            logger.warn(`Skipping SSRC update in '${this.state} ' state.`);\n\n            return;\n        }\n\n        if (!this.connection.connected) {\n            // The goal is to compare the oldest SDP with the latest one upon reconnect\n            if (!this._cachedOldLocalSdp) {\n                this._cachedOldLocalSdp = oldSDP;\n            }\n            this._cachedNewLocalSdp = newSDP;\n            logger.warn('Not sending SSRC update while the signaling is disconnected');\n\n            return;\n        }\n\n        this._cachedOldLocalSdp = undefined;\n        this._cachedNewLocalSdp = undefined;\n\n        // send source-remove IQ.\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\n        const remove = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-remove',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n        const removedAnySSRCs = sdpDiffer.toJingle(remove);\n\n        if (removedAnySSRCs) {\n            logger.info('Sending source-remove', remove.tree());\n            this.connection.sendIQ(\n                remove, null,\n                this.newJingleErrorHandler(remove), IQ_TIMEOUT);\n        } else {\n            logger.log('removal not necessary');\n        }\n\n        // send source-add IQ.\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\n        const add = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-add',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        const containsNewSSRCs = sdpDiffer.toJingle(add);\n\n        if (containsNewSSRCs) {\n            logger.info('Sending source-add', add.tree());\n            this.connection.sendIQ(\n                add, null, this.newJingleErrorHandler(add), IQ_TIMEOUT);\n        } else {\n            logger.log('addition not necessary');\n        }\n    }\n\n    /**\n     * Method returns function(errorResponse) which is a callback to be passed\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\n     * structure is as follows:\n     * {\n     *  code: {XMPP error response code}\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\n     *  source: {request.tree() that provides original request}\n     *  session: {this JingleSessionPC.toString()}\n     * }\n     * @param request Strophe IQ instance which is the request to be dumped into\n     *        the error structure\n     * @param failureCb function(error) called when error response was returned\n     *        or when a timeout has occurred.\n     * @returns {function(this:JingleSessionPC)}\n     */\n    newJingleErrorHandler(request, failureCb) {\n        return errResponse => {\n\n            const error = {};\n\n            // Get XMPP error code and condition(reason)\n            const errorElSel = $(errResponse).find('error');\n\n            if (errorElSel.length) {\n                error.code = errorElSel.attr('code');\n                const errorReasonSel = $(errResponse).find('error :first');\n\n                if (errorReasonSel.length) {\n                    error.reason = errorReasonSel[0].tagName;\n                }\n\n                const errorMsgSel = errorElSel.find('>text');\n\n                if (errorMsgSel.length) {\n                    error.msg = errorMsgSel.text();\n                }\n            }\n\n            if (!errResponse) {\n                error.reason = 'timeout';\n            }\n\n            error.session = this.toString();\n\n            if (failureCb) {\n                failureCb(error);\n            } else if (this.state === JingleSessionState.ENDED\n                        && error.reason === 'item-not-found') {\n                // When remote peer decides to terminate the session, but it\n                // still have few messages on the queue for processing,\n                // it will first send us 'session-terminate' (we enter ENDED)\n                // and then follow with 'item-not-found' for the queued requests\n                // We don't want to have that logged on error level.\n                logger.debug(`Jingle error: ${JSON.stringify(error)}`);\n            } else {\n                GlobalOnErrorHandler.callErrorHandler(\n                    new Error(\n                        `Jingle error: ${JSON.stringify(error)}`));\n            }\n        };\n    }\n\n    /**\n     * Returns the ice connection state for the peer connection.\n     * @returns the ice connection state for the peer connection.\n     */\n    getIceConnectionState() {\n        return this.peerconnection.getConnectionState();\n    }\n\n    /**\n     * Closes the peerconnection.\n     */\n    close() {\n        this.state = JingleSessionState.ENDED;\n        this.establishmentDuration = undefined;\n\n        if (this.peerconnection) {\n            this.peerconnection.onicecandidate = null;\n            this.peerconnection.oniceconnectionstatechange = null;\n            this.peerconnection.onnegotiationneeded = null;\n            this.peerconnection.onsignalingstatechange = null;\n        }\n\n        logger.debug(`Clearing modificationQueue on ${this}...`);\n\n        // Remove any pending tasks from the queue\n        this.modificationQueue.clear();\n\n        logger.debug(`Queued PC close task on ${this}...`);\n        this.modificationQueue.push(finishCallback => {\n            // The signaling layer will remove it's listeners\n            this.signalingLayer.setChatRoom(null);\n\n            // do not try to close if already closed.\n            this.peerconnection && this.peerconnection.close();\n            finishCallback();\n            logger.debug(`PC close task on ${this} done!`);\n        });\n\n        logger.debug(`Shutdown modificationQueue on ${this}!`);\n\n        // No more tasks can go in after the close task\n        this.modificationQueue.shutdown();\n    }\n\n    /**\n     * Converts to string with minor summary.\n     * @return {string}\n     */\n    toString() {\n        return `JingleSessionPC[p2p=${this.isP2P},`\n                    + `initiator=${this.isInitiator},sid=${this.sid}]`;\n    }\n\n    /**\n     * If the A/B test for suspend video is disabled according to the room's\n     * configuration, returns undefined. Otherwise returns a boolean which\n     * indicates whether the suspend video option should be enabled or disabled.\n     * @param {JingleSessionPCOptions} options - The config options.\n     */\n    _abtestSuspendVideoEnabled({ abTesting }) {\n        if (!abTesting || !abTesting.enableSuspendVideoTest) {\n            return;\n        }\n\n        // We want the two participants in a P2P call to agree on the value of\n        // the \"suspend\" option. We use the JID of the initiator, because it is\n        // both randomly selected and agreed upon by both participants.\n        const jid = this._getInitiatorJid();\n\n        return integerHash(jid) % 2 === 0;\n    }\n}\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\n// this values needs to be as they are becuse they are going to analytics,\n// callstats, etc.\n\nexport const CHROME = 'chrome';\n\nexport const OPERA = 'opera';\n\nexport const FIREFOX = 'firefox';\n\nexport const INTERNET_EXPLORER = 'iexplorer';\n\nexport const SAFARI = 'safari';\n\nexport const NWJS = 'nwjs';\n\nexport const ELECTRON = 'electron';\n\nexport const REACT_NATIVE = 'react-native';\n\nexport const UNKNOWN = 'unknown';\n","import Bowser from 'bowser';\n\nimport {\n    CHROME,\n    OPERA,\n    FIREFOX,\n    INTERNET_EXPLORER,\n    SAFARI,\n    NWJS,\n    ELECTRON,\n    REACT_NATIVE,\n    UNKNOWN\n} from './browsers';\n\n/**\n * Maps the names of the browsers from bowser to the internal names defined in\n * ./browsers.js\n */\nconst bowserNameToJitsiName = {\n    'Chrome': CHROME,\n    'Chromium': CHROME,\n    'Opera': OPERA,\n    'Firefox': FIREFOX,\n    'Internet Explorer': INTERNET_EXPLORER,\n    'Safari': SAFARI\n};\n\n/**\n * Detects a Chromium based environent.\n *\n * NOTE: Here we cannot check solely for \"Chrome\" in the UA, because Edge has\n * it too. We need to check explicitly for chromium based Edge first and then\n * detect other chromium based browsers.\n *\n * @returns {Object|undefined} - The name (CHROME) and version.\n */\nfunction _detectChromiumBased() {\n    const userAgent = navigator.userAgent;\n    const browserInfo = {\n        name: UNKNOWN,\n        version: undefined\n    };\n\n    if (userAgent.match(/Chrome/) && !userAgent.match(/Edge/)) {\n        // Edge is currenly supported only on desktop and android.\n        if (userAgent.match(/Edg(A?)/)) {\n            // Compare the underlying chromium version.\n            const version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n\n            if (Number.parseInt(version, 10) > 72) {\n                browserInfo.name = CHROME;\n                browserInfo.version = version;\n            }\n        } else {\n            browserInfo.name = CHROME;\n            browserInfo.version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n        }\n    }\n\n    return browserInfo;\n}\n\n/**\n * Detects Electron environment.\n *\n * @returns {Object|undefined} - The name (ELECTRON) and version.\n */\nfunction _detectElectron() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/Electron/)) {\n        const version = userAgent.match(/Electron\\/([\\d.]+)/)[1];\n\n        return {\n            name: ELECTRON,\n            version\n        };\n    }\n}\n\n/**\n * Detects NWJS environment.\n *\n * @returns {Object|undefined} - The name (NWJS) and version.\n */\nfunction _detectNWJS() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/JitsiMeetNW/)) {\n        const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\n\n        return {\n            name: NWJS,\n            version\n        };\n    }\n}\n\n/**\n * Detects React Native environment.\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\n */\nfunction _detectReactNative() {\n    const match\n        = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\n    let version;\n\n    // If we're remote debugging a React Native app, it may be treated as\n    // Chrome. Check navigator.product as well and always return some version\n    // even if we can't get the real one.\n\n    if (match || navigator.product === 'ReactNative') {\n        let name;\n\n        if (match && match.length > 2) {\n            name = match[1];\n            version = match[2];\n        }\n        name || (name = 'react-native');\n        version || (version = 'unknown');\n\n        return {\n            name: REACT_NATIVE,\n            version\n        };\n    }\n}\n\n/**\n * Returns information about the current browser.\n * @param {Object} - The bowser instance.\n * @returns {Object} - The name and version of the browser.\n */\nfunction _detect(bowser) {\n    let browserInfo;\n    const detectors = [\n        _detectReactNative,\n        _detectElectron,\n        _detectNWJS\n    ];\n\n    // Try all browser detectors\n    for (let i = 0; i < detectors.length; i++) {\n        browserInfo = detectors[i]();\n        if (browserInfo) {\n            return browserInfo;\n        }\n    }\n\n    const name = bowser.getBrowserName();\n\n    if (name in bowserNameToJitsiName) {\n        return {\n            name: bowserNameToJitsiName[name],\n            version: bowser.getBrowserVersion()\n        };\n    }\n\n    // Detect other browsers with the Chrome engine, such as Vivaldi and Brave.\n    browserInfo = _detectChromiumBased();\n    if (browserInfo) {\n        return browserInfo;\n    }\n\n    return {\n        name: UNKNOWN,\n        version: undefined\n    };\n}\n\n/**\n * Implements browser detection.\n */\nexport default class BrowserDetection {\n    /**\n     * Creates new BrowserDetection instance.\n     *\n     * @param {Object} [browserInfo] - Information about the browser.\n     * @param {string} browserInfo.name - The name of the browser.\n     * @param {string} browserInfo.version - The version of the browser.\n     */\n    constructor(browserInfo) {\n        let name, version;\n\n        this._bowser = Bowser.getParser(navigator.userAgent);\n        if (typeof browserInfo === 'undefined') {\n            const detectedBrowserInfo = _detect(this._bowser);\n\n            name = detectedBrowserInfo.name;\n            version = detectedBrowserInfo.version;\n        } else if (browserInfo.name in bowserNameToJitsiName) {\n            name = bowserNameToJitsiName[browserInfo.name];\n            version = browserInfo.version;\n        } else {\n            name = UNKNOWN;\n            version = undefined;\n        }\n\n        this._name = name;\n        this._version = version;\n    }\n\n    /**\n     * Gets current browser name.\n     * @returns {string}\n     */\n    getName() {\n        return this._name;\n    }\n\n    /**\n     * Checks if current browser is Chrome.\n     * @returns {boolean}\n     */\n    isChrome() {\n        return this._name === CHROME;\n    }\n\n    /**\n     * Checks if current browser is Opera.\n     * @returns {boolean}\n     */\n    isOpera() {\n        return this._name === OPERA;\n    }\n\n    /**\n     * Checks if current browser is Firefox.\n     * @returns {boolean}\n     */\n    isFirefox() {\n        return this._name === FIREFOX;\n    }\n\n    /**\n     * Checks if current browser is Internet Explorer.\n     * @returns {boolean}\n     */\n    isIExplorer() {\n        return this._name === INTERNET_EXPLORER;\n    }\n\n    /**\n     * Checks if current browser is Safari.\n     * @returns {boolean}\n     */\n    isSafari() {\n        return this._name === SAFARI;\n    }\n\n    /**\n     * Checks if current environment is NWJS.\n     * @returns {boolean}\n     */\n    isNWJS() {\n        return this._name === NWJS;\n    }\n\n    /**\n     * Checks if current environment is Electron.\n     * @returns {boolean}\n     */\n    isElectron() {\n        return this._name === ELECTRON;\n    }\n\n    /**\n     * Checks if current environment is React Native.\n     * @returns {boolean}\n     */\n    isReactNative() {\n        return this._name === REACT_NATIVE;\n    }\n\n    /**\n     * Returns the version of the current browser.\n     * @returns {string}\n     */\n    getVersion() {\n        return this._version;\n    }\n\n    /**\n     * Check if the parsed browser matches the passed condition.\n     *\n     * @param {Object} checkTree - It's one or two layered object, which can include a\n     * platform or an OS on the first layer and should have browsers specs on the\n     * bottom layer.\n     * Eg. { chrome: '>71.1.0' }\n     *     { windows: { chrome: '<70.2' } }\n     * @returns {boolean | undefined} - Returns true if the browser satisfies the set\n     * conditions, false if not and undefined when the browser is not defined in the\n     * checktree object or when the current browser's version is unknown.\n     * @private\n     */\n    _checkCondition(checkTree) {\n        if (this._version) {\n            return this._bowser.satisfies(checkTree);\n        }\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * greater than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionGreaterThan(version) {\n        return this._checkCondition({ [this._name]: `>${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * lower than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionLessThan(version) {\n        return this._checkCondition({ [this._name]: `<${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * equal to the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     * A loose-equality operator is used here so that it matches the sub-versions as well.\n     */\n    isVersionEqualTo(version) {\n        return this._checkCondition({ [this._name]: `~${version}` });\n    }\n}\n","import EventEmitter from 'events';\n\n/**\n * Dummy implementation of Storage interface.\n */\nclass DummyLocalStorage extends EventEmitter {\n\n    /**\n     * The object used for storage.\n     */\n    _storage = {};\n\n    /**\n     * Empties all keys out of the storage.\n     *\n     * @returns {void}\n     */\n    clear() {\n        this._storage = {};\n    }\n\n    /**\n     * Returns the number of data items stored in the Storage object.\n     *\n     * @returns {number} - The number of data items stored in the Storage object.\n     */\n    get length() {\n        return Object.keys(this._storage).length;\n    }\n\n    /**\n     * Will return that key's value associated to the passed key name.\n     *\n     * @param {string} keyName - The key name.\n     * @returns {*} - The key value.\n     */\n    getItem(keyName) {\n        return this._storage[keyName];\n    }\n\n    /**\n     * When passed a key name and value, will add that key to the storage,\n     * or update that key's value if it already exists.\n     *\n     * @param {string} keyName - The key name.\n     * @param {*} keyValue - The key value.\n     * @returns {void}\n     */\n    setItem(keyName, keyValue) {\n        this._storage[keyName] = keyValue;\n    }\n\n    /**\n     * When passed a key name, will remove that key from the storage.\n     *\n     * @param {string} keyName - The key name.\n     * @returns {void}\n     */\n    removeItem(keyName) {\n        delete this._storage[keyName];\n    }\n\n    /**\n     * When passed a number n, this method will return the name of the nth key in the storage.\n     *\n     * @param {number} idx - The index of the key.\n     * @returns {string} - The nth key name.\n     */\n    key(n) {\n        const keys = Object.keys(this._storage);\n\n        if (keys.length <= n) {\n            return undefined;\n        }\n\n        return keys[n];\n    }\n\n    /**\n     * Serializes the content of the storage.\n     *\n     * @returns {string} - The serialized content.\n     */\n    serialize() {\n        return JSON.stringify(this._storage);\n    }\n}\n\n/**\n * Wrapper class for browser's local storage object.\n */\nclass JitsiLocalStorage extends EventEmitter {\n    /**\n     * @constructor\n     * @param {Storage} storage browser's local storage object.\n     */\n    constructor() {\n        super();\n\n        try {\n            this._storage = window.localStorage;\n            this._localStorageDisabled = false;\n        } catch (ignore) {\n            // localStorage throws an exception.\n        }\n\n        if (!this._storage) { // Handles the case when window.localStorage is undefined or throws an exception.\n            console.warn('Local storage is disabled.');\n            this._storage = new DummyLocalStorage();\n            this._localStorageDisabled = true;\n        }\n    }\n\n    /**\n     * Returns true if window.localStorage is disabled and false otherwise.\n     *\n     * @returns {boolean} - True if window.localStorage is disabled and false otherwise.\n     */\n    isLocalStorageDisabled() {\n        return this._localStorageDisabled;\n    }\n\n    /**\n     * Empties all keys out of the storage.\n     *\n     * @returns {void}\n     */\n    clear() {\n        this._storage.clear();\n        this.emit('changed');\n    }\n\n    /**\n     * Returns the number of data items stored in the Storage object.\n     *\n     * @returns {number} - The number of data items stored in the Storage object.\n     */\n    get length() {\n        return this._storage.length;\n    }\n\n    /**\n     * Returns that passed key's value.\n     * @param {string} keyName the name of the key you want to retrieve\n     * the value of.\n     * @returns {String|null} the value of the key. If the key does not exist,\n     * null is returned.\n     */\n    getItem(keyName) {\n        return this._storage.getItem(keyName);\n    }\n\n    /**\n     * Adds a key to the storage, or update key's value if it already exists.\n     * @param {string} keyName - the name of the key you want to create/update.\n     * @param {string} keyValue - the value you want to give the key you are\n     * creating/updating.\n     * @param {boolean} dontEmitChangedEvent - If true a changed event won't be emitted.\n     */\n    setItem(keyName, keyValue, dontEmitChangedEvent = false) {\n        this._storage.setItem(keyName, keyValue);\n\n        if (!dontEmitChangedEvent) {\n            this.emit('changed');\n        }\n    }\n\n    /**\n     * Remove a key from the storage.\n     * @param {string} keyName the name of the key you want to remove.\n     */\n    removeItem(keyName) {\n        this._storage.removeItem(keyName);\n        this.emit('changed');\n    }\n\n    /**\n     * Returns the name of the nth key in the list, or null if n is greater\n     * than or equal to the number of key/value pairs in the object.\n     *\n     * @param {number} i - The index of the key in the list.\n     * @returns {string}\n     */\n    key(i) {\n        return this._storage.key(i);\n    }\n\n    /**\n     * Serializes the content of the storage.\n     *\n     * @returns {string} - The serialized content.\n     */\n    serialize() {\n        if (this.isLocalStorageDisabled) {\n            return this._storage.serialize();\n        }\n\n        const length = this._storage.length;\n        const localStorageContent = {};\n\n        for (let i = 0; i < length; i++) {\n            const key = this._storage.key(i);\n\n            localStorageContent[key] = this._storage.getItem(key);\n        }\n\n        return JSON.stringify(localStorageContent);\n    }\n}\n\nexport const jitsiLocalStorage = new JitsiLocalStorage();\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","import SDPUtil from './SDPUtil';\n\n// this could be useful in Array.prototype.\n/**\n *\n * @param array1\n * @param array2\n */\nfunction arrayEquals(array1, array2) {\n    // if the other array is a falsy value, return\n    if (!array2) {\n        return false;\n    }\n\n    // compare lengths - can save a lot of time\n    if (array1.length !== array2.length) {\n        return false;\n    }\n\n    for (let i = 0, l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!array1[i].equals(array2[i])) {\n                return false;\n            }\n        } else if (array1[i] !== array2[i]) {\n            // Warning - two different object instances will never be\n            // equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n *\n * @param mySDP\n * @param otherSDP\n */\nexport default function SDPDiffer(mySDP, otherSDP) {\n    this.mySDP = mySDP;\n    this.otherSDP = otherSDP;\n    if (!mySDP) {\n        throw new Error('\"mySDP\" is undefined!');\n    } else if (!otherSDP) {\n        throw new Error('\"otherSDP\" is undefined!');\n    }\n}\n\n/**\n * Returns map of MediaChannel that contains media contained in\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\n */\nSDPDiffer.prototype.getNewMedia = function() {\n\n    const myMedias = this.mySDP.getMediaSsrcMap();\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\n    const newMedia = {};\n\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\n        const myMedia = myMedias[othersMediaIdx];\n        const othersMedia = othersMedias[othersMediaIdx];\n\n        if (!myMedia && othersMedia) {\n            // Add whole channel\n            newMedia[othersMediaIdx] = othersMedia;\n\n            return;\n        }\n\n        // Look for new ssrcs across the channel\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\n                // Allocate channel if we've found ssrc that doesn't exist in\n                // our channel\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\n            } else if (othersMedia.ssrcs[ssrc].lines\n                        && myMedia.ssrcs[ssrc].lines) {\n                // we want to detect just changes in adding/removing msid\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n\n                if (myContainMsid !== newContainMsid) {\n                    if (!newMedia[othersMediaIdx]) {\n                        newMedia[othersMediaIdx] = {\n                            mediaindex: othersMedia.mediaindex,\n                            mid: othersMedia.mid,\n                            ssrcs: {},\n                            ssrcGroups: []\n                        };\n                    }\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\n                        = othersMedia.ssrcs[ssrc];\n                }\n            }\n        });\n\n        // Look for new ssrc groups across the channels\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\n\n            // try to match the other ssrc-group with an ssrc-group of ours\n            let matched = false;\n\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\n                const mySsrcGroup = myMedia.ssrcGroups[i];\n\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\n\n                    matched = true;\n                    break;\n                }\n            }\n\n            if (!matched) {\n                // Allocate channel if we've found an ssrc-group that doesn't\n                // exist in our channel\n\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\n            }\n        });\n    });\n\n    return newMedia;\n};\n\n/**\n * TODO: document!\n */\nSDPDiffer.prototype.toJingle = function(modify) {\n    const sdpMediaSsrcs = this.getNewMedia();\n\n    let modified = false;\n\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\n        modified = true;\n        const media = sdpMediaSsrcs[mediaindex];\n\n        modify.c('content', { name: media.mid });\n\n        modify.c('description',\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: media.mid });\n\n        // FIXME: not completely sure this operates on blocks and / or handles\n        // different ssrcs correctly\n        // generate sources from lines\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\n            const mediaSsrc = media.ssrcs[ssrcNum];\n\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n            modify.attrs({ ssrc: mediaSsrc.ssrc });\n\n            // iterate over ssrc lines\n            mediaSsrc.lines.forEach(line => {\n                const idx = line.indexOf(' ');\n                const kv = line.substr(idx + 1);\n\n                modify.c('parameter');\n                if (kv.indexOf(':') === -1) {\n                    modify.attrs({ name: kv });\n                } else {\n                    const nv = kv.split(':', 2);\n                    const name = nv[0];\n                    const value = SDPUtil.filterSpecialChars(nv[1]);\n\n                    modify.attrs({ name });\n                    modify.attrs({ value });\n                }\n                modify.up(); // end of parameter\n            });\n            modify.up(); // end of source\n        });\n\n        // generate source groups from lines\n        media.ssrcGroups.forEach(ssrcGroup => {\n            if (ssrcGroup.ssrcs.length) {\n\n                modify.c('ssrc-group', {\n                    semantics: ssrcGroup.semantics,\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                });\n\n                ssrcGroup.ssrcs.forEach(ssrc => {\n                    modify.c('source', { ssrc })\n                        .up(); // end of source\n                });\n                modify.up(); // end of ssrc-group\n            }\n        });\n\n        modify.up(); // end of description\n        modify.up(); // end of content\n    });\n\n    return modified;\n};\n","import { getLogger } from 'jitsi-meet-logger';\nimport transform from 'sdp-transform';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\n\nconst logger = getLogger(__filename);\nconst SIM_LAYER_1_RID = '1';\nconst SIM_LAYER_2_RID = '2';\nconst SIM_LAYER_3_RID = '3';\n\nexport const SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\n\n/**\n * Handles track related operations on TraceablePeerConnection when browser is\n * running in unified plan mode.\n */\nexport class TPCUtils {\n    /**\n     * Creates a new instance for a given TraceablePeerConnection\n     *\n     * @param peerconnection - the tpc instance for which we have utility functions.\n     * @param videoBitrates - the bitrates to be configured on the video senders for\n     * different resolutions both in unicast and simulcast mode.\n     */\n    constructor(peerconnection, videoBitrates) {\n        this.pc = peerconnection;\n        this.videoBitrates = videoBitrates.VP8 || videoBitrates;\n\n        /**\n         * The startup configuration for the stream encodings that are applicable to\n         * the video stream when a new sender is created on the peerconnection. The initial\n         * config takes into account the differences in browser's simulcast implementation.\n         *\n         * Encoding parameters:\n         * active - determine the on/off state of a particular encoding.\n         * maxBitrate - max. bitrate value to be applied to that particular encoding\n         *  based on the encoding's resolution and config.js videoQuality settings if applicable.\n         * rid - Rtp Stream ID that is configured for a particular simulcast stream.\n         * scaleResolutionDownBy - the factor by which the encoding is scaled down from the\n         *  original resolution of the captured video.\n         */\n        this.localStreamEncodingsConfig = [\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? this.videoBitrates.high : this.videoBitrates.low,\n                rid: SIM_LAYER_1_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? 1.0 : 4.0\n            },\n            {\n                active: true,\n                maxBitrate: this.videoBitrates.standard,\n                rid: SIM_LAYER_2_RID,\n                scaleResolutionDownBy: 2.0\n            },\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? this.videoBitrates.low : this.videoBitrates.high,\n                rid: SIM_LAYER_3_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? 4.0 : 1.0\n            }\n        ];\n    }\n\n    /**\n     * Ensures that the ssrcs associated with a FID ssrc-group appear in the correct order, i.e.,\n     * the primary ssrc first and the secondary rtx ssrc later. This is important for unified\n     * plan since we have only one FID group per media description.\n     * @param {Object} description the webRTC session description instance for the remote\n     * description.\n     * @private\n     */\n    ensureCorrectOrderOfSsrcs(description) {\n        const parsedSdp = transform.parse(description.sdp);\n\n        parsedSdp.media.forEach(mLine => {\n            if (mLine.type === 'audio') {\n                return;\n            }\n            if (!mLine.ssrcGroups || !mLine.ssrcGroups.length) {\n                return;\n            }\n            let reorderedSsrcs = [];\n\n            mLine.ssrcGroups[0].ssrcs.split(' ').forEach(ssrc => {\n                const sources = mLine.ssrcs.filter(source => source.id.toString() === ssrc);\n\n                reorderedSsrcs = reorderedSsrcs.concat(sources);\n            });\n            mLine.ssrcs = reorderedSsrcs;\n        });\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(parsedSdp)\n        });\n    }\n\n    /**\n     * Obtains stream encodings that need to be configured on the given track based\n     * on the track media type and the simulcast setting.\n     * @param {JitsiLocalTrack} localTrack\n     */\n    _getStreamEncodings(localTrack) {\n        if (this.pc.isSimulcastOn() && localTrack.isVideoTrack()) {\n            return this.localStreamEncodingsConfig;\n        }\n\n        return localTrack.isVideoTrack()\n            ? [ {\n                active: true,\n                maxBitrate: this.videoBitrates.high\n            } ]\n            : [ { active: true } ];\n    }\n\n    /**\n     * Takes in a *unified plan* offer and inserts the appropriate\n     * parameters for adding simulcast receive support.\n     * @param {Object} desc - A session description object\n     * @param {String} desc.type - the type (offer/answer)\n     * @param {String} desc.sdp - the sdp content\n     *\n     * @return {Object} A session description (same format as above) object\n     * with its sdp field modified to advertise simulcast receive support\n     */\n    insertUnifiedPlanSimulcastReceive(desc) {\n        // a=simulcast line is not needed on browsers where\n        // we munge SDP for turning on simulcast. Remove this check\n        // when we move to RID/MID based simulcast on all browsers.\n        if (browser.usesSdpMungingForSimulcast()) {\n            return desc;\n        }\n        const sdp = transform.parse(desc.sdp);\n        const idx = sdp.media.findIndex(mline => mline.type === 'video');\n\n        if (sdp.media[idx].rids && (sdp.media[idx].simulcast_03 || sdp.media[idx].simulcast)) {\n            // Make sure we don't have the simulcast recv line on video descriptions other than\n            // the first video description.\n            sdp.media.forEach((mline, i) => {\n                if (mline.type === 'video' && i !== idx) {\n                    sdp.media[i].rids = undefined;\n                    sdp.media[i].simulcast = undefined;\n\n                    // eslint-disable-next-line camelcase\n                    sdp.media[i].simulcast_03 = undefined;\n                }\n            });\n\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transform.write(sdp)\n            });\n        }\n\n        // In order of highest to lowest spatial quality\n        sdp.media[idx].rids = [\n            {\n                id: SIM_LAYER_1_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_2_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_3_RID,\n                direction: 'recv'\n            }\n        ];\n\n        // Firefox 72 has stopped parsing the legacy rid= parameters in simulcast attributes.\n        // eslint-disable-next-line max-len\n        // https://www.fxsitecompat.dev/en-CA/docs/2019/pt-and-rid-in-webrtc-simulcast-attributes-are-no-longer-supported/\n        const simulcastLine = browser.isFirefox() && browser.isVersionGreaterThan(71)\n            ? `recv ${SIM_LAYER_RIDS.join(';')}`\n            : `recv rid=${SIM_LAYER_RIDS.join(';')}`;\n\n        // eslint-disable-next-line camelcase\n        sdp.media[idx].simulcast_03 = {\n            value: simulcastLine\n        };\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    }\n\n    /**\n    * Adds {@link JitsiLocalTrack} to the WebRTC peerconnection for the first time.\n    * @param {JitsiLocalTrack} track - track to be added to the peerconnection.\n    * @param {boolean} isInitiator - boolean that indicates if the endpoint is offerer\n    * in a p2p connection.\n    * @returns {void}\n    */\n    addTrack(localTrack, isInitiator) {\n        const track = localTrack.getTrack();\n\n        if (isInitiator) {\n            // Use pc.addTransceiver() for the initiator case when local tracks are getting added\n            // to the peerconnection before a session-initiate is sent over to the peer.\n            const transceiverInit = {\n                direction: 'sendrecv',\n                streams: [ localTrack.getOriginalStream() ],\n                sendEncodings: []\n            };\n\n            if (!browser.isFirefox()) {\n                transceiverInit.sendEncodings = this._getStreamEncodings(localTrack);\n            }\n            this.pc.peerconnection.addTransceiver(track, transceiverInit);\n        } else {\n            // Use pc.addTrack() for responder case so that we can re-use the m-lines that were created\n            // when setRemoteDescription was called. pc.addTrack() automatically  attaches to any existing\n            // unused \"recv-only\" transceiver.\n            this.pc.peerconnection.addTrack(track);\n        }\n    }\n\n    /**\n     * Adds a track on the RTCRtpSender as part of the unmute operation.\n     * @param {JitsiLocalTrack} localTrack - track to be unmuted.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    addTrackUnmute(localTrack) {\n        const mediaType = localTrack.getType();\n        const track = localTrack.getTrack();\n\n        // The assumption here is that the first transceiver of the specified\n        // media type is that of the local track.\n        const transceiver = this.pc.peerconnection.getTransceivers()\n            .find(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\n\n        if (!transceiver) {\n            return Promise.reject(new Error(`RTCRtpTransceiver for ${mediaType} not found`));\n        }\n        logger.debug(`Adding ${localTrack} on ${this.pc}`);\n\n        // If the client starts with audio/video muted setting, the transceiver direction\n        // will be set to 'recvonly'. Use addStream here so that a MSID is generated for the stream.\n        if (transceiver.direction === 'recvonly') {\n            const stream = localTrack.getOriginalStream();\n\n            if (stream) {\n                this.pc.peerconnection.addStream(localTrack.getOriginalStream());\n\n                return this.setEncodings(localTrack).then(() => {\n                    this.pc.localTracks.set(localTrack.rtcId, localTrack);\n                    transceiver.direction = 'sendrecv';\n                });\n            }\n\n            return Promise.resolve();\n        }\n\n        return transceiver.sender.replaceTrack(track);\n    }\n\n    /**\n     * Obtains the current local video track's height constraints based on the\n     * initial stream encodings configuration on the sender and the resolution\n     * of the current local track added to the peerconnection.\n     * @param {MediaStreamTrack} localTrack local video track\n     * @returns {Array[number]} an array containing the resolution heights of\n     * simulcast streams configured on the video sender.\n     */\n    getLocalStreamHeightConstraints(localTrack) {\n        // React-native hasn't implemented MediaStreamTrack getSettings yet.\n        if (browser.isReactNative()) {\n            return null;\n        }\n\n        const localVideoHeightConstraints = [];\n\n        // Firefox doesn't return the height of the desktop track, assume a min. height of 720.\n        const { height = 720 } = localTrack.getSettings();\n\n        for (const encoding of this.localStreamEncodingsConfig) {\n            localVideoHeightConstraints.push(height / encoding.scaleResolutionDownBy);\n        }\n\n        return localVideoHeightConstraints;\n    }\n\n    /**\n     * Removes the track from the RTCRtpSender as part of the mute operation.\n     * @param {JitsiLocalTrack} localTrack - track to be removed.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    removeTrackMute(localTrack) {\n        const mediaType = localTrack.getType();\n        const transceiver = this.pc.peerconnection.getTransceivers()\n            .find(t => t.sender && t.sender.track && t.sender.track.id === localTrack.getTrackId());\n\n        if (!transceiver) {\n            return Promise.reject(new Error(`RTCRtpTransceiver for ${mediaType} not found`));\n        }\n\n        logger.debug(`Removing ${localTrack} on ${this.pc}`);\n\n        return transceiver.sender.replaceTrack(null);\n    }\n\n    /**\n     * Replaces the existing track on a RTCRtpSender with the given track.\n     * @param {JitsiLocalTrack} oldTrack - existing track on the sender that needs to be removed.\n     * @param {JitsiLocalTrack} newTrack - new track that needs to be added to the sender.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    replaceTrack(oldTrack, newTrack) {\n        if (oldTrack && newTrack) {\n            const mediaType = newTrack.getType();\n            const stream = newTrack.getOriginalStream();\n\n            // Ignore cases when the track is replaced while the device is in a muted state,like\n            // replacing camera when video muted or replacing mic when audio muted. These JitsiLocalTracks\n            // do not have a mediastream attached. Replace track will be called again when the device is\n            // unmuted and the track will be replaced on the peerconnection then.\n            if (!stream) {\n                this.pc.localTracks.delete(oldTrack.rtcId);\n                this.pc.localTracks.set(newTrack.rtcId, newTrack);\n\n                return Promise.resolve();\n            }\n            const track = mediaType === MediaType.AUDIO\n                ? stream.getAudioTracks()[0]\n                : stream.getVideoTracks()[0];\n            const transceiver = this.pc.peerconnection.getTransceivers()\n                .find(t => t.receiver.track.kind === mediaType && !t.stopped);\n\n            if (!transceiver) {\n                return Promise.reject(new Error('replace track failed'));\n            }\n            logger.debug(`Replacing ${oldTrack} with ${newTrack} on ${this.pc}`);\n\n            return transceiver.sender.replaceTrack(track)\n                .then(() => {\n                    const ssrc = this.pc.localSSRCs.get(oldTrack.rtcId);\n\n                    this.pc.localTracks.delete(oldTrack.rtcId);\n                    this.pc.localSSRCs.delete(oldTrack.rtcId);\n                    this.pc._addedStreams = this.pc._addedStreams.filter(s => s !== stream);\n                    this.pc.localTracks.set(newTrack.rtcId, newTrack);\n\n                    this.pc._addedStreams.push(stream);\n                    this.pc.localSSRCs.set(newTrack.rtcId, ssrc);\n                    this.pc.eventEmitter.emit(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n                        newTrack,\n                        this.pc._extractPrimarySSRC(ssrc));\n                });\n        } else if (oldTrack && !newTrack) {\n            return this.removeTrackMute(oldTrack)\n                .then(() => {\n                    this.pc.localTracks.delete(oldTrack.rtcId);\n                    this.pc.localSSRCs.delete(oldTrack.rtcId);\n                });\n        } else if (newTrack && !oldTrack) {\n            const ssrc = this.pc.localSSRCs.get(newTrack.rtcId);\n\n            return this.addTrackUnmute(newTrack)\n                .then(() => {\n                    this.pc.localTracks.set(newTrack.rtcId, newTrack);\n                    this.pc.localSSRCs.set(newTrack.rtcId, ssrc);\n                });\n        }\n\n        logger.info('TPCUtils.replaceTrack called with no new track and no old track');\n\n        return Promise.resolve();\n    }\n\n    /**\n    * Enables/disables audio transmission on the peer connection. When\n    * disabled the audio transceiver direction will be set to 'inactive'\n    * which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable audio media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setAudioTransferActive(active) {\n        this.setMediaTransferActive(MediaType.AUDIO, active);\n    }\n\n    /**\n     * Set the simulcast stream encoding properties on the RTCRtpSender.\n     * @param {JitsiLocalTrack} track - the current track in use for which\n     * the encodings are to be set.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    setEncodings(track) {\n        const transceiver = this.pc.peerconnection.getTransceivers()\n            .find(t => t.sender && t.sender.track && t.sender.track.kind === track.getType());\n        const parameters = transceiver.sender.getParameters();\n\n        parameters.encodings = this._getStreamEncodings(track);\n\n        return transceiver.sender.setParameters(parameters);\n    }\n\n    /**\n     * Enables/disables media transmission on the peerconnection by changing the direction\n     * on the transceiver for the specified media type.\n     * @param {String} mediaType - 'audio' or 'video'\n     * @param {boolean} active - true to enable media transmission or false\n     * to disable.\n     * @returns {void}\n     */\n    setMediaTransferActive(mediaType, active) {\n        const transceivers = this.pc.peerconnection.getTransceivers()\n            .filter(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\n        const localTracks = this.pc.getLocalTracks(mediaType);\n\n        logger.info(`${active ? 'Enabling' : 'Suspending'} ${mediaType} media transfer on ${this.pc}`);\n        transceivers.forEach((transceiver, idx) => {\n            if (active) {\n                // The first transceiver is for the local track and only this one can be set to 'sendrecv'\n                if (idx === 0 && localTracks.length) {\n                    transceiver.direction = 'sendrecv';\n                } else {\n                    transceiver.direction = 'recvonly';\n                }\n            } else {\n                transceiver.direction = 'inactive';\n            }\n        });\n    }\n\n    /**\n    * Enables/disables video media transmission on the peer connection. When\n    * disabled the SDP video media direction in the local SDP will be adjusted to\n    * 'inactive' which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable video media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setVideoTransferActive(active) {\n        this.setMediaTransferActive(MediaType.VIDEO, active);\n    }\n\n    /**\n     * Ensures that the resolution of the stream encodings are consistent with the values\n     * that were configured on the RTCRtpSender when the source was added to the peerconnection.\n     * This should prevent us from overriding the default values if the browser returns\n     * erroneous values when RTCRtpSender.getParameters is used for getting the encodings info.\n     * @param {Object} parameters - the RTCRtpEncodingParameters obtained from the browser.\n     * @returns {void}\n     */\n    updateEncodingsResolution(parameters) {\n        if (!(browser.isWebKitBased() && parameters.encodings && Array.isArray(parameters.encodings))) {\n            return;\n        }\n        const allEqualEncodings\n            = encodings => encodings.every(encoding => typeof encoding.scaleResolutionDownBy !== 'undefined'\n                && encoding.scaleResolutionDownBy === encodings[0].scaleResolutionDownBy);\n\n        // Implement the workaround only when all the encodings report the same resolution.\n        if (allEqualEncodings(parameters.encodings)) {\n            parameters.encodings.forEach((encoding, idx) => {\n                encoding.scaleResolutionDownBy = this.localStreamEncodingsConfig[idx].scaleResolutionDownBy;\n            });\n        }\n    }\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\n * Provides statistics for the local stream.\n */\n\n/**\n * Size of the webaudio analyzer buffer.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\n\n/**\n * Value of the webaudio analyzer smoothing time parameter.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\nlet context = null;\n\nif (window.AudioContext) {\n    context = new AudioContext();\n\n    // XXX Not all browsers define a suspend method on AudioContext. As the\n    // invocation is at the (ES6 module) global execution level, it breaks the\n    // loading of the lib-jitsi-meet library in such browsers and, consequently,\n    // the loading of the very Web app that uses the lib-jitsi-meet library. For\n    // example, Google Chrome 40 on Android does not define the method but we\n    // still want to be able to load the lib-jitsi-meet library there and\n    // display a page which notifies the user that the Web app is not supported\n    // there.\n    context.suspend && context.suspend();\n}\n\n/**\n * Converts time domain data array to audio level.\n * @param samples the time domain data array.\n * @returns {number} the audio level\n */\nfunction timeDomainDataToAudioLevel(samples) {\n\n    let maxVolume = 0;\n\n    const length = samples.length;\n\n    for (let i = 0; i < length; i++) {\n        if (maxVolume < samples[i]) {\n            maxVolume = samples[i];\n        }\n    }\n\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\n}\n\n/**\n * Animates audio level change\n * @param newLevel the new audio level\n * @param lastLevel the last audio level\n * @returns {Number} the audio level to be set\n */\nfunction animateLevel(newLevel, lastLevel) {\n    let value = 0;\n    const diff = lastLevel - newLevel;\n\n    if (diff > 0.2) {\n        value = lastLevel - 0.2;\n    } else if (diff < -0.4) {\n        value = lastLevel + 0.4;\n    } else {\n        value = newLevel;\n    }\n\n    return parseFloat(value.toFixed(3));\n}\n\n\n/**\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\n *\n * @param stream the local stream\n * @param interval stats refresh interval given in ms.\n * @param callback function that receives the audio levels.\n * @constructor\n */\nexport default function LocalStatsCollector(stream, interval, callback) {\n    this.stream = stream;\n    this.intervalId = null;\n    this.intervalMilis = interval;\n    this.audioLevel = 0;\n    this.callback = callback;\n}\n\n/**\n * Starts the collecting the statistics.\n */\nLocalStatsCollector.prototype.start = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n    context.resume();\n    const analyser = context.createAnalyser();\n\n    analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\n    analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\n\n    const source = context.createMediaStreamSource(this.stream);\n\n    source.connect(analyser);\n\n    this.intervalId = setInterval(\n        () => {\n            const array = new Uint8Array(analyser.frequencyBinCount);\n\n            analyser.getByteTimeDomainData(array);\n            const audioLevel = timeDomainDataToAudioLevel(array);\n\n            // Set the audio levels always as NoAudioSignalDetection now\n            // uses audio levels from LocalStatsCollector and waits for\n            // atleast 4 secs for a no audio signal before displaying the\n            // notification on the UI.\n            this.audioLevel = animateLevel(audioLevel, this.audioLevel);\n            this.callback(this.audioLevel);\n        },\n        this.intervalMilis\n    );\n};\n\n/**\n * Stops collecting the statistics.\n */\nLocalStatsCollector.prototype.stop = function() {\n    if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n    }\n};\n\n/**\n * Checks if the environment has the necessary conditions to support\n * collecting stats from local streams.\n *\n * @returns {boolean}\n */\nLocalStatsCollector.isLocalStatsSupported = function() {\n    return Boolean(context);\n};\n","/**\n * The transciption is on.\n *\n * @type {String}\n */\nexport const ON = 'on';\n\n/**\n * The transciption is off.\n *\n * @type {String}\n */\nexport const OFF = 'off';\n","export default {\n    /**\n     * Event triggered when the remote party signals it's receive video max frame height.\n     */\n    REMOTE_VIDEO_CONSTRAINTS_CHANGED: 'media_session.REMOTE_VIDEO_CONSTRAINTS_CHANGED'\n};\n","/* global __filename, module */\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Maps our handler types to MediaStreamTrack properties.\n */\nconst trackHandler2Prop = {\n    'track_mute': 'onmute', // Not supported on FF\n    'track_unmute': 'onunmute',\n    'track_ended': 'onended'\n};\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiTrack extends EventEmitter {\n    /* eslint-disable max-params */\n    /**\n     * Represents a single media track (either audio or video).\n     * @constructor\n     * @param conference the rtc instance\n     * @param stream the WebRTC MediaStream instance\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\n     * the given <tt>stream</tt>.\n     * @param streamInactiveHandler the function that will handle\n     *        onended/oninactive events of the stream.\n     * @param trackMediaType the media type of the JitsiTrack\n     * @param videoType the VideoType for this track if any\n     */\n    constructor(\n            conference,\n            stream,\n            track,\n            streamInactiveHandler,\n            trackMediaType,\n            videoType) {\n        super();\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n\n        /**\n         * Array with the HTML elements that are displaying the streams.\n         * @type {Array}\n         */\n        this.containers = [];\n        this.conference = conference;\n        this.audioLevel = -1;\n        this.type = trackMediaType;\n        this.track = track;\n        this.videoType = videoType;\n        this.handlers = new Map();\n\n        /**\n         * Indicates whether this JitsiTrack has been disposed. If true, this\n         * JitsiTrack is to be considered unusable and operations involving it\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The inactive handler which will be triggered when the underlying\n         * <tt>MediaStream</tt> ends.\n         *\n         * @private\n         * @type {Function}\n         */\n        this._streamInactiveHandler = streamInactiveHandler;\n\n        this._setStream(stream);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Adds onended/oninactive handler to a MediaStream or a MediaStreamTrack.\n     * Firefox doesn't fire a inactive event on the MediaStream, instead it fires\n     * a onended event on the MediaStreamTrack.\n     * @param {Function} handler the handler\n     */\n    _addMediaStreamInactiveHandler(handler) {\n        if (browser.isFirefox()) {\n            this.track.onended = handler;\n        } else {\n            this.stream.oninactive = handler;\n        }\n    }\n\n    /**\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\n     * depending on the passed type.\n     * @param {string} type the type of the handler that is going to be set\n     * @param {Function} handler the handler.\n     */\n    _setHandler(type, handler) {\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\n            logger.error(`Invalid handler type ${type}`);\n\n            return;\n        }\n        if (handler) {\n            this.handlers.set(type, handler);\n        } else {\n            this.handlers.delete(type);\n        }\n\n        if (this.stream) {\n            for (const track of this.stream.getTracks()) {\n                track[trackHandler2Prop[type]] = handler;\n            }\n        }\n    }\n\n    /**\n     * Unregisters all event handlers bound to the underlying media stream/track\n     * @private\n     */\n    _unregisterHandlers() {\n        if (!this.stream) {\n            logger.warn(\n                `${this}: unable to unregister handlers - no stream object`);\n\n            return;\n        }\n\n        for (const type of this.handlers.keys()) {\n            // FIXME Why only video tracks?\n            for (const videoTrack of this.stream.getVideoTracks()) {\n                videoTrack[trackHandler2Prop[type]] = undefined;\n            }\n        }\n        if (this._streamInactiveHandler) {\n            this._addMediaStreamInactiveHandler(undefined);\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        if (this.stream === stream) {\n            return;\n        }\n\n        this.stream = stream;\n\n        // TODO Practically, that's like the opposite of _unregisterHandlers\n        // i.e. may be abstracted into a function/method called\n        // _registerHandlers for clarity and easing the maintenance of the two\n        // pieces of source code.\n        if (this.stream) {\n            for (const type of this.handlers.keys()) {\n                this._setHandler(type, this.handlers.get(type));\n            }\n            if (this._streamInactiveHandler) {\n                this._addMediaStreamInactiveHandler(this._streamInactiveHandler);\n            }\n        }\n    }\n\n    /**\n     * Returns the type (audio or video) of this track.\n     */\n    getType() {\n        return this.type;\n    }\n\n    /**\n     * Check if this is an audio track.\n     */\n    isAudioTrack() {\n        return this.getType() === MediaType.AUDIO;\n    }\n\n    /**\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\n     * according to it's 'muted' field status.\n     * @return {boolean} <tt>true</tt> if the underlying\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\n     */\n    isWebRTCTrackMuted() {\n        return this.track && this.track.muted;\n    }\n\n    /**\n     * Check if this is a video track.\n     */\n    isVideoTrack() {\n        return this.getType() === MediaType.VIDEO;\n    }\n\n    /**\n     * Checks whether this is a local track.\n     * @abstract\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\n     */\n    isLocal() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Check whether this is a local audio track.\n     *\n     * @return {boolean} -  true if track represents a local audio track, false otherwise.\n     */\n    isLocalAudioTrack() {\n        return this.isAudioTrack() && this.isLocal();\n    }\n\n    /**\n     * Returns the WebRTC MediaStream instance.\n     */\n    getOriginalStream() {\n        return this.stream;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\n     * @returns {String|null}\n     */\n    getStreamId() {\n        return this.stream ? this.stream.id : null;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack\n     * @returns {MediaStreamTrack}\n     */\n    getTrack() {\n        return this.track;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack label\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this.track.label;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\n     * @returns {String|null}\n     */\n    getTrackId() {\n        return this.track ? this.track.id : null;\n    }\n\n    /**\n     * Return meaningful usage label for this track depending on it's media and\n     * eventual video type.\n     * @returns {string}\n     */\n    getUsageLabel() {\n        if (this.isAudioTrack()) {\n            return 'mic';\n        }\n\n        return this.videoType ? this.videoType : 'default';\n    }\n\n    /**\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\n     * @param container the video/audio container to which this stream is\n     *        attached and for which event will be fired.\n     * @private\n     */\n    _maybeFireTrackAttached(container) {\n        if (this.conference && container) {\n            this.conference._onTrackAttach(this, container);\n        }\n    }\n\n    /**\n     * Attaches the MediaStream of this track to an HTML container.\n     * Adds the container to the list of containers that are displaying the\n     * track.\n     *\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     *\n     * @returns {void}\n     */\n    attach(container) {\n        if (this.stream) {\n            this._onTrackAttach(container);\n            RTCUtils.attachMediaStream(container, this.stream);\n        }\n        this.containers.push(container);\n        this._maybeFireTrackAttached(container);\n        this._attachTTFMTracker(container);\n    }\n\n    /**\n     * Removes this JitsiTrack from the passed HTML container.\n     *\n     * @param container the HTML container to detach from this JitsiTrack. If\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\n     * which this JitsiTrack is currently attached.\n     */\n    detach(container) {\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\n            const c = cs[i];\n\n            if (!container) {\n                this._onTrackDetach(c);\n                RTCUtils.attachMediaStream(c, null);\n            }\n            if (!container || c === container) {\n                cs.splice(i, 1);\n            }\n        }\n\n        if (container) {\n            this._onTrackDetach(container);\n            RTCUtils.attachMediaStream(container, null);\n        }\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Removes attached event listeners.\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        this.removeAllListeners();\n\n        this.disposed = true;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Returns true if this is a video track and the source of the video is a\n     * screen capture as opposed to a camera.\n     */\n    isScreenSharing() {\n        // FIXME: Should be fixed or removed.\n    }\n\n    /**\n     * Returns id of the track.\n     * @returns {string|null} id of the track or null if this is fake track.\n     */\n    getId() {\n        if (this.stream) {\n            return RTCUtils.getStreamID(this.stream);\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks whether the MediaStream is active/not ended.\n     * When there is no check for active we don't have information and so\n     * will return that stream is active (in case of FF).\n     * @returns {boolean} whether MediaStream is active.\n     */\n    isActive() {\n        if (typeof this.stream.active !== 'undefined') {\n            return this.stream.active;\n        }\n\n        return true;\n    }\n\n    /**\n     * Sets the audio level for the stream\n     * @param {number} audioLevel value between 0 and 1\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\n     * is source for the audio level. It can be <tt>undefined</tt> for\n     * a local track if the audio level was measured outside of the\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\n     */\n    setAudioLevel(audioLevel, tpc) {\n        let newAudioLevel = audioLevel;\n\n        // When using getSynchornizationSources on the audio receiver to gather audio levels for\n        // remote tracks, browser reports last known audio levels even when the remote user is\n        // audio muted, we need to reset the value to zero here so that the audio levels are cleared.\n        // Remote tracks have the tpc info present while local tracks do not.\n        if (browser.supportsReceiverStats() && typeof tpc !== 'undefined' && this.isMuted()) {\n            newAudioLevel = 0;\n        }\n\n        if (this.audioLevel !== newAudioLevel) {\n            this.audioLevel = newAudioLevel;\n            this.emit(\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                newAudioLevel,\n                tpc);\n\n        // LocalStatsCollector reports a value of 0.008 for muted mics\n        // and a value of 0 when there is no audio input.\n        } else if (this.audioLevel === 0\n            && newAudioLevel === 0\n            && this.isLocal()\n            && !this.isWebRTCTrackMuted()) {\n            this.emit(\n                JitsiTrackEvents.NO_AUDIO_INPUT,\n                newAudioLevel);\n        }\n    }\n\n    /**\n     * Returns the msid of the stream attached to the JitsiTrack object or null\n     * if no stream is attached.\n     */\n    getMSID() {\n        const streamId = this.getStreamId();\n        const trackId = this.getTrackId();\n\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\n    }\n\n    /**\n     * Sets new audio output device for track's DOM elements. Video tracks are\n     * ignored.\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\n     * @returns {Promise}\n     */\n    setAudioOutput(audioOutputDeviceId) {\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        // All audio communication is done through audio tracks, so ignore\n        // changing audio output for video tracks at all.\n        if (this.isVideoTrack()) {\n            return Promise.resolve();\n        }\n\n        return (\n            Promise.all(\n                this.containers.map(\n                    element =>\n                        element.setSinkId(audioOutputDeviceId)\n                            .catch(error => {\n                                logger.warn(\n                                    'Failed to change audio output device on'\n                                        + ' element. Default or previously set'\n                                        + ' audio output device will be used.',\n                                    element,\n                                    error);\n                                throw error;\n                            }))\n            )\n                .then(() => {\n                    this.emit(\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\n                        audioOutputDeviceId);\n                }));\n    }\n}\n","import EventEmitter from 'events';\n\nimport RTC from '../RTC/RTC';\nimport { createAudioContext } from '../webaudio/WebAudioUtils';\n\nimport { VAD_SCORE_PUBLISHED } from './DetectionEvents';\n\n/**\n * Connects an audio JitsiLocalTrack to a vadProcessor using WebAudio ScriptProcessorNode.\n * Once an object is created audio from the local track flows through the ScriptProcessorNode as raw PCM.\n * The PCM is processed by the injected vad module and a voice activity detection score is obtained, the\n * score is published to consumers via an EventEmitter.\n * After work is done with this service the destroy method needs to be called for a proper cleanup.\n *\n * @fires VAD_SCORE_PUBLISHED\n */\nexport default class TrackVADEmitter extends EventEmitter {\n    /**\n     * Constructor.\n     *\n     * @param {number} procNodeSampleRate - Sample rate of the ScriptProcessorNode. Possible values  256, 512, 1024,\n     *  2048, 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * @param {Object} vadProcessor - VAD processor that allows us to calculate VAD score for PCM samples.\n     * @param {JitsiLocalTrack} jitsiLocalTrack - JitsiLocalTrack corresponding to micDeviceId.\n     */\n    constructor(procNodeSampleRate, vadProcessor, jitsiLocalTrack) {\n        super();\n\n        /**\n         * Sample rate of the ScriptProcessorNode.\n         */\n        this._procNodeSampleRate = procNodeSampleRate;\n\n        /**\n         * VAD Processor that allows us to calculate VAD score for PCM samples\n         */\n        this._vadProcessor = vadProcessor;\n\n        /**\n         * The JitsiLocalTrack instance.\n         */\n        this._localTrack = jitsiLocalTrack;\n\n        /**\n         * Buffer to hold residue PCM resulting after a ScriptProcessorNode callback\n         */\n        this._bufferResidue = new Float32Array([]);\n\n        /**\n         * The AudioContext instance with the preferred sample frequency.\n         */\n        this._audioContext = createAudioContext({ sampleRate: vadProcessor.getRequiredPCMFrequency() });\n\n        /**\n         * PCM Sample size expected by the VAD Processor instance. We cache it here as this value is used extensively,\n         * saves a couple of function calls.\n         */\n        this._vadSampleSize = vadProcessor.getSampleLength();\n\n        /**\n         * Event listener function that will be called by the ScriptProcessNode with raw PCM data, depending on the set\n         * sample rate.\n         */\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n\n        this._initializeAudioContext();\n    }\n\n    /**\n     * Factory method that sets up all the necessary components for the creation of the TrackVADEmitter.\n     *\n     * @param {string} micDeviceId - Target microphone device id.\n     * @param {number} procNodeSampleRate - Sample rate of the proc node.\n     * @param {Object} vadProcessor -Module that calculates the voice activity score for a certain audio PCM sample.\n     * The processor needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>} - Promise resolving in a new instance of TrackVADEmitter.\n     */\n    static create(micDeviceId, procNodeSampleRate, vadProcessor) {\n        return RTC.obtainAudioAndVideoPermissions({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(localTrack => {\n            // We only expect one audio track when specifying a device id.\n            if (!localTrack[0]) {\n                throw new Error(`Failed to create jitsi local track for device id: ${micDeviceId}`);\n            }\n\n            return new TrackVADEmitter(procNodeSampleRate, vadProcessor, localTrack[0]);\n\n            // We have no exception handling at this point as there is nothing to clean up, the vadProcessor\n            // life cycle is handled by whoever created this instance.\n        });\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _initializeAudioContext() {\n        this._audioSource = this._audioContext.createMediaStreamSource(this._localTrack.stream);\n\n        // TODO AudioProcessingNode is deprecated in the web audio specifications and the recommended replacement\n        // is audio worklet, however at the point of implementation AudioProcessingNode was still de de facto way\n        // of achieving this functionality and supported in all major browsers as opposed to audio worklet which\n        // was only available in Chrome. This todo is just a reminder that we should replace AudioProcessingNode\n        // with audio worklet when it's mature enough and has more browser support.\n        // We don't need stereo for determining the VAD score so we create a single channel processing node.\n        this._audioProcessingNode = this._audioContext.createScriptProcessor(this._procNodeSampleRate, 1, 1);\n    }\n\n    /**\n     * ScriptProcessorNode callback, the input parameters contains the PCM audio that is then sent to rnnoise.\n     * Rnnoise only accepts PCM samples of 480 bytes whereas the webaudio processor node can't sample at a multiple\n     * of 480 thus after each _onAudioProcess callback there will remain and PCM buffer residue equal\n     * to _procNodeSampleRate / 480 which will be added to the next sample buffer and so on.\\\n     *\n     *\n     * @param {AudioProcessingEvent} audioEvent - Audio event.\n     * @returns {void}\n     * @fires VAD_SCORE_PUBLISHED\n     */\n    _onAudioProcess(audioEvent) {\n        // Prepend the residue PCM buffer from the previous process callback.\n        const inData = audioEvent.inputBuffer.getChannelData(0);\n        const completeInData = [ ...this._bufferResidue, ...inData ];\n        const sampleTimestamp = Date.now();\n\n        let i = 0;\n\n        for (; i + this._vadSampleSize < completeInData.length; i += this._vadSampleSize) {\n            const pcmSample = completeInData.slice(i, i + this._vadSampleSize);\n\n            // The VAD processor might change the values inside the array so we make a copy.\n            const vadScore = this._vadProcessor.calculateAudioFrameVAD(pcmSample.slice());\n\n            this.emit(VAD_SCORE_PUBLISHED, {\n                timestamp: sampleTimestamp,\n                score: vadScore,\n                pcmData: pcmSample,\n                deviceId: this._localTrack.getDeviceId()\n            });\n        }\n\n        this._bufferResidue = completeInData.slice(i, completeInData.length);\n    }\n\n    /**\n     * Connects the nodes in the AudioContext to start the flow of audio data.\n     *\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = this._onAudioProcess;\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        // Even thought we disconnect the processing node it seems that some callbacks remain queued,\n        // resulting in calls with and uninitialized context.\n        // eslint-disable-next-line no-empty-function\n        this._audioProcessingNode.onaudioprocess = () => {};\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Cleanup potentially acquired resources.\n     *\n     * @returns {void}\n     */\n    _cleanupResources() {\n        this._disconnectAudioGraph();\n        this._localTrack.stopStream();\n    }\n\n    /**\n     * Get the associated track device ID.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._localTrack.getDeviceId();\n    }\n\n\n    /**\n     * Get the associated track label.\n     *\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this._localTrack.getDeviceLabel();\n    }\n\n    /**\n     * Start the emitter by connecting the audio graph.\n     *\n     * @returns {void}\n     */\n    start() {\n        this._connectAudioGraph();\n    }\n\n    /**\n     * Stops the emitter by disconnecting the audio graph.\n     *\n     * @returns {void}\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._bufferResidue = [];\n    }\n\n    /**\n     * Destroy TrackVADEmitter instance (release resources and stop callbacks).\n     *\n     * @returns {void}\n     */\n    destroy() {\n        if (this._destroyed) {\n            return;\n        }\n\n        this._cleanupResources();\n        this._destroyed = true;\n    }\n}\n","/**\n * Adapter that creates AudioContext objects depending on the browser.\n *\n * @returns {AudioContext} - Return a new AudioContext or undefined if the browser does not support it.\n */\nexport function createAudioContext(options) {\n    const AudioContextImpl = window.AudioContext || window.webkitAudioContext;\n\n    if (!AudioContextImpl) {\n        return undefined;\n    }\n\n    return new AudioContextImpl(options);\n}\n","/**\n * Indicates that the end-to-end round-trip-time for a participant has changed.\n */\nexport const E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed';\n","/**\n * A model for keeping track of each user's total\n * time as a dominant speaker. The model also\n * keeps track of the user's last known name\n * in case the user has left the meeting,\n * which is also tracked.\n */\nclass SpeakerStats {\n    /**\n     * Initializes a new SpeakerStats instance.\n     *\n     * @constructor\n     * @param {string} userId - The id of the user being tracked.\n     * @param {string} displayName - The name of the user being tracked.\n     * @param {boolean} isLocalStats - True if the stats model tracks\n     * the local user.\n     * @returns {void}\n     */\n    constructor(userId, displayName, isLocalStats) {\n        this._userId = userId;\n        this.setDisplayName(displayName);\n        this._isLocalStats = isLocalStats || false;\n        this.setDominantSpeaker(false);\n        this.totalDominantSpeakerTime = 0;\n        this._dominantSpeakerStart = 0;\n        this._hasLeft = false;\n    }\n\n    /**\n     * Get the user id being tracked.\n     *\n     * @returns {string} The user id.\n     */\n    getUserId() {\n        return this._userId;\n    }\n\n    /**\n     * Get the name of the user being tracked.\n     *\n     * @returns {string} The user name.\n     */\n    getDisplayName() {\n        return this.displayName;\n    }\n\n    /**\n     * Updates the last known name of the user being tracked.\n     *\n     * @param {string} - The user name.\n     * @returns {void}\n     */\n    setDisplayName(newName) {\n        this.displayName = newName;\n    }\n\n    /**\n     * Returns true if the stats are tracking the local user.\n     *\n     * @returns {boolean}\n     */\n    isLocalStats() {\n        return this._isLocalStats;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @returns {boolean}\n     */\n    isDominantSpeaker() {\n        return this._dominantSpeakerStart > 0;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @param {boolean} - If true, the user will being accumulating time\n     * as dominant speaker. If false, the user will not accumulate time\n     * and will record any time accumulated since starting as dominant speaker.\n     * @returns {void}\n     */\n    setDominantSpeaker(isNowDominantSpeaker) {\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker) {\n            this._dominantSpeakerStart = Date.now();\n        } else if (this.isDominantSpeaker() && !isNowDominantSpeaker) {\n            const now = Date.now();\n            const timeElapsed = now - this._dominantSpeakerStart;\n\n            this.totalDominantSpeakerTime += timeElapsed;\n            this._dominantSpeakerStart = 0;\n        }\n    }\n\n    /**\n     * Get how long the tracked user has been dominant speaker.\n     *\n     * @returns {number} - The speaker time in milliseconds.\n     */\n    getTotalDominantSpeakerTime() {\n        let total = this.totalDominantSpeakerTime;\n\n        if (this.isDominantSpeaker()) {\n            total += Date.now() - this._dominantSpeakerStart;\n        }\n\n        return total;\n    }\n\n    /**\n     * Get whether or not the user is still in the meeting.\n     *\n     * @returns {boolean} True if the user is no longer in the meeting.\n     */\n    hasLeft() {\n        return this._hasLeft;\n    }\n\n    /**\n     * Set the user as having left the meeting.\n     *\n     * @returns {void}\n     */\n    markAsHasLeft() {\n        this._hasLeft = true;\n        this.setDominantSpeaker(false);\n    }\n}\n\nmodule.exports = SpeakerStats;\n","import EventEmitter from 'events';\n\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport Statistics from './modules/statistics/statistics';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\n\nconst AUDIO_PERMISSION_NAME = 'microphone';\nconst PERMISSION_GRANTED_STATUS = 'granted';\nconst VIDEO_PERMISSION_NAME = 'camera';\n\n/**\n * Media devices utilities for Jitsi.\n */\nclass JitsiMediaDevices {\n    /**\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\n     * instance of this class.\n     */\n    constructor() {\n        this._eventEmitter = new EventEmitter();\n        this._permissions = {};\n\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            devices =>\n                this._eventEmitter.emit(\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\n                    devices));\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_AVAILABLE,\n            devices =>\n                this._logOutputDevice(\n                    this.getAudioOutputDevice(),\n                    devices));\n\n        // We would still want to update the permissions cache in case the permissions API is not supported.\n        RTC.addListener(\n            RTCEvents.PERMISSIONS_CHANGED,\n            permissions => this._handlePermissionsChange(permissions));\n\n        // Test if the W3C Permissions API is implemented and the 'camera' and 'microphone' permissions are\n        // implemented. If supported add onchange listeners.\n        this._permissionsApiSupported = new Promise(resolve => {\n            if (!navigator.permissions) {\n                resolve(false);\n\n                return;\n            }\n\n            const self = this;\n\n            const promises = [];\n\n            promises.push(navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.VIDEO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.VIDEO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            promises.push(navigator.permissions.query({ name: AUDIO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.AUDIO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.AUDIO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            Promise.all(promises).then(results => resolve(results.every(supported => supported)));\n\n        });\n    }\n\n\n    /**\n     * Parses a PermissionState object and returns true for granted and false otherwise.\n     *\n     * @param {PermissionState} permissionStatus - The PermissionState object retrieved from the Permissions API.\n     * @returns {boolean} - True for granted and false for denied.\n     * @throws {TypeError}\n     */\n    _parsePermissionState(permissionStatus = {}) {\n        // The status attribute is deprecated, and state\n        // should be used instead, but check both for now\n        // for backwards compatibility.\n        const status = permissionStatus.state || permissionStatus.status;\n\n        if (typeof status !== 'string') {\n            throw new TypeError();\n        }\n\n        return status === PERMISSION_GRANTED_STATUS;\n    }\n\n    /**\n     * Updates the local granted/denied permissions cache. A permissions might be\n     * granted, denied, or undefined. This is represented by having its media\n     * type key set to {@code true} or {@code false} respectively.\n     *\n     * @param {Object} permissions - Object with the permissions.\n     */\n    _handlePermissionsChange(permissions) {\n        const hasPermissionsChanged\n            = [ MediaType.AUDIO, MediaType.VIDEO ]\n                .some(type => type in permissions && permissions[type] !== this._permissions[type]);\n\n        if (hasPermissionsChanged) {\n            this._permissions = {\n                ...this._permissions,\n                ...permissions\n            };\n            this._eventEmitter.emit(JitsiMediaDevicesEvents.PERMISSIONS_CHANGED, this._permissions);\n\n            if (this._permissions[MediaType.AUDIO] || this._permissions[MediaType.VIDEO]) {\n                // Triggering device list update when the permissiions are granted in order to update\n                // the labels the devices.\n                // eslint-disable-next-line no-empty-function\n                this.enumerateDevices(() => {});\n            }\n        }\n    }\n\n    /**\n     * Gathers data and sends it to statistics.\n     * @param deviceID the device id to log\n     * @param devices list of devices\n     */\n    _logOutputDevice(deviceID, devices) {\n        const device\n            = devices.find(\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    /**\n     * Executes callback with list of media devices connected.\n     * @param {function} callback\n     */\n    enumerateDevices(callback) {\n        RTC.enumerateDevices(callback);\n    }\n\n    /**\n     * Checks if its possible to enumerate available cameras/micropones.\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     */\n    isDeviceListAvailable() {\n        return RTC.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return RTC.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Checks if the permission for the given device was granted.\n     *\n     * @param {'audio'|'video'} [type] - type of devices to check,\n     *      undefined stands for both 'audio' and 'video' together\n     * @returns {Promise<boolean>}\n     */\n    isDevicePermissionGranted(type) {\n        return new Promise(resolve => {\n            // Shortcut: first check if we already know the permission was\n            // granted.\n            if (type in this._permissions) {\n                resolve(this._permissions[type]);\n\n                return;\n            }\n\n            // Check using the Permissions API.\n            this._permissionsApiSupported.then(supported => {\n                if (!supported) {\n                    resolve(false);\n\n                    return;\n                }\n\n                const promises = [];\n\n                switch (type) {\n                case MediaType.VIDEO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    break;\n                case MediaType.AUDIO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                    break;\n                default:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                }\n\n                Promise.all(promises).then(\n                    results => resolve(results.every(permissionStatus => {\n                        try {\n                            return this._parsePermissionState(permissionStatus);\n                        } catch {\n                            return false;\n                        }\n                    })),\n                    () => resolve(false)\n                );\n            });\n        });\n    }\n\n    /**\n     * Returns true if it is possible to be simultaneously capturing audio\n     * from more than one device.\n     *\n     * @returns {boolean}\n     */\n    isMultipleAudioInputSupported() {\n        return !browser.isFirefox();\n    }\n\n    /**\n     * Returns currently used audio output device id, 'default' stands\n     * for default device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return RTC.getAudioOutputDevice();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\n     *      default device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\n\n        if (availableDevices.length > 0) {\n            // if we have devices info report device to stats\n            // normally this will not happen on startup as this method is called\n            // too early. This will happen only on user selection of new device\n            this._logOutputDevice(\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\n        }\n\n        return RTC.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Adds an event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    addEventListener(event, handler) {\n        this._eventEmitter.addListener(event, handler);\n    }\n\n    /**\n     * Removes event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    removeEventListener(event, handler) {\n        this._eventEmitter.removeListener(event, handler);\n    }\n\n    /**\n     * Emits an event.\n     * @param {string} event - event name\n     */\n    emitEvent(event, ...args) {\n        this._eventEmitter.emit(event, ...args);\n    }\n}\n\nexport default new JitsiMediaDevices();\n","const AuthenticationEvents = {\n    /**\n     * Event callback arguments:\n     * function(authenticationEnabled, userIdentity)\n     * authenticationEnabled - indicates whether authentication has been enabled\n     *                         in this session\n     * userIdentity - if user has been logged in then it contains user name. If\n     *                contains 'null' or 'undefined' then user is not logged in.\n     */\n    IDENTITY_UPDATED: 'authentication.identity_updated'\n};\n\nmodule.exports = AuthenticationEvents;\n","/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.7.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [], buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n   * @method hex\n   * @memberof md5\n   * @description Output hash as hex string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} Hex string\n   * @example\n   * md5.hex('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * md5('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method digest\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.digest('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method array\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.array('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method arrayBuffer\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method base64\n   * @memberof md5\n   * @description Output hash as base64 string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} base64 string\n   * @example\n   * md5.base64('The quick brown fox jumps over the lazy dog');\n   */\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n   * @method create\n   * @memberof md5\n   * @description Create Md5 object\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.create();\n   */\n  /**\n   * @method update\n   * @memberof md5\n   * @description Create and update Md5 object\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * var hash = md5.create();\n   * hash.update('The quick brown fox jumps over the lazy dog');\n   */\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n   * Md5 class\n   * @class Md5\n   * @description This is internal class.\n   * @see {@link md5.create}\n   */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | (code >> 6);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | (code >> 12);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              buffer8[i++] = 0xf0 | (code >> 18);\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a, b, c, d, bc, da, blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n   * @method hex\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.hex();\n   */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\n  };\n\n  /**\n   * @method toString\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.toString();\n   */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n   * @method digest\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.digest}\n   * @example\n   * hash.digest();\n   */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n    return [\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\n    ];\n  };\n\n  /**\n   * @method array\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.array}\n   * @example\n   * hash.array();\n   */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.buffer}\n   * @example\n   * hash.buffer();\n   */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n   * @method base64\n   * @memberof Md5\n   * @instance\n   * @description Output hash as base64 string\n   * @returns {String} base64 string\n   * @see {@link md5.base64}\n   * @example\n   * hash.base64();\n   */\n  Md5.prototype.base64 = function () {\n    var v1, v2, v3, base64Str = '', bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n        BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\n      '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n     * @method md5\b\n     * @description Md5 hash function, export to global in browsers.\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} md5 hashes\n     * @example\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n     *\n     * // It also supports UTF-8 encoding\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n     *\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n     */\n    root.md5 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n","/**\n * Derives a set of keys from the master key.\n * @param {CryptoKey} material - master key to derive from\n *\n * See https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.1\n */\nexport async function deriveKeys(material) {\n    const info = new ArrayBuffer();\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#HKDF\n    // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams\n    const encryptionKey = await crypto.subtle.deriveKey({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameEncryptionKey'),\n        hash: 'SHA-256',\n        info\n    }, material, {\n        name: 'AES-CTR',\n        length: 128\n    }, false, [ 'encrypt', 'decrypt' ]);\n    const authenticationKey = await crypto.subtle.deriveKey({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameAuthenticationKey'),\n        hash: 'SHA-256',\n        info\n    }, material, {\n        name: 'HMAC',\n        hash: 'SHA-256'\n    }, false, [ 'sign' ]);\n    const saltKey = await crypto.subtle.deriveBits({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameSaltKey'),\n        hash: 'SHA-256',\n        info\n    }, material, 128);\n\n    return {\n        material,\n        encryptionKey,\n        authenticationKey,\n        saltKey\n    };\n}\n\n/**\n * Ratchets a key. See\n * https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.5.1\n * @param {CryptoKey} material - base key material\n * @returns {ArrayBuffer} - ratcheted key material\n */\nexport async function ratchet(material) {\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits\n    return crypto.subtle.deriveBits({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameRatchetKey'),\n        hash: 'SHA-256',\n        info: new ArrayBuffer()\n    }, material, 256);\n}\n\n/**\n * Converts a raw key into a WebCrypto key object with default options\n * suitable for our usage.\n * @param {ArrayBuffer} keyBytes - raw key\n * @param {Array} keyUsages - key usages, see importKey documentation\n * @returns {CryptoKey} - the WebCrypto key.\n */\nexport async function importKey(keyBytes) {\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\n    return crypto.subtle.importKey('raw', keyBytes, 'HKDF', false, [ 'deriveBits', 'deriveKey' ]);\n}\n","/* global $ */\n\nimport { b64_sha1, Strophe } from 'strophe.js'; // eslint-disable-line camelcase\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport Listenable from '../util/Listenable';\n\n/**\n * The property\n */\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\nconst HASH = 'sha-1';\n\n/**\n *\n * @param a\n * @param b\n */\nfunction compareIdentities(a, b) {\n    let res = 0;\n\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\n    );\n\n    return res;\n}\n\n/**\n * Produces a sha-1 from provided identity and features values.\n *\n * @param {Array<Object>} identities - The identity objects.\n * @param {Array<string>} features - The features.\n * @returns {string}\n */\nfunction generateSha(identities, features) {\n    const sortedIdentities = identities.sort(compareIdentities).reduce(\n        (accumulatedValue, identity) => `${\n            IDENTITY_PROPERTIES.reduce(\n                (tmp, key, idx) =>\n                    tmp\n                        + (idx === 0 ? '' : '/')\n                        + (identity[key] ? identity[key] : ''),\n                '')\n        }<`, '');\n    const sortedFeatures = features.sort().reduce(\n        (tmp, feature) => `${tmp + feature}<`, '');\n\n    return b64_sha1(sortedIdentities + sortedFeatures);\n}\n\n/**\n * Parses the disco-info node and returns the sets of features and identities.\n * @param {String} node The node with results to parse.\n * @returns {{features: Set<any>, identities: Set<any>}}\n */\nexport function parseDiscoInfo(node) {\n    const features = new Set();\n    const identities = new Set();\n\n    $(node).find('>query>feature')\n        .each((_, el) => features.add(el.getAttribute('var')));\n    $(node).find('>query>identity')\n        .each((_, el) => identities.add({\n            type: el.getAttribute('type'),\n            name: el.getAttribute('name'),\n            category: el.getAttribute('category')\n        }));\n\n    return {\n        features,\n        identities\n    };\n}\n\n/**\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\n */\nexport default class Caps extends Listenable {\n    /**\n     * Constructs new Caps instance.\n     * @param {Strophe.Connection} connection the strophe connection object\n     * @param {String} node the value of the node attribute of the \"c\" xml node\n     * that will be sent to the other participants\n     */\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\n        super();\n        this.node = node;\n        this.disco = connection.disco;\n        if (!this.disco) {\n            throw new Error(\n                'Missing strophe-plugins '\n                + '(disco plugin is required)!');\n        }\n\n        this.version = '';\n        this.rooms = new Set();\n\n        // We keep track of features added outside the library and we publish them\n        // in the presence of the participant for simplicity, avoiding the disco info request-response.\n        this.externalFeatures = new Set();\n\n        const emuc = connection.emuc;\n\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\n            room => this._addChatRoom(room));\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\n            room => this._removeChatRoom(room));\n        Object.keys(emuc.rooms).forEach(jid => {\n            this._addChatRoom(emuc.rooms[jid]);\n        });\n\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\n        this.disco.addFeature(Strophe.NS.CAPS);\n    }\n\n    /**\n     * Adds new feature to the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     * We put features used directly by the clients (is jibri, remote-control enabled etc.) in the presence\n     * to avoid additional disco-info queries by those clients.\n     */\n    addFeature(feature, submit = false, external = false) {\n        this.disco.addFeature(feature);\n        this._generateVersion();\n\n        if (external && !this.externalFeatures.has(feature)) {\n            this.externalFeatures.add(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Removes a feature from the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     */\n    removeFeature(feature, submit = false, external = false) {\n        this.disco.removeFeature(feature);\n        this._generateVersion();\n\n        if (external && this.externalFeatures.has(feature)) {\n            this.externalFeatures.delete(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Sends new presence stanza for every room from the list of rooms.\n     */\n    submit() {\n        this.rooms.forEach(room => room.sendPresence());\n    }\n\n    /**\n     * Updates the presences in the room based on the current values in externalFeatures.\n     * @param {ChatRoom} room the room to update.\n     * @private\n     */\n    _updateRoomWithExternalFeatures(room) {\n        if (this.externalFeatures.size === 0) {\n            room.removeFromPresence('features');\n        } else {\n            const children = [];\n\n            this.externalFeatures.forEach(f => {\n                children.push({\n                    'tagName': 'feature',\n                    attributes: { 'var': f }\n                });\n            });\n\n            room.addOrReplaceInPresence('features', { children });\n        }\n    }\n\n    /**\n     * Returns a set with the features for a host.\n     * @param {String} jid the jid of the host\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeaturesAndIdentities(jid, node, timeout = 5000) {\n        return this._getDiscoInfo(jid, node, timeout);\n    }\n\n    /**\n     * Returns a set with the features and identities for a host.\n     * @param {String} jid the jid of the host\n     * @param {String|null} node the node to query\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Object>}\n     * @private\n     */\n    _getDiscoInfo(jid, node, timeout) {\n        return new Promise((resolve, reject) =>\n            this.disco.info(jid, node, response => {\n                resolve(parseDiscoInfo(response));\n            }, reject, timeout)\n        );\n    }\n\n    /**\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\n     * and adds \"c\" element to the presences of the room.\n     * @param {ChatRoom} room the room.\n     */\n    _addChatRoom(room) {\n        this.rooms.add(room);\n        this._fixChatRoomPresenceMap(room);\n\n        this._updateRoomWithExternalFeatures(room);\n    }\n\n    /**\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\n     * added from the Caps class.\n     * @param {ChatRoom} room the room.\n     */\n    _removeChatRoom(room) {\n        this.rooms.delete(room);\n    }\n\n    /**\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\n     * @param {ChatRoom} room the room.\n     */\n    _fixChatRoomPresenceMap(room) {\n        room.addOrReplaceInPresence('c', {\n            attributes: {\n                xmlns: Strophe.NS.CAPS,\n                hash: HASH,\n                node: this.node,\n                ver: this.version\n            }\n        });\n    }\n\n    /**\n     * Handles this.version changes.\n     */\n    _notifyVersionChanged() {\n        // update the version for all rooms\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\n    }\n\n    /**\n     * Generates the value for the \"ver\" attribute.\n     */\n    _generateVersion() {\n        this.version\n            = generateSha(this.disco._identities, this.disco._features);\n\n        this._notifyVersionChanged();\n    }\n}\n","/* global __filename, Promise */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport {\n    TRACK_IS_DISPOSED,\n    TRACK_NO_STREAM_FOUND\n} from '../../JitsiTrackErrors';\nimport {\n    LOCAL_TRACK_STOPPED,\n    NO_DATA_FROM_SOURCE,\n    TRACK_MUTE_CHANGED\n} from '../../JitsiTrackEvents';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport VideoType from '../../service/RTC/VideoType';\nimport {\n    NO_BYTES_SENT,\n    TRACK_UNMUTED,\n    createNoDataFromSourceEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a single media track(either audio or video).\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\n */\nexport default class JitsiLocalTrack extends JitsiTrack {\n    /**\n     * Constructs new JitsiLocalTrack instance.\n     *\n     * @constructor\n     * @param {Object} trackInfo\n     * @param {number} trackInfo.rtcId the ID assigned by the RTC module\n     * @param trackInfo.stream WebRTC MediaStream, parent of the track\n     * @param trackInfo.track underlying WebRTC MediaStreamTrack for new\n     * JitsiRemoteTrack\n     * @param trackInfo.mediaType the MediaType of the JitsiRemoteTrack\n     * @param trackInfo.videoType the VideoType of the JitsiRemoteTrack\n     * @param trackInfo.effects the effects array contains the effect instance to use\n     * @param trackInfo.resolution the video resolution if it's a video track\n     * @param trackInfo.deviceId the ID of the local device for this track\n     * @param trackInfo.facingMode the camera facing mode used in getUserMedia\n     * call\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing\n     * source. NOTE: defined for desktop sharing tracks only.\n     */\n    constructor({\n        deviceId,\n        facingMode,\n        mediaType,\n        resolution,\n        rtcId,\n        sourceId,\n        sourceType,\n        stream,\n        track,\n        videoType,\n        effects = []\n    }) {\n        super(\n            /* conference */ null,\n            stream,\n            track,\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED),\n            mediaType,\n            videoType);\n\n        this._setEffectInProgress = false;\n        const effect = effects.find(e => e.isEnabled(this));\n\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n\n        /**\n         * The ID assigned by the RTC module on instance creation.\n         *\n         * @type {number}\n         */\n        this.rtcId = rtcId;\n        this.sourceId = sourceId;\n        this.sourceType = sourceType;\n\n        if (browser.usesNewGumFlow()) {\n            // Get the resolution from the track itself because it cannot be\n            // certain which resolution webrtc has fallen back to using.\n            this.resolution = track.getSettings().height;\n            this.maxEnabledResolution = resolution;\n\n            // Cache the constraints of the track in case of any this track\n            // model needs to call getUserMedia again, such as when unmuting.\n            this._constraints = track.getConstraints();\n\n            // Safari returns an empty constraints object, construct the constraints using getSettings.\n            if (!Object.keys(this._constraints).length && videoType === VideoType.CAMERA) {\n                this._constraints = {\n                    height: track.getSettings().height,\n                    width: track.getSettings().width\n                };\n            }\n        } else {\n            // FIXME Currently, Firefox is ignoring our constraints about\n            // resolutions so we do not store it, to avoid wrong reporting of\n            // local track resolution.\n            this.resolution = browser.isFirefox() ? null : resolution;\n            this.maxEnabledResolution = this.resolution;\n        }\n\n        this.deviceId = deviceId;\n\n        /**\n         * The <tt>Promise</tt> which represents the progress of a previously\n         * queued/scheduled {@link _setMuted} (from the point of view of\n         * {@link _queueSetMuted}).\n         *\n         * @private\n         * @type {Promise}\n         */\n        this._prevSetMuted = Promise.resolve();\n\n        /**\n         * The facing mode of the camera from which this JitsiLocalTrack\n         * instance was obtained.\n         *\n         * @private\n         * @type {CameraFacingMode|undefined}\n         */\n        this._facingMode = facingMode;\n\n        // Currently there is no way to know the MediaStreamTrack ended due to\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\n        // Instead we will compare current track's label with device labels from\n        // enumerateDevices() list.\n        this._trackEnded = false;\n\n        /**\n         * Indicates whether data has been sent or not.\n         */\n        this._hasSentData = false;\n\n        /**\n         * Used only for detection of audio problems. We want to check only once\n         * whether the track is sending data ot not. This flag is set to false\n         * after the check.\n         */\n        this._testDataSent = true;\n\n        // Currently there is no way to determine with what device track was\n        // created (until getConstraints() support), however we can associate\n        // tracks with real devices obtained from enumerateDevices() call as\n        // soon as it's called.\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\n        // correspond to the id of a matching device from the available device list.\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\n\n        this._trackMutedTS = 0;\n\n        this._onDeviceListWillChange = devices => {\n            const oldRealDeviceId = this._realDeviceId;\n\n            this._setRealDeviceIdFromDeviceList(devices);\n\n            if (\n                // Mark track as ended for those browsers that do not support\n                // \"readyState\" property. We do not touch tracks created with\n                // default device ID \"\".\n                (typeof this.getTrack().readyState === 'undefined'\n                    && typeof this._realDeviceId !== 'undefined'\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\n\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\n                // addition on some Chrome versions the readyState property is set after the device change event is\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\n                // detect that the old one was removed.\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\n            ) {\n                this._trackEnded = true;\n            }\n        };\n\n        // Subscribe each created local audio track to\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\n        // handling this event for remote tracks (which are handled in RTC.js),\n        // because there might be local tracks not attached to a conference.\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        this._initNoDataFromSourceHandlers();\n    }\n\n    /**\n     * Returns if associated MediaStreamTrack is in the 'ended' state\n     *\n     * @returns {boolean}\n     */\n    isEnded() {\n        if (this.isVideoTrack() && this.isMuted()) {\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\n            // _trackEnded flag.\n            return this._trackEnded;\n        }\n\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\n    }\n\n    /**\n     * Sets handlers to the MediaStreamTrack object that will detect camera\n     * issues.\n     */\n    _initNoDataFromSourceHandlers() {\n        if (!this._isNoDataFromSourceEventsEnabled()) {\n            return;\n        }\n\n        this._setHandler('track_mute', () => {\n            this._trackMutedTS = window.performance.now();\n            this._fireNoDataFromSourceEvent();\n        });\n\n        this._setHandler('track_unmute', () => {\n            this._fireNoDataFromSourceEvent();\n            Statistics.sendAnalyticsAndLog(\n                TRACK_UNMUTED,\n                {\n                    'media_type': this.getType(),\n                    'track_type': 'local',\n                    value: window.performance.now() - this._trackMutedTS\n                });\n        });\n\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            this._setHandler('track_ended', () => {\n                if (!this.isReceivingData()) {\n                    this._fireNoDataFromSourceEvent();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns true if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     *\n     * @returns {boolean} - True if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     */\n    _isNoDataFromSourceEventsEnabled() {\n        // Disable the events for screen sharing.\n        return !this.isVideoTrack() || this.videoType !== VideoType.DESKTOP;\n    }\n\n    /**\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\n     */\n    _fireNoDataFromSourceEvent() {\n        const value = !this.isReceivingData();\n\n        this.emit(NO_DATA_FROM_SOURCE, value);\n\n        // FIXME: Should we report all of those events\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType(), value));\n        Statistics.sendLog(JSON.stringify({\n            name: NO_DATA_FROM_SOURCE,\n            log: value\n        }));\n    }\n\n    /**\n     * Sets real device ID by comparing track information with device\n     * information. This is temporary solution until getConstraints() method\n     * will be implemented in browsers.\n     *\n     * @param {MediaDeviceInfo[]} devices - list of devices obtained from\n     * enumerateDevices() call\n     */\n    _setRealDeviceIdFromDeviceList(devices) {\n        const track = this.getTrack();\n        const kind = `${track.kind}input`;\n        let device = devices.find(d => d.kind === kind && d.label === track.label);\n\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\n            // why in order to match it we need to remove the 'Default - ' part.\n            const label = (track.label || '').replace('Default - ', '');\n\n            device = devices.find(d => d.kind === kind && d.label === label);\n        }\n\n        if (device) {\n            this._realDeviceId = device.deviceId;\n        } else {\n            this._realDeviceId = undefined;\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiLocalTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        super._setStream(stream);\n\n        if (stream) {\n            // Store the MSID for video mute/unmute purposes.\n            this.storedMSID = this.getMSID();\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\n        } else {\n            logger.debug(`Setting 'null' stream on ${this}`);\n        }\n    }\n\n    /**\n     * Starts the effect process and returns the modified stream.\n     *\n     * @private\n     * @param {*} effect - Represents effect instance\n     * @returns {void}\n     */\n    _startStreamEffect(effect) {\n        this._streamEffect = effect;\n        this._originalStream = this.stream;\n        this._setStream(this._streamEffect.startEffect(this._originalStream));\n        this.track = this.stream.getTracks()[0];\n    }\n\n    /**\n     * Stops the effect process and returns the original stream.\n     *\n     * @private\n     * @returns {void}\n     */\n    _stopStreamEffect() {\n        if (this._streamEffect) {\n            this._streamEffect.stopEffect();\n            this._setStream(this._originalStream);\n            this._originalStream = null;\n            this.track = this.stream ? this.stream.getTracks()[0] : null;\n        }\n    }\n\n    /**\n     * Stops the currently used effect (if there is one) and starts the passed effect (if there is one).\n     *\n     * @param {Object|undefined} effect - The new effect to be set.\n     */\n    _switchStreamEffect(effect) {\n        if (this._streamEffect) {\n            this._stopStreamEffect();\n            this._streamEffect = undefined;\n        }\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n    }\n\n    /**\n     * Sets the effect and switches between the modified stream and original one.\n     *\n     * @param {Object} effect - Represents the effect instance to be used.\n     * @returns {Promise}\n     */\n    setEffect(effect) {\n        if (typeof this._streamEffect === 'undefined' && typeof effect === 'undefined') {\n            return Promise.resolve();\n        }\n\n        if (typeof effect !== 'undefined' && !effect.isEnabled(this)) {\n            return Promise.reject(new Error('Incompatible effect instance!'));\n        }\n\n        if (this._setEffectInProgress === true) {\n            return Promise.reject(new Error('setEffect already in progress!'));\n        }\n\n        // In case we have an audio track that is being enhanced with an effect, we still want it to be applied,\n        // even if the track is muted. Where as for video the actual track doesn't exists if it's muted.\n        if (this.isMuted() && !this.isAudioTrack()) {\n            this._streamEffect = effect;\n\n            return Promise.resolve();\n        }\n\n        const conference = this.conference;\n\n        if (!conference) {\n            this._switchStreamEffect(effect);\n            if (this.isVideoTrack()) {\n                this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n            }\n\n            return Promise.resolve();\n        }\n\n        this._setEffectInProgress = true;\n\n        if (browser.usesUnifiedPlan()) {\n            this._switchStreamEffect(effect);\n            if (this.isVideoTrack()) {\n                this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n            }\n\n            return conference.replaceTrack(this, this)\n                .then(() => {\n                    this._setEffectInProgress = false;\n                })\n                .catch(error => {\n                    this._setEffectInProgress = false;\n                    this._switchStreamEffect();\n                    logger.error('Failed to switch to the new stream!', error);\n                    throw error;\n                });\n        }\n\n        // TODO: Create new JingleSessionPC method for replacing a stream in JitsiLocalTrack without offer answer.\n        return conference.removeTrack(this)\n            .then(() => {\n                this._switchStreamEffect(effect);\n                if (this.isVideoTrack()) {\n                    this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n                }\n\n                return conference.addTrack(this);\n            })\n            .then(() => {\n                this._setEffectInProgress = false;\n            })\n            .catch(error => {\n                // Any error will be not recovarable and will trigger CONFERENCE_FAILED event. But let's try to cleanup\n                // everyhting related to the effect functionality.\n                this._setEffectInProgress = false;\n                this._switchStreamEffect();\n                logger.error('Failed to switch to the new stream!', error);\n                throw error;\n            });\n    }\n\n    /**\n     * Asynchronously mutes this track.\n     *\n     * @returns {Promise}\n     */\n    mute() {\n        return this._queueSetMuted(true);\n    }\n\n    /**\n     * Asynchronously unmutes this track.\n     *\n     * @returns {Promise}\n     */\n    unmute() {\n        return this._queueSetMuted(false);\n    }\n\n    /**\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called\n     * multiple times in a row and the invocations of {@link #_setMuted} and,\n     * consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\n     * serialized fashion.\n     *\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\n     * @returns {Promise}\n     */\n    _queueSetMuted(muted) {\n        const setMuted = this._setMuted.bind(this, muted);\n\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\n\n        return this._prevSetMuted;\n    }\n\n    /**\n     * Mutes / unmutes this track.\n     *\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted;\n     * otherwise, this track will be unmuted.\n     * @private\n     * @returns {Promise}\n     */\n    _setMuted(muted) {\n        if (this.isMuted() === muted) {\n            return Promise.resolve();\n        }\n\n        if (this.disposed) {\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\n        }\n\n        let promise = Promise.resolve();\n\n        // A function that will print info about muted status transition\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\n\n        if (this.isAudioTrack()\n                || this.videoType === VideoType.DESKTOP\n                || !browser.doesVideoMuteByStreamRemove()) {\n            logMuteInfo();\n\n            // If we have a stream effect that implements its own mute functionality, prioritize it before\n            // normal mute e.g. the stream effect that implements system audio sharing has a custom\n            // mute state in which if the user mutes, system audio still has to go through.\n            if (this._streamEffect && this._streamEffect.setMuted) {\n                this._streamEffect.setMuted(muted);\n            } else if (this.track) {\n                this.track.enabled = !muted;\n            }\n        } else if (muted) {\n            promise = new Promise((resolve, reject) => {\n                logMuteInfo();\n                this._removeStreamFromConferenceAsMute(\n                    () => {\n                        if (this._streamEffect) {\n                            this._stopStreamEffect();\n                        }\n\n                        // FIXME: Maybe here we should set the SRC for the\n                        // containers to something\n                        // We don't want any events to be fired on this stream\n                        this._unregisterHandlers();\n                        this.stopStream();\n                        this._setStream(null);\n                        resolve();\n                    },\n                    reject);\n            });\n        } else {\n            logMuteInfo();\n\n            // This path is only for camera.\n            const streamOptions = {\n                cameraDeviceId: this.getDeviceId(),\n                devices: [ MediaType.VIDEO ],\n                effects: this._streamEffect ? [ this._streamEffect ] : [],\n                facingMode: this.getCameraFacingMode()\n            };\n\n            if (browser.usesNewGumFlow()) {\n                promise\n                    = RTCUtils.newObtainAudioAndVideoPermissions(Object.assign(\n                        {},\n                        streamOptions,\n                        { constraints: { video: this._constraints } }));\n            } else {\n                if (this.resolution) {\n                    streamOptions.resolution = this.resolution;\n                }\n\n                promise\n                    = RTCUtils.obtainAudioAndVideoPermissions(streamOptions);\n            }\n\n            promise = promise.then(streamsInfo => {\n                // The track kind for presenter track is video as well.\n                const mediaType = this.getType() === MediaType.PRESENTER ? MediaType.VIDEO : this.getType();\n                const streamInfo\n                    = browser.usesNewGumFlow()\n                        ? streamsInfo.find(\n                            info => info.track.kind === mediaType)\n                        : streamsInfo.find(\n                            info => info.mediaType === mediaType);\n\n                if (streamInfo) {\n                    this._setStream(streamInfo.stream);\n                    this.track = streamInfo.track;\n\n                    // This is not good when video type changes after\n                    // unmute, but let's not crash here\n                    if (this.videoType !== streamInfo.videoType) {\n                        logger.warn(\n                            `${this}: video type has changed after unmute!`,\n                            this.videoType, streamInfo.videoType);\n                        this.videoType = streamInfo.videoType;\n                    }\n                } else {\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\n                }\n\n                if (this._streamEffect) {\n                    this._startStreamEffect(this._streamEffect);\n                }\n\n                this.containers.map(\n                    cont => RTCUtils.attachMediaStream(cont, this.stream));\n\n                return this._addStreamToConferenceAsUnmute();\n            });\n        }\n\n        return promise\n            .then(() => this._sendMuteStatus(muted))\n            .then(() => this.emit(TRACK_MUTE_CHANGED, this));\n    }\n\n    /**\n     * Adds stream to conference and marks it as \"unmute\" operation.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _addStreamToConferenceAsUnmute() {\n        if (!this.conference) {\n            return Promise.resolve();\n        }\n\n        // FIXME it would be good to not included conference as part of this\n        // process. Only TraceablePeerConnections to which the track is attached\n        // should care about this action. The TPCs to which the track is not\n        // attached can sync up when track is re-attached.\n        // A problem with that is that the \"modify sources\" queue is part of\n        // the JingleSessionPC and it would be excluded from the process. One\n        // solution would be to extract class between TPC and JingleSessionPC\n        // which would contain the queue and would notify the signaling layer\n        // when local SSRCs are changed. This would help to separate XMPP from\n        // the RTC module.\n        return new Promise((resolve, reject) => {\n            this.conference._addLocalTrackAsUnmute(this)\n                .then(resolve, error => reject(new Error(error)));\n        });\n    }\n\n    /**\n     * Removes stream from conference and marks it as \"mute\" operation.\n     *\n     * @param {Function} successCallback will be called on success\n     * @param {Function} errorCallback will be called on error\n     * @private\n     */\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\n        if (!this.conference) {\n            successCallback();\n\n            return;\n        }\n        this.conference._removeLocalTrackAsMute(this).then(\n            successCallback,\n            error => errorCallback(new Error(error)));\n    }\n\n    /**\n     * Sends mute status for a track to conference if any.\n     *\n     * @param {boolean} mute - If track is muted.\n     * @private\n     * @returns {Promise}\n     */\n    _sendMuteStatus(mute) {\n        if (!this.conference || !this.conference.room) {\n            return Promise.resolve();\n        }\n\n        return new Promise(resolve => {\n            this.conference.room[\n                this.isAudioTrack()\n                    ? 'setAudioMute'\n                    : 'setVideoMute'](mute, resolve);\n        });\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * Stops sending the media track. And removes it from the HTML.\n     * NOTE: Works for local tracks only.\n     *\n     * @extends JitsiTrack#dispose\n     * @returns {Promise}\n     */\n    dispose() {\n        let promise = Promise.resolve();\n\n        // Remove the effect instead of stopping it so that the original stream is restored\n        // on both the local track and on the peerconnection.\n        if (this._streamEffect) {\n            promise = this.setEffect();\n        }\n\n        if (this.conference) {\n            promise = promise.then(() => this.conference.removeTrack(this));\n        }\n\n        if (this.stream) {\n            this.stopStream();\n            this.detach();\n        }\n\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        if (this._onAudioOutputDeviceChanged) {\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        return promise.then(() => super.dispose());\n    }\n\n    /**\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt>\n     * otherwise.\n     *\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and\n     * <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        // this.stream will be null when we mute local video on Chrome\n        if (!this.stream) {\n            return true;\n        }\n        if (this.isVideoTrack() && !this.isActive()) {\n            return true;\n        }\n\n        // If currently used stream effect has its own muted state, use that.\n        if (this._streamEffect && this._streamEffect.isMuted) {\n            return this._streamEffect.isMuted();\n        }\n\n        return !this.track || !this.track.enabled;\n    }\n\n    /**\n     * Sets the JitsiConference object associated with the track. This is temp\n     * solution.\n     *\n     * @param conference the JitsiConference object\n     */\n    _setConference(conference) {\n        this.conference = conference;\n\n        // We want to keep up with postponed events which should have been fired\n        // on \"attach\" call, but for local track we not always have the\n        // conference before attaching. However this may result in duplicated\n        // events if they have been triggered on \"attach\" already.\n        for (let i = 0; i < this.containers.length; i++) {\n            this._maybeFireTrackAttached(this.containers[i]);\n        }\n    }\n\n    /**\n     * Returns <tt>true</tt>.\n     *\n     * @returns {boolean} <tt>true</tt>\n     */\n    isLocal() {\n        return true;\n    }\n\n    /**\n     * Returns device id associated with track.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._realDeviceId || this.deviceId;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.conference && this.conference.myUserId();\n    }\n\n    /**\n     * Handles bytes sent statistics.\n     *\n     * @param {TraceablePeerConnection} tpc the source of the \"bytes sent\" stat\n     * @param {number} bytesSent the new value\n     * NOTE: used only for audio tracks to detect audio issues.\n     */\n    _onByteSentStatsReceived(tpc, bytesSent) {\n        if (bytesSent > 0) {\n            this._hasSentData = true;\n        }\n        const iceConnectionState = tpc.getConnectionState();\n\n        if (this._testDataSent && iceConnectionState === 'connected') {\n            setTimeout(() => {\n                if (!this._hasSentData) {\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\n                        ${bytesSent}`);\n\n                    Statistics.analytics.sendEvent(NO_BYTES_SENT, { 'media_type': this.getType() });\n                }\n            }, 3000);\n            this._testDataSent = false;\n        }\n    }\n\n    /**\n     * Returns facing mode for video track from camera. For other cases (e.g.\n     * audio track or 'desktop' video track) returns undefined.\n     *\n     * @returns {CameraFacingMode|undefined}\n     */\n    getCameraFacingMode() {\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            // MediaStreamTrack#getSettings() is not implemented in many\n            // browsers, so we need feature checking here. Progress on the\n            // respective browser's implementation can be tracked at\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\n            // for Firefox. Even if a browser implements getSettings() already,\n            // it might still not return anything for 'facingMode'.\n            let trackSettings;\n\n            try {\n                trackSettings = this.track.getSettings();\n            } catch (e) {\n                // XXX React-native-webrtc, for example, defines\n                // MediaStreamTrack#getSettings() but the implementation throws\n                // a \"Not implemented\" Error.\n            }\n            if (trackSettings && 'facingMode' in trackSettings) {\n                return trackSettings.facingMode;\n            }\n\n            if (typeof this._facingMode !== 'undefined') {\n                return this._facingMode;\n            }\n\n            // In most cases we are showing a webcam. So if we've gotten here,\n            // it should be relatively safe to assume that we are probably\n            // showing the user-facing camera.\n            return CameraFacingMode.USER;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Stops the associated MediaStream.\n     */\n    stopStream() {\n        /**\n         * Indicates that we are executing {@link #stopStream} i.e.\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\n         * associated with this <tt>JitsiTrack</tt> instance.\n         *\n         * @private\n         * @type {boolean}\n         */\n        this._stopStreamInProgress = true;\n\n        try {\n            RTCUtils.stopMediaStream(this.stream);\n        } finally {\n            this._stopStreamInProgress = false;\n        }\n    }\n\n    /**\n     * Switches the camera facing mode if the WebRTC implementation supports the\n     * custom MediaStreamTrack._switchCamera method. Currently, the method in\n     * question is implemented in react-native-webrtc only. When such a WebRTC\n     * implementation is executing, the method is the preferred way to switch\n     * between the front/user-facing and the back/environment-facing cameras\n     * because it will likely be (as is the case of react-native-webrtc)\n     * noticeably faster that creating a new MediaStreamTrack via a new\n     * getUserMedia call with the switched facingMode constraint value.\n     * Moreover, the approach with a new getUserMedia call may not even work:\n     * WebRTC on Android and iOS is either very slow to open the camera a second\n     * time or plainly freezes attempting to do that.\n     */\n    _switchCamera() {\n        if (this.isVideoTrack()\n                && this.videoType === VideoType.CAMERA\n                && typeof this.track._switchCamera === 'function') {\n            this.track._switchCamera();\n\n            this._facingMode\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\n                    ? CameraFacingMode.USER\n                    : CameraFacingMode.ENVIRONMENT;\n        }\n    }\n\n    /**\n     * Checks whether the attached MediaStream is receiving data from source or\n     * not. If the stream property is null(because of mute or another reason)\n     * this method will return false.\n     * NOTE: This method doesn't indicate problem with the streams directly.\n     * For example in case of video mute the method will return false or if the\n     * user has disposed the track.\n     *\n     * @returns {boolean} true if the stream is receiving data and false\n     * this otherwise.\n     */\n    isReceivingData() {\n        if (this.isVideoTrack()\n            && (this.isMuted() || this._stopStreamInProgress || this.videoType === VideoType.DESKTOP)) {\n            return true;\n        }\n\n        if (!this.stream) {\n            return false;\n        }\n\n        // In older version of the spec there is no muted property and\n        // readyState can have value muted. In the latest versions\n        // readyState can have values \"live\" and \"ended\" and there is\n        // muted boolean property. If the stream is muted that means that\n        // we aren't receiving any data from the source. We want to notify\n        // the users for error if the stream is muted or ended on it's\n        // creation.\n\n        // For video blur enabled use the original video stream\n        const stream = this._effectEnabled ? this._originalStream : this.stream;\n\n        return stream.getTracks().some(track =>\n            (!('readyState' in track) || track.readyState === 'live')\n                && (!('muted' in track) || track.muted !== true));\n    }\n\n    /**\n     * Creates a text representation of this local track instance.\n     *\n     * @return {string}\n     */\n    toString() {\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\n    }\n}\n","import { EventEmitter } from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { VAD_SCORE_PUBLISHED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\nimport TrackVADEmitter from './TrackVADEmitter';\n\nconst logger = getLogger(__filename);\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\nconst VAD_EMITTER_SAMPLE_RATE = 4096;\n\n/**\n * Connects a TrackVADEmitter to the target conference local audio track and manages various services that use\n * the data to produce audio analytics (VADTalkMutedDetection and VADNoiseDetection).\n */\nexport default class VADAudioAnalyser extends EventEmitter {\n    /**\n     * Creates <tt>VADAudioAnalyser</tt>\n     * @param {JitsiConference} conference - JitsiConference instance that created us.\n     * @param {Object} createVADProcessor - Function that creates a Voice activity detection processor. The processor\n     * needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @constructor\n     */\n    constructor(conference, createVADProcessor) {\n        super();\n\n        /**\n         * Member function that instantiates a VAD processor.\n         */\n        this._createVADProcessor = createVADProcessor;\n\n        /**\n         * Current {@link TrackVADEmitter}. VAD Emitter uses a {@link JitsiLocalTrack} and VAD processor to generate\n         * period voice probability scores.\n         */\n        this._vadEmitter = null;\n\n        /**\n         * Current state of the _vadEmitter\n         */\n        this._isVADEmitterRunning = false;\n\n        /**\n         * Array of currently attached VAD processing services.\n         */\n        this._detectionServices = [];\n\n        /**\n         * Promise used to chain create and destroy operations associated with TRACK_ADDED and TRACK_REMOVED events\n         * coming from the conference.\n         * Because we have an async created component (VAD Processor) we need to make sure that it's initialized before\n         * we destroy it ( when changing the device for instance), or when we use it from an external point of entry\n         * i.e. (TRACK_MUTE_CHANGED event callback).\n         */\n        this._vadInitTracker = Promise.resolve();\n\n        /**\n         * Listens for {@link TrackVADEmitter} events and processes them.\n         */\n        this._processVADScore = this._processVADScore.bind(this);\n\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_REMOVED, this._trackRemoved.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED, this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Attach a VAD detector service to the analyser and handle it's state changes.\n     *\n     * @param {Object} vadTMDetector\n     */\n    addVADDetectionService(vadService) {\n        this._detectionServices.push(vadService);\n        vadService.on(DETECTOR_STATE_CHANGE, () => {\n            // When the state of a detector changes check if there are any active detectors attached so that\n            // the _vadEmitter doesn't run needlessly.\n            const activeDetector = this._detectionServices.filter(detector => detector.isActive() === true);\n\n            // If there are no active detectors running and the vadEmitter is running then stop the emitter as it is\n            // uses a considerable amount of CPU. Otherwise start the service if it's stopped and there is a detector\n            // that needs it.\n            if (!activeDetector.length && this._isVADEmitterRunning) {\n                this._stopVADEmitter();\n            } else if (!this._isVADEmitterRunning) {\n                this._startVADEmitter();\n            }\n        });\n    }\n\n    /**\n     * Start the {@link TrackVADEmitter} and attach the event listener.\n     * @returns {void}\n     */\n    _startVADEmitter() {\n        this._vadEmitter.on(VAD_SCORE_PUBLISHED, this._processVADScore);\n        this._vadEmitter.start();\n        this._isVADEmitterRunning = true;\n    }\n\n    /**\n     * Stop the {@link TrackVADEmitter} and detach the event listener.\n     * @returns {void}\n     */\n    _stopVADEmitter() {\n        this._vadEmitter.removeListener(VAD_SCORE_PUBLISHED, this._processVADScore);\n        this._vadEmitter.stop();\n        this._isVADEmitterRunning = false;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and directs them to attached services as needed.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    _processVADScore(vadScore) {\n        for (const detector of this._detectionServices) {\n            detector.processVADScore(vadScore);\n        }\n    }\n\n    /**\n     * Change the isMuted state of all attached detection services.\n     *\n     * @param {boolean} isMuted\n     */\n    _changeDetectorsMuteState(isMuted) {\n        for (const detector of this._detectionServices) {\n            detector.changeMuteState(isMuted);\n        }\n    }\n\n    /**\n     * Notifies the detector that a track was added to the associated {@link JitsiConference}.\n     * Only take into account local audio tracks.\n     * @param {JitsiTrack} track - The added track.\n     * @returns {void}\n     * @listens TRACK_ADDED\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Keep a track promise so we take into account successive TRACK_ADD events being generated so that we\n            // destroy/create the processing context in the proper order.\n            this._vadInitTracker = this._vadInitTracker.then(() => this._createVADProcessor())\n                .then(vadProcessor =>\n                    TrackVADEmitter.create(track.getDeviceId(), VAD_EMITTER_SAMPLE_RATE, vadProcessor)\n                )\n                .then(vadEmitter => {\n                    logger.debug('Created VAD emitter for track: ', track.getTrackLabel());\n\n                    this._vadEmitter = vadEmitter;\n\n                    // Iterate through the detection services and set their appropriate mute state, depending on\n                    // service this will trigger a DETECTOR_STATE_CHANGE which in turn might start the _vadEmitter.\n                    this._changeDetectorsMuteState(track.isMuted());\n                })\n                .catch(error => {\n                    logger.warn('Failed to start VADAudioAnalyser', error);\n                });\n        }\n    }\n\n    /**\n     * Notifies the detector that the mute state of a {@link JitsiConference} track has changed. Only takes into account\n     * local audio tracks.\n     * @param {JitsiTrack} track - The track whose mute state has changed.\n     * @returns {void}\n     * @listens TRACK_MUTE_CHANGED\n     */\n    _trackMuteChanged(track) {\n        if (track.isLocalAudioTrack()) {\n            // On a mute toggle reset the state.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                // Set mute status for the attached detection services.\n                this._changeDetectorsMuteState(track.isMuted());\n            });\n        }\n    }\n\n    /**\n     * Notifies the detector that a track associated with the {@link JitsiConference} was removed. Only takes into\n     * account local audio tracks. Cleans up resources associated with the track and resets the processing context.\n     *\n     * @param {JitsiTrack} track - The removed track.\n     * @returns {void}\n     * @listens TRACK_REMOVED\n     */\n    _trackRemoved(track) {\n        if (track.isLocalAudioTrack()) {\n            // Use the promise to make sure operations are in sequence.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                logger.debug('Removing track from VAD detection - ', track.getTrackLabel());\n\n                // Track was removed, clean up and set appropriate states.\n                if (this._vadEmitter) {\n                    this._stopVADEmitter();\n                    this._vadEmitter.destroy();\n                    this._vadEmitter = null;\n                }\n\n                // Reset state of detectors when active track is removed.\n                for (const detector of this._detectionServices) {\n                    detector.reset();\n                }\n            });\n        }\n    }\n\n\n}\n","import { $iq } from 'strophe.js';\n\nimport recordingXMLUtils from './recordingXMLUtils';\n\n/**\n * Represents a recording session.\n */\nexport default class JibriSession {\n    /**\n     * Initializes a new JibriSession instance.\n     *\n     * @constructor\n     */\n    constructor(options = {}) {\n        this._connection = options.connection;\n        this._mode = options.mode;\n\n        this._setSessionID(options.sessionID);\n        this.setStatus(options.status);\n    }\n\n    /**\n     * Returns the error related to the session instance, if any.\n     *\n     * @returns {string|undefined}\n     */\n    getError() {\n        return this._error;\n    }\n\n    /**\n     * Returns the session ID of the session instance.\n     *\n     * @returns {string|undefined}\n     */\n    getID() {\n        return this._sessionID;\n    }\n\n    /**\n     * Returns the initiator of the session instance.\n     *\n     * @returns {JitsiParticipant|undefined} The participant that started the session.\n     */\n    getInitiator() {\n        return this._initiator;\n    }\n\n    /**\n     * Returns the streaming URL of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getLiveStreamViewURL() {\n        return this._liveStreamViewURL;\n    }\n\n    /**\n     * Returns the current status of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * Returns the jid of the participant that stopped the session.\n     *\n     * @returns {JitsiParticipant|undefined} The participant that stopped the session.\n     */\n    getTerminator() {\n        return this._terminator;\n    }\n\n    /**\n     * Returns the current recording mode of the session, such as \"file\".\n     *\n     * @returns {string}\n     */\n    getMode() {\n        return this._mode;\n    }\n\n    /**\n     * Sets the last known error message related to the session.\n     *\n     * @param {string} error - The error string explaining why the session\n     * entered an error state.\n     * @returns {void}\n     */\n    setError(error) {\n        this._error = error;\n    }\n\n    /**\n     * Sets the last live stream URL for the session instance. Usually this is\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\n     *\n     * @param {string} url - The live stream URL associated with the session.\n     * @returns {void}\n     */\n    setLiveStreamViewURL(url) {\n        this._liveStreamViewURL = url;\n    }\n\n    /**\n     * Sets the last known status for this recording session.\n     *\n     * @param {string} status - The new status to set.\n     * @returns {void}\n     */\n    setStatus(status) {\n        this._status = status;\n    }\n\n    /**\n     * Sets the creator's jid of the session.\n     * @param {JitsiParticipant} participant - The creator of the session.\n     */\n    setInitiator(participant) {\n        this._initiator = participant;\n    }\n\n    /**\n     * Sets the jid of the participant that stopped the session.\n     * @param {JitsiParticipant} participant  - The participant's jid,\n     * that stopped the session.\n     */\n    setTerminator(participant) {\n        this._terminator = participant;\n    }\n\n    /**\n     * Sends a message to start the actual recording.\n     *\n     * @param {Object} options - Additional arguments for starting the\n     * recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Promise\n     */\n    start({ appData, broadcastId, focusMucJid, streamId }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'start',\n                    appData,\n                    focusMucJid,\n                    broadcastId,\n                    streamId\n                }),\n                result => {\n                    // All users will eventually receive the 'pending' status\n                    // from the backend, but for the user initiating the session\n                    // it's better to give some instant feedback that recording\n                    // is starting so fire 'pending' here manually.\n                    this.setStatus('pending');\n                    this._setSessionID(\n                        recordingXMLUtils.getSessionIdFromIq(result));\n\n                    resolve();\n                },\n                error => {\n                    this._setErrorFromIq(error);\n\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Sends a message to actually stop the recording session.\n     *\n     * @param {Object} options - Additional arguments for stopping the\n     * recording.\n     * @param {Object} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @returns Promise\n     */\n    stop({ focusMucJid }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'stop',\n                    focusMucJid\n                }),\n                resolve,\n                reject);\n        });\n    }\n\n    /**\n     * Generates the message to change the status of the recording session.\n     *\n     * @param {string} status - The new status to which the recording session\n     * should transition.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Object - The XMPP IQ message.\n     */\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\n        return $iq({\n            to: focusMucJid,\n            type: 'set'\n        })\n        .c('jibri', {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': appData,\n            'recording_mode': this._mode,\n            'streamid': streamId,\n            'you_tube_broadcast_id': broadcastId\n        })\n        .up();\n    }\n\n    /**\n     * Handles the error from an iq and stores the error.\n     *\n     * @param {Node} errorIq - The error response from an Iq.\n     * @private\n     * @returns {void}\n     */\n    _setErrorFromIq(errorIq) {\n        const error = errorIq.getElementsByTagName('error')[0];\n\n        this.setError(error.children[0].tagName);\n    }\n\n    /**\n     * Sets the known session ID for this recording session.\n     *\n     * @param {string} sessionID\n     * @private\n     * @returns {void}\n     */\n    _setSessionID(sessionID) {\n        this._sessionID = sessionID;\n    }\n}\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nvar getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex; // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n\n  return (bth[buf[i + 0]] + bth[buf[i + 1]] + bth[buf[i + 2]] + bth[buf[i + 3]] + '-' + bth[buf[i + 4]] + bth[buf[i + 5]] + '-' + bth[buf[i + 6]] + bth[buf[i + 7]] + '-' + bth[buf[i + 8]] + bth[buf[i + 9]] + '-' + bth[buf[i + 10]] + bth[buf[i + 11]] + bth[buf[i + 12]] + bth[buf[i + 13]] + bth[buf[i + 14]] + bth[buf[i + 15]]).toLowerCase();\n}\n\nexport default bytesToUuid;","import rng from './rng.js';\nimport bytesToUuid from './bytesToUuid.js';\n\nfunction v4(options, buf, offset) {\n  if (typeof options === 'string') {\n    buf = options === 'binary' ? new Uint8Array(16) : null;\n    options = null;\n  }\n\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    var start = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[start + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return bytesToUuid(rnds);\n}\n\nexport default v4;","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*jslint latedef:false*/\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * The global configuration options.\n */\nvar globalOptions = {};\n\n/**\n * Sets global options which will be used by all loggers. Changing these works\n * even after other loggers are created.\n */\nLogger.setGlobalOptions = function(options) {\n    globalOptions = options || {};\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 3) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo\n        = !(logger.options.disableCallerInfo || globalOptions.disableCallerInfo) &&\n            getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            var logPrefixes = [];\n\n            logPrefixes.push(new Date().toISOString());\n\n            if (logger.id) {\n                logPrefixes.push(\"[\" + logger.id + \"]\");\n            }\n\n            if (callerInfo && callerInfo.methodName.length > 1) {\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\n            }\n\n            var fullLogParts = logPrefixes.concat(args);\n\n            l.bind(t).apply(t, fullLogParts);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param options optional configuration file for how the logger should behave.\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\n * method invocation should be included in the log. Defaults to false, so the\n * call site will be included.\n */\nfunction Logger(level, id, transports, options) {\n    this.id = id;\n    this.options = options || {};\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  //k: [{}], // outdated thing ignored\n  t: [{ //t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{ //c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{ //b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    { //a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding) ?\n          'rtpmap:%d %s/%s/%s':\n          o.rate ?\n          'rtpmap:%d %s/%s':\n          'rtpmap:%d %s';\n      }\n    },\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      //a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    { //a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    { //a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null) ?\n          'rtcp:%d %s IP%d %s':\n          'rtcp:%d';\n      }\n    },\n    { //a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    { //a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null) ?\n          'rtcp-fb:%s %s %s':\n          'rtcp-fb:%s %s';\n      }\n    },\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      //a=extmap:1/recvonly URI-gps-string\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'uri', 'config'],\n      format: function (o) {\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n      }\n    },\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null) ?\n          'crypto:%d %s %s %s':\n          'crypto:%d %s %s';\n      }\n    },\n    { //a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    { //a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    { //a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    { //a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    { //a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    { //a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    { //a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    { //a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    { //a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    { //a=ssrc-group:FEC 1 2\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    { //a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    { //a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    { //a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    { //a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null) ?\n          'sctpmap:%s %s %s' :\n          'sctpmap:%s %s';\n      }\n    },\n    { //a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      //a=imageattr:* send [x=800,y=640] recv *\n      //a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        //a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        //recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      //a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        //a=simulcast:\n        '^simulcast:' +\n        //send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        //space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        //end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //Old simulcast draft 03 (implemented by Firefox)\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      //a=simulcast: recv pt=97;98 send pt=97\n      //a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      //a=framerate:25\n      //a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    { // any a= that we don't understand is kepts verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","/* global MediaRecorder, MediaStream */\n\nconst RecordingResult = require('./recordingResult');\n\n/**\n * Possible audio formats MIME types\n */\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\n\n/**\n * A TrackRecorder object holds all the information needed for recording a\n * single JitsiTrack (either remote or local)\n * @param track The JitsiTrack the object is going to hold\n */\nconst TrackRecorder = function(track) {\n    // The JitsiTrack holding the stream\n    this.track = track;\n\n    // The MediaRecorder recording the stream\n    this.recorder = null;\n\n    // The array of data chunks recorded from the stream\n    // acts as a buffer until the data is stored on disk\n    this.data = null;\n\n    // the name of the person of the JitsiTrack. This can be undefined and/or\n    // not unique\n    this.name = null;\n\n    // the time of the start of the recording\n    this.startTime = null;\n};\n\n/**\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\n * This will also define the timestamp and try to update the name\n * @param trackRecorder the TrackRecorder to start\n */\nfunction startRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to startRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.start();\n    trackRecorder.startTime = new Date();\n}\n\n/**\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\n * This will also try to update the name\n * @param trackRecorder the TrackRecorder to stop\n */\nfunction stopRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to stopRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.stop();\n}\n\n/**\n * Determines which kind of audio recording the browser supports\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\n */\nfunction determineCorrectFileType() {\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\n        return AUDIO_WEBM;\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\n        return AUDIO_OGG;\n    }\n    throw new Error(\n        'unable to create a MediaRecorder with the right mimetype!');\n}\n\n/**\n * main exported object of the file, holding all\n * relevant functions and variables for the outside world\n * @param jitsiConference the jitsiConference which this object\n * is going to record\n */\nfunction AudioRecorder(jitsiConference) {\n    // array of TrackRecorders, where each trackRecorder\n    // holds the JitsiTrack, MediaRecorder and recorder data\n    this.recorders = [];\n\n    // get which file type is supported by the current browser\n    this.fileType = determineCorrectFileType();\n\n    // boolean flag for active recording\n    this.isRecording = false;\n\n    // the jitsiconference the object is recording\n    this.jitsiConference = jitsiConference;\n}\n\n/**\n * Add the exported module so that it can be accessed by other files\n */\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\n\n/**\n * Adds a new TrackRecorder object to the array.\n *\n * @param track the track potentially holding an audio stream\n */\nAudioRecorder.prototype.addTrack = function(track) {\n    if (track.isAudioTrack()) {\n        // create the track recorder\n        const trackRecorder = this.instantiateTrackRecorder(track);\n\n        // push it to the local array of all recorders\n\n        this.recorders.push(trackRecorder);\n\n        // update the name of the trackRecorders\n        this.updateNames();\n\n        // If we're already recording, immediately start recording this new\n        // track.\n        if (this.isRecording) {\n            startRecorder(trackRecorder);\n        }\n    }\n};\n\n/**\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\n * data array for the trackRecorder.\n * @param track the JitsiTrack holding the audio MediaStream(s)\n */\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\n    const trackRecorder = new TrackRecorder(track);\n\n    // Create a new stream which only holds the audio track\n    const originalStream = trackRecorder.track.getOriginalStream();\n    const stream = new MediaStream();\n\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\n\n    // Create the MediaRecorder\n    trackRecorder.recorder = new MediaRecorder(stream,\n        { mimeType: this.fileType });\n\n    // array for holding the recorder data. Resets it when\n    // audio already has been recorder once\n    trackRecorder.data = [];\n\n    // function handling a dataEvent, e.g the stream gets new data\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\n        if (dataEvent.data.size > 0) {\n            trackRecorder.data.push(dataEvent.data);\n        }\n    };\n\n    return trackRecorder;\n};\n\n/**\n * Notifies the module that a specific track has stopped, e.g participant left\n * the conference.\n * if the recording has not started yet, the TrackRecorder will be removed from\n * the array. If the recording has started, the recorder will stop recording\n * but not removed from the array so that the recorded stream can still be\n * accessed\n *\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\n */\nAudioRecorder.prototype.removeTrack = function(track) {\n    if (track.isVideoTrack()) {\n        return;\n    }\n\n    const array = this.recorders;\n    let i;\n\n    for (i = 0; i < array.length; i++) {\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\n            const recorderToRemove = array[i];\n\n            if (this.isRecording) {\n                stopRecorder(recorderToRemove);\n            } else {\n                // remove the TrackRecorder from the array\n                array.splice(i, 1);\n            }\n        }\n    }\n\n    // make sure the names are up to date\n    this.updateNames();\n};\n\n/**\n * Tries to update the name value of all TrackRecorder in the array.\n * If it hasn't changed,it will keep the exiting name. If it changes to a\n * undefined value, the old value will also be kept.\n */\nAudioRecorder.prototype.updateNames = function() {\n    const conference = this.jitsiConference;\n\n    this.recorders.forEach(trackRecorder => {\n        if (trackRecorder.track.isLocal()) {\n            trackRecorder.name = 'the transcriber';\n        } else {\n            const id = trackRecorder.track.getParticipantId();\n            const participant = conference.getParticipantById(id);\n            const newName = participant.getDisplayName();\n\n            if (newName !== 'undefined') {\n                trackRecorder.name = newName;\n            }\n        }\n    });\n};\n\n/**\n * Starts the audio recording of every local and remote track\n */\nAudioRecorder.prototype.start = function() {\n    if (this.isRecording) {\n        throw new Error('audiorecorder is already recording');\n    }\n\n    // set boolean isRecording flag to true so if new participants join the\n    // conference, that track can instantly start recording as well\n    this.isRecording = true;\n\n    // start all the mediaRecorders\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\n\n    // log that recording has started\n    console.log(\n        `Started the recording of the audio. There are currently ${\n            this.recorders.length} recorders active.`);\n};\n\n/**\n * Stops the audio recording of every local and remote track\n */\nAudioRecorder.prototype.stop = function() {\n    // set the boolean flag to false\n    this.isRecording = false;\n\n    // stop all recorders\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\n    console.log('stopped recording');\n};\n\n/**\n * link hacking to download all recorded audio streams\n */\nAudioRecorder.prototype.download = function() {\n    this.recorders.forEach(trackRecorder => {\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n\n        document.body.appendChild(a);\n        a.style = 'display: none';\n        a.href = url;\n        a.download = `test.${this.fileType.split('/')[1]}`;\n        a.click();\n        window.URL.revokeObjectURL(url);\n    });\n};\n\n/**\n * returns the audio files of all recorders as an array of objects,\n * which include the name of the owner of the track and the starting time stamp\n * @returns {Array} an array of RecordingResult objects\n */\nAudioRecorder.prototype.getRecordingResults = function() {\n    if (this.isRecording) {\n        throw new Error(\n            'cannot get blobs because the AudioRecorder is still recording!');\n    }\n\n    // make sure the names are up to date before sending them off\n    this.updateNames();\n\n    const array = [];\n\n    this.recorders.forEach(\n        recorder =>\n            array.push(\n                new RecordingResult(\n                    new Blob(recorder.data, { type: this.fileType }),\n                    recorder.name,\n                    recorder.startTime)));\n\n    return array;\n};\n\n/**\n * Gets the mime type of the recorder audio\n * @returns {String} the mime type of the recorder audio\n */\nAudioRecorder.prototype.getFileType = function() {\n    return this.fileType;\n};\n\n/**\n * export the main object AudioRecorder\n */\nmodule.exports = AudioRecorder;\n","import JitsiConference from './JitsiConference';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport Statistics from './modules/statistics/statistics';\nimport XMPP from './modules/xmpp/xmpp';\nimport {\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\n    createConnectionFailedEvent\n} from './service/statistics/AnalyticsEvents';\n\n/**\n * Creates a new connection object for the Jitsi Meet server side video\n * conferencing service. Provides access to the JitsiConference interface.\n * @param appID identification for the provider of Jitsi Meet video conferencing\n * services.\n * @param token the JWT token used to authenticate with the server(optional)\n * @param options Object with properties / settings related to connection with\n * the server.\n * @constructor\n */\nexport default function JitsiConnection(appID, token, options) {\n    this.appID = appID;\n    this.token = token;\n    this.options = options;\n    this.xmpp = new XMPP(options, token);\n\n    /* eslint-disable max-params */\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\n        (errType, msg, credentials, details) => {\n            Statistics.sendAnalyticsAndLog(\n                createConnectionFailedEvent(errType, msg, details));\n        });\n    /* eslint-enable max-params */\n\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\n        msg => {\n            // we can see disconnects from normal tab closing of the browser\n            // and then there are no msgs, but we want to log only disconnects\n            // when there is real error\n            // XXX Do we need the difference in handling between the log and\n            // analytics event here?\n            if (msg) {\n                Statistics.sendAnalytics(\n                    ANALYTICS_CONNECTION_DISCONNECTED,\n                    { message: msg });\n            }\n            Statistics.sendLog(\n                JSON.stringify(\n                    {\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\n                        msg\n                    }));\n        });\n}\n\n/**\n * Connect the client with the server.\n * @param options {object} connecting options\n * (for example authentications parameters).\n */\nJitsiConnection.prototype.connect = function(options = {}) {\n    this.xmpp.connect(options.id, options.password);\n};\n\n/**\n * Attach to existing connection. Can be used for optimizations. For example:\n * if the connection is created on the server we can attach to it and start\n * using it.\n *\n * @param options {object} connecting options - rid, sid and jid.\n */\nJitsiConnection.prototype.attach = function(options) {\n    this.xmpp.attach(options);\n};\n\n/**\n * Disconnect the client from the server.\n * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n */\nJitsiConnection.prototype.disconnect = function(...args) {\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\n    // may optionally pass the event which triggered the disconnect in order to\n    // provide the implementation with finer-grained context.\n    return this.xmpp.disconnect(...args);\n};\n\n/**\n * Returns the jid of the participant associated with the XMPP connection.\n *\n * @returns {string} The jid of the participant.\n */\nJitsiConnection.prototype.getJid = function() {\n    return this.xmpp.getJid();\n};\n\n/**\n * This method allows renewal of the tokens if they are expiring.\n * @param token the new token.\n */\nJitsiConnection.prototype.setToken = function(token) {\n    this.token = token;\n};\n\n/**\n * Creates and joins new conference.\n * @param name the name of the conference; if null - a generated name will be\n * provided from the api\n * @param options Object with properties / settings related to the conference\n * that will be created.\n * @returns {JitsiConference} returns the new conference object.\n */\nJitsiConnection.prototype.initJitsiConference = function(name, options) {\n    return new JitsiConference({\n        name,\n        config: options,\n        connection: this\n    });\n};\n\n/**\n * Subscribes the passed listener to the event.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.addEventListener = function(event, listener) {\n    this.xmpp.addListener(event, listener);\n};\n\n/**\n * Unsubscribes the passed handler.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\n    this.xmpp.removeListener(event, listener);\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConnection.prototype.getConnectionTimes = function() {\n    return this.xmpp.connectionTimes;\n};\n\n/**\n * Adds new feature to the list of supported features for the local\n * participant.\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\n    this.xmpp.caps.addFeature(feature, submit, true);\n};\n\n/**\n * Removes a feature from the list of supported features for the local\n * participant\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\n    this.xmpp.caps.removeFeature(feature, submit, true);\n};\n\n/**\n * Get object with internal logs.\n */\nJitsiConnection.prototype.getLogs = function() {\n    const data = this.xmpp.getJingleLog();\n\n    const metadata = {};\n\n    metadata.time = new Date();\n    metadata.url = window.location.href;\n    metadata.ua = navigator.userAgent;\n\n    const log = this.xmpp.getXmppLog();\n\n    if (log) {\n        metadata.xmpp = log;\n    }\n\n    data.metadata = metadata;\n\n    return data;\n};\n","/* global __filename, $, Promise */\n\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiParticipant from './JitsiParticipant';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\nimport { CodecSelection } from './modules/RTC/CodecSelection';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\nimport IceFailedHandling\n    from './modules/connectivity/IceFailedHandling';\nimport ParticipantConnectionStatusHandler\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport NoAudioSignalDetection from './modules/detection/NoAudioSignalDetection';\nimport P2PDominantSpeakerDetection from './modules/detection/P2PDominantSpeakerDetection';\nimport VADAudioAnalyser from './modules/detection/VADAudioAnalyser';\nimport VADNoiseDetection from './modules/detection/VADNoiseDetection';\nimport VADTalkMutedDetection from './modules/detection/VADTalkMutedDetection';\nimport { E2EEncryption } from './modules/e2ee/E2EEncryption';\nimport E2ePing from './modules/e2eping/e2eping';\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\nimport { ReceiveVideoController } from './modules/qualitycontrol/ReceiveVideoController';\nimport { SendVideoController } from './modules/qualitycontrol/SendVideoController';\nimport RecordingManager from './modules/recording/RecordingManager';\nimport Settings from './modules/settings/Settings';\nimport AudioOutputProblemDetector from './modules/statistics/AudioOutputProblemDetector';\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\nimport Statistics from './modules/statistics/statistics';\nimport Transcriber from './modules/transcription/transcriber';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport RandomUtil from './modules/util/RandomUtil';\nimport ComponentsVersions from './modules/version/ComponentsVersions';\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport {\n    FEATURE_E2EE,\n    FEATURE_JIGASI,\n    JITSI_MEET_MUC_TYPE\n} from './modules/xmpp/xmpp';\nimport CodecMimeType from './service/RTC/CodecMimeType';\nimport * as MediaType from './service/RTC/MediaType';\nimport VideoType from './service/RTC/VideoType';\nimport {\n    ACTION_JINGLE_RESTART,\n    ACTION_JINGLE_SI_RECEIVED,\n    ACTION_JINGLE_SI_TIMEOUT,\n    ACTION_JINGLE_TERMINATE,\n    ACTION_P2P_DECLINED,\n    ACTION_P2P_ESTABLISHED,\n    ACTION_P2P_FAILED,\n    ACTION_P2P_SWITCH_TO_JVB,\n    ICE_ESTABLISHMENT_DURATION_DIFF,\n    createConferenceEvent,\n    createJingleEvent,\n    createP2PEvent\n} from './service/statistics/AnalyticsEvents';\nimport * as XMPPEvents from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * How long since Jicofo is supposed to send a session-initiate, before\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\n * @type {number}\n */\nconst JINGLE_SI_TIMEOUT = 5000;\n\n/**\n * Creates a JitsiConference object with the given name and properties.\n * Note: this constructor is not a part of the public API (objects should be\n * created using JitsiConnection.createConference).\n * @param options.config properties / settings related to the conference that\n * will be created.\n * @param options.name the name of the conference\n * @param options.connection the JitsiConnection object for this\n * JitsiConference.\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\n * calculated and submitted to the analytics module.\n * @param {boolean} [options.config.enableIceRestart=false] - enables the ICE\n * restart logic.\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\n * the peer to peer mode will be enabled. It means that when there are only 2\n * participants in the conference an attempt to make direct connection will be\n * made. If the connection succeeds the conference will stop sending data\n * through the JVB connection and will use the direct one instead.\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\n * seconds, before the conference switches back to P2P, after the 3rd\n * participant has left the room.\n * @param {number} [options.config.channelLastN=-1] The requested amount of\n * videos are going to be delivered after the value is in effect. Set to -1 for\n * unlimited or all available videos.\n * @param {number} [options.config.forceJVB121Ratio]\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\n * conference should be moved to the JVB instead of P2P. The decision is made on\n * the responder side, after ICE succeeds on the P2P connection.\n * @constructor\n *\n * FIXME Make all methods which are called from lib-internal classes\n *       to non-public (use _). To name a few:\n *       {@link JitsiConference.onLocalRoleChanged}\n *       {@link JitsiConference.onUserRoleChanged}\n *       {@link JitsiConference.onMemberLeft}\n *       and so on...\n */\nexport default function JitsiConference(options) {\n    if (!options.name || options.name.toLowerCase() !== options.name) {\n        const errmsg\n            = 'Invalid conference name (no conference name passed or it '\n                + 'contains invalid characters like capital letters)!';\n\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.eventEmitter = new EventEmitter();\n    this.options = options;\n    this.eventManager = new JitsiConferenceEventManager(this);\n    this.participants = {};\n    this._init(options);\n    this.componentsVersions = new ComponentsVersions(this);\n\n    /**\n     * Jingle session instance for the JVB connection.\n     * @type {JingleSessionPC}\n     */\n    this.jvbJingleSession = null;\n    this.lastDominantSpeaker = null;\n    this.dtmfManager = null;\n    this.somebodySupportsDTMF = false;\n    this.authEnabled = false;\n    this.startAudioMuted = false;\n    this.startVideoMuted = false;\n    this.startMutedPolicy = {\n        audio: false,\n        video: false\n    };\n    this.isMutedByFocus = false;\n\n    // when muted by focus we receive the jid of the initiator of the mute\n    this.mutedByFocusActor = null;\n\n    this.isVideoMutedByFocus = false;\n\n    // when video muted by focus we receive the jid of the initiator of the mute\n    this.mutedVideoByFocusActor = null;\n\n    // Flag indicates if the 'onCallEnded' method was ever called on this\n    // instance. Used to log extra analytics event for debugging purpose.\n    // We need to know if the potential issue happened before or after\n    // the restart.\n    this.wasStopped = false;\n\n    // Conference properties, maintained by jicofo.\n    this.properties = {};\n\n    /**\n     * The object which monitors local and remote connection statistics (e.g.\n     * sending bitrate) and calculates a number which represents the connection\n     * quality.\n     */\n    this.connectionQuality\n        = new ConnectionQuality(this, this.eventEmitter, options);\n\n    /**\n     * Reports average RTP statistics to the analytics module.\n     * @type {AvgRTPStatsReporter}\n     */\n    this.avgRtpStatsReporter\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\n\n    /**\n     * Detects issues with the audio of remote participants.\n     * @type {AudioOutputProblemDetector}\n     */\n    this._audioOutputProblemDetector = new AudioOutputProblemDetector(this);\n\n    /**\n     * Indicates whether the connection is interrupted or not.\n     */\n    this.isJvbConnectionInterrupted = false;\n\n    /**\n     * The object which tracks active speaker times\n     */\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\n\n    /* P2P related fields below: */\n\n    /**\n     * Stores reference to deferred start P2P task. It's created when 3rd\n     * participant leaves the room in order to avoid ping pong effect (it\n     * could be just a page reload).\n     * @type {number|null}\n     */\n    this.deferredStartP2PTask = null;\n\n    const delay\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\n\n    /**\n     * A delay given in seconds, before the conference switches back to P2P\n     * after the 3rd participant has left.\n     * @type {number}\n     */\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\n\n    /**\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\n     * and running.\n     * @type {boolean}\n     */\n    this.isP2PConnectionInterrupted = false;\n\n    /**\n     * Flag set to <tt>true</tt> when P2P session has been established\n     * (ICE has been connected) and this conference is currently in the peer to\n     * peer mode (P2P connection is the active one).\n     * @type {boolean}\n     */\n    this.p2p = false;\n\n    /**\n     * A JingleSession for the direct peer to peer connection.\n     * @type {JingleSessionPC}\n     */\n    this.p2pJingleSession = null;\n\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\n    this.recordingManager = new RecordingManager(this.room);\n\n    /**\n     * If the conference.joined event has been sent this will store the timestamp when it happened.\n     *\n     * @type {undefined|number}\n     * @private\n     */\n    this._conferenceJoinAnalyticsEventSent = undefined;\n\n    /**\n     * End-to-End Encryption. Make it available if supported.\n     */\n    if (this.isE2EESupported()) {\n        logger.info('End-to-End Encryprtion is supported');\n\n        this._e2eEncryption = new E2EEncryption(this);\n    }\n}\n\n// FIXME convert JitsiConference to ES6 - ASAP !\nJitsiConference.prototype.constructor = JitsiConference;\n\n/**\n * Create a resource for the a jid. We use the room nickname (the resource part\n * of the occupant JID, see XEP-0045) as the endpoint ID in colibri. We require\n * endpoint IDs to be 8 hex digits because in some cases they get serialized\n * into a 32bit field.\n *\n * @param {string} jid - The id set onto the XMPP connection.\n * @param {boolean} isAuthenticatedUser - Whether or not the user has connected\n * to the XMPP service with a password.\n * @returns {string}\n * @static\n */\nJitsiConference.resourceCreator = function(jid, isAuthenticatedUser) {\n    let mucNickname;\n\n    if (isAuthenticatedUser) {\n        // For authenticated users generate a random ID.\n        mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n    } else {\n        // We try to use the first part of the node (which for anonymous users\n        // on prosody is a UUID) to match the previous behavior (and maybe make\n        // debugging easier).\n        mucNickname = Strophe.getNodeFromJid(jid).substr(0, 8)\n            .toLowerCase();\n\n        // But if this doesn't have the required format we just generate a new\n        // random nickname.\n        const re = /[0-9a-f]{8}/g;\n\n        if (!re.test(mucNickname)) {\n            mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n        }\n    }\n\n    return mucNickname;\n};\n\n/**\n * Initializes the conference object properties\n * @param options {object}\n * @param options.connection {JitsiConnection} overrides this.connection\n */\nJitsiConference.prototype._init = function(options = {}) {\n    // Override connection and xmpp properties (Useful if the connection\n    // reloaded)\n    if (options.connection) {\n        this.connection = options.connection;\n        this.xmpp = this.connection.xmpp;\n\n        // Setup XMPP events only if we have new connection object.\n        this.eventManager.setupXMPPListeners();\n    }\n\n    const { config } = this.options;\n\n    // Get the codec preference settings from config.js.\n    // 'preferH264' and 'disableH264' settings have been deprecated for a while,\n    // 'preferredCodec' and 'disabledCodec' will have precedence over them.\n    const codecSettings = {\n        disabledCodec: config.videoQuality\n            ? config.videoQuality.disabledCodec\n            : config.p2p && config.p2p.disableH264 && CodecMimeType.H264,\n        enforcePreferredCodec: config.videoQuality && config.videoQuality.enforcePreferredCodec,\n        jvbCodec: (config.videoQuality && config.videoQuality.preferredCodec)\n            || (config.preferH264 && CodecMimeType.H264),\n        p2pCodec: config.p2p\n            ? config.p2p.preferredCodec || (config.p2p.preferH264 && CodecMimeType.H264)\n            : CodecMimeType.VP8\n    };\n\n    this.codecSelection = new CodecSelection(this, codecSettings);\n    this._statsCurrentId = config.statisticsId ? config.statisticsId : Settings.callStatsUserName;\n    this.room = this.xmpp.createRoom(\n        this.options.name, {\n            ...config,\n            statsId: this._statsCurrentId\n        },\n        JitsiConference.resourceCreator\n    );\n\n    // Connection interrupted/restored listeners\n    this._onIceConnectionInterrupted\n        = this._onIceConnectionInterrupted.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\n\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\n\n    this._onIceConnectionEstablished\n        = this._onIceConnectionEstablished.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\n\n    this._updateProperties = this._updateProperties.bind(this);\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    this._sendConferenceJoinAnalyticsEvent = this._sendConferenceJoinAnalyticsEvent.bind(this);\n    this.room.addListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n    this.e2eping = new E2ePing(\n        this,\n        config,\n        (message, to) => {\n            try {\n                this.sendMessage(\n                    message, to, true /* sendThroughVideobridge */);\n            } catch (error) {\n                logger.warn('Failed to send E2E ping request or response.', error && error.msg);\n            }\n        });\n\n    if (!this.rtc) {\n        this.rtc = new RTC(this, options);\n        this.eventManager.setupRTCListeners();\n    }\n\n    this.receiveVideoController = new ReceiveVideoController(this, this.rtc);\n    this.sendVideoController = new SendVideoController(this, this.rtc);\n\n    this.participantConnectionStatus\n        = new ParticipantConnectionStatusHandler(\n            this.rtc,\n            this,\n            {\n                // Both these options are not public API, leaving it here only\n                // as an entry point through config for tuning up purposes.\n                // Default values should be adjusted as soon as optimal values\n                // are discovered.\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfLastNTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n    this.participantConnectionStatus.init();\n\n    // Add the ability to enable callStats only on a percentage of users based on config.js settings.\n    let enableCallStats = true;\n\n    if (config.testing && config.testing.callStatsThreshold) {\n        enableCallStats = (Math.random() * 100) <= config.testing.callStatsThreshold;\n    }\n\n    if (!this.statistics) {\n        this.statistics = new Statistics(this.xmpp, {\n            aliasName: this._statsCurrentId,\n            userName: config.statisticsDisplayName ? config.statisticsDisplayName : this.myUserId(),\n            confID: config.confID || `${this.connection.options.hosts.domain}/${this.options.name}`,\n            siteID: config.siteID,\n            customScriptUrl: config.callStatsCustomScriptUrl,\n            callStatsID: config.callStatsID,\n            callStatsSecret: config.callStatsSecret,\n            callStatsApplicationLogsDisabled: config.callStatsApplicationLogsDisabled,\n            enableCallStats,\n            roomName: this.options.name,\n            applicationName: config.applicationName,\n            getWiFiStatsMethod: config.getWiFiStatsMethod\n        });\n        Statistics.analytics.addPermanentProperties({\n            'callstats_name': this._statsCurrentId\n        });\n\n        // Start performance observer for monitoring long tasks\n        if (config.longTasksStatsInterval) {\n            this.statistics.attachLongTasksStats(this);\n        }\n    }\n\n    this.eventManager.setupChatRoomListeners();\n\n    // Always add listeners because on reload we are executing leave and the\n    // listeners are removed from statistics module.\n    this.eventManager.setupStatisticsListeners();\n\n    // Disable VAD processing on Safari since it causes audio input to\n    // fail on some of the mobile devices.\n    if (config.enableTalkWhileMuted && !browser.isWebKitBased()) {\n\n        // If VAD processor factory method is provided uses VAD based detection, otherwise fallback to audio level\n        // based detection.\n        if (config.createVADProcessor) {\n            logger.info('Using VAD detection for generating talk while muted events');\n\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadTalkMutedDetection = new VADTalkMutedDetection();\n\n            vadTalkMutedDetection.on(DetectionEvents.VAD_TALK_WHILE_MUTED, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\n\n            this._audioAnalyser.addVADDetectionService(vadTalkMutedDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Talk while muted detection service was not initialized!');\n        }\n    }\n\n    // Disable noisy mic detection on safari since it causes the audio input to\n    // fail on Safari on iPadOS.\n    if (config.enableNoisyMicDetection && !browser.isWebKitBased()) {\n        if (config.createVADProcessor) {\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadNoiseDetection = new VADNoiseDetection();\n\n            vadNoiseDetection.on(DetectionEvents.VAD_NOISY_DEVICE, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.NOISY_MIC));\n\n            this._audioAnalyser.addVADDetectionService(vadNoiseDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Noisy microphone detection service was not initialized!');\n        }\n    }\n\n    // Generates events based on no audio input detector.\n    if (config.enableNoAudioDetection) {\n        this._noAudioSignalDetection = new NoAudioSignalDetection(this);\n        this._noAudioSignalDetection.on(DetectionEvents.NO_AUDIO_INPUT, () => {\n            this.eventEmitter.emit(JitsiConferenceEvents.NO_AUDIO_INPUT);\n        });\n        this._noAudioSignalDetection.on(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal => {\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal);\n        });\n    }\n\n\n    if ('channelLastN' in config) {\n        this.setLastN(config.channelLastN);\n    }\n\n    /**\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\n     * @type {Jvb121EventGenerator}\n     */\n    this.jvb121Status = new Jvb121EventGenerator(this);\n\n    // creates dominant speaker detection that works only in p2p mode\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\n\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\n        this.setLocalParticipantProperty(\n            'region', config.deploymentInfo.userRegion);\n    }\n\n    // Publish the codec type to presence.\n    this.setLocalParticipantProperty('codecType', this.codecSelection.getPreferredCodec());\n};\n\n/**\n * Joins the conference.\n * @param password {string} the password\n */\nJitsiConference.prototype.join = function(password) {\n    if (this.room) {\n        this.room.join(password).then(() => this._maybeSetSITimeout());\n    }\n};\n\n/**\n * Authenticates and upgrades the role of the local participant/user.\n *\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the local participant/user finishes\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process.\n */\nJitsiConference.prototype.authenticateAndUpgradeRole = function(options) {\n    return authenticateAndUpgradeRole.call(this, {\n        ...options,\n        onCreateResource: JitsiConference.resourceCreator\n    });\n};\n\n/**\n * Check if joined to the conference.\n */\nJitsiConference.prototype.isJoined = function() {\n    return this.room && this.room.joined;\n};\n\n/**\n * Tells whether or not the P2P mode is enabled in the configuration.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PEnabled = function() {\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\n\n        // FIXME: remove once we have a default config template. -saghul\n        || typeof this.options.config.p2p === 'undefined';\n};\n\n/**\n * When in P2P test mode, the conference will not automatically switch to P2P\n * when there 2 participants.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\n    return Boolean(this.options.config.testing\n        && this.options.config.testing.p2pTestMode);\n};\n\n/**\n * Leaves the conference.\n * @returns {Promise}\n */\nJitsiConference.prototype.leave = function() {\n    if (this.participantConnectionStatus) {\n        this.participantConnectionStatus.dispose();\n        this.participantConnectionStatus = null;\n    }\n    if (this.avgRtpStatsReporter) {\n        this.avgRtpStatsReporter.dispose();\n        this.avgRtpStatsReporter = null;\n    }\n\n    if (this._audioOutputProblemDetector) {\n        this._audioOutputProblemDetector.dispose();\n        this._audioOutputProblemDetector = null;\n    }\n\n    if (this.e2eping) {\n        this.e2eping.stop();\n        this.e2eping = null;\n    }\n\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\n\n    this.rtc.closeBridgeChannel();\n\n    this._sendConferenceLeftAnalyticsEvent();\n\n    if (this.statistics) {\n        this.statistics.dispose();\n    }\n\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\n\n    // Close both JVb and P2P JingleSessions\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.close();\n        this.jvbJingleSession = null;\n    }\n    if (this.p2pJingleSession) {\n        this.p2pJingleSession.close();\n        this.p2pJingleSession = null;\n    }\n\n    // leave the conference\n    if (this.room) {\n        const room = this.room;\n\n        // Unregister connection state listeners\n        room.removeListener(\n            XMPPEvents.CONNECTION_INTERRUPTED,\n            this._onIceConnectionInterrupted);\n        room.removeListener(\n            XMPPEvents.CONNECTION_RESTORED,\n            this._onIceConnectionRestored);\n        room.removeListener(\n            XMPPEvents.CONNECTION_ESTABLISHED,\n            this._onIceConnectionEstablished);\n\n        room.removeListener(\n            XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n            this._updateProperties);\n\n        room.removeListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n        this.eventManager.removeXMPPListeners();\n\n        this.room = null;\n\n        return room.leave()\n            .then(() => {\n                if (this.rtc) {\n                    this.rtc.destroy();\n                }\n            })\n            .catch(error => {\n                // remove all participants because currently the conference\n                // won't be usable anyway. This is done on success automatically\n                // by the ChatRoom instance.\n                this.getParticipants().forEach(\n                    participant => this.onMemberLeft(participant.getJid()));\n\n                throw error;\n            });\n    }\n\n    // If this.room == null we are calling second time leave().\n    return Promise.reject(\n        new Error('The conference is has been already left'));\n};\n\n/**\n * Returns the currently active media session if any.\n *\n * @returns {JingleSessionPC|undefined}\n * @private\n */\nJitsiConference.prototype._getActiveMediaSession = function() {\n    return this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n};\n\n/**\n * Returns an array containing all media sessions existing in this conference.\n *\n * @returns {Array<JingleSessionPC>}\n * @private\n */\nJitsiConference.prototype._getMediaSessions = function() {\n    const sessions = [];\n\n    this.jvbJingleSession && sessions.push(this.jvbJingleSession);\n    this.p2pJingleSession && sessions.push(this.p2pJingleSession);\n\n    return sessions;\n};\n\n/**\n * Returns name of this conference.\n */\nJitsiConference.prototype.getName = function() {\n    return this.options.name;\n};\n\n/**\n * Returns the {@link JitsiConnection} used by this this conference.\n */\nJitsiConference.prototype.getConnection = function() {\n    return this.connection;\n};\n\n/**\n * Check if authentication is enabled for this conference.\n */\nJitsiConference.prototype.isAuthEnabled = function() {\n    return this.authEnabled;\n};\n\n/**\n * Check if user is logged in.\n */\nJitsiConference.prototype.isLoggedIn = function() {\n    return Boolean(this.authIdentity);\n};\n\n/**\n * Get authorized login.\n */\nJitsiConference.prototype.getAuthLogin = function() {\n    return this.authIdentity;\n};\n\n/**\n * Check if external authentication is enabled for this conference.\n */\nJitsiConference.prototype.isExternalAuthEnabled = function() {\n    return this.room && this.room.moderator.isExternalAuthEnabled();\n};\n\n/**\n * Get url for external authentication.\n * @param {boolean} [urlForPopup] if true then return url for login popup,\n *                                else url of login page.\n * @returns {Promise}\n */\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\n    return new Promise((resolve, reject) => {\n        if (!this.isExternalAuthEnabled()) {\n            reject();\n\n            return;\n        }\n        if (urlForPopup) {\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\n        } else {\n            this.room.moderator.getLoginUrl(resolve, reject);\n        }\n    });\n};\n\n/**\n * Returns the local tracks of the given media type, or all local tracks if no\n * specific type is given.\n * @param {MediaType} [mediaType] Optional media type (audio or video).\n */\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\n    let tracks = [];\n\n    if (this.rtc) {\n        tracks = this.rtc.getLocalTracks(mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Obtains local audio track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalAudioTrack = function() {\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\n};\n\n/**\n * Obtains local video track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalVideoTrack = function() {\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\n};\n\n/**\n * Obtains the performance statistics.\n * @returns {Object|null}\n */\nJitsiConference.prototype.getPerformanceStats = function() {\n    return {\n        longTasksStats: this.statistics.getLongTasksStats()\n    };\n};\n\n/**\n * Attaches a handler for events(For example - \"participant joined\".) in the\n * conference. All possible event are defined in JitsiConferenceEvents.\n * @param eventId the event ID.\n * @param handler handler for the event.\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.on = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.on(eventId, handler);\n    }\n};\n\n/**\n * Removes event listener\n * @param eventId the event ID.\n * @param [handler] optional, the specific handler to unbind\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.off = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.removeListener(eventId, handler);\n    }\n};\n\n// Common aliases for event emitter\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\n\n/**\n * Receives notifications from other participants about commands / custom events\n * (sent by sendCommand or sendCommandOnce methods).\n * @param command {String} the name of the command\n * @param handler {Function} handler for the command\n */\nJitsiConference.prototype.addCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.addPresenceListener(command, handler);\n    }\n};\n\n/**\n  * Removes command  listener\n  * @param command {String} the name of the command\n  * @param handler {Function} handler to remove for the command\n  */\nJitsiConference.prototype.removeCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.removePresenceListener(command, handler);\n    }\n};\n\n/**\n * Sends text message to the other participants in the conference\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendTextMessage = function(\n        message, elementName = 'body') {\n    if (this.room) {\n        const displayName = (this.room.getFromPresence('nick') || {}).value;\n\n        this.room.sendMessage(message, elementName, displayName);\n    }\n};\n\n/**\n * Send private text message to another participant of the conference\n * @param id the id of the participant to send a private message.\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendPrivateTextMessage = function(\n        id, message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendPrivateMessage(id, message, elementName);\n    }\n};\n\n/**\n * Send presence command.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommand = function(name, values) {\n    if (this.room) {\n        this.room.addOrReplaceInPresence(name, values) && this.room.sendPresence();\n    } else {\n        logger.warn('Not sending a command, room not initialized.');\n    }\n\n};\n\n/**\n * Send presence command one time.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\n    this.sendCommand(name, values);\n    this.removeCommand(name);\n};\n\n/**\n * Removes presence command.\n * @param name {String} the name of the command.\n **/\nJitsiConference.prototype.removeCommand = function(name) {\n    if (this.room) {\n        this.room.removeFromPresence(name);\n    }\n};\n\n/**\n * Sets the display name for this conference.\n * @param name the display name to set\n */\nJitsiConference.prototype.setDisplayName = function(name) {\n    if (this.room) {\n        this.room.addOrReplaceInPresence('nick', {\n            attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n            value: name\n        }) && this.room.sendPresence();\n    }\n};\n\n/**\n * Set new subject for this conference. (available only for moderator)\n * @param {string} subject new subject\n */\nJitsiConference.prototype.setSubject = function(subject) {\n    if (this.room && this.isModerator()) {\n        this.room.setSubject(subject);\n    }\n};\n\n/**\n * Get a transcriber object for all current participants in this conference\n * @return {Transcriber} the transcriber object\n */\nJitsiConference.prototype.getTranscriber = function() {\n    if (this.transcriber === undefined) {\n        this.transcriber = new Transcriber();\n\n        // add all existing local audio tracks to the transcriber\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\n\n        for (const localAudio of localAudioTracks) {\n            this.transcriber.addTrack(localAudio);\n        }\n\n        // and all remote audio tracks\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\n\n        for (const remoteTrack of remoteAudioTracks) {\n            this.transcriber.addTrack(remoteTrack);\n        }\n    }\n\n    return this.transcriber;\n};\n\n/**\n * Returns the transcription status.\n *\n * @returns {String} \"on\" or \"off\".\n */\nJitsiConference.prototype.getTranscriptionStatus = function() {\n    return this.room.transcriptionStatus;\n};\n\n/**\n * Adds JitsiLocalTrack object to the conference.\n * @param {JitsiLocalTrack} track the JitsiLocalTrack object.\n * @returns {Promise<JitsiLocalTrack>}\n * @throws {Error} if the specified track is a video track and there is already\n * another video track in the conference.\n */\nJitsiConference.prototype.addTrack = function(track) {\n    const mediaType = track.getType();\n    const localTracks = this.rtc.getLocalTracks(mediaType);\n\n    // Ensure there's exactly 1 local track of each media type in the conference.\n    if (localTracks.length > 0) {\n        // Don't be excessively harsh and severe if the API client happens to attempt to add the same local track twice.\n        if (track === localTracks[0]) {\n            return Promise.resolve(track);\n        }\n\n        return Promise.reject(new Error(`Cannot add second ${mediaType} track to the conference`));\n    }\n\n    return this.replaceTrack(null, track);\n};\n\n/**\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\n * @param {number} audioLevel the audio level\n * @param {TraceablePeerConnection} [tpc]\n */\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(\n        audioLevel,\n        tpc) {\n    const activeTpc = this.getActivePeerConnection();\n\n    // There will be no TraceablePeerConnection if audio levels do not come from\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\n    // Audio Analyser API and emits local audio levels events through\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\n    // optional.\n    if (!tpc || activeTpc === tpc) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this.myUserId(), audioLevel);\n    }\n};\n\n/**\n * Fires TRACK_MUTE_CHANGED change conference event.\n * @param track the JitsiTrack object related to the event.\n */\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\n    // check if track was muted by focus and now is unmuted by user\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\n        this.isMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.AUDIO);\n    } else if (this.isVideoMutedByFocus && track.isVideoTrack() && !track.isMuted()) {\n        this.isVideoMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.VIDEO);\n    }\n\n    let actorParticipant;\n\n    if (this.mutedByFocusActor && track.isAudioTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    } else if (this.mutedVideoByFocusActor && track.isVideoTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedVideoByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track, actorParticipant);\n};\n\n/**\n * Returns the list of local tracks that need to be added to the peerconnection on join.\n * This takes the startAudioMuted/startVideoMuted flags into consideration since we do not\n * want to add the tracks if the user joins the call audio/video muted. The tracks will be\n * added when the user unmutes for the first time.\n * @returns {Array<JitsiLocalTrack>} - list of local tracks that are unmuted.\n */\nJitsiConference.prototype._getInitialLocalTracks = function() {\n    return this.getLocalTracks()\n        .filter(track => (track.getType() === MediaType.AUDIO && !this.isStartAudioMuted())\n        || (track.getType() === MediaType.VIDEO && !this.isStartVideoMuted()));\n};\n\n/**\n * Clear JitsiLocalTrack properties and listeners.\n * @param track the JitsiLocalTrack object.\n */\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\n    track._setConference(null);\n    this.rtc.removeLocalTrack(track);\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        track.muteHandler);\n    track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        track.audioLevelHandler);\n\n    // send event for stopping screen sharing\n    // FIXME: we assume we have only one screen sharing track\n    // if we change this we need to fix this check\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n        this.statistics.sendScreenSharingEvent(false);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n};\n\n/**\n * Removes JitsiLocalTrack from the conference and performs\n * a new offer/answer cycle.\n * @param {JitsiLocalTrack} track\n * @returns {Promise}\n */\nJitsiConference.prototype.removeTrack = function(track) {\n    return this.replaceTrack(track, null);\n};\n\n/**\n * Replaces oldTrack with newTrack and performs a single offer/answer\n *  cycle after both operations are done.  Either oldTrack or newTrack\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\n *  effectively just removes 'oldTrack'\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\n * @param {JitsiLocalTrack} newTrack the new stream to use\n * @returns {Promise} resolves when the replacement is finished\n */\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\n    // First do the removal of the oldTrack at the JitsiConference level\n    if (oldTrack) {\n        if (oldTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n    if (newTrack) {\n        if (newTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n\n    // Now replace the stream at the lower levels\n    return this._doReplaceTrack(oldTrack, newTrack)\n        .then(() => {\n            if (oldTrack) {\n                this.onLocalTrackRemoved(oldTrack);\n            }\n\n            // Send 'VideoTypeMessage' on the bridge channel for the new track.\n            if (newTrack) {\n                // Now handle the addition of the newTrack at the JitsiConference level\n                this._setupNewTrack(newTrack);\n                newTrack.isVideoTrack() && this.rtc.setVideoType(newTrack.videoType);\n            } else {\n                oldTrack && oldTrack.isVideoTrack() && this.rtc.setVideoType(VideoType.NONE);\n            }\n\n            return Promise.resolve();\n        })\n        .catch(error => Promise.reject(new Error(error)));\n};\n\n/**\n * Replaces the tracks at the lower level by going through the Jingle session\n * and WebRTC peer connection. The method will resolve immediately if there is\n * currently no JingleSession started.\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\n * the process or <tt>null</t> if the method should act as \"add track\"\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\n * <tt>null</tt> if the method should act as \"remove track\"\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n * @private\n */\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\n    const replaceTrackPromises = [];\n\n    if (this.jvbJingleSession) {\n        replaceTrackPromises.push(\n            this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no JVB JingleSession');\n    }\n\n    if (this.p2pJingleSession) {\n        replaceTrackPromises.push(\n            this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no P2P JingleSession');\n    }\n\n    return Promise.all(replaceTrackPromises);\n};\n\n/**\n * Operations related to creating a new track\n * @param {JitsiLocalTrack} newTrack the new track being created\n */\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack()\n            && newTrack.videoType !== VideoType.DESKTOP)) {\n        // Report active device to statistics\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\n        const device\n            = devices.find(\n                d =>\n                    d.kind === `${newTrack.getTrack().kind}input`\n                        && d.label === newTrack.getTrack().label);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n    if (newTrack.isVideoTrack()) {\n        const videoTypeTagName = 'videoType';\n\n        // if video type is camera and there is no videoType in presence, we skip adding it, as this is the default one\n        if (newTrack.videoType !== VideoType.CAMERA || this.room.getFromPresence(videoTypeTagName)) {\n            this.sendCommand(videoTypeTagName, { value: newTrack.videoType });\n        }\n    }\n    this.rtc.addLocalTrack(newTrack);\n\n    // ensure that we're sharing proper \"is muted\" state\n    if (newTrack.isAudioTrack()) {\n        this.room.setAudioMute(newTrack.isMuted());\n    } else {\n        this.room.setVideoMute(newTrack.isMuted());\n    }\n\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\n    newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        newTrack.muteHandler);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        newTrack.audioLevelHandler);\n\n    newTrack._setConference(this);\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to add\n * back the underlying WebRTC MediaStream to the PeerConnection (which has\n * removed on video mute).\n * @param {JitsiLocalTrack} track the local track that will be added as part of\n * the unmute operation.\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n */\nJitsiConference.prototype._addLocalTrackAsUnmute = function(track) {\n    const addAsUnmutePromises = [];\n\n    if (this.jvbJingleSession) {\n        addAsUnmutePromises.push(this.jvbJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.debug('Add local MediaStream as unmute - no JVB Jingle session started yet');\n    }\n\n    if (this.p2pJingleSession) {\n        addAsUnmutePromises.push(this.p2pJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.debug('Add local MediaStream as unmute - no P2P Jingle session started yet');\n    }\n\n    return Promise.allSettled(addAsUnmutePromises)\n        .then(() => {\n            // Signal the video type to the bridge.\n            track.isVideoTrack() && this.rtc.setVideoType(track.videoType);\n        });\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to remove\n * the underlying WebRTC MediaStream from the PeerConnection. The purpose of\n * that is to stop sending any data and turn off the HW camera device.\n * @param {JitsiLocalTrack} track the local track that will be removed.\n * @return {Promise}\n */\nJitsiConference.prototype._removeLocalTrackAsMute = function(track) {\n    const removeAsMutePromises = [];\n\n    if (this.jvbJingleSession) {\n        removeAsMutePromises.push(this.jvbJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.debug('Remove local MediaStream - no JVB JingleSession started yet');\n    }\n    if (this.p2pJingleSession) {\n        removeAsMutePromises.push(this.p2pJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.debug('Remove local MediaStream - no P2P JingleSession started yet');\n    }\n\n    return Promise.allSettled(removeAsMutePromises)\n        .then(() => {\n            // Signal the video type to the bridge.\n            track.isVideoTrack() && this.rtc.setVideoType(VideoType.NONE);\n        });\n};\n\n/**\n * Get role of the local user.\n * @returns {string} user role: 'moderator' or 'none'\n */\nJitsiConference.prototype.getRole = function() {\n    return this.room.role;\n};\n\n/**\n * Returns whether or not the current conference has been joined as a hidden\n * user.\n *\n * @returns {boolean|null} True if hidden, false otherwise. Will return null if\n * no connection is active.\n */\nJitsiConference.prototype.isHidden = function() {\n    if (!this.connection) {\n        return null;\n    }\n\n    return Strophe.getDomainFromJid(this.connection.getJid())\n        === this.options.config.hiddenDomain;\n};\n\n/**\n * Check if local user is moderator.\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\n * we're no longer in the conference room then <tt>null</tt> is returned.\n */\nJitsiConference.prototype.isModerator = function() {\n    return this.room ? this.room.isModerator() : null;\n};\n\n/**\n * Set password for the room.\n * @param {string} password new password for the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.lock = function(password) {\n    if (!this.isModerator()) {\n        return Promise.reject(new Error('You are not moderator.'));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.room.lockRoom(\n            password || '',\n            () => resolve(),\n            err => reject(err),\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\n    });\n};\n\n/**\n * Remove password from the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.unlock = function() {\n    return this.lock();\n};\n\n/**\n * Elects the participant with the given id to be the selected participant in\n * order to receive higher video quality (if simulcast is enabled).\n * Or cache it if channel is not created and send it once channel is available.\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipant = function(participantId) {\n    this.selectParticipants([ participantId ]);\n};\n\n/*\n * Elects participants with given ids to be the selected participants in order\n * to receive higher video quality (if simulcast is enabled). The argument\n * should be an array of participant id strings or an empty array; an error will\n * be thrown if a non-array is passed in. The error is thrown as a layer of\n * protection against passing an invalid argument, as the error will happen in\n * the bridge and may not be visible in the client.\n *\n * @param {Array<strings>} participantIds - An array of identifiers for\n * participants.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipants = function(participantIds) {\n    if (!Array.isArray(participantIds)) {\n        throw new Error('Invalid argument; participantIds must be an array.');\n    }\n\n    this.receiveVideoController.selectEndpoints(participantIds);\n};\n\n/**\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\n * @returns {number}\n */\nJitsiConference.prototype.getLastN = function() {\n    return this.receiveVideoController.getLastN();\n};\n\n/**\n * Selects a new value for \"lastN\". The requested amount of videos are going\n * to be delivered after the value is in effect. Set to -1 for unlimited or\n * all available videos.\n * @param lastN the new number of videos the user would like to receive.\n * @throws Error or RangeError if the given value is not a number or is smaller\n * than -1.\n */\nJitsiConference.prototype.setLastN = function(lastN) {\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\n        throw new Error(`Invalid value for lastN: ${lastN}`);\n    }\n    const n = Number(lastN);\n\n    if (n < -1) {\n        throw new RangeError('lastN cannot be smaller than -1');\n    }\n    this.receiveVideoController.setLastN(n);\n\n    // If the P2P session is not fully established yet, we wait until it gets\n    // established.\n    if (this.p2pJingleSession) {\n        const isVideoActive = n !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    `Failed to adjust video transfer status (${isVideoActive})`,\n                    error);\n            });\n    }\n};\n\n/**\n * Checks if the participant given by participantId is currently included in\n * the last N.\n * @param {string} participantId the identifier of the participant we would\n * like to check.\n * @return {boolean} true if the participant with id is in the last N set or\n * if there's no last N set, false otherwise.\n * @deprecated this method should never be used to figure out the UI, but\n * {@link ParticipantConnectionStatus} should be used instead.\n */\nJitsiConference.prototype.isInLastN = function(participantId) {\n    return this.rtc.isInLastN(participantId);\n};\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this\n * conference.\n */\nJitsiConference.prototype.getParticipants = function() {\n    return Object.values(this.participants);\n};\n\n/**\n * Returns the number of participants in the conference, including the local\n * participant.\n * @param countHidden {boolean} Whether or not to include hidden participants\n * in the count. Default: false.\n **/\nJitsiConference.prototype.getParticipantCount\n    = function(countHidden = false) {\n\n        let participants = this.getParticipants();\n\n        if (!countHidden) {\n            participants = participants.filter(p => !p.isHidden());\n        }\n\n        // Add one for the local participant.\n        return participants.length + 1;\n    };\n\n/**\n * @returns {JitsiParticipant} the participant in this conference with the\n * specified id (or undefined if there isn't one).\n * @param id the id of the participant.\n */\nJitsiConference.prototype.getParticipantById = function(id) {\n    return this.participants[id];\n};\n\n/**\n * Grant owner rights to the participant.\n * @param {string} id id of the participant to grant owner rights to.\n */\nJitsiConference.prototype.grantOwner = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.setAffiliation(participant.getJid(), 'owner');\n};\n\n/**\n * Revoke owner rights to the participant or local Participant as\n * the user might want to refuse to be a moderator.\n * @param {string} id id of the participant to revoke owner rights to.\n */\nJitsiConference.prototype.revokeOwner = function(id) {\n    const participant = this.getParticipantById(id);\n    const isMyself = this.myUserId() === id;\n    const role = this.isMembersOnly() ? 'member' : 'none';\n\n    if (isMyself) {\n        this.room.setAffiliation(this.room.myroomjid, role);\n    } else if (participant) {\n        this.room.setAffiliation(participant.getJid(), role);\n    }\n};\n\n\n/**\n * Kick participant from this conference.\n * @param {string} id id of the participant to kick\n * @param {string} reason reason of the participant to kick\n */\nJitsiConference.prototype.kickParticipant = function(id, reason) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.kick(participant.getJid(), reason);\n};\n\n/**\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\n * analytics event.\n * @private\n */\nJitsiConference.prototype._maybeClearSITimeout = function() {\n    if (this._sessionInitiateTimeout\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\n        window.clearTimeout(this._sessionInitiateTimeout);\n        this._sessionInitiateTimeout = null;\n    }\n};\n\n/**\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\n * event.\n * @private\n */\nJitsiConference.prototype._maybeSetSITimeout = function() {\n    // Jicofo is supposed to invite if there are at least 2 participants\n    if (!this.jvbJingleSession\n            && this.getParticipantCount() >= 2\n            && !this._sessionInitiateTimeout) {\n        this._sessionInitiateTimeout = window.setTimeout(() => {\n            this._sessionInitiateTimeout = null;\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_SI_TIMEOUT,\n                {\n                    p2p: false,\n                    value: JINGLE_SI_TIMEOUT\n                }));\n        }, JINGLE_SI_TIMEOUT);\n    }\n};\n\n/**\n * Mutes a participant.\n * @param {string} id The id of the participant to mute.\n */\nJitsiConference.prototype.muteParticipant = function(id, mediaType) {\n    const muteMediaType = mediaType ? mediaType : MediaType.AUDIO;\n\n    if (muteMediaType !== MediaType.AUDIO && muteMediaType !== MediaType.VIDEO) {\n        logger.error(`Unsupported media type: ${muteMediaType}`);\n\n        return;\n    }\n\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.muteParticipant(participant.getJid(), true, muteMediaType);\n};\n\n/* eslint-disable max-params */\n\n/**\n * Notifies this JitsiConference that a new member has joined its chat room.\n *\n * FIXME This should NOT be exposed!\n *\n * @param jid the jid of the participant in the MUC\n * @param nick the display name of the participant\n * @param role the role of the participant in the MUC\n * @param isHidden indicates if this is a hidden participant (system\n * participant for example a recorder).\n * @param statsID the participant statsID (optional)\n * @param status the initial status if any\n * @param identity the member identity, if any\n * @param botType the member botType, if any\n * @param fullJid the member full jid, if any\n * @param features the member botType, if any\n */\nJitsiConference.prototype.onMemberJoined = function(\n        jid, nick, role, isHidden, statsID, status, identity, botType, fullJid, features) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant\n        = new JitsiParticipant(jid, this, nick, isHidden, statsID, status, identity);\n\n    participant.setRole(role);\n    participant.setBotType(botType);\n    participant.setFeatures(features);\n\n    this.participants[id] = participant;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_JOINED,\n        id,\n        participant);\n\n    this._updateFeatures(participant);\n\n    // maybeStart only if we had finished joining as then we will have information for the number of participants\n    if (this.isJoined()) {\n        this._maybeStartOrStopP2P();\n    }\n\n    this._maybeSetSITimeout();\n};\n\n/* eslint-enable max-params */\n\n/**\n * Get notified when we joined the room.\n *\n * FIXME This should NOT be exposed!\n *\n * @private\n */\nJitsiConference.prototype._onMucJoined = function() {\n    this._maybeStartOrStopP2P();\n};\n\n/**\n * Updates features for a participant.\n * @param {JitsiParticipant} participant - The participant to query for features.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._updateFeatures = function(participant) {\n    participant.getFeatures()\n        .then(features => {\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\n            this.updateDTMFSupport();\n\n            if (features.has(FEATURE_JIGASI)) {\n                participant.setProperty('features_jigasi', true);\n            }\n\n            if (features.has(FEATURE_E2EE)) {\n                participant.setProperty('features_e2ee', true);\n            }\n        })\n        .catch(() => false);\n};\n\n/**\n * Get notified when member bot type had changed.\n * @param jid the member jid\n * @param botType the new botType value\n * @private\n */\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\n\n    // find the participant and mark it as non bot, as the real one will join\n    // in a moment\n    const peers = this.getParticipants();\n    const botParticipant = peers.find(p => p.getJid() === jid);\n\n    if (botParticipant) {\n        botParticipant.setBotType(botType);\n        const id = Strophe.getResourceFromJid(jid);\n\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\n            id,\n            botType);\n    }\n\n    // if botType changed to undefined, botType was removed, in case of\n    // poltergeist mode this is the moment when the poltergeist had exited and\n    // the real participant had already replaced it.\n    // In this case we can check and try p2p\n    if (!botParticipant.getBotType()) {\n        this._maybeStartOrStopP2P();\n    }\n};\n\nJitsiConference.prototype.onMemberLeft = function(jid) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant = this.participants[id];\n\n    delete this.participants[id];\n\n    // Remove the ssrcs from the remote description.\n    const mediaSessions = this._getMediaSessions();\n    const removePromises = [];\n\n    for (const session of mediaSessions) {\n        removePromises.push(session.removeRemoteStreamsOnLeave(id));\n    }\n\n    Promise.allSettled(removePromises)\n        .then(results => {\n            let removedTracks = [];\n\n            results.map(result => result.value).forEach(value => {\n                if (value) {\n                    removedTracks = removedTracks.concat(value);\n                }\n            });\n\n            removedTracks.forEach(track => {\n                this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n            });\n\n            // There can be no participant in case the member that left is focus.\n            if (participant) {\n                this.eventEmitter.emit(JitsiConferenceEvents.USER_LEFT, id, participant);\n            }\n\n            this._maybeStartOrStopP2P(true /* triggered by user left event */);\n            this._maybeClearSITimeout();\n        });\n};\n\n/**\n * Designates an event indicating that we were kicked from the XMPP MUC.\n * @param {boolean} isSelfPresence - whether it is for local participant\n * or another participant.\n * @param {string} actorId - the id of the participant who was initiator\n * of the kick.\n * @param {string?} kickedParticipantId - when it is not a kick for local participant,\n * this is the id of the participant which was kicked.\n * @param {string} reason - reason of the participant to kick\n */\nJitsiConference.prototype.onMemberKicked = function(isSelfPresence, actorId, kickedParticipantId, reason) {\n    // This check which be true when we kick someone else. With the introduction of lobby\n    // the ChatRoom KICKED event is now also emitted for ourselves (the kicker) so we want to\n    // avoid emitting an event where `undefined` kicked someone.\n    if (actorId === this.myUserId()) {\n        return;\n    }\n\n    const actorParticipant = this.participants[actorId];\n\n    if (isSelfPresence) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.KICKED, actorParticipant, reason);\n\n        this.leave();\n\n        return;\n    }\n\n    const kickedParticipant = this.participants[kickedParticipantId];\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.PARTICIPANT_KICKED, actorParticipant, kickedParticipant, reason);\n};\n\n/**\n * Method called on local MUC role change.\n * @param {string} role the name of new user's role as defined by XMPP MUC.\n */\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\n    // Emit role changed for local  JID\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\n};\n\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    participant.setRole(role);\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\n};\n\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n\n    if (participant._displayName === displayName) {\n        return;\n    }\n\n    participant._displayName = displayName;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n        id,\n        displayName);\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was added into\n * the conference.\n *\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this\n * JitsiConference\n */\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\n    if (track.isP2P && !this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote P2P track, when not in P2P - IGNORED');\n\n        return;\n    } else if (!track.isP2P && this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote JVB track, when in P2P - IGNORED');\n\n        return;\n    }\n\n    const id = track.getParticipantId();\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        logger.error(`No participant found for id: ${id}`);\n\n        return;\n    }\n\n    // Add track to JitsiParticipant.\n    participant._tracks.push(track);\n\n    if (this.transcriber) {\n        this.transcriber.addTrack(track);\n    }\n\n    const emitter = this.eventEmitter;\n\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        (audioLevel, tpc) => {\n            const activeTPC = this.getActivePeerConnection();\n\n            if (activeTPC === tpc) {\n                emitter.emit(\n                    JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    id,\n                    audioLevel);\n            }\n        }\n    );\n\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\n};\n\n/**\n * Callback called by the Jingle plugin when 'session-answer' is received.\n * @param {JingleSessionPC} session the Jingle session for which an answer was\n * received.\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P setAnswer');\n\n        this.p2pJingleSession.setAnswer(answer);\n        this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, this.p2pJingleSession);\n    }\n};\n\n/**\n * Callback called by the Jingle plugin when 'transport-info' is received.\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\n * received\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\n * element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P addIceCandidates');\n        this.p2pJingleSession.addIceCandidates(transportInfo);\n    }\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\n * the conference.\n *\n * @param {JitsiRemoteTrack} removedTrack\n */\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\n    this.getParticipants().forEach(participant => {\n        const tracks = participant.getTracks();\n\n        for (let i = 0; i < tracks.length; i++) {\n            if (tracks[i] === removedTrack) {\n                // Since the tracks have been compared and are\n                // considered equal the result of splice can be ignored.\n                participant._tracks.splice(i, 1);\n\n                this.eventEmitter.emit(\n                    JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\n\n                if (this.transcriber) {\n                    this.transcriber.removeTrack(removedTrack);\n                }\n\n                break;\n            }\n        }\n    }, this);\n};\n\n/**\n * Handles an incoming call event for the P2P jingle session.\n */\nJitsiConference.prototype._onIncomingCallP2P = function(\n        jingleSession,\n        jingleOffer) {\n\n    let rejectReason;\n\n    if (!browser.supportsP2P()) {\n        rejectReason = {\n            reason: 'unsupported-applications',\n            reasonDescription: 'P2P not supported',\n            errorMsg: 'This client does not support P2P connections'\n        };\n    } else if (!this.isP2PEnabled() && !this.isP2PTestModeEnabled()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P mode disabled in the configuration'\n        };\n    } else if (this.p2pJingleSession) {\n        // Reject incoming P2P call (already in progress)\n        rejectReason = {\n            reason: 'busy',\n            reasonDescription: 'P2P already in progress',\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\n        };\n    } else if (!this._shouldBeInP2PMode()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P requirements not met',\n            errorMsg: 'Received P2P \"session-initiate\" when should not be in P2P mode'\n        };\n        Statistics.sendAnalytics(createJingleEvent(ACTION_P2P_DECLINED));\n    }\n\n    if (rejectReason) {\n        this._rejectIncomingCall(jingleSession, rejectReason);\n    } else {\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\n    }\n};\n\n/**\n * Handles an incoming call event.\n */\nJitsiConference.prototype.onIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n    // Handle incoming P2P call\n    if (jingleSession.isP2P) {\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\n    } else {\n        if (!this.room.isFocus(jingleSession.remoteJid)) {\n            const description = 'Rejecting session-initiate from non-focus.';\n\n            this._rejectIncomingCall(\n                jingleSession, {\n                    reason: 'security-error',\n                    reasonDescription: description,\n                    errorMsg: description\n                });\n\n            return;\n        }\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\n    }\n};\n\n/**\n * Accepts an incoming call event for the JVB jingle session.\n */\nJitsiConference.prototype._acceptJvbIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n\n    // Accept incoming call\n    this.jvbJingleSession = jingleSession;\n    this.room.connectionTimes['session.initiate'] = now;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    if (this.wasStopped) {\n        Statistics.sendAnalyticsAndLog(\n            createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\n    }\n\n    const serverRegion\n        = $(jingleOffer)\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\n            .attr('region');\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.SERVER_REGION_CHANGED,\n        serverRegion);\n\n    this._maybeClearSITimeout();\n    Statistics.sendAnalytics(createJingleEvent(\n        ACTION_JINGLE_SI_RECEIVED,\n        {\n            p2p: false,\n            value: now\n        }));\n\n    try {\n        jingleSession.initialize(this.room, this.rtc, {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n    } catch (error) {\n        GlobalOnErrorHandler.callErrorHandler(error);\n        logger.error(error);\n\n        return;\n    }\n\n    // Open a channel with the videobridge.\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\n\n    const localTracks = this._getInitialLocalTracks();\n\n    try {\n        jingleSession.acceptOffer(\n            jingleOffer,\n            () => {\n                // If for any reason invite for the JVB session arrived after\n                // the P2P has been established already the media transfer needs\n                // to be turned off here.\n                if (this.isP2PActive() && this.jvbJingleSession) {\n                    this._suspendMediaTransferForJvbConnection();\n                }\n\n                this.eventEmitter.emit(\n                    JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n                    jingleSession);\n                if (!this.isP2PActive()) {\n                    this.eventEmitter.emit(\n                        JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n                        jingleSession);\n                }\n            },\n            error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    'Failed to accept incoming Jingle session', error);\n            },\n            localTracks\n        );\n\n        // Start callstats as soon as peerconnection is initialized,\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\n        // happen in case if user doesn't have or denied permission to\n        // both camera and microphone.\n        logger.info('Starting CallStats for JVB connection...');\n        this.statistics.startCallStats(\n            this.jvbJingleSession.peerconnection,\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error(e);\n    }\n};\n\n/**\n * Sets the BridgeChannel.\n *\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\n * BridgeChannel mode.\n * @param {TraceablePeerConnection} pc the peer connection which will be used\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\n */\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\n    let wsUrl = null;\n    const webSocket\n        = $(offerIq)\n            .find('>content>transport>web-socket')\n            .first();\n\n    if (webSocket.length === 1) {\n        wsUrl = webSocket[0].getAttribute('url');\n    }\n\n    if (wsUrl) {\n        // If the offer contains a websocket use it.\n        this.rtc.initializeBridgeChannel(null, wsUrl);\n    } else {\n        // Otherwise, fall back to an attempt to use SCTP.\n        this.rtc.initializeBridgeChannel(pc, null);\n    }\n};\n\n/**\n * Rejects incoming Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\n * @param {object} [options]\n * @param {string} options.reason the name of the reason element as defined\n * by Jingle\n * @param {string} options.reasonDescription the reason description which will\n * be included in Jingle 'session-terminate' message.\n * @param {string} options.errorMsg an error message to be logged on global\n * error handler\n * @private\n */\nJitsiConference.prototype._rejectIncomingCall = function(\n        jingleSession,\n        options) {\n    if (options && options.errorMsg) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(options.errorMsg));\n    }\n\n    // Terminate the jingle session with a reason\n    jingleSession.terminate(\n        null /* success callback => we don't care */,\n        error => {\n            logger.warn(\n                'An error occurred while trying to terminate'\n                    + ' invalid Jingle session', error);\n        }, {\n            reason: options && options.reason,\n            reasonDescription: options && options.reasonDescription,\n            sendSessionTerminate: true\n        });\n};\n\n/**\n * Handles the call ended event.\n * XXX is this due to the remote side terminating the Jingle session?\n *\n * @param {JingleSessionPC} jingleSession the jingle session which has been\n * terminated.\n * @param {String} reasonCondition the Jingle reason condition.\n * @param {String|null} reasonText human readable reason text which may provide\n * more details about why the call has been terminated.\n */\nJitsiConference.prototype.onCallEnded = function(\n        jingleSession,\n        reasonCondition,\n        reasonText) {\n    logger.info(\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\n            jingleSession.isP2P}`);\n    if (jingleSession === this.jvbJingleSession) {\n        this.wasStopped = true;\n\n        Statistics.sendAnalytics(\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\n\n        // Stop the stats\n        if (this.statistics) {\n            this.statistics.stopRemoteStats(\n                this.jvbJingleSession.peerconnection);\n            logger.info('Stopping JVB CallStats');\n            this.statistics.stopCallStats(\n                this.jvbJingleSession.peerconnection);\n        }\n\n        // Current JVB JingleSession is no longer valid, so set it to null\n        this.jvbJingleSession = null;\n\n        // Let the RTC service do any cleanups\n        this.rtc.onCallEnded();\n    } else if (jingleSession === this.p2pJingleSession) {\n        // It's the responder who decides to enforce JVB mode, so that both\n        // initiator and responder are aware if it was intentional.\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\n            logger.info('In forced JVB 121 mode...');\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        } else if (reasonCondition === 'connectivity-error'\n            && reasonText === 'ICE FAILED') {\n            // It can happen that the other peer detects ICE failed and\n            // terminates the session, before we get the event on our side.\n            // But we are able to parse the reason and mark it here.\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n        }\n        this._stopP2PSession();\n    } else {\n        logger.error(\n            'Received onCallEnded for invalid session',\n            jingleSession.sid,\n            jingleSession.remoteJid,\n            reasonCondition,\n            reasonText);\n    }\n};\n\n/**\n * Handles the suspend detected event. Leaves the room and fires suspended.\n * @param {JingleSessionPC} jingleSession\n */\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\n    if (!jingleSession.isP2P) {\n        this.leave();\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\n    }\n};\n\nJitsiConference.prototype.updateDTMFSupport = function() {\n    let somebodySupportsDTMF = false;\n    const participants = this.getParticipants();\n\n    // check if at least 1 participant supports DTMF\n    for (let i = 0; i < participants.length; i += 1) {\n        if (participants[i].supportsDTMF()) {\n            somebodySupportsDTMF = true;\n            break;\n        }\n    }\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\n            somebodySupportsDTMF);\n    }\n};\n\n/**\n * Allows to check if there is at least one user in the conference\n * that supports DTMF.\n * @returns {boolean} true if somebody supports DTMF, false otherwise\n */\nJitsiConference.prototype.isDTMFSupported = function() {\n    return this.somebodySupportsDTMF;\n};\n\n/**\n * Returns the local user's ID\n * @return {string} local user's ID\n */\nJitsiConference.prototype.myUserId = function() {\n    return (\n        this.room && this.room.myroomjid\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\n            : null);\n};\n\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\n    const peerConnection = this.getActivePeerConnection();\n\n    if (peerConnection) {\n        peerConnection.sendTones(tones, duration, pause);\n    } else {\n        logger.warn('cannot sendTones: no peer connection');\n    }\n};\n\n/**\n * Starts recording the current conference.\n *\n * @param {Object} options - Configuration for the recording. See\n * {@link Chatroom#startRecording} for more info.\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\n */\nJitsiConference.prototype.startRecording = function(options) {\n    if (this.room) {\n        return this.recordingManager.startRecording(options);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Stop a recording session.\n *\n * @param {string} sessionID - The ID of the recording session that\n * should be stopped.\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\n */\nJitsiConference.prototype.stopRecording = function(sessionID) {\n    if (this.room) {\n        return this.recordingManager.stopRecording(sessionID);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Returns true if the SIP calls are supported and false otherwise\n */\nJitsiConference.prototype.isSIPCallingSupported = function() {\n    if (this.room) {\n        return this.room.isSIPCallingSupported();\n    }\n\n    return false;\n};\n\n/**\n * Dials a number.\n * @param number the number\n */\nJitsiConference.prototype.dial = function(number) {\n    if (this.room) {\n        return this.room.dial(number);\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Hangup an existing call\n */\nJitsiConference.prototype.hangup = function() {\n    if (this.room) {\n        return this.room.hangup();\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Starts the transcription service.\n */\nJitsiConference.prototype.startTranscriber = function() {\n    return this.dial('jitsi_meet_transcribe');\n};\n\n\n/**\n * Stops the transcription service.\n */\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\n\n/**\n * Returns the phone number for joining the conference.\n */\nJitsiConference.prototype.getPhoneNumber = function() {\n    if (this.room) {\n        return this.room.getPhoneNumber();\n    }\n\n    return null;\n};\n\n/**\n * Returns the pin for joining the conference with phone.\n */\nJitsiConference.prototype.getPhonePin = function() {\n    if (this.room) {\n        return this.room.getPhonePin();\n    }\n\n    return null;\n};\n\n/**\n * Returns the meeting unique ID if any.\n *\n * @returns {string|undefined}\n */\nJitsiConference.prototype.getMeetingUniqueId = function() {\n    if (this.room) {\n        return this.room.getMeetingId();\n    }\n};\n\n/**\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\n * which connection is currently active.\n *\n * @return {TraceablePeerConnection|null} null if there isn't any active\n * <tt>TraceablePeerConnection</tt> currently available.\n * @public (FIXME how to make package local ?)\n */\nJitsiConference.prototype.getActivePeerConnection = function() {\n    const session = this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n\n    return session ? session.peerconnection : null;\n};\n\n/**\n * Returns the connection state for the current room. Its ice connection state\n * for its session.\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\n * be converted to \"connected\".\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\n * peer connection at this time.\n */\nJitsiConference.prototype.getConnectionState = function() {\n    const peerConnection = this.getActivePeerConnection();\n\n    return peerConnection ? peerConnection.getConnectionState() : null;\n};\n\n/**\n * Make all new participants mute their audio/video on join.\n * @param policy {Object} object with 2 boolean properties for video and audio:\n * @param {boolean} audio if audio should be muted.\n * @param {boolean} video if video should be muted.\n */\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\n    if (!this.isModerator()) {\n        return;\n    }\n    this.startMutedPolicy = policy;\n    this.room.addOrReplaceInPresence('startmuted', {\n        attributes: {\n            audio: policy.audio,\n            video: policy.video,\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\n        }\n    }) && this.room.sendPresence();\n};\n\n/**\n * Returns current start muted policy\n * @returns {Object} with 2 properties - audio and video.\n */\nJitsiConference.prototype.getStartMutedPolicy = function() {\n    return this.startMutedPolicy;\n};\n\n/**\n * Check if audio is muted on join.\n */\nJitsiConference.prototype.isStartAudioMuted = function() {\n    return this.startAudioMuted;\n};\n\n/**\n * Check if video is muted on join.\n */\nJitsiConference.prototype.isStartVideoMuted = function() {\n    return this.startVideoMuted;\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConference.prototype.getConnectionTimes = function() {\n    return this.room.connectionTimes;\n};\n\n/**\n * Sets a property for the local participant.\n */\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\n    this.sendCommand(`jitsi_participant_${name}`, { value });\n};\n\n/**\n *  Removes a property for the local participant and sends the updated presence.\n */\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\n    this.removeCommand(`jitsi_participant_${name}`);\n    this.room.sendPresence();\n};\n\n/**\n * Gets a local participant property.\n *\n * @return value of the local participant property if the tagName exists in the\n * list of properties, otherwise returns undefined.\n */\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\n    const property = this.room.presMap.nodes.find(prop =>\n        prop.tagName === `jitsi_participant_${name}`\n    );\n\n    return property ? property.value : undefined;\n};\n\n/**\n * Sends the given feedback through CallStats if enabled.\n *\n * @param overallFeedback an integer between 1 and 5 indicating the\n * user feedback\n * @param detailedFeedback detailed feedback from the user. Not yet used\n * @returns {Promise} Resolves if feedback is submitted successfully.\n */\nJitsiConference.prototype.sendFeedback = function(\n        overallFeedback,\n        detailedFeedback) {\n    return this.statistics.sendFeedback(overallFeedback, detailedFeedback);\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nJitsiConference.prototype.isCallstatsEnabled = function() {\n    return this.statistics.isCallstatsEnabled();\n};\n\n/**\n * Finds the SSRC of a given track\n *\n * @param track\n * @returns {number|undefined} the SSRC of the specificed track, otherwise undefined.\n */\nJitsiConference.prototype.getSsrcByTrack = function(track) {\n    return track.isLocal() ? this.getActivePeerConnection()?.getLocalSSRC(track) : track.getSSRC();\n};\n\n/**\n * Handles track attached to container (Calls associateStreamWithVideoTag method\n * from statistics module)\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\n * @param container the container\n */\nJitsiConference.prototype._onTrackAttach = function(track, container) {\n    const isLocal = track.isLocal();\n    let ssrc = null;\n    const isP2P = track.isP2P;\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\n    const peerConnection\n        = isP2P\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\n\n    if (isLocal) {\n        // Local tracks have SSRC stored on per peer connection basis.\n        if (peerConnection) {\n            ssrc = peerConnection.getLocalSSRC(track);\n        }\n    } else {\n        ssrc = track.getSSRC();\n    }\n    if (!container.id || !ssrc || !peerConnection) {\n        return;\n    }\n\n    this.statistics.associateStreamWithVideoTag(\n        peerConnection,\n        ssrc,\n        isLocal,\n        remoteUserId,\n        track.getUsageLabel(),\n        container.id);\n};\n\n/**\n * Logs an \"application log\" message.\n * @param message {string} The message to log. Note that while this can be a\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\n * log valid JSON strings, with an \"id\" field used for distinguishing between\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\n */\nJitsiConference.prototype.sendApplicationLog = function(message) {\n    Statistics.sendLog(message);\n};\n\n/**\n * Checks if the user identified by given <tt>mucJid</tt> is the conference\n * focus.\n * @param mucJid the full MUC address of the user to be checked.\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\n */\nJitsiConference.prototype._isFocus = function(mucJid) {\n    return this.room ? this.room.isFocus(mucJid) : null;\n};\n\n/**\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\n */\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\n};\n\n/**\n * Sends a message via the data channel.\n * @param to {string} the id of the endpoint that should receive the message.\n * If \"\" the message will be sent to all participants.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\n    this.rtc.sendChannelMessage(to, payload);\n};\n\n/**\n * Sends local stats via the bridge channel which then forwards to other endpoints selectively.\n * @param {Object} payload The payload of the message.\n * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n */\nJitsiConference.prototype.sendEndpointStatsMessage = function(payload) {\n    this.rtc.sendEndpointStatsMessage(payload);\n};\n\n/**\n * Sends a broadcast message via the data channel.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\n    this.sendEndpointMessage('', payload);\n};\n\n/**\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\n * broadcasts it to all endpoints in the conference.\n * @param {string} to The ID of the endpoint/participant which is to receive\n * the message, or '' to broadcast the message to all endpoints in the\n * conference.\n * @param {string|object} message the message to send. If this is of type\n * 'string' it will be sent as a chat message. If it is of type 'object', it\n * will be encapsulated in a format recognized by jitsi-meet and converted to\n * JSON before being sent.\n * @param {boolean} sendThroughVideobridge Whether to send the message through\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\n */\nJitsiConference.prototype.sendMessage = function(\n        message,\n        to = '',\n        sendThroughVideobridge = false) {\n    const messageType = typeof message;\n\n    // Through videobridge we support only objects. Through XMPP we support\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\n    // regular chat messages).\n    if (messageType !== 'object'\n            && (sendThroughVideobridge || messageType !== 'string')) {\n        logger.error(`Can not send a message of type ${messageType}`);\n\n        return;\n    }\n\n    if (sendThroughVideobridge) {\n        this.sendEndpointMessage(to, message);\n    } else {\n        let messageToSend = message;\n\n        // Name of packet extension of message stanza to send the required\n        // message in.\n        let elementName = 'body';\n\n        if (messageType === 'object') {\n            elementName = 'json-message';\n\n            // Mark as valid JSON message if not already\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\n            }\n\n            try {\n                messageToSend = JSON.stringify(messageToSend);\n            } catch (e) {\n                logger.error('Can not send a message, stringify failed: ', e);\n\n                return;\n            }\n        }\n\n        if (to) {\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\n        } else {\n            // Broadcast\n            this.sendTextMessage(messageToSend, elementName);\n        }\n    }\n\n};\n\nJitsiConference.prototype.isConnectionInterrupted = function() {\n    return this.isP2PActive()\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTARTED} event. This happens when the bridge goes down\n * and Jicofo moves conferences away to a different bridge.\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onConferenceRestarted = function(session) {\n    if (!session.isP2P && this.options.config.enableForcedReload) {\n        this.restartInProgress = true;\n        this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, JitsiConferenceErrors.CONFERENCE_RESTARTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = true;\n    } else {\n        this.isJvbConnectionInterrupted = true;\n    }\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\n    // eventually come up with the new offer (at least for the time being).\n    if (session.isP2P) {\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\n        // and \"bad\" connection\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n\n        if (this.p2pJingleSession) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(\n                    ACTION_P2P_FAILED,\n                    {\n                        initiator: this.p2pJingleSession.isInitiator\n                    }));\n\n        }\n        this._stopP2PSession('connectivity-error', 'ICE FAILED');\n    } else if (session && this.jvbJingleSession === session) {\n        this._delayedIceFailed = new IceFailedHandling(this);\n        this._delayedIceFailed.start(session);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = false;\n    } else {\n        this.isJvbConnectionInterrupted = false;\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\n    }\n\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\n    }\n};\n\n/**\n * Accept incoming P2P Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\n * @private\n */\nJitsiConference.prototype._acceptP2PIncomingCall = function(\n        jingleSession,\n        jingleOffer) {\n    this.isP2PConnectionInterrupted = false;\n\n    // Accept the offer\n    this.p2pJingleSession = jingleSession;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc, {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this._getInitialLocalTracks();\n\n    this.p2pJingleSession.acceptOffer(\n        jingleOffer,\n        () => {\n            logger.debug('Got RESULT for P2P \"session-accept\"');\n\n            this.eventEmitter.emit(\n                JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n                this.p2pJingleSession);\n        },\n        error => {\n            logger.error(\n                'Failed to accept incoming P2P Jingle session', error);\n        },\n        localTracks);\n};\n\n/**\n * Adds remote tracks to the conference associated with the JVB session.\n * @private\n */\nJitsiConference.prototype._addRemoteJVBTracks = function() {\n    this._addRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Adds remote tracks to the conference associated with the P2P session.\n * @private\n */\nJitsiConference.prototype._addRemoteP2PTracks = function() {\n    this._addRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track added\" events for given Jingle session.\n * @param {string} logName the session's nickname which will appear in log\n * messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\n * @private\n */\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Adding remote ${logName} track: ${track}`);\n        this.onRemoteTrackAdded(track);\n    }\n};\n\n/**\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\n * the P2P connection if the event comes from the P2P session.\n * @param {JingleSessionPC} jingleSession the session instance.\n * @private\n */\nJitsiConference.prototype._onIceConnectionEstablished = function(\n        jingleSession) {\n    if (this.p2pJingleSession !== null) {\n        // store the establishment time of the p2p session as a field of the\n        // JitsiConference because the p2pJingleSession might get disposed (thus\n        // the value is lost).\n        this.p2pEstablishmentDuration\n            = this.p2pJingleSession.establishmentDuration;\n    }\n\n    if (this.jvbJingleSession !== null) {\n        this.jvbEstablishmentDuration\n            = this.jvbJingleSession.establishmentDuration;\n    }\n\n    let done = false;\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\n\n    // We don't care about the JVB case, there's nothing to be done\n    if (!jingleSession.isP2P) {\n        done = true;\n    } else if (this.p2pJingleSession !== jingleSession) {\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\n\n        done = true;\n    } else if (!jingleSession.isInitiator\n        && typeof forceJVB121Ratio === 'number'\n        && Math.random() < forceJVB121Ratio) {\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        this._stopP2PSession('decline', 'force JVB121');\n\n        done = true;\n    }\n\n    if (!isNaN(this.p2pEstablishmentDuration)\n        && !isNaN(this.jvbEstablishmentDuration)) {\n        const establishmentDurationDiff\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\n\n        Statistics.sendAnalytics(\n            ICE_ESTABLISHMENT_DURATION_DIFF,\n            { value: establishmentDurationDiff });\n    }\n\n    if (jingleSession.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\n    }\n\n    if (done) {\n\n        return;\n    }\n\n    // Update P2P status and emit events\n    this._setP2PStatus(true);\n\n    // Remove remote tracks\n    if (this.jvbJingleSession) {\n        this._removeRemoteJVBTracks();\n    } else {\n        logger.info('Not removing remote JVB tracks - no session yet');\n    }\n\n    this._addRemoteP2PTracks();\n\n    // Stop media transfer over the JVB connection\n    if (this.jvbJingleSession) {\n        this._suspendMediaTransferForJvbConnection();\n    }\n\n    logger.info('Starting remote stats with p2p connection');\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\n\n    Statistics.sendAnalyticsAndLog(\n        createP2PEvent(\n            ACTION_P2P_ESTABLISHED,\n            {\n                initiator: this.p2pJingleSession.isInitiator\n            }));\n\n};\n\n/**\n * Called when the chat room reads a new list of properties from jicofo's\n * presence. The properties may have changed, but they don't have to.\n *\n * @param {Object} properties - The properties keyed by the property name\n * ('key').\n * @private\n */\nJitsiConference.prototype._updateProperties = function(properties = {}) {\n    const changed = !isEqual(properties, this.properties);\n\n    this.properties = properties;\n    if (changed) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.PROPERTIES_CHANGED,\n            this.properties);\n\n        // Some of the properties need to be added to analytics events.\n        const analyticsKeys = [\n\n            // The number of jitsi-videobridge instances currently used for the\n            // conference.\n            'bridge-count',\n\n            // The conference creation time (set by jicofo).\n            'created-ms'\n        ];\n\n        analyticsKeys.forEach(key => {\n            if (properties[key] !== undefined) {\n                Statistics.analytics.addPermanentProperties({\n                    [key.replace('-', '_')]: properties[key]\n                });\n            }\n        });\n    }\n};\n\n/**\n * Gets a conference property with a given key.\n *\n * @param {string} key - The key.\n * @returns {*} The value\n */\nJitsiConference.prototype.getProperty = function(key) {\n    return this.properties[key];\n};\n\n/**\n * Clears the deferred start P2P task if it has been scheduled.\n * @private\n */\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\n    if (this.deferredStartP2PTask) {\n        logger.info('Cleared deferred start P2P task');\n        clearTimeout(this.deferredStartP2PTask);\n        this.deferredStartP2PTask = null;\n    }\n};\n\n/**\n * Removes from the conference remote tracks associated with the JVB\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\n    this._removeRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Removes from the conference remote tracks associated with the P2P\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\n    this._removeRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track removed\" events for given Jingle session.\n * @param {string} sessionNickname the session's nickname which will appear in\n * log messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\n * @private\n */\nJitsiConference.prototype._removeRemoteTracks = function(\n        sessionNickname,\n        remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\n        this.onRemoteTrackRemoved(track);\n    }\n};\n\n/**\n * Resumes media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\n    logger.info('Resuming media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(true, true).then(\n        () => {\n            logger.info('Resumed media transfer over the JVB connection!');\n        },\n        error => {\n            logger.error(\n                'Failed to resume media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Sets new P2P status and updates some events/states hijacked from\n * the <tt>JitsiConference</tt>.\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\n * @private\n */\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\n    if (this.p2p === newStatus) {\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\n\n        return;\n    }\n    this.p2p = newStatus;\n    if (newStatus) {\n        logger.info('Peer to peer connection established!');\n\n        // When we end up in a valid P2P session need to reset the properties\n        // in case they have persisted, after session with another peer.\n        Statistics.analytics.addPermanentProperties({\n            p2pFailed: false,\n            forceJvb121: false\n        });\n\n        // Sync up video transfer active in case p2pJingleSession not existed\n        // when the lastN value was being adjusted.\n        const isVideoActive = this.getLastN() !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    'Failed to sync up P2P video transfer status'\n                        + `(${isVideoActive})`, error);\n            });\n    } else {\n        logger.info('Peer to peer connection closed!');\n    }\n\n    // Put the JVB connection on hold/resume\n    if (this.jvbJingleSession) {\n        this.statistics.sendConnectionResumeOrHoldEvent(\n            this.jvbJingleSession.peerconnection, !newStatus);\n    }\n\n    // Clear dtmfManager, so that it can be recreated with new connection\n    this.dtmfManager = null;\n\n    // Update P2P status\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.P2P_STATUS,\n        this,\n        this.p2p);\n    this.eventEmitter.emit(\n        JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n        this._getActiveMediaSession());\n\n    // Refresh connection interrupted/restored\n    this.eventEmitter.emit(\n        this.isConnectionInterrupted()\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\n};\n\n/**\n * Starts new P2P session.\n * @param {string} remoteJid the JID of the remote participant\n * @private\n */\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\n    this._maybeClearDeferredStartP2P();\n    if (this.p2pJingleSession) {\n        logger.error('P2P session already started!');\n\n        return;\n    }\n\n    this.isP2PConnectionInterrupted = false;\n    this.p2pJingleSession\n        = this.xmpp.connection.jingle.newP2PJingleSession(\n            this.room.myroomjid,\n            remoteJid);\n    logger.info(\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc, {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this._getInitialLocalTracks();\n\n    this.p2pJingleSession.invite(localTracks);\n};\n\n/**\n * Suspends media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\n    logger.info('Suspending media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(false, false).then(\n        () => {\n            logger.info('Suspended media transfer over the JVB connection !');\n        },\n        error => {\n            logger.error(\n                'Failed to suspend media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Method when called will decide whether it's the time to start or stop\n * the P2P session.\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\n * originates from the user left event.\n * @private\n */\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\n    if (!browser.supportsP2P()\n        || !this.isP2PEnabled()\n        || this.isP2PTestModeEnabled()) {\n        logger.info('Auto P2P disabled');\n\n        return;\n    }\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n\n    // FIXME 1 peer and it must *support* P2P switching\n    const shouldBeInP2P = this._shouldBeInP2PMode();\n\n    // Clear deferred \"start P2P\" task\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\n        this._maybeClearDeferredStartP2P();\n    }\n\n    // Start peer to peer session\n    if (!this.p2pJingleSession && shouldBeInP2P) {\n        const peer = peerCount && peers[0];\n\n\n        const myId = this.myUserId();\n        const peersId = peer.getId();\n\n        if (myId > peersId) {\n            logger.debug(\n                'I\\'m the bigger peersId - '\n                + 'the other peer should start P2P', myId, peersId);\n\n            return;\n        } else if (myId === peersId) {\n            logger.error('The same IDs ? ', myId, peersId);\n\n            return;\n        }\n\n        const jid = peer.getJid();\n\n        if (userLeftEvent) {\n            if (this.deferredStartP2PTask) {\n                logger.error('Deferred start P2P task\\'s been set already!');\n\n                return;\n            }\n            logger.info(\n                `Will start P2P with: ${jid} after ${\n                    this.backToP2PDelay} seconds...`);\n            this.deferredStartP2PTask = setTimeout(\n                this._startP2PSession.bind(this, jid),\n                this.backToP2PDelay * 1000);\n        } else {\n            logger.info(`Will start P2P with: ${jid}`);\n            this._startP2PSession(jid);\n        }\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\n\n        // Log that there will be a switch back to the JVB connection\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\n        }\n        this._stopP2PSession();\n    }\n};\n\n/**\n * Tells whether or not this conference should be currently in the P2P mode.\n *\n * @private\n * @returns {boolean}\n */\nJitsiConference.prototype._shouldBeInP2PMode = function() {\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n    const hasBotPeer = peers.find(p => p.getBotType() === 'poltergeist' || p.hasFeature(FEATURE_JIGASI)) !== undefined;\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\n\n    logger.debug(`P2P? peerCount: ${peerCount}, hasBotPeer: ${hasBotPeer} => ${shouldBeInP2P}`);\n\n    return shouldBeInP2P;\n};\n\n/**\n * Stops the current P2P session.\n * @param {string} [reason=\"success\"] one of the Jingle \"reason\" element\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\n * @param {string} [reasonDescription=\"Turing off P2P session\"] text\n * description that will be included in the session terminate message\n * @private\n */\nJitsiConference.prototype._stopP2PSession = function(\n        reason,\n        reasonDescription) {\n    if (!this.p2pJingleSession) {\n        logger.error('No P2P session to be stopped!');\n\n        return;\n    }\n\n    const wasP2PEstablished = this.isP2PActive();\n\n    // Swap remote tracks, but only if the P2P has been fully established\n    if (wasP2PEstablished) {\n        if (this.jvbJingleSession) {\n            this._resumeMediaTransferForJvbConnection();\n        }\n\n        // Remove remote P2P tracks\n        this._removeRemoteP2PTracks();\n    }\n\n    // Stop P2P stats\n    logger.info('Stopping remote stats for P2P connection');\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\n    logger.info('Stopping CallStats for P2P connection');\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\n\n    this.p2pJingleSession.terminate(\n        () => {\n            logger.info('P2P session terminate RESULT');\n        },\n        error => {\n            // Because both initiator and responder are simultaneously\n            // terminating their JingleSessions in case of the 'to JVB switch'\n            // when 3rd participant joins, both will dispose their sessions and\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\n            // want to log this as an error since it's expected behaviour.\n            //\n            // We want them both to terminate, because in case of initiator's\n            // crash the responder would stay in P2P mode until ICE fails which\n            // could take up to 20 seconds.\n            //\n            // NOTE lack of 'reason' is considered as graceful session terminate\n            // where both initiator and responder terminate their sessions\n            // simultaneously.\n            if (reason) {\n                logger.error(\n                    'An error occurred while trying to terminate'\n                        + ' P2P Jingle session', error);\n            }\n        }, {\n            reason: reason ? reason : 'success',\n            reasonDescription: reasonDescription\n                ? reasonDescription : 'Turing off P2P session',\n            sendSessionTerminate: this.room\n                && this.getParticipantById(\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\n        });\n\n    this.p2pJingleSession = null;\n\n    // Update P2P status and other affected events/states\n    this._setP2PStatus(false);\n\n    if (wasP2PEstablished) {\n        // Add back remote JVB tracks\n        if (this.jvbJingleSession) {\n            this._addRemoteJVBTracks();\n        } else {\n            logger.info('Not adding remote JVB tracks - no session yet');\n        }\n    }\n};\n\n/**\n * Checks whether or not the conference is currently in the peer to peer mode.\n * Being in peer to peer mode means that the direct connection has been\n * established and the P2P connection is being used for media transmission.\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\n */\nJitsiConference.prototype.isP2PActive = function() {\n    return this.p2p;\n};\n\n/**\n * Returns the current ICE state of the P2P connection.\n * NOTE: method is used by the jitsi-meet-torture tests.\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\n * no P2P connection.\n */\nJitsiConference.prototype.getP2PConnectionState = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection.getConnectionState();\n    }\n\n    return null;\n};\n\n\n/**\n * Manually starts new P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.startP2PSession = function() {\n    const peers = this.getParticipants();\n\n    // Start peer to peer session\n    if (peers.length === 1) {\n        const peerJid = peers[0].getJid();\n\n        this._startP2PSession(peerJid);\n    } else {\n        throw new Error(\n            'There must be exactly 1 participant to start the P2P session !');\n    }\n};\n\n/**\n * Manually stops the current P2P session (should be used only in the tests)\n */\nJitsiConference.prototype.stopP2PSession = function() {\n    this._stopP2PSession();\n};\n\n/**\n * Get a summary of how long current participants have been the dominant speaker\n * @returns {object}\n */\nJitsiConference.prototype.getSpeakerStats = function() {\n    return this.speakerStatsCollector.getStats();\n};\n\n/**\n * Sets the constraints for the video that is requested from the bridge.\n *\n * @param {Object} videoConstraints The constraints which are specified in the\n * following format. The message updates the fields that are present and leaves the\n * rest unchanged on the bridge. Therefore, any field that is not applicable anymore\n * should be cleared by passing an empty object or list (whatever is applicable).\n * {\n *      'lastN': 20,\n *      'selectedEndpoints': ['A', 'B', 'C'],\n *      'onStageEndpoints': ['A'],\n *      'defaultConstraints': { 'maxHeight': 180 },\n *      'constraints': {\n *          'A': { 'maxHeight': 720 }\n *      }\n * }\n */\nJitsiConference.prototype.setReceiverConstraints = function(videoConstraints) {\n    this.receiveVideoController.setReceiverConstraints(videoConstraints);\n};\n\n/**\n * Sets the maximum video size the local participant should receive from remote\n * participants.\n *\n * @param {number} maxFrameHeight - the maximum frame height, in pixels,\n * this receiver is willing to receive.\n * @returns {void}\n */\nJitsiConference.prototype.setReceiverVideoConstraint = function(maxFrameHeight) {\n    this.receiveVideoController.setPreferredReceiveMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Sets the maximum video size the local participant should send to remote\n * participants.\n * @param {number} maxFrameHeight - The user preferred max frame height.\n * @returns {Promise} promise that will be resolved when the operation is\n * successful and rejected otherwise.\n */\nJitsiConference.prototype.setSenderVideoConstraint = function(maxFrameHeight) {\n    return this.sendVideoController.setPreferredSendMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Creates a video SIP GW session and returns it if service is enabled. Before\n * creating a session one need to check whether video SIP GW service is\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\n * if there are available nodes to serve this request, after creating the\n * session those nodes can be taken and the request about using the\n * created session can fail.\n *\n * @param {string} sipAddress - The sip address to be used.\n * @param {string} displayName - The display name to be used for this session.\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\n * initialised and there is no room.\n */\nJitsiConference.prototype.createVideoSIPGWSession\n    = function(sipAddress, displayName) {\n        if (!this.room) {\n            return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\n        }\n\n        return this.videoSIPGWHandler\n            .createVideoSIPGWSession(sipAddress, displayName);\n    };\n\n/**\n * Sends a conference.join analytics event.\n *\n * @returns {void}\n */\nJitsiConference.prototype._sendConferenceJoinAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (this._conferenceJoinAnalyticsEventSent || !meetingId || this.getActivePeerConnection() === null) {\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('joined', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`\n    }));\n    this._conferenceJoinAnalyticsEventSent = Date.now();\n};\n\n/**\n * Sends conference.left analytics event.\n * @private\n */\nJitsiConference.prototype._sendConferenceLeftAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (!meetingId || !this._conferenceJoinAnalyticsEventSent) {\n\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('left', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`,\n        stats: {\n            duration: Math.floor((Date.now() - this._conferenceJoinAnalyticsEventSent) / 1000),\n            perf: this.getPerformanceStats()\n        }\n    }));\n};\n\n/**\n * Restarts all active media sessions.\n *\n * @returns {void}\n */\nJitsiConference.prototype._restartMediaSessions = function() {\n    if (this.p2pJingleSession) {\n        this.stopP2PSession();\n    }\n\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.terminate(\n            null /* success callback => we don't care */,\n            error => {\n                logger.warn('An error occurred while trying to terminate the JVB session', error);\n            }, {\n                reason: 'success',\n                reasonDescription: 'restart required',\n                requestRestart: true,\n                sendSessionTerminate: true\n            });\n    }\n\n    this._maybeStartOrStopP2P(false);\n};\n\n/**\n * Returns whether End-To-End encryption is enabled.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EEEnabled = function() {\n    return this._e2eEncryption && this._e2eEncryption.isEnabled();\n};\n\n/**\n * Returns whether End-To-End encryption is supported. Note that not all participants\n * in the conference may support it.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EESupported = function() {\n    return E2EEncryption.isSupported(this.options.config);\n};\n\n/**\n * Enables / disables End-to-End encryption.\n *\n * @param {boolean} enabled whether to enable E2EE or not.\n * @returns {void}\n */\nJitsiConference.prototype.toggleE2EE = function(enabled) {\n    if (!this.isE2EESupported()) {\n        logger.warn('Cannot enable / disable E2EE: platform is not supported.');\n\n        return;\n    }\n\n    this._e2eEncryption.setEnabled(enabled);\n};\n\n/**\n * Returns <tt>true</tt> if lobby support is enabled in the backend.\n *\n * @returns {boolean} whether lobby is supported in the backend.\n */\nJitsiConference.prototype.isLobbySupported = function() {\n    return Boolean(this.room && this.room.getLobby().isSupported());\n};\n\n/**\n * Returns <tt>true</tt> if the room has members only enabled.\n *\n * @returns {boolean} whether conference room is members only.\n */\nJitsiConference.prototype.isMembersOnly = function() {\n    return Boolean(this.room && this.room.membersOnlyEnabled);\n};\n\n/**\n * Enables lobby by moderators\n *\n * @returns {Promise} resolves when lobby room is joined or rejects with the error.\n */\nJitsiConference.prototype.enableLobby = function() {\n    if (this.room && this.isModerator()) {\n        return this.room.getLobby().enable();\n    }\n\n    return Promise.reject(\n        new Error('The conference not started or user is not moderator'));\n};\n\n/**\n * Disabled lobby by moderators\n *\n * @returns {void}\n */\nJitsiConference.prototype.disableLobby = function() {\n    if (this.room && this.isModerator()) {\n        this.room.getLobby().disable();\n    }\n};\n\n/**\n * Joins the lobby room with display name and optional email or with a shared password to skip waiting.\n *\n * @param {string} displayName Display name should be set to show it to moderators.\n * @param {string} email Optional email is used to present avatar to the moderator.\n * @returns {Promise<never>}\n */\nJitsiConference.prototype.joinLobby = function(displayName, email) {\n    if (this.room) {\n        return this.room.getLobby().join(displayName, email);\n    }\n\n    return Promise.reject(new Error('The conference not started'));\n};\n\n/**\n * Denies an occupant in the lobby room access to the conference.\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyDenyAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().denyAccess(id);\n    }\n};\n\n/**\n * Approves the request to join the conference to a participant waiting in the lobby.\n *\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyApproveAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().approveAccess(id);\n    }\n};\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { SPEAKERS_AUDIO_LEVELS } from './modules/statistics/constants';\nimport Statistics from './modules/statistics/statistics';\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport VideoType from './service/RTC/VideoType';\nimport AuthenticationEvents\n    from './service/authentication/AuthenticationEvents';\nimport {\n    ACTION_JINGLE_SA_TIMEOUT,\n    createBridgeDownEvent,\n    createConnectionStageReachedEvent,\n    createFocusLeftEvent,\n    createJingleEvent,\n    createRemotelyMutedEvent\n} from './service/statistics/AnalyticsEvents';\nimport XMPPEvents from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Setups all event listeners related to conference\n * @param conference {JitsiConference} the conference\n */\nexport default function JitsiConferenceEventManager(conference) {\n    this.conference = conference;\n    this.xmppListeners = {};\n\n    // Listeners related to the conference only\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n        track => {\n            if (!track.isLocal() || !conference.statistics) {\n                return;\n            }\n            const session\n                = track.isP2P\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\n\n            // TPC will be null, before the conference starts, but the event\n            // still should be queued\n            const tpc = (session && session.peerconnection) || null;\n\n            conference.statistics.sendMuteEvent(\n                tpc,\n                track.isMuted(),\n                track.getType());\n        });\n}\n\n/**\n * Setups event listeners related to conference.chatRoom\n */\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\n    const conference = this.conference;\n    const chatRoom = conference.room;\n\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\n        this.conference.eventEmitter);\n\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\n        if (!jingleSession.isP2P) {\n            // If using DataChannel as bridge channel, it must be closed\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\n            // event for the channel established with the new bridge.\n            // TODO: This may be bypassed when using a WebSocket as bridge\n            // channel.\n            conference.rtc.closeBridgeChannel();\n        }\n\n        // else: there are no DataChannels in P2P session (at least for now)\n    });\n\n    chatRoom.addListener(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, (from, features) => {\n        const participant = conference.getParticipantById(Strophe.getResourceFromJid(from));\n\n        if (participant) {\n            participant.setFeatures(features);\n            conference.eventEmitter.emit(JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED, participant);\n        }\n    });\n\n    chatRoom.addListener(\n        XMPPEvents.ICE_RESTART_SUCCESS,\n        (jingleSession, offerIq) => {\n            // The JVB data chanel needs to be reopened in case the conference\n            // has been moved to a new bridge.\n            !jingleSession.isP2P\n                && conference._setBridgeChannel(\n                    offerIq, jingleSession.peerconnection);\n        });\n\n\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.AUDIO));\n\n            conference.mutedByFocusActor = actor;\n\n            // set isMutedByFocus when setAudioMute Promise ends\n            conference.rtc.setAudioMute(true).then(\n                () => {\n                    conference.isMutedByFocus = true;\n                    conference.mutedByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedByFocusActor = null;\n                        logger.warn(\n                            'Error while audio muting due to focus request', error);\n                    });\n        }\n    );\n\n    chatRoom.addListener(XMPPEvents.VIDEO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.VIDEO));\n\n            conference.mutedVideoByFocusActor = actor;\n\n            // set isVideoMutedByFocus when setVideoMute Promise ends\n            conference.rtc.setVideoMute(true).then(\n                () => {\n                    conference.isVideoMutedByFocus = true;\n                    conference.mutedVideoByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedVideoByFocusActor = null;\n                        logger.warn(\n                            'Error while video muting due to focus request', error);\n                    });\n        }\n    );\n\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\n        JitsiConferenceEvents.SUBJECT_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\n        JitsiConferenceEvents.CONFERENCE_JOINED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MEETING_ID_SET,\n        JitsiConferenceEvents.CONFERENCE_UNIQUE_ID_SET);\n\n    // send some analytics events\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\n        () => {\n            this.conference._onMucJoined();\n\n            this.conference.isJvbConnectionInterrupted = false;\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `conference_${key}`,\n                        { value: chatRoom.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `xmpp_${key}`,\n                        { value: chatRoom.xmpp.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n        });\n\n    chatRoom.addListener(XMPPEvents.RENEGOTIATION_FAILED, (e, session) => {\n        if (!session.isP2P) {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n        }\n    });\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.MEMBERS_ONLY_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\n    chatRoom.addListener(\n        XMPPEvents.BRIDGE_DOWN,\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_RESTARTED,\n        jingleSession => {\n            conference._onConferenceRestarted(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.RESERVATION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n        jingleSession => {\n            conference._onIceConnectionFailed(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.CHAT_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\n\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\n        () => {\n            Statistics.sendAnalytics(createFocusLeftEvent());\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.FOCUS_LEFT);\n        });\n\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\n        jingleSession => {\n            Statistics.sendAnalyticsAndLog(\n                createJingleEvent(\n                    ACTION_JINGLE_SA_TIMEOUT,\n                    { p2p: jingleSession.isP2P }));\n        });\n\n    chatRoom.addListener(XMPPEvents.RECORDER_STATE_CHANGED,\n        (session, jid) => {\n\n            if (jid) {\n                const participant = conference.getParticipantById(\n                    Strophe.getResourceFromJid(jid));\n\n                if (session.getStatus() === 'off') {\n                    session.setTerminator(participant);\n                } else if (session.getStatus() === 'on') {\n                    session.setInitiator(participant);\n                }\n            }\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                session);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\n\n    this.chatRoomForwarder.forward(\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\n\n    chatRoom.setParticipantPropertyListener((node, from) => {\n        const participant = conference.getParticipantById(from);\n\n        if (!participant) {\n            return;\n        }\n\n        participant.setProperty(\n            node.tagName.substring('jitsi_participant_'.length),\n            node.value);\n    });\n\n    chatRoom.addListener(XMPPEvents.KICKED,\n        conference.onMemberKicked.bind(conference));\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\n        conference.onSuspendDetected.bind(conference));\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n        JitsiConferenceEvents.MEMBERS_ONLY_CHANGED);\n\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\n        conference.onMemberJoined.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n        JitsiConferenceEvents.LOBBY_USER_JOINED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED,\n        JitsiConferenceEvents.LOBBY_USER_UPDATED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n        JitsiConferenceEvents.LOBBY_USER_LEFT);\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n        conference._onMemberBotTypeChanged.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\n        conference.onMemberLeft.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\n        JitsiConferenceEvents.CONFERENCE_LEFT);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DENIED_ACCESS,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED);\n\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\n        conference.onDisplayNameChanged.bind(conference));\n\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\n        conference.onLocalRoleChanged(role);\n\n        // log all events for the recorder operated by the moderator\n        if (conference.statistics && conference.isModerator()) {\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                recorderSession => {\n                    const logObject = {\n                        error: recorderSession.getError(),\n                        id: 'recorder_status',\n                        status: recorderSession.getStatus()\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n                });\n        }\n    });\n\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\n        conference.onUserRoleChanged.bind(conference));\n\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\n        (authEnabled, authIdentity) => {\n            conference.authEnabled = authEnabled;\n            conference.authIdentity = authIdentity;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\n                authIdentity);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, displayName, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\n                id, txt, ts, displayName);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, displayName, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\n        (jid, status) => {\n            const id = Strophe.getResourceFromJid(jid);\n            const participant = conference.getParticipantById(id);\n\n            if (!participant || participant._status === status) {\n                return;\n            }\n            participant._status = status;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\n        });\n\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const id = Strophe.getResourceFromJid(from);\n            const participant = conference.getParticipantById(id);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored XMPPEvents.JSON_MESSAGE_RECEIVED for not existing '\n                    + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\n        let isModerator = false;\n\n        if (conference.myUserId() === from && conference.isModerator()) {\n            isModerator = true;\n        } else {\n            const participant = conference.getParticipantById(from);\n\n            if (participant && participant.isModerator()) {\n                isModerator = true;\n            }\n        }\n\n        if (!isModerator) {\n            return;\n        }\n\n        const startAudioMuted = data.attributes.audio === 'true';\n        const startVideoMuted = data.attributes.video === 'true';\n\n        let updated = false;\n\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\n            conference.startMutedPolicy.audio = startAudioMuted;\n            updated = true;\n        }\n\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\n            conference.startMutedPolicy.video = startVideoMuted;\n            updated = true;\n        }\n\n        if (updated) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\n                conference.startMutedPolicy\n            );\n        }\n    });\n\n    if (conference.statistics) {\n        // FIXME ICE related events should end up in RTCEvents eventually\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n            session => {\n                conference.statistics.sendIceConnectionFailedEvent(\n                    session.peerconnection);\n            });\n\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\n            (e, pc) => {\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\n            });\n    }\n};\n\n/**\n * Setups event listeners related to conference.rtc\n */\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\n    const conference = this.conference;\n    const rtc = conference.rtc;\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_ADDED,\n        conference.onRemoteTrackAdded.bind(conference));\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_REMOVED,\n        conference.onRemoteTrackRemoved.bind(conference));\n\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\n        (dominant, previous) => {\n            if (conference.lastDominantSpeaker !== dominant && conference.room) {\n                conference.lastDominantSpeaker = dominant;\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, dominant, previous);\n\n                if (previous && previous.length) {\n                    const speakerList = previous.slice(0);\n\n                    // Add the dominant speaker to the top of the list (exclude self).\n                    if (conference.myUserId !== dominant) {\n                        speakerList.splice(0, 0, dominant);\n                    }\n\n                    // Trim the list to the top 5 speakers only.\n                    if (speakerList.length > SPEAKERS_AUDIO_LEVELS) {\n                        speakerList.splice(SPEAKERS_AUDIO_LEVELS, speakerList.length - SPEAKERS_AUDIO_LEVELS);\n                    }\n                    conference.statistics && conference.statistics.setSpeakerList(speakerList);\n                }\n                if (conference.statistics && conference.myUserId() === dominant) {\n                    // We are the new dominant speaker.\n                    conference.statistics.sendDominantSpeakerEvent(conference.room.roomjid);\n                }\n            }\n        });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        const now = window.performance.now();\n        const key = 'data.channel.opened';\n\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\n        logger.log(`(TIME) ${key}:\\t`, now);\n        conference.room.connectionTimes[key] = now;\n        Statistics.sendAnalytics(\n            createConnectionStageReachedEvent(key, { value: now }));\n\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\n    });\n\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\n                        + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    rtc.addListener(RTCEvents.ENDPOINT_STATS_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.ENDPOINT_STATS_RECEIVED, participant, payload);\n            } else {\n                logger.warn(`Ignoring ENDPOINT_STATS_RECEIVED for a non-existant participant: ${from}`);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'local_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'remote_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateOfferFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n        (track, ssrc) => {\n            // when starting screen sharing, the track is created and when\n            // we do set local description and we process the ssrc we\n            // will be notified for it and we will report it with the event\n            // for screen sharing\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\n            }\n        });\n};\n\n/**\n * Removes event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\n    const conference = this.conference;\n\n    Object.keys(this.xmppListeners).forEach(eventName => {\n        conference.xmpp.removeListener(\n            eventName,\n            this.xmppListeners[eventName]);\n    });\n    this.xmppListeners = {};\n};\n\n\n/**\n * Setups event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\n    const conference = this.conference;\n\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_INCOMING,\n        conference.onIncomingCall.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ACCEPTED,\n        conference.onCallAccepted.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.TRANSPORT_INFO,\n        conference.onTransportInfo.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ENDED,\n        conference.onCallEnded.bind(conference));\n\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\n        (audioMuted, videoMuted) => {\n            if (conference.options.config.ignoreStartMuted) {\n                return;\n            }\n\n            conference.startAudioMuted = audioMuted;\n            conference.startVideoMuted = videoMuted;\n\n            // mute existing local tracks because this is initial mute from\n            // Jicofo\n            conference.getLocalTracks().forEach(track => {\n                switch (track.getType()) {\n                case MediaType.AUDIO:\n                    conference.startAudioMuted && track.mute();\n                    break;\n                case MediaType.VIDEO:\n                    conference.startVideoMuted && track.mute();\n                    break;\n                }\n            });\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED,\n        createdTimestamp => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP, createdTimestamp);\n        });\n};\n\n/**\n * Add XMPP listener and save its reference for remove on leave conference.\n */\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\n        eventName, listener) {\n    this.xmppListeners[eventName] = listener;\n    this.conference.xmpp.addListener(eventName, listener);\n};\n\n/**\n * Setups event listeners related to conference.statistics\n */\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\n    const conference = this.conference;\n\n    if (!conference.statistics) {\n        return;\n    }\n\n    /* eslint-disable max-params */\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\n    });\n\n    /* eslint-enable max-params */\n\n    // Forward the \"before stats disposed\" event\n    conference.statistics.addBeforeDisposedListener(() => {\n        conference.eventEmitter.emit(\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\n    });\n\n    // if we are in startSilent mode we will not be sending/receiving so nothing to detect\n    if (!conference.options.config.startSilent) {\n        conference.statistics.addByteSentStatsListener((tpc, stats) => {\n            conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\n                const ssrc = tpc.getLocalSSRC(track);\n\n                if (!ssrc || !stats.hasOwnProperty(ssrc)) {\n                    return;\n                }\n\n                track._onByteSentStatsReceived(tpc, stats[ssrc]);\n            });\n        });\n    }\n};\n","import { BrowserDetection } from '@jitsi/js-utils';\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\n/* Minimum required Chrome / Chromium version. This applies also to derivatives. */\nconst MIN_REQUIRED_CHROME_VERSION = 72;\n\n// TODO: Move this code to js-utils.\n\n// NOTE: Now we are extending BrowserDetection in order to preserve\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\n// and BrowserDetection as separate objects in future.\n\n/**\n * Implements browser capabilities for lib-jitsi-meet.\n */\nexport default class BrowserCapabilities extends BrowserDetection {\n    /**\n     * Creates new BrowserCapabilities instance.\n     */\n    constructor() {\n        super();\n        logger.info(\n            `This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\n    }\n\n    /**\n     * Tells whether or not the <tt>MediaStream/tt> is removed from\n     * the <tt>PeerConnection</tt> and disposed on video mute (in order to turn\n     * off the camera device).\n     * @return {boolean} <tt>true</tt> if the current browser supports this\n     * strategy or <tt>false</tt> otherwise.\n     */\n    doesVideoMuteByStreamRemove() {\n        return this.isChromiumBased() || this.isWebKitBased();\n    }\n\n    /**\n     * Check whether or not the current browser support peer to peer connections\n     * @return {boolean} <tt>true</tt> if p2p is supported or <tt>false</tt>\n     * otherwise.\n     */\n    supportsP2P() {\n        return !this.usesUnifiedPlan();\n    }\n\n    /**\n     * Checks if the current browser is Chromium based, that is, it's either\n     * Chrome / Chromium or uses it as its engine, but doesn't identify as\n     * Chrome.\n     *\n     * This includes the following browsers:\n     * - Chrome and Chromium\n     * - Other browsers which use the Chrome engine, but are detected as Chrome,\n     *   such as Brave and Vivaldi\n     * - Browsers which are NOT Chrome but use it as their engine, and have\n     *   custom detection code: Opera, Electron and NW.JS\n     */\n    isChromiumBased() {\n        return this.isChrome()\n            || this.isElectron()\n            || this.isNWJS()\n            || this.isOpera();\n    }\n\n    /**\n     * Checks if the current browser is WebKit based. It's either\n     * Safari or uses WebKit as its engine.\n     *\n     * This includes Chrome and Firefox on iOS\n     *\n     * @returns {boolean}\n     */\n    isWebKitBased() {\n        // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\n        return this._bowser.isEngine('webkit')\n            && typeof navigator.mediaDevices !== 'undefined'\n            && typeof navigator.mediaDevices.getUserMedia !== 'undefined'\n            && typeof window.RTCRtpTransceiver !== 'undefined'\n            // eslint-disable-next-line no-undef\n            && Object.keys(RTCRtpTransceiver.prototype).indexOf('currentDirection') > -1;\n    }\n\n    /**\n     * Checks whether current running context is a Trusted Web Application.\n     *\n     * @returns {boolean} Whether the current context is a TWA.\n     */\n    isTwa() {\n        return 'matchMedia' in window && window.matchMedia('(display-mode:standalone)').matches;\n    }\n\n    /**\n     * Checks if the current browser is supported.\n     *\n     * @returns {boolean} true if the browser is supported, false otherwise.\n     */\n    isSupported() {\n        return (this.isChromiumBased() && this._getChromiumBasedVersion() >= MIN_REQUIRED_CHROME_VERSION)\n            || this.isFirefox()\n            || this.isReactNative()\n            || this.isWebKitBased();\n    }\n\n    /**\n     * Returns whether or not the current environment needs a user interaction\n     * with the page before any unmute can occur.\n     *\n     * @returns {boolean}\n     */\n    isUserInteractionRequiredForUnmute() {\n        return this.isFirefox() && this.isVersionLessThan('68');\n    }\n\n    /**\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\n     * user's connection is interrupted and the video stops playback.\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\n     * otherwise.\n     */\n    supportsVideoMuteOnConnInterrupted() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser reports upload and download bandwidth\n     * statistics.\n     * @return {boolean}\n     */\n    supportsBandwidthStatistics() {\n        // FIXME bandwidth stats are currently not implemented for FF on our\n        // side, but not sure if not possible ?\n        return !this.isFirefox() && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports setting codec preferences on the transceiver.\n     * @returns {boolean}\n     */\n    supportsCodecPreferences() {\n        return this.usesUnifiedPlan()\n            && Boolean(window.RTCRtpTransceiver\n            && window.RTCRtpTransceiver.setCodecPreferences\n            && window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities)\n\n            // this is not working on Safari because of the following bug\n            // https://bugs.webkit.org/show_bug.cgi?id=215567\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser support the device change event.\n     * @return {boolean}\n     */\n    supportsDeviceChangeEvent() {\n        return navigator.mediaDevices\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\n    }\n\n    /**\n     * Checks if the current browser supports RTT statistics for srflx local\n     * candidates through the legacy getStats() API.\n     */\n    supportsLocalCandidateRttStatistics() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports the Long Tasks API that lets us observe\n     * performance measurement events and be notified of tasks that take longer than\n     * 50ms to execute on the main thread.\n     */\n    supportsPerformanceObserver() {\n        return typeof window.PerformanceObserver !== 'undefined'\n            && PerformanceObserver.supportedEntryTypes.indexOf('longtask') > -1;\n    }\n\n    /**\n     * Checks if the current browser supports audio level stats on the receivers.\n     */\n    supportsReceiverStats() {\n        return typeof window.RTCRtpReceiver !== 'undefined'\n            && Object.keys(RTCRtpReceiver.prototype).indexOf('getSynchronizationSources') > -1\n\n            // Disable this on Safari because it is reporting 0.000001 as the audio levels for all\n            // remote audio tracks.\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser reports round trip time statistics for\n     * the ICE candidate pair.\n     * @return {boolean}\n     */\n    supportsRTTStatistics() {\n        // Firefox does not seem to report RTT for ICE candidate pair:\n        // eslint-disable-next-line max-len\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\n        // It does report mozRTT for RTP streams, but at the time of this\n        // writing it's value does not make sense most of the time\n        // (is reported as 1):\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\n        // For Chrome and others we rely on 'googRtt'.\n        return !this.isFirefox();\n    }\n\n    /**\n     * Checks if the browser uses plan B.\n     *\n     * @returns {boolean}\n     */\n    usesPlanB() {\n        return !this.usesUnifiedPlan();\n    }\n\n    /**\n     * Checks if the browser uses SDP munging for turning on simulcast.\n     *\n     * @returns {boolean}\n     */\n    usesSdpMungingForSimulcast() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the browser uses unified plan.\n     *\n     * @returns {boolean}\n     */\n    usesUnifiedPlan() {\n        if (this.isFirefox() || this.isWebKitBased()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns whether or not the current browser should be using the new\n     * getUserMedia flow, which utilizes the adapter shim. This method should\n     * be temporary and used while migrating all browsers to use adapter and\n     * the new getUserMedia.\n     *\n     * @returns {boolean}\n     */\n    usesNewGumFlow() {\n        if (this.isChromiumBased() || this.isFirefox() || this.isWebKitBased()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks if the browser uses webrtc-adapter. All browsers using the new\n     * getUserMedia flow.\n     *\n     * @returns {boolean}\n     */\n    usesAdapter() {\n        return this.usesNewGumFlow();\n    }\n\n    /**\n     * Checks if the browser uses RIDs/MIDs for siganling the simulcast streams\n     * to the bridge instead of the ssrcs.\n     */\n    usesRidsForSimulcast() {\n        return false;\n    }\n\n    /**\n     * Checks if the browser supports getDisplayMedia.\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\n     */\n    supportsGetDisplayMedia() {\n        return typeof navigator.getDisplayMedia !== 'undefined'\n            || (typeof navigator.mediaDevices !== 'undefined'\n                && typeof navigator.mediaDevices.getDisplayMedia\n                    !== 'undefined');\n    }\n\n    /**\n     * Checks if the browser supports insertable streams, needed for E2EE.\n     * @returns {boolean} {@code true} if the browser supports insertable streams.\n     */\n    supportsInsertableStreams() {\n        if (!(typeof window.RTCRtpSender !== 'undefined'\n            && (window.RTCRtpSender.prototype.createEncodedStreams\n                || window.RTCRtpSender.prototype.createEncodedVideoStreams))) {\n            return false;\n        }\n\n        // Feature-detect transferable streams which we need to operate in a worker.\n        // See https://groups.google.com/a/chromium.org/g/blink-dev/c/1LStSgBt6AM/m/hj0odB8pCAAJ\n        const stream = new ReadableStream();\n\n        try {\n            window.postMessage(stream, '*', [ stream ]);\n\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * Whether the browser supports the RED format for audio.\n     */\n    supportsAudioRed() {\n        return Boolean(window.RTCRtpSender\n            && window.RTCRtpSender.getCapabilities\n            && window.RTCRtpSender.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red')\n            && window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red'));\n    }\n\n    /**\n     * Checks if the browser supports the \"sdpSemantics\" configuration option.\n     * https://webrtc.org/web-apis/chrome/unified-plan/\n     *\n     * @returns {boolean}\n     */\n    supportsSdpSemantics() {\n        return this.isChromiumBased();\n    }\n\n    /**\n     * Returns the version of a Chromium based browser.\n     *\n     * @returns {Number}\n     */\n    _getChromiumBasedVersion() {\n        if (this.isChromiumBased()) {\n            // NW.JS doesn't expose the Chrome version in the UA string.\n            if (this.isNWJS()) {\n                // eslint-disable-next-line no-undef\n                return Number.parseInt(process.versions.chromium, 10);\n            }\n\n            // Here we process all browsers which use the Chrome engine but\n            // don't necessarily identify as Chrome. We cannot use the version\n            // comparing functions because the Electron, Opera and NW.JS\n            // versions are inconsequential here, as we need to know the actual\n            // Chrome engine version.\n            const ua = navigator.userAgent;\n\n            if (ua.match(/Chrome/)) {\n                const version\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\n\n                return version;\n            }\n        }\n\n        return -1;\n    }\n}\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.bowser=t():e.bowser=t()}(this,(function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=r(18),n=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getMacOSVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,i){void 0===i&&(i=!1);var n=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(n,s),a=0,u=e.map([t,r],(function(t){var r=o-e.getVersionPrecision(t),i=t+new Array(r+1).join(\".0\");return e.map(i.split(\".\"),(function(e){return new Array(20-e.length).join(\"0\")+e})).reverse()}));for(i&&(a=o-Math.min(n,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1}else if(u[0][o]<u[1][o])return-1}},e.map=function(e,t){var r,i=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)i.push(t(e[r]));return i},e.getBrowserAlias=function(e){return i.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return i.BROWSER_MAP[e]||\"\"},e}();t.default=n,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(91))&&i.__esModule?i:{default:i},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){}var t,r,i;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new n.default(e,t)},e.parse=function(e){return new n.default(e).getResult()},t=e,i=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),i&&o(t,i),e}();t.default=a,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=u(r(92)),n=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=i.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=n.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=s.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return Object.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},i=0,n={},s=0;if(Object.keys(e).forEach((function(t){var o=e[t];\"string\"==typeof o?(n[t]=o,s+=1):\"object\"==typeof o&&(r[t]=o,i+=1)})),i>0){var o=Object.keys(r),a=o.find((function(e){return t.isOS(e)}));if(a){var u=this.satisfies(r[a]);if(void 0!==u)return u}var d=o.find((function(e){return t.isPlatform(e)}));if(d){var c=this.satisfies(r[d]);if(void 0!==c)return c}}if(s>0){var f=Object.keys(n).find((function(e){return t.isBrowser(e,!0)}));if(void 0!==f)return this.compareVersion(n[f])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),i=e.toLowerCase(),n=a.default.getBrowserTypeByAlias(i);return t&&n&&(i=n.toLowerCase()),i===r},t.compareVersion=function(e){var t=[0],r=e,i=!1,n=this.getBrowserVersion();if(\"string\"==typeof n)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(i=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(i=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(n,r,i))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=n.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=n.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=n.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=n.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=n.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=n.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},r=n.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=n.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=n.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=n.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=n.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=n.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=n.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=n.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=n.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=n.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=n.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=n.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=n.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=n.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:\"Google Search\"},r=n.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:n.default.getFirstMatch(t,e),version:n.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/Roku\\/DVP/],describe:function(e){var t=n.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=n.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows/i],describe:function(e){var t=n.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=n.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/macintosh/i],describe:function(e){var t=n.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),r=n.default.getMacOSVersionName(t),i={name:s.OS_MAP.MacOS,version:t};return r&&(i.versionName=r),i}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=n.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=n.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),r=n.default.getAndroidVersionName(t),i={name:s.OS_MAP.Android,version:t};return r&&(i.versionName=r),i}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=n.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=n.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||n.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||n.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=n.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=n.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=n.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=n.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=n.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=n.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=n.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=n.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=n.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=n.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default}})}));","import { getLogger } from 'jitsi-meet-logger';\n\nimport {\n    TYPE_OPERATIONAL,\n    TYPE_PAGE,\n    TYPE_TRACK,\n    TYPE_UI\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nconst MAX_CACHE_SIZE = 100;\n\n// eslist-disable-line no-undef\nconst logger = getLogger(__filename);\n\n/**\n * This class provides an API to lib-jitsi-meet and its users for sending\n * analytics events. It serves as a bridge to different backend implementations\n * (\"analytics handlers\") and a cache for events attempted to be sent before\n * the analytics handlers were enabled.\n *\n * The API is designed to be an easy replacement for the previous version of\n * this adapter, and is meant to be extended with more convenience methods.\n *\n *\n * The API calls are translated to objects with the following structure, which\n * are then passed to the sendEvent(event) function of the underlying handlers:\n *\n * {\n *    type,\n *\n *    action,\n *    actionSubject,\n *    actionSubjectId,\n *    attributes,\n *    categories,\n *    containerId,\n *    containerType,\n *    name,\n *    objectId,\n *    objectType,\n *    source,\n *    tags\n * }\n *\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\n * other properties are considered required according to the type.\n *\n * For events with type 'page', the required properties are: name.\n *\n * For events with type 'operational' and 'ui', the required properties are:\n * action, actionSubject, source\n *\n * For events with type 'page', the required properties are:\n * action, actionSubject, source, containerType, containerId, objectType,\n * objectId\n */\nclass AnalyticsAdapter {\n    /**\n     * Creates new AnalyticsAdapter instance.\n     */\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * Reset the state to the initial one.\n     *\n     * @returns {void}\n     */\n    reset() {\n        /**\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\n         * any more events, and it can not be re-enabled.\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The set of handlers to which events will be sent.\n         * @type {Set<any>}\n         */\n        this.analyticsHandlers = new Set();\n\n        /**\n         * The cache of events which are not sent yet. The cache is enabled\n         * while this field is truthy, and disabled otherwise.\n         * @type {Array}\n         */\n        this.cache = [];\n\n        /**\n         * Map of properties that will be added to every event. Note that the\n         * keys will be prefixed with \"permanent.\".\n         */\n        this.permanentProperties = {};\n\n        /**\n         * The name of the conference that this AnalyticsAdapter is associated\n         * with.\n         * @type {null}\n         */\n        this.conferenceName = '';\n\n        this.addPermanentProperties({\n            'user_agent': navigator.userAgent,\n            'browser_name': browser.getName()\n        });\n    }\n\n    /**\n     * Dispose analytics. Clears all handlers.\n     */\n    dispose() {\n        logger.warn('Disposing of analytics adapter.');\n\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\n            this.analyticsHandlers.forEach(handler => {\n                if (typeof handler.dispose === 'function') {\n                    handler.dispose();\n                }\n            });\n        }\n\n        this.setAnalyticsHandlers([]);\n        this.disposed = true;\n    }\n\n    /**\n     * Sets the handlers that are going to be used to send analytics. Sends any\n     * cached events.\n     * @param {Array} handlers the handlers\n     */\n    setAnalyticsHandlers(handlers) {\n        if (this.disposed) {\n            return;\n        }\n\n        this.analyticsHandlers = new Set(handlers);\n\n        this._setUserProperties();\n\n        // Note that we disable the cache even if the set of handlers is empty.\n        const cache = this.cache;\n\n        this.cache = null;\n        if (cache) {\n            cache.forEach(event => this._sendEvent(event));\n        }\n    }\n\n    /**\n     * Set the user properties to the analytics handlers.\n     *\n     * @returns {void}\n     */\n    _setUserProperties() {\n        this.analyticsHandlers.forEach(handler => {\n            try {\n                handler.setUserProperties(this.permanentProperties);\n            } catch (error) {\n                logger.warn('Error in setUserProperties method of one of the '\n                    + `analytics handlers: ${error}`);\n            }\n        });\n    }\n\n    /**\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\n     * Permanent properties will be added as \"attributes\" to events sent to\n     * the underlying \"analytics handlers\", and their keys will be prefixed\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\n     * result in {\"permanent_key\": \"value\"} object to be added to the\n     * \"attributes\" field of events.\n     *\n     * @param {Object} properties the properties to add\n     */\n    addPermanentProperties(properties) {\n        this.permanentProperties = {\n            ...this.permanentProperties,\n            ...properties\n        };\n\n        this._setUserProperties();\n    }\n\n    /**\n     * Sets the name of the conference that this AnalyticsAdapter is associated\n     * with.\n     * @param name the name to set.\n     */\n    setConferenceName(name) {\n        this.conferenceName = name;\n        this.addPermanentProperties({ 'conference_name': name });\n    }\n\n    /**\n     * Sends an event with a given name and given properties. The first\n     * parameter is either a string or an object. If it is a string, it is used\n     * as the event name and the second parameter is used at the attributes to\n     * attach to the event. If it is an object, it represents the whole event,\n     * including any desired attributes, and the second parameter is ignored.\n     *\n     * @param {String|Object} eventName either a string to be used as the name\n     * of the event, or an event object. If an event object is passed, the\n     * properties parameters is ignored.\n     * @param {Object} properties the properties/attributes to attach to the\n     * event, if eventName is a string.\n     */\n    sendEvent(eventName, properties = {}) {\n        if (this.disposed) {\n            return;\n        }\n\n        let event = null;\n\n        if (typeof eventName === 'string') {\n            event = {\n                type: TYPE_OPERATIONAL,\n                action: eventName,\n                actionSubject: eventName,\n                source: eventName,\n                attributes: properties\n            };\n        } else if (typeof eventName === 'object') {\n            event = eventName;\n        }\n\n        if (!this._verifyRequiredFields(event)) {\n            logger.error(\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\n\n            return;\n        }\n\n        this._sendEvent(event);\n    }\n\n    /**\n     * Checks whether an event has all of the required fields set, and tries\n     * to fill in some of the missing fields with reasonable default values.\n     * Returns true if after this operation the event has all of the required\n     * fields set, and false otherwise (if some of the required fields were not\n     * set and the attempt to fill them in with a default failed).\n     *\n     * @param event the event object.\n     * @return {boolean} true if the event (after the call to this function)\n     * contains all of the required fields, and false otherwise.\n     * @private\n     */\n    _verifyRequiredFields(event) {\n        if (!event) {\n            return false;\n        }\n\n        if (!event.type) {\n            event.type = TYPE_OPERATIONAL;\n        }\n\n        const type = event.type;\n\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\n            logger.error(`Unknown event type: ${type}`);\n\n            return false;\n        }\n\n        if (type === TYPE_PAGE) {\n            return Boolean(event.name);\n        }\n\n        // Try to set some reasonable default values in case some of the\n        // parameters required by the handler API are missing.\n        event.action = event.action || event.name || event.actionSubject;\n        event.actionSubject = event.actionSubject || event.name || event.action;\n        event.source = event.source || event.name || event.action\n            || event.actionSubject;\n\n        if (!event.action || !event.actionSubject || !event.source) {\n            logger.error(\n                'Required field missing (action, actionSubject or source)');\n\n            return false;\n        }\n\n        // Track events have additional required fields.\n        if (type === TYPE_TRACK) {\n            event.objectType = event.objectType || 'generic-object-type';\n            event.containerType = event.containerType || 'conference';\n            if (event.containerType === 'conference' && !event.containerId) {\n                event.containerId = this.conferenceName;\n            }\n\n\n            if (!event.objectType || !event.objectId\n                || !event.containerType || !event.containerId) {\n                logger.error(\n                    'Required field missing (containerId, containerType, '\n                        + 'objectId or objectType)');\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Saves an event to the cache, if the cache is enabled.\n     * @param event the event to save.\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\n     * if the cache was disabled).\n     * @private\n     */\n    _maybeCacheEvent(event) {\n        if (this.cache) {\n            this.cache.push(event);\n\n            // We limit the size of the cache, in case the user fails to ever\n            // set the analytics handlers.\n            if (this.cache.length > MAX_CACHE_SIZE) {\n                this.cache.splice(0, 1);\n            }\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param event\n     * @private\n     */\n    _sendEvent(event) {\n        if (this._maybeCacheEvent(event)) {\n            // The event was consumed by the cache.\n        } else {\n            this.analyticsHandlers.forEach(handler => {\n                try {\n                    handler.sendEvent(event);\n                } catch (e) {\n                    logger.warn(`Error sending analytics event: ${e}`);\n                }\n            });\n        }\n    }\n}\n\nexport default new AnalyticsAdapter();\n","\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport { RunningAverage } from '../util/MathUtil';\n\nconst logger = getLogger(__filename);\nconst MILLI_SECONDS = 1000;\nconst SECONDS = 60;\n\n/**\n * This class creates an observer that monitors browser's performance measurement events\n * as they are recorded in the browser's performance timeline and computes an average and\n * a maximum value for the long task events. Tasks are classified as long tasks if they take\n * longer than 50ms to execute on the main thread.\n */\nexport class PerformanceObserverStats {\n    /**\n     * Creates a new instance of Performance observer statistics.\n     *\n     * @param {*} emitter Event emitter for emitting stats periodically\n     * @param {*} statsInterval interval for calculating the stats\n     */\n    constructor(emitter, statsInterval) {\n        this.eventEmitter = emitter;\n        this.longTasks = 0;\n        this.maxDuration = 0;\n        this.performanceStatsInterval = statsInterval;\n        this.stats = new RunningAverage();\n    }\n\n    /**\n     * Obtains the average rate of long tasks observed per min and the\n     * duration of the longest task recorded by the observer.\n     * @returns {Object}\n     */\n    getLongTasksStats() {\n        return {\n            avgRatePerMinute: (this.stats.getAverage() * SECONDS).toFixed(2), // calc rate per min\n            maxDurationMs: this.maxDuration\n        };\n    }\n\n    /**\n     * Starts the performance observer by registering the callback function\n     * that calculates the performance statistics periodically.\n     * @returns {void}\n     */\n    startObserver() {\n        // Create a handler for when the long task event is fired.\n        this.longTaskEventHandler = list => {\n            const entries = list.getEntries();\n\n            for (const task of entries) {\n                this.longTasks++;\n                this.maxDuration = Math.max(this.maxDuration, task.duration).toFixed(3);\n            }\n        };\n\n        // Create an observer for monitoring long tasks.\n        logger.info('Creating a Performance Observer for monitoring Long Tasks');\n        this.observer = new PerformanceObserver(this.longTaskEventHandler);\n        this.observer.observe({ type: 'longtask',\n            buffered: true });\n        const startTime = Date.now();\n\n        // Calculate the average # of events/sec and emit a stats event.\n        this.longTasksIntervalId = setInterval(() => {\n            const now = Date.now();\n            const interval = this._lastTimeStamp\n                ? (now - this._lastTimeStamp) / MILLI_SECONDS\n                : (now - startTime) / MILLI_SECONDS;\n            const rate = this.longTasks / interval;\n\n            this.stats.addNext(rate);\n            this.eventEmitter.emit(\n                StatisticsEvents.LONG_TASKS_STATS, this.getLongTasksStats());\n\n            // Reset the counter and start counting events again.\n            this.longTasks = 0;\n            this._lastTimeStamp = Date.now();\n        }, this.performanceStatsInterval);\n    }\n\n    /**\n     * Stops the performance observer.\n     * @returns {void}\n     */\n    stopObserver() {\n        this.observer && this.observer.disconnect();\n        this.longTaskEventHandler = null;\n        if (this.longTasksIntervalId) {\n            clearInterval(this.longTasksIntervalId);\n            this.longTasksIntervalId = null;\n        }\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\n\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n * Calculates packet lost percent using the number of lost packets and the\n * number of all packet.\n * @param lostPackets the number of lost packets\n * @param totalPackets the number of all packets.\n * @returns {number} packet loss percent\n */\nfunction calculatePacketLoss(lostPackets, totalPackets) {\n    if (!totalPackets || totalPackets <= 0\n            || !lostPackets || lostPackets <= 0) {\n        return 0;\n    }\n\n    return Math.round((lostPackets / totalPackets) * 100);\n}\n\n/**\n * Holds \"statistics\" for a single SSRC.\n * @constructor\n */\nfunction SsrcStats() {\n    this.loss = {};\n    this.bitrate = {\n        download: 0,\n        upload: 0\n    };\n    this.resolution = {};\n    this.framerate = 0;\n    this.codec = '';\n}\n\n/**\n * Sets the \"loss\" object.\n * @param loss the value to set.\n */\nSsrcStats.prototype.setLoss = function(loss) {\n    this.loss = loss || {};\n};\n\n/**\n * Sets resolution that belong to the ssrc represented by this instance.\n * @param resolution new resolution value to be set.\n */\nSsrcStats.prototype.setResolution = function(resolution) {\n    this.resolution = resolution || {};\n};\n\n/**\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\n * the respective fields of the \"bitrate\" field of this object.\n * @param bitrate an object holding the values to add.\n */\nSsrcStats.prototype.addBitrate = function(bitrate) {\n    this.bitrate.download += bitrate.download;\n    this.bitrate.upload += bitrate.upload;\n};\n\n/**\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\n * represented by this instance.\n */\nSsrcStats.prototype.resetBitrate = function() {\n    this.bitrate.download = 0;\n    this.bitrate.upload = 0;\n};\n\n/**\n * Sets the \"framerate\".\n * @param framerate the value to set.\n */\nSsrcStats.prototype.setFramerate = function(framerate) {\n    this.framerate = framerate || 0;\n};\n\nSsrcStats.prototype.setCodec = function(codec) {\n    this.codec = codec || '';\n};\n\n/**\n *\n */\nfunction ConferenceStats() {\n\n    /**\n     * The bandwidth\n     * @type {{}}\n     */\n    this.bandwidth = {};\n\n    /**\n     * The bit rate\n     * @type {{}}\n     */\n    this.bitrate = {};\n\n    /**\n     * The packet loss rate\n     * @type {{}}\n     */\n    this.packetLoss = null;\n\n    /**\n     * Array with the transport information.\n     * @type {Array}\n     */\n    this.transport = [];\n}\n\n/* eslint-disable max-params */\n\n/**\n * <tt>StatsCollector</tt> registers for stats updates of given\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\n * instance as an event source.\n *\n * @param peerconnection WebRTC PeerConnection object.\n * @param audioLevelsInterval\n * @param statsInterval stats refresh interval given in ms.\n * @param eventEmitter\n * @constructor\n */\nexport default function StatsCollector(peerconnection, audioLevelsInterval, statsInterval, eventEmitter) {\n    this.peerconnection = peerconnection;\n    this.baselineAudioLevelsReport = null;\n    this.currentAudioLevelsReport = null;\n    this.currentStatsReport = null;\n    this.previousStatsReport = null;\n    this.audioLevelReportHistory = {};\n    this.audioLevelsIntervalId = null;\n    this.eventEmitter = eventEmitter;\n    this.conferenceStats = new ConferenceStats();\n\n    // Updates stats interval\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\n\n    this.speakerList = [];\n    this.statsIntervalId = null;\n    this.statsIntervalMilis = statsInterval;\n\n    /**\n     * Maps SSRC numbers to {@link SsrcStats}.\n     * @type {Map<number,SsrcStats}\n     */\n    this.ssrc2stats = new Map();\n}\n\n/**\n * Set the list of the remote speakers for which audio levels are to be calculated.\n *\n * @param {Array<string>} speakerList - Endpoint ids.\n * @returns {void}\n */\nStatsCollector.prototype.setSpeakerList = function(speakerList) {\n    this.speakerList = speakerList;\n};\n\n/**\n * Stops stats updates.\n */\nStatsCollector.prototype.stop = function() {\n    if (this.audioLevelsIntervalId) {\n        clearInterval(this.audioLevelsIntervalId);\n        this.audioLevelsIntervalId = null;\n    }\n\n    if (this.statsIntervalId) {\n        clearInterval(this.statsIntervalId);\n        this.statsIntervalId = null;\n    }\n};\n\n/**\n * Callback passed to <tt>getStats</tt> method.\n * @param error an error that occurred on <tt>getStats</tt> call.\n */\nStatsCollector.prototype.errorCallback = function(error) {\n    GlobalOnErrorHandler.callErrorHandler(error);\n    logger.error('Get stats error', error);\n    this.stop();\n};\n\n/**\n * Starts stats updates.\n */\nStatsCollector.prototype.start = function(startAudioLevelStats) {\n    if (startAudioLevelStats) {\n        if (browser.supportsReceiverStats()) {\n            logger.info('Using RTCRtpSynchronizationSource for remote audio levels');\n        }\n        this.audioLevelsIntervalId = setInterval(\n            () => {\n                if (browser.supportsReceiverStats()) {\n                    const audioLevels = this.peerconnection.getAudioLevels(this.speakerList);\n\n                    for (const ssrc in audioLevels) {\n                        if (audioLevels.hasOwnProperty(ssrc)) {\n                            // Use a scaling factor of 2.5 to report the same\n                            // audio levels that getStats reports.\n                            const audioLevel = audioLevels[ssrc] * 2.5;\n\n                            this.eventEmitter.emit(\n                                StatisticsEvents.AUDIO_LEVEL,\n                                this.peerconnection,\n                                Number.parseInt(ssrc, 10),\n                                audioLevel,\n                                false /* isLocal */);\n                        }\n                    }\n                } else {\n                    // Interval updates\n                    this.peerconnection.getStats(\n                        report => {\n                            let results = null;\n\n                            if (!report || !report.result\n                                || typeof report.result !== 'function') {\n                                results = report;\n                            } else {\n                                results = report.result();\n                            }\n                            this.currentAudioLevelsReport = results;\n                            this.processAudioLevelReport();\n                            this.baselineAudioLevelsReport = this.currentAudioLevelsReport;\n                        },\n                        error => this.errorCallback(error)\n                    );\n                }\n            },\n            this.audioLevelsIntervalMilis\n        );\n    }\n\n    const processStats = () => {\n        // Interval updates\n        this.peerconnection.getStats(\n            report => {\n                let results = null;\n\n                if (!report || !report.result\n                    || typeof report.result !== 'function') {\n                    // firefox\n                    results = report;\n                } else {\n                    // chrome\n                    results = report.result();\n                }\n\n                this.currentStatsReport = results;\n                try {\n                    this.processStatsReport();\n                } catch (error) {\n                    GlobalOnErrorHandler.callErrorHandler(error);\n                    logger.error('Processing of RTP stats failed:', error);\n                }\n                this.previousStatsReport = this.currentStatsReport;\n            },\n            error => this.errorCallback(error)\n        );\n    };\n\n    processStats();\n    this.statsIntervalId = setInterval(processStats, this.statsIntervalMilis);\n};\n\n/**\n *\n */\nStatsCollector.prototype._processAndEmitReport = function() {\n    // process stats\n    const totalPackets = {\n        download: 0,\n        upload: 0\n    };\n    const lostPackets = {\n        download: 0,\n        upload: 0\n    };\n    let bitrateDownload = 0;\n    let bitrateUpload = 0;\n    const resolutions = {};\n    const framerates = {};\n    const codecs = {};\n    let audioBitrateDownload = 0;\n    let audioBitrateUpload = 0;\n    let audioCodec;\n    let videoBitrateDownload = 0;\n    let videoBitrateUpload = 0;\n    let videoCodec;\n\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\n        // process packet loss stats\n        const loss = ssrcStats.loss;\n        const type = loss.isDownloadStream ? 'download' : 'upload';\n\n        totalPackets[type] += loss.packetsTotal;\n        lostPackets[type] += loss.packetsLost;\n\n        // process bitrate stats\n        bitrateDownload += ssrcStats.bitrate.download;\n        bitrateUpload += ssrcStats.bitrate.upload;\n\n        // collect resolutions and framerates\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\n\n        if (track) {\n            if (track.isAudioTrack()) {\n                audioBitrateDownload += ssrcStats.bitrate.download;\n                audioBitrateUpload += ssrcStats.bitrate.upload;\n                audioCodec = ssrcStats.codec;\n            } else {\n                videoBitrateDownload += ssrcStats.bitrate.download;\n                videoBitrateUpload += ssrcStats.bitrate.upload;\n                videoCodec = ssrcStats.codec;\n            }\n\n            const participantId = track.getParticipantId();\n\n            if (participantId) {\n                const resolution = ssrcStats.resolution;\n\n                if (resolution.width\n                        && resolution.height\n                        && resolution.width !== -1\n                        && resolution.height !== -1) {\n                    const userResolutions = resolutions[participantId] || {};\n\n                    userResolutions[ssrc] = resolution;\n                    resolutions[participantId] = userResolutions;\n                }\n                if (ssrcStats.framerate !== 0) {\n                    const userFramerates = framerates[participantId] || {};\n\n                    userFramerates[ssrc] = ssrcStats.framerate;\n                    framerates[participantId] = userFramerates;\n                }\n                if (audioCodec && videoCodec) {\n                    const codecDesc = {\n                        'audio': audioCodec,\n                        'video': videoCodec\n                    };\n\n                    const userCodecs = codecs[participantId] || {};\n\n                    userCodecs[ssrc] = codecDesc;\n                    codecs[participantId] = userCodecs;\n                }\n            } else {\n                logger.error(`No participant ID returned by ${track}`);\n            }\n        }\n\n        ssrcStats.resetBitrate();\n    }\n\n    this.conferenceStats.bitrate = {\n        'upload': bitrateUpload,\n        'download': bitrateDownload\n    };\n\n    this.conferenceStats.bitrate.audio = {\n        'upload': audioBitrateUpload,\n        'download': audioBitrateDownload\n    };\n\n    this.conferenceStats.bitrate.video = {\n        'upload': videoBitrateUpload,\n        'download': videoBitrateDownload\n    };\n\n    this.conferenceStats.packetLoss = {\n        total:\n            calculatePacketLoss(\n                lostPackets.download + lostPackets.upload,\n                totalPackets.download + totalPackets.upload),\n        download:\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\n        upload:\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\n    };\n\n    const avgAudioLevels = {};\n    let localAvgAudioLevels;\n\n    Object.keys(this.audioLevelReportHistory).forEach(ssrc => {\n        const { data, isLocal } = this.audioLevelReportHistory[ssrc];\n        const avgAudioLevel = data.reduce((sum, currentValue) => sum + currentValue) / data.length;\n\n        if (isLocal) {\n            localAvgAudioLevels = avgAudioLevel;\n        } else {\n            const track = this.peerconnection.getTrackBySSRC(Number(ssrc));\n\n            if (track) {\n                const participantId = track.getParticipantId();\n\n                if (participantId) {\n                    avgAudioLevels[participantId] = avgAudioLevel;\n                }\n            }\n        }\n    });\n    this.audioLevelReportHistory = {};\n\n    this.eventEmitter.emit(\n        StatisticsEvents.CONNECTION_STATS,\n        this.peerconnection,\n        {\n            'bandwidth': this.conferenceStats.bandwidth,\n            'bitrate': this.conferenceStats.bitrate,\n            'packetLoss': this.conferenceStats.packetLoss,\n            'resolution': resolutions,\n            'framerate': framerates,\n            'codec': codecs,\n            'transport': this.conferenceStats.transport,\n            localAvgAudioLevels,\n            avgAudioLevels\n        });\n    this.conferenceStats.transport = [];\n};\n\n/**\n * Converts the value to a non-negative number.\n * If the value is either invalid or negative then 0 will be returned.\n * @param {*} v\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeValue = function(v) {\n    let value = v;\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/**\n * Calculates bitrate between before and now using a supplied field name and its\n * value in the stats.\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\n * previous stats.\n * @param fieldName the field to use for calculations.\n * @return {number} the calculated bitrate between now and before.\n * @private\n */\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\n\n    const timeMs = now.timestamp - before.timestamp;\n    let bitrateKbps = 0;\n\n    if (timeMs > 0) {\n        // TODO is there any reason to round here?\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\n    }\n\n    return bitrateKbps;\n};\n\n/**\n * Stats processing for spec-compliant RTCPeerConnection#getStats.\n */\nStatsCollector.prototype.processStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n    const byteSentStats = {};\n\n    this.currentStatsReport.forEach(now => {\n        // RTCIceCandidatePairStats - https://w3c.github.io/webrtc-stats/#candidatepair-dict*\n        if (now.type === 'candidate-pair' && now.nominated && now.state === 'succeeded') {\n            const availableIncomingBitrate = now.availableIncomingBitrate;\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\n\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(availableIncomingBitrate / 1000),\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\n                };\n            }\n\n            const remoteUsedCandidate = this.currentStatsReport.get(now.remoteCandidateId);\n            const localUsedCandidate = this.currentStatsReport.get(now.localCandidateId);\n\n            // RTCIceCandidateStats\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\n            if (remoteUsedCandidate && localUsedCandidate) {\n                const remoteIpAddress = browser.isChromiumBased()\n                    ? remoteUsedCandidate.ip\n                    : remoteUsedCandidate.address;\n                const remotePort = remoteUsedCandidate.port;\n                const ip = `${remoteIpAddress}:${remotePort}`;\n\n                const localIpAddress = browser.isChromiumBased()\n                    ? localUsedCandidate.ip\n                    : localUsedCandidate.address;\n                const localPort = localUsedCandidate.port;\n                const localip = `${localIpAddress}:${localPort}`;\n                const type = remoteUsedCandidate.protocol;\n\n                // Save the address unless it has been saved already.\n                const conferenceStatsTransport = this.conferenceStats.transport;\n\n                if (!conferenceStatsTransport.some(t =>\n                    t.ip === ip\n                    && t.type === type\n                    && t.localip === localip)) {\n                    conferenceStatsTransport.push({\n                        ip,\n                        type,\n                        localip,\n                        p2p: this.peerconnection.isP2P,\n                        localCandidateType: localUsedCandidate.candidateType,\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\n                        networkType: localUsedCandidate.networkType,\n                        rtt: now.currentRoundTripTime * 1000\n                    });\n                }\n            }\n\n        // RTCReceivedRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\n        // RTCSentRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\n            const before = this.previousStatsReport.get(now.id);\n            const ssrc = this.getNonNegativeValue(now.ssrc);\n\n            if (!before || !ssrc) {\n                return;\n            }\n\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n\n            let isDownloadStream = true;\n            let key = 'packetsReceived';\n\n            if (now.type === 'outbound-rtp') {\n                isDownloadStream = false;\n                key = 'packetsSent';\n            }\n\n            let packetsNow = now[key];\n\n            if (!packetsNow || packetsNow < 0) {\n                packetsNow = 0;\n            }\n\n            const packetsBefore = this.getNonNegativeValue(before[key]);\n            const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n            const packetsLostNow = this.getNonNegativeValue(now.packetsLost);\n            const packetsLostBefore = this.getNonNegativeValue(before.packetsLost);\n            const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\n\n            ssrcStats.setLoss({\n                packetsTotal: packetsDiff + packetsLostDiff,\n                packetsLost: packetsLostDiff,\n                isDownloadStream\n            });\n\n            // Get the resolution and framerate for only remote video sources here. For the local video sources,\n            // 'track' stats will be used since they have the updated resolution based on the simulcast streams\n            // currently being sent. Promise based getStats reports three 'outbound-rtp' streams and there will be\n            // more calculations needed to determine what is the highest resolution stream sent by the client if the\n            // 'outbound-rtp' stats are used.\n            if (now.type === 'inbound-rtp') {\n                const resolution = {\n                    height: now.frameHeight,\n                    width: now.frameWidth\n                };\n                const frameRate = now.framesPerSecond;\n\n                if (resolution.height && resolution.width) {\n                    ssrcStats.setResolution(resolution);\n                }\n                ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n                ssrcStats.addBitrate({\n                    'download': this._calculateBitrate(now, before, 'bytesReceived'),\n                    'upload': 0\n                });\n            } else {\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\n                ssrcStats.addBitrate({\n                    'download': 0,\n                    'upload': this._calculateBitrate(now, before, 'bytesSent')\n                });\n            }\n\n            const codec = this.currentStatsReport.get(now.codecId);\n\n            if (codec) {\n                /**\n                 * The mime type has the following form: video/VP8 or audio/ISAC,\n                 * so we what to keep just the type after the '/', audio and video\n                 * keys will be added on the processing side.\n                 */\n                const codecShortType = codec.mimeType.split('/')[1];\n\n                codecShortType && ssrcStats.setCodec(codecShortType);\n            }\n\n        // Use track stats for resolution and framerate of the local video source.\n        // RTCVideoHandlerStats - https://w3c.github.io/webrtc-stats/#vststats-dict*\n        // RTCMediaHandlerStats - https://w3c.github.io/webrtc-stats/#mststats-dict*\n        } else if (now.type === 'track' && now.kind === MediaType.VIDEO && !now.remoteSource) {\n            const resolution = {\n                height: now.frameHeight,\n                width: now.frameWidth\n            };\n            const localVideoTracks = this.peerconnection.getLocalTracks(MediaType.VIDEO);\n\n            if (!localVideoTracks?.length) {\n                return;\n            }\n\n            const ssrc = this.peerconnection.getLocalSSRC(localVideoTracks[0]);\n\n            if (!ssrc) {\n                return;\n            }\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n            if (resolution.height && resolution.width) {\n                ssrcStats.setResolution(resolution);\n            }\n\n            // Calculate the frame rate. 'framesSent' is the total aggregate value for all the simulcast streams.\n            // Therefore, it needs to be divided by the total number of active simulcast streams.\n            let frameRate = now.framesPerSecond;\n\n            if (!frameRate) {\n                const before = this.previousStatsReport.get(now.id);\n\n                if (before) {\n                    const timeMs = now.timestamp - before.timestamp;\n\n                    if (timeMs > 0 && now.framesSent) {\n                        const numberOfFramesSinceBefore = now.framesSent - before.framesSent;\n\n                        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\n                    }\n                }\n\n                if (!frameRate) {\n                    return;\n                }\n            }\n\n            // Get the number of simulcast streams currently enabled from TPC.\n            const numberOfActiveStreams = this.peerconnection.getActiveSimulcastStreams();\n\n            ssrcStats.setFramerate(Math.round((frameRate / numberOfActiveStreams) || 0));\n        }\n    });\n\n    this.eventEmitter.emit(StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n    this._processAndEmitReport();\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    this.currentAudioLevelsReport.forEach(now => {\n        if (now.type !== 'track') {\n            return;\n        }\n\n        // Audio level\n        const audioLevel = now.audioLevel;\n\n        if (!audioLevel) {\n            return;\n        }\n\n        const trackIdentifier = now.trackIdentifier;\n        const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n\n        if (ssrc) {\n            const isLocal\n                = ssrc === this.peerconnection.getLocalSSRC(\n                this.peerconnection.getLocalTracks(MediaType.AUDIO));\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    });\n};\n\n","/**\n * Implements utility to forward events from one eventEmitter to another.\n * @param src {object} instance of EventEmitter or another class that implements\n * addListener method which will register listener to EventEmitter instance.\n * @param dest {object} instance of EventEmitter or another class that\n * implements emit method which will emit an event.\n */\nfunction EventEmitterForwarder(src, dest) {\n    if (!src || !dest || typeof src.addListener !== 'function'\n        || typeof dest.emit !== 'function') {\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\n    }\n    this.src = src;\n    this.dest = dest;\n}\n\n/**\n * Adds event to be forwarded from src to dest.\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\n * for.\n * @param dstEvent {string} the event that will be fired from dest.\n * @param arguments all other passed arguments are going to be fired with\n * dstEvent.\n */\nEventEmitterForwarder.prototype.forward = function(...args) {\n    const srcEvent = args[0];\n\n    // This will be the \"this\" value for emit function.\n\n    args[0] = this.dest;\n\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\n    this.src.addListener(\n        srcEvent,\n        Function.prototype.bind.apply(this.dest.emit, args));\n};\n\nmodule.exports = EventEmitterForwarder;\n","\nimport { Strophe } from 'strophe.js';\n\n\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport * as MediaType from './service/RTC/MediaType';\n\n/**\n * Represents a participant in (i.e. a member of) a conference.\n */\nexport default class JitsiParticipant {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Initializes a new JitsiParticipant instance.\n     *\n     * @constructor\n     * @param jid the conference XMPP jid\n     * @param conference\n     * @param displayName\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\n     * represent a hidden participant; otherwise, false.\n     * @param {string} statsID - optional participant statsID\n     * @param {string} status - the initial status if any.\n     * @param {object} identity - the xmpp identity\n     */\n    constructor(jid, conference, displayName, hidden, statsID, status, identity) {\n        this._jid = jid;\n        this._id = Strophe.getResourceFromJid(jid);\n        this._conference = conference;\n        this._displayName = displayName;\n        this._supportsDTMF = false;\n        this._tracks = [];\n        this._role = 'none';\n        this._status = status;\n        this._hidden = hidden;\n        this._statsID = statsID;\n        this._connectionStatus = ParticipantConnectionStatus.ACTIVE;\n        this._properties = {};\n        this._identity = identity;\n        this._features = new Set();\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * @returns {JitsiConference} The conference that this participant belongs\n     * to.\n     */\n    getConference() {\n        return this._conference;\n    }\n\n    /**\n     * Gets the value of a property of this participant.\n     */\n    getProperty(name) {\n        return this._properties[name];\n    }\n\n    /**\n     * Checks whether this <tt>JitsiParticipant</tt> has any video tracks which\n     * are muted according to their underlying WebRTC <tt>MediaStreamTrack</tt>\n     * muted status.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains any\n     * video <tt>JitsiTrack</tt>s which are muted as defined in\n     * {@link JitsiTrack.isWebRTCTrackMuted}.\n     */\n    hasAnyVideoTrackWebRTCMuted() {\n        return (\n            this.getTracks().some(\n                jitsiTrack =>\n                    jitsiTrack.getType() === MediaType.VIDEO\n                        && jitsiTrack.isWebRTCTrackMuted()));\n    }\n\n    /**\n     * Updates participant's connection status.\n     * @param {string} state the current participant connection state.\n     * {@link ParticipantConnectionStatus}.\n     * @private\n     */\n    _setConnectionStatus(status) {\n        this._connectionStatus = status;\n    }\n\n    /**\n     * Return participant's connectivity status.\n     *\n     * @returns {string} the connection status\n     * <tt>ParticipantConnectionStatus</tt> of the user.\n     * {@link ParticipantConnectionStatus}.\n     */\n    getConnectionStatus() {\n        return this._connectionStatus;\n    }\n\n    /**\n     * Sets the value of a property of this participant, and fires an event if\n     * the value has changed.\n     * @name the name of the property.\n     * @value the value to set.\n     */\n    setProperty(name, value) {\n        const oldValue = this._properties[name];\n\n        if (value !== oldValue) {\n            this._properties[name] = value;\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this,\n                name,\n                oldValue,\n                value);\n        }\n    }\n\n    /**\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\n     * participant.\n     */\n    getTracks() {\n        return this._tracks.slice();\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\n     * participant, for given media type.\n     */\n    getTracksByMediaType(mediaType) {\n        return this.getTracks().filter(track => track.getType() === mediaType);\n    }\n\n    /**\n     * @returns {String} The ID of this participant.\n     */\n    getId() {\n        return this._id;\n    }\n\n    /**\n     * @returns {String} The JID of this participant.\n     */\n    getJid() {\n        return this._jid;\n    }\n\n    /**\n     * @returns {String} The human-readable display name of this participant.\n     */\n    getDisplayName() {\n        return this._displayName;\n    }\n\n    /**\n     * @returns {String} The stats ID of this participant.\n     */\n    getStatsID() {\n        return this._statsID;\n    }\n\n    /**\n     * @returns {String} The status of the participant.\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a moderator or not.\n     */\n    isModerator() {\n        return this._role === 'moderator';\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHidden() {\n        return this._hidden;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their audio.\n     */\n    isAudioMuted() {\n        return this._isMediaTypeMuted(MediaType.AUDIO);\n    }\n\n    /**\n     * Determines whether all JitsiTracks which are of a specific MediaType and\n     * which belong to this JitsiParticipant are muted.\n     *\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be\n     * checked.\n     * @private\n     * @returns {Boolean} True if all JitsiTracks which are of the specified\n     * mediaType and which belong to this JitsiParticipant are muted; otherwise,\n     * false.\n     */\n    _isMediaTypeMuted(mediaType) {\n        return this.getTracks().reduce(\n            (muted, track) =>\n                muted && (track.getType() !== mediaType || track.isMuted()),\n            true);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their video.\n     */\n    isVideoMuted() {\n        return this._isMediaTypeMuted(MediaType.VIDEO);\n    }\n\n    /**\n     * @returns {String} The role of this participant.\n     */\n    getRole() {\n        return this._role;\n    }\n\n    /**\n     * Sets a new participant role.\n     * @param {String} newRole - the new role.\n     */\n    setRole(newRole) {\n        this._role = newRole;\n    }\n\n    /**\n     *\n     */\n    supportsDTMF() {\n        return this._supportsDTMF;\n    }\n\n    /**\n     * Returns a set with the features for the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures() {\n        return Promise.resolve(this._features);\n    }\n\n    /**\n     * Checks current set features.\n     * @param {String} feature - the feature to check.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains the\n     * <tt>feature</tt>.\n     */\n    hasFeature(feature) {\n        return this._features.has(feature);\n    }\n\n    /**\n     * Set new features.\n     * @param {Set<String>|undefined} newFeatures - Sets new features.\n     */\n    setFeatures(newFeatures) {\n        this._features = newFeatures || new Set();\n    }\n\n    /**\n     * Returns the bot type for the participant.\n     *\n     * @returns {string|undefined} - The bot type of the participant.\n     */\n    getBotType() {\n        return this._botType;\n    }\n\n    /**\n     * Sets the bot type for the participant.\n     * @param {String} newBotType - The new bot type to set.\n     */\n    setBotType(newBotType) {\n        this._botType = newBotType;\n    }\n}\n","import {\n    CONNECTION_DISCONNECTED,\n    CONNECTION_ESTABLISHED,\n    CONNECTION_FAILED\n} from './JitsiConnectionEvents';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * @typedef {Object} UpgradeRoleError\n *\n * @property {JitsiConnectionErrors} [connectionError] - One of\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\n * XMPP server.\n * @property {String} [authenticationError] - One of XMPP error conditions\n * returned by Jicofo on authentication attempt. See\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\n * @property {String} [message] - More details about the error.\n * @property {Object} [credentials] - The credentials that failed the\n * authentication.\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\n * that failed the authentication.\n * @property {string} [credentials.password] - The password part of the\n * credentials that failed the authentication.\n *\n * NOTE If neither one of the errors is present, then the operation has been\n * canceled.\n */\n\n/* eslint-disable no-invalid-this */\n\n/**\n * Connects to the XMPP server using the specified credentials and contacts\n * Jicofo in order to obtain a session ID (which is then stored in the local\n * storage). The user's role of the parent conference will be upgraded to\n * moderator (by Jicofo). It's also used to join the conference when starting\n * from anonymous domain and only authenticated users are allowed to create new\n * rooms.\n *\n * @param {Object} options\n * @param {string} options.id - XMPP user's ID to log in. For example,\n * user@xmpp-server.com.\n * @param {string} options.password - XMPP user's password to log in with.\n * @param {string} [options.roomPassword] - The password to join the MUC with.\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\n * into the XMPP server was successful. The next step will be to obtain a new\n * session ID from Jicofo and join the MUC using it which will effectively\n * upgrade the user's role to moderator.\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the specified XMPP user finishes and\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process. If the process finishes successfully, the session ID has been stored\n * in the settings and the <tt>thenable</tt> is resolved. If the process\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\n * <tt>authenticationError</tt> property set depending on which of the steps has\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\n * thenable will be rejected with an empty object (i.e. no error property will\n * be set on the rejection reason).\n */\nexport default function authenticateAndUpgradeRole({\n    // 1. Log the specified XMPP user in.\n    id,\n    password,\n    onCreateResource,\n\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\n    //    successfully logged in.\n    onLoginSuccessful,\n\n    // 3. Join the MUC.\n    roomPassword\n}) {\n    let canceled = false;\n    let rejectPromise;\n    let xmpp = new XMPP(this.connection.options);\n\n    const process = new Promise((resolve, reject) => {\n        // The process is represented by a Thenable with a cancel method. The\n        // Thenable is implemented using Promise and the cancel using the\n        // Promise's reject function.\n        rejectPromise = reject;\n\n\n        xmpp.addListener(\n            CONNECTION_DISCONNECTED,\n            () => {\n                xmpp = undefined;\n            });\n        xmpp.addListener(\n            CONNECTION_ESTABLISHED,\n            () => {\n                if (canceled) {\n                    return;\n                }\n\n                // Let the caller know that the XMPP login was successful.\n                onLoginSuccessful && onLoginSuccessful();\n\n                // Now authenticate with Jicofo and get a new session ID.\n                const room = xmpp.createRoom(\n                    this.options.name,\n                    this.options.config,\n                    onCreateResource\n                );\n\n                room.moderator.authenticate()\n                    .then(() => {\n                        xmpp && xmpp.disconnect();\n\n                        if (canceled) {\n                            return;\n                        }\n\n                        // At this point we should have the new session ID\n                        // stored in the settings. Jicofo will allow to join the\n                        // room.\n                        this.join(roomPassword);\n\n                        resolve();\n                    })\n                    .catch(({ error, message }) => {\n                        xmpp.disconnect();\n\n                        reject({\n                            authenticationError: error,\n                            message\n                        });\n                    });\n            });\n        xmpp.addListener(\n            CONNECTION_FAILED,\n            (connectionError, message, credentials) => {\n                reject({\n                    connectionError,\n                    credentials,\n                    message\n                });\n                xmpp = undefined;\n            });\n\n        canceled || xmpp.connect(id, password);\n    });\n\n    /**\n     * Cancels the process, if it's in progress, of authenticating and upgrading\n     * the role of the local participant/user.\n     *\n     * @public\n     * @returns {void}\n     */\n    process.cancel = () => {\n        canceled = true;\n        rejectPromise({});\n        xmpp && xmpp.disconnect();\n    };\n\n    return process;\n}\n\n/* eslint-enable no-invalid-this */\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\n// Flag to set on senders / receivers to avoid setting up the encryption transform\n// more than once.\nconst kJitsiE2EE = Symbol('kJitsiE2EE');\n\n/**\n * Context encapsulating the cryptography bits required for E2EE.\n * This uses the WebRTC Insertable Streams API which is explained in\n *   https://github.com/alvestrand/webrtc-media-streams/blob/master/explainer.md\n * that provides access to the encoded frames and allows them to be transformed.\n *\n * The encoded frame format is explained below in the _encodeFunction method.\n * High level design goals were:\n * - do not require changes to existing SFUs and retain (VP8) metadata.\n * - allow the SFU to rewrite SSRCs, timestamp, pictureId.\n * - allow for the key to be rotated frequently.\n */\nexport default class E2EEcontext {\n    /**\n     * Build a new E2EE context instance, which will be used in a given conference.\n     */\n    constructor() {\n        // Determine the URL for the worker script. Relative URLs are relative to\n        // the entry point, not the script that launches the worker.\n        let baseUrl = '';\n        const ljm = document.querySelector('script[src*=\"lib-jitsi-meet\"]');\n\n        if (ljm) {\n            const idx = ljm.src.lastIndexOf('/');\n\n            baseUrl = `${ljm.src.substring(0, idx)}/`;\n        }\n\n        // Initialize the E2EE worker. In order to avoid CORS issues, start the worker and have it\n        // synchronously load the JS.\n        const workerUrl = `${baseUrl}lib-jitsi-meet.e2ee-worker.js`;\n        const workerBlob\n            = new Blob([ `importScripts(\"${workerUrl}\");` ], { type: 'application/javascript' });\n        const blobUrl = window.URL.createObjectURL(workerBlob);\n\n        this._worker = new Worker(blobUrl, { name: 'E2EE Worker' });\n        this._worker.onerror = e => logger.onerror(e);\n    }\n\n    /**\n     * Cleans up all state associated with the given participant. This is needed when a\n     * participant leaves the current conference.\n     *\n     * @param {string} participantId - The participant that just left.\n     */\n    cleanup(participantId) {\n        this._worker.postMessage({\n            operation: 'cleanup',\n            participantId\n        });\n    }\n\n    /**\n     * Handles the given {@code RTCRtpReceiver} by creating a {@code TransformStream} which will inject\n     * a frame decoder.\n     *\n     * @param {RTCRtpReceiver} receiver - The receiver which will get the decoding function injected.\n     * @param {string} kind - The kind of track this receiver belongs to.\n     * @param {string} participantId - The participant id that this receiver belongs to.\n     */\n    handleReceiver(receiver, kind, participantId) {\n        if (receiver[kJitsiE2EE]) {\n            return;\n        }\n        receiver[kJitsiE2EE] = true;\n\n        let receiverStreams;\n\n        if (receiver.createEncodedStreams) {\n            receiverStreams = receiver.createEncodedStreams();\n        } else {\n            receiverStreams = kind === 'video' ? receiver.createEncodedVideoStreams()\n                : receiver.createEncodedAudioStreams();\n        }\n\n        this._worker.postMessage({\n            operation: 'decode',\n            readableStream: receiverStreams.readable || receiverStreams.readableStream,\n            writableStream: receiverStreams.writable || receiverStreams.writableStream,\n            participantId\n        }, [ receiverStreams.readable || receiverStreams.readableStream,\n            receiverStreams.writable || receiverStreams.writableStream ]);\n    }\n\n    /**\n     * Handles the given {@code RTCRtpSender} by creating a {@code TransformStream} which will inject\n     * a frame encoder.\n     *\n     * @param {RTCRtpSender} sender - The sender which will get the encoding function injected.\n     * @param {string} kind - The kind of track this sender belongs to.\n     * @param {string} participantId - The participant id that this sender belongs to.\n     */\n    handleSender(sender, kind, participantId) {\n        if (sender[kJitsiE2EE]) {\n            return;\n        }\n        sender[kJitsiE2EE] = true;\n\n        let senderStreams;\n\n        if (sender.createEncodedStreams) {\n            senderStreams = sender.createEncodedStreams();\n        } else {\n            senderStreams = kind === 'video' ? sender.createEncodedVideoStreams()\n                : sender.createEncodedAudioStreams();\n        }\n\n        this._worker.postMessage({\n            operation: 'encode',\n            readableStream: senderStreams.readable || senderStreams.readableStream,\n            writableStream: senderStreams.writable || senderStreams.writableStream,\n            participantId\n        }, [ senderStreams.readable || senderStreams.readableStream,\n            senderStreams.writable || senderStreams.writableStream ]);\n    }\n\n    /**\n     * Set the E2EE key for the specified participant.\n     *\n     * @param {string} participantId - the ID of the participant who's key we are setting.\n     * @param {Uint8Array | boolean} key - they key for the given participant.\n     * @param {Number} keyIndex - the key index.\n     */\n    setKey(participantId, key, keyIndex) {\n        this._worker.postMessage({\n            operation: 'setKey',\n            participantId,\n            key,\n            keyIndex\n        });\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport {\n    default as NetworkInfo,\n    NETWORK_INFO_EVENT\n} from '../connectivity/NetworkInfo';\nimport { getJitterDelay } from '../util/Retry';\n\nconst logger = getLogger(__filename);\n\n/**\n * The class contains the logic for triggering connection resume via XEP-0198 stream management.\n * It does two things, the first one is it tracks the internet online/offline status and it makes sure that\n * the reconnect is attempted only while online. The seconds thing is that it tracks the retry attempts and extends\n * the retry interval using the full jitter pattern.\n */\nexport default class ResumeTask {\n    /**\n     * Initializes new {@code RetryTask}.\n     * @param {Strophe.Connection} stropheConnection - The Strophe connection instance.\n     */\n    constructor(stropheConnection) {\n        this._stropheConn = stropheConnection;\n\n        /**\n         * The counter increased before each resume retry attempt, used to calculate exponential backoff.\n         * @type {number}\n         * @private\n         */\n        this._resumeRetryN = 0;\n\n        this._retryDelay = undefined;\n    }\n\n    /**\n     * @returns {number|undefined} - How much the app will wait before trying to resume the XMPP connection. When\n     * 'undefined' it means that no resume task was not scheduled.\n     */\n    get retryDelay() {\n        return this._retryDelay;\n    }\n\n    /**\n     * Called by {@link XmppConnection} when the connection drops and it's a signal it wants to schedule a reconnect.\n     *\n     * @returns {void}\n     */\n    schedule() {\n        this._cancelResume();\n\n        this._resumeRetryN += 1;\n\n        this._networkOnlineListener\n            = NetworkInfo.addEventListener(\n                NETWORK_INFO_EVENT,\n                ({ isOnline }) => {\n                    if (isOnline) {\n                        this._scheduleResume();\n                    } else {\n                        this._cancelResume();\n                    }\n                });\n\n        NetworkInfo.isOnline() && this._scheduleResume();\n    }\n\n    /**\n     * Schedules a delayed timeout which will execute the resume action.\n     * @private\n     * @returns {void}\n     */\n    _scheduleResume() {\n        if (this._resumeTimeout) {\n\n            // NO-OP\n            return;\n        }\n\n        // The retry delay will be:\n        //   1st retry: 1.5s - 3s\n        //   2nd retry: 3s - 9s\n        //   3rd and next retry: 4.5s - 27s\n        this._resumeRetryN = Math.min(3, this._resumeRetryN);\n        this._retryDelay = getJitterDelay(\n            /* retry */ this._resumeRetryN,\n            /* minDelay */ this._resumeRetryN * 1500,\n            3);\n\n        logger.info(`Will try to resume the XMPP connection in ${this.retryDelay}ms`);\n\n        this._resumeTimeout = setTimeout(() => this._resumeConnection(), this.retryDelay);\n    }\n\n    /**\n     * Cancels the delayed resume task.\n     *\n     * @private\n     * @returns {void}\n     */\n    _cancelResume() {\n        if (this._resumeTimeout) {\n            logger.info('Canceling connection resume task');\n            clearTimeout(this._resumeTimeout);\n            this._resumeTimeout = undefined;\n            this._retryDelay = undefined;\n        }\n    }\n\n    /**\n     * Resumes the XMPP connection using the stream management plugin.\n     *\n     * @private\n     * @returns {void}\n     */\n    _resumeConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement.getResumeToken();\n\n        // Things may have changed since when the task was scheduled\n        if (!resumeToken) {\n            return;\n        }\n\n        logger.info('Trying to resume the XMPP connection');\n\n        const url = new URL(this._stropheConn.service);\n        let { search } = url;\n        const pattern = /(previd=)([\\w-]+)/;\n        const oldToken = search.match(pattern);\n\n        // Replace previd if the previd value has changed.\n        if (oldToken && oldToken.indexOf(resumeToken) === -1) {\n            search = search.replace(pattern, `$1${resumeToken}`);\n\n        // Append previd if it doesn't exist.\n        } else if (!oldToken) {\n            search += search.indexOf('?') === -1 ? `?previd=${resumeToken}` : `&previd=${resumeToken}`;\n        }\n\n        url.search = search;\n\n        this._stropheConn.service = url.toString();\n\n        streamManagement.resume();\n    }\n\n    /**\n     * Cancels the retry task. It's called by {@link XmppConnection} when it's no longer interested in reconnecting for\n     * example when the disconnect method is called.\n     *\n     * @returns {void}\n     */\n    cancel() {\n        this._cancelResume();\n        this._resumeRetryN = 0;\n        if (this._networkOnlineListener) {\n            this._networkOnlineListener();\n            this._networkOnlineListener = null;\n        }\n    }\n}\n","/**\n* Gets next timeout using the full jitter pattern.\n*\n* NOTE that there are no checks for argument correctness, so either do the math or use defaults.\n*\n* @param {number} retry - The retry number.\n* @param {number} minDelay - The minimal delay in milliseconds.\n* @param {number} base - The exponent base.\n* @returns {number} - The amount of waiting before trying another time given in milliseconds.\n* @private\n*/\nexport function getJitterDelay(retry, minDelay = 500, base = 2) {\n    return Math.floor((Math.random() * ((Math.pow(base, retry) * 1000) - minDelay)) + minDelay);\n}\n","/**\n * Attaches to the {@link Strophe.Connection.rawInput} which is called whenever any data is received from the server.\n */\nexport default class LastRequestTracker {\n    /**\n     * Initializes new instance.\n     */\n    constructor() {\n        this._lastSuccess = null;\n        this._lastFailedMessage = null;\n    }\n\n    /**\n     * Starts tracking requests on the given connection.\n     *\n     * @param {XmppConnection} xmppConnection - The XMPP connection which manages the given {@code stropheConnection}.\n     * @param {Object} stropheConnection - Strophe connection instance.\n     */\n    startTracking(xmppConnection, stropheConnection) {\n        const originalRawInput = stropheConnection.rawInput;\n\n        stropheConnection.rawInput = (...args) => {\n            const rawMessage = args[0];\n\n            if (rawMessage.includes('failure')) {\n                this._lastFailedMessage = rawMessage;\n            }\n\n            // It's okay to use rawInput callback only once the connection has been established, otherwise it will\n            // treat 'item-not-found' or other connection error on websocket reconnect as successful stanza received.\n            if (xmppConnection.connected) {\n                this._lastSuccess = Date.now();\n            }\n            originalRawInput.apply(stropheConnection, args);\n        };\n    }\n\n    /**\n     * Returns the last raw failed incoming message on the xmpp connection.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._lastFailedMessage;\n    }\n\n    /**\n     * Returns how many milliseconds have passed since the last successful BOSH request.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._lastSuccess\n            ? Date.now() - this._lastSuccess\n            : null;\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * Default ping every 10 sec\n */\nconst PING_DEFAULT_INTERVAL = 10000;\n\n/**\n * Default ping timeout error after 5 sec of waiting.\n */\nconst PING_DEFAULT_TIMEOUT = 5000;\n\n/**\n * Default value for how many ping failures will be tolerated before the WebSocket connection is killed.\n * The worst case scenario in case of ping timing out without a response is (25 seconds at the time of this writing):\n * PING_THRESHOLD * PING_INTERVAL + PING_TIMEOUT\n */\nconst PING_DEFAULT_THRESHOLD = 2;\n\n/**\n * XEP-0199 ping plugin.\n *\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\n */\nexport default class PingConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Constructs new object\n     * @param {Object} options\n     * @param {Function} options.onPingThresholdExceeded - Callback called when ping fails too many times (controlled\n     * by the {@link PING_THRESHOLD} constant).\n     * @param {Function} options._getTimeSinceLastServerResponse - A function to obtain the last seen\n     * response from the server.\n     * @param {Object} options.pingOptions - The ping options if any.\n     * @constructor\n     */\n    constructor({ getTimeSinceLastServerResponse, onPingThresholdExceeded, pingOptions = {} }) {\n        super();\n        this.failedPings = 0;\n        this._onPingThresholdExceeded = onPingThresholdExceeded;\n        this._getTimeSinceLastServerResponse = getTimeSinceLastServerResponse;\n\n        this.pingInterval = typeof pingOptions.interval === 'number' ? pingOptions.interval : PING_DEFAULT_INTERVAL;\n        this.pingTimeout = typeof pingOptions.timeout === 'number' ? pingOptions.timeout : PING_DEFAULT_TIMEOUT;\n        this.pingThreshold = typeof pingOptions.threshold === 'number'\n            ? pingOptions.threshold : PING_DEFAULT_THRESHOLD;\n\n        // The number of timestamps of send pings to keep.\n        // The current value is 2 minutes.\n        this.pingTimestampsToKeep = Math.round(120000 / this.pingInterval);\n        this.pingExecIntervals = new Array(this.pingTimestampsToKeep);\n    }\n\n    /**\n     * Initializes the plugin. Method called by Strophe.\n     * @param connection Strophe connection instance.\n     */\n    init(connection) {\n        super.init(connection);\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Sends \"ping\" to given <tt>jid</tt>\n     * @param jid the JID to which ping request will be sent.\n     * @param success callback called on success.\n     * @param error callback called on error.\n     * @param timeout ms how long are we going to wait for the response. On\n     * timeout <tt>error<//t> callback is called with undefined error argument.\n     */\n    ping(jid, success, error, timeout) {\n        this._addPingExecutionTimestamp();\n\n        const iq = $iq({\n            type: 'get',\n            to: jid\n        });\n\n        iq.c('ping', { xmlns: Strophe.NS.PING });\n        this.connection.sendIQ2(iq, { timeout })\n            .then(success, error);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Starts to send ping in given interval to specified remote JID.\n     * This plugin supports only one such task and <tt>stopInterval</tt>\n     * must be called before starting a new one.\n     * @param remoteJid remote JID to which ping requests will be sent to.\n     */\n    startInterval(remoteJid) {\n        clearInterval(this.intervalId);\n        this.intervalId = window.setInterval(() => {\n\n            // when there were some server responses in the interval since the last time we checked (_lastServerCheck)\n            // let's skip the ping\n\n            const now = Date.now();\n\n            if (this._getTimeSinceLastServerResponse() < now - this._lastServerCheck) {\n                // do this just to keep in sync the intervals so we can detect suspended device\n                this._addPingExecutionTimestamp();\n\n                this._lastServerCheck = now;\n                this.failedPings = 0;\n\n                return;\n            }\n\n            this.ping(remoteJid, () => {\n                // server response is measured on raw input and ping response time is measured after all the xmpp\n                // processing is done in js, so there can be some misalignment when we do the check above.\n                // That's why we store the last time we got the response\n                this._lastServerCheck = this._getTimeSinceLastServerResponse() + Date.now();\n\n                this.failedPings = 0;\n            }, error => {\n                this.failedPings += 1;\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\n\n                if (this.failedPings >= this.pingThreshold) {\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                    logger.error(errmsg, error);\n                    this._onPingThresholdExceeded && this._onPingThresholdExceeded();\n                } else {\n                    logger.warn(errmsg, error);\n                }\n            }, this.pingTimeout);\n        }, this.pingInterval);\n        logger.info(`XMPP pings will be sent every ${this.pingInterval} ms`);\n    }\n\n    /**\n     * Stops current \"ping\"  interval task.\n     */\n    stopInterval() {\n        if (this.intervalId) {\n            window.clearInterval(this.intervalId);\n            this.intervalId = null;\n            this.failedPings = 0;\n            logger.info('Ping interval cleared');\n        }\n    }\n\n    /**\n     * Adds the current time to the array of send ping timestamps.\n     * @private\n     */\n    _addPingExecutionTimestamp() {\n        this.pingExecIntervals.push(new Date().getTime());\n\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\n        if (this.pingExecIntervals.length > this.pingTimestampsToKeep) {\n            this.pingExecIntervals.shift();\n        }\n    }\n\n    /**\n     * Returns the maximum time between the recent sent pings, if there is a\n     * big value it means the computer was inactive for some time(suspended).\n     * Checks the maximum gap between sending pings, considering and the\n     * current time. Trying to detect computer inactivity (sleep).\n     *\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\n     */\n    getPingSuspendTime() {\n        const pingIntervals = this.pingExecIntervals.slice();\n\n        // we need current time, as if ping was sent now\n        // if computer sleeps we will get correct interval after next\n        // scheduled ping, bet we sometimes need that interval before waiting\n        // for the next ping, on closing the connection on error.\n        pingIntervals.push(new Date().getTime());\n\n        let maxInterval = 0;\n        let previousTS = pingIntervals[0];\n\n        pingIntervals.forEach(e => {\n            const currentInterval = e - previousTS;\n\n            if (currentInterval > maxInterval) {\n                maxInterval = currentInterval;\n            }\n\n            previousTS = e;\n        });\n\n        // remove the interval between the ping sent\n        // this way in normal execution there is no suspend and the return\n        // will be 0 or close to 0.\n        maxInterval -= this.pingInterval;\n\n        // make sure we do not return less than 0\n        return Math.max(maxInterval, 0);\n    }\n}\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport ChatRoom from './ChatRoom';\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\n/**\n * MUC connection plugin.\n */\nexport default class MucConnectionPlugin extends ConnectionPluginListenable {\n    /**\n     *\n     * @param xmpp\n     */\n    constructor(xmpp) {\n        super();\n        this.xmpp = xmpp;\n        this.rooms = {};\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        // add handlers (just once)\n        this.connection.addHandler(this.onPresence.bind(this), null,\n            'presence', null, null, null, null);\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\n            null, 'presence', 'unavailable', null);\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\n            'presence', 'error', null);\n        this.connection.addHandler(this.onMessage.bind(this), null,\n            'message', null, null);\n        this.connection.addHandler(this.onMute.bind(this),\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\n        this.connection.addHandler(this.onMuteVideo.bind(this),\n            'http://jitsi.org/jitmeet/video', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     * @param options\n     */\n    createRoom(jid, password, options) {\n        const roomJid = Strophe.getBareJidFromJid(jid);\n\n        if (this.rooms[roomJid]) {\n            const errmsg = 'You are already in the room!';\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\n            password, this.xmpp, options);\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\n\n        return this.rooms[roomJid];\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    doLeave(jid) {\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\n        delete this.rooms[jid];\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n\n        // What is this for? A workaround for something?\n        if (pres.getAttribute('type')) {\n            return true;\n        }\n\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        // Parse status.\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>status[code=\"201\"]').length) {\n            room.createNonAnonymousRoom();\n        }\n\n        room.onPresence(pres);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceUnavailable(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceUnavailable(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceError(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceError(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param msg\n     */\n    onMessage(msg) {\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\n        const from = msg.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onMessage(msg, from);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMute(iq);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMuteVideo(iq);\n\n        return true;\n    }\n}\n","/* global $, __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\n\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport Lobby from './Lobby';\nimport XmppConnection from './XmppConnection';\nimport Moderator from './moderator';\n\nconst logger = getLogger(__filename);\n\nexport const parser = {\n    packet2JSON(xmlElement, nodes) {\n        for (const child of Array.from(xmlElement.children)) {\n            const node = {\n                attributes: {},\n                children: [],\n                tagName: child.tagName\n            };\n\n            for (const attr of Array.from(child.attributes)) {\n                node.attributes[attr.name] = attr.value;\n            }\n            const text = Strophe.getText(child);\n\n            if (text) {\n                // Using Strophe.getText will do work for traversing all direct\n                // child text nodes but returns an escaped value, which is not\n                // desirable at this point.\n                node.value = Strophe.xmlunescape(text);\n            }\n            nodes.push(node);\n            this.packet2JSON(child, node.children);\n        }\n    },\n    json2packet(nodes, packet) {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            if (node) {\n                packet.c(node.tagName, node.attributes);\n                if (node.value) {\n                    packet.t(node.value);\n                }\n                if (node.children) {\n                    this.json2packet(node.children, packet);\n                }\n                packet.up();\n            }\n        }\n\n        // packet.up();\n    }\n};\n\n/**\n * Returns array of JS objects from the presence JSON associated with the passed\n / nodeName\n * @param pres the presence JSON\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\n */\nfunction filterNodeFromPresenceJSON(pres, nodeName) {\n    const res = [];\n\n    for (let i = 0; i < pres.length; i++) {\n        if (pres[i].tagName === nodeName) {\n            res.push(pres[i]);\n        }\n    }\n\n    return res;\n}\n\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\n// of chaining function calls, allow long function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Array of affiliations that are allowed in members only room.\n * @type {string[]}\n */\nconst MEMBERS_AFFILIATIONS = [ 'owner', 'admin', 'member' ];\n\n/**\n *\n */\nexport default class ChatRoom extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param jid\n     * @param password\n     * @param XMPP\n     * @param options\n     * @param {boolean} options.disableFocus - when set to {@code false} will\n     * not invite Jicofo into the room.\n     * @param {boolean} options.disableDiscoInfo - when set to {@code false} will skip disco info.\n     * This is intended to be used only for lobby rooms.\n     * @param {boolean} options.enableLobby - when set to {@code false} will skip creating lobby room.\n     */\n    constructor(connection, jid, password, XMPP, options) {\n        super();\n        this.xmpp = XMPP;\n        this.connection = connection;\n        this.roomjid = Strophe.getBareJidFromJid(jid);\n        this.myroomjid = jid;\n        this.password = password;\n        logger.info(`Joined MUC as ${this.myroomjid}`);\n        this.members = {};\n        this.presMap = {};\n        this.presHandlers = {};\n        this._removeConnListeners = [];\n        this.joined = false;\n        this.role = null;\n        this.focusMucJid = null;\n        this.noBridgeAvailable = false;\n        this.options = options || {};\n        this.moderator\n            = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, {\n                connection: this.xmpp.options,\n                conference: this.options\n            });\n        if (typeof this.options.enableLobby === 'undefined' || this.options.enableLobby) {\n            this.lobby = new Lobby(this);\n        }\n        this.initPresenceMap(options);\n        this.lastPresences = {};\n        this.phoneNumber = null;\n        this.phonePin = null;\n        this.connectionTimes = {};\n        this.participantPropertyListener = null;\n\n        this.locked = false;\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    initPresenceMap(options = {}) {\n        this.presMap.to = this.myroomjid;\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\n        this.presMap.nodes = [];\n\n        if (options.statsId) {\n            this.presMap.nodes.push({\n                'tagName': 'stats-id',\n                'value': options.statsId\n            });\n        }\n\n        if (options.deploymentInfo && options.deploymentInfo.userRegion) {\n            this.presMap.nodes.push({\n                'tagName': 'region',\n                'attributes': {\n                    id: options.deploymentInfo.userRegion,\n                    xmlns: 'http://jitsi.org/jitsi-meet'\n                }\n            });\n        }\n\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     * Joins the chat room.\n     * @param {string} password - Password to unlock room on joining.\n     * @returns {Promise} - resolved when join completes. At the time of this\n     * writing it's never rejected.\n     */\n    join(password) {\n        this.password = password;\n\n        return new Promise(resolve => {\n            this.options.disableFocus\n                && logger.info(`Conference focus disabled for ${this.roomjid}`);\n\n            const preJoin\n                = this.options.disableFocus\n                    ? Promise.resolve()\n                    : this.moderator.allocateConferenceFocus();\n\n            preJoin.then(() => {\n                this.sendPresence(true);\n                this._removeConnListeners.push(\n                    this.connection.addEventListener(\n                        XmppConnection.Events.CONN_STATUS_CHANGED,\n                        this.onConnStatusChanged.bind(this))\n                );\n                resolve();\n            });\n        });\n    }\n\n    /**\n     *\n     * @param fromJoin - Whether this is initial presence to join the room.\n     */\n    sendPresence(fromJoin) {\n        const to = this.presMap.to;\n\n        if (!this.connection || !this.connection.connected || !to || (!this.joined && !fromJoin)) {\n            // Too early to send presence - not initialized\n            return;\n        }\n\n        const pres = $pres({ to });\n\n        // xep-0045 defines: \"including in the initial presence stanza an empty\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\n        // namespace\" and subsequent presences should not include that or it can\n        // be considered as joining, and server can send us the message history\n        // for the room on every presence\n        if (fromJoin) {\n            pres.c('x', { xmlns: this.presMap.xns });\n\n            if (this.password) {\n                pres.c('password').t(this.password).up();\n            }\n            if (this.options.billingId) {\n                pres.c('billingid').t(this.options.billingId).up();\n            }\n\n            pres.up();\n        }\n\n        parser.json2packet(this.presMap.nodes, pres);\n\n        // we store time we last synced presence state\n        this.presenceSyncTime = Date.now();\n\n        this.connection.send(pres);\n        if (fromJoin) {\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for\n            // Strophe to decide to send our IQ.\n            this.connection.flush();\n        }\n    }\n\n    /**\n     * Sends the presence unavailable, signaling the server\n     * we want to leave the room.\n     */\n    doLeave() {\n        logger.log('do leave', this.myroomjid);\n        const pres = $pres({ to: this.myroomjid,\n            type: 'unavailable' });\n\n        this.presMap.length = 0;\n\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\n        // means that there may not be enough time to send the unavailable\n        // presence. Switching Strophe to synchronous sending is not much of an\n        // option because it may lead to a noticeable delay in navigating away\n        // from the current location. As a compromise, we will try to increase\n        // the chances of sending the unavailable presence within the short time\n        // span that we have upon unloading by invoking flush() on the\n        // connection. We flush() once before sending/queuing the unavailable\n        // presence in order to attemtp to have the unavailable presence at the\n        // top of the send queue. We flush() once more after sending/queuing the\n        // unavailable presence in order to attempt to have it sent as soon as\n        // possible.\n        // FIXME do not use Strophe.Connection in the ChatRoom directly\n        !this.connection.isUsingWebSocket && this.connection.flush();\n        this.connection.send(pres);\n        this.connection.flush();\n    }\n\n    /**\n     *\n     */\n    discoRoomInfo() {\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\n\n        const getInfo\n            = $iq({\n                type: 'get',\n                to: this.roomjid\n            })\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\n\n        this.connection.sendIQ(getInfo, result => {\n            const locked\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\n                    .length\n                    === 1;\n\n            if (locked !== this.locked) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\n                this.locked = locked;\n            }\n\n            const meetingIdValEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_meetingId\"]>value');\n\n            if (meetingIdValEl.length) {\n                this.setMeetingId(meetingIdValEl.text());\n            } else {\n                logger.warn('No meeting ID from backend');\n            }\n\n            const membersOnly = $(result).find('>query>feature[var=\"muc_membersonly\"]').length === 1;\n\n            const lobbyRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_lobbyroom\"]>value');\n\n            if (this.lobby) {\n                this.lobby.setLobbyRoomJid(lobbyRoomField && lobbyRoomField.length ? lobbyRoomField.text() : undefined);\n            }\n\n            if (membersOnly !== this.membersOnlyEnabled) {\n                this.membersOnlyEnabled = membersOnly;\n                this.eventEmitter.emit(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED, membersOnly);\n            }\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room info: ', error);\n        });\n    }\n\n    /**\n     * Sets the meeting unique Id (received from the backend).\n     *\n     * @param {string} meetingId - The new meetings id.\n     * @returns {void}\n     */\n    setMeetingId(meetingId) {\n        if (this.meetingId !== meetingId) {\n            if (this.meetingId) {\n                logger.warn(`Meeting Id changed from:${this.meetingId} to:${meetingId}`);\n            }\n            this.meetingId = meetingId;\n            this.eventEmitter.emit(XMPPEvents.MEETING_ID_SET, meetingId);\n        }\n    }\n\n    /**\n     *\n     */\n    createNonAnonymousRoom() {\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\n\n        if (this.options.disableDiscoInfo) {\n            return;\n        }\n\n        const getForm = $iq({ type: 'get',\n            to: this.roomjid })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\n            .c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n        this.connection.sendIQ(getForm, form => {\n            if (!$(form).find(\n                    '>query>x[xmlns=\"jabber:x:data\"]'\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\n                const errmsg = 'non-anonymous rooms not supported';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                logger.error(errmsg);\n\n                return;\n            }\n\n            const formSubmit = $iq({ to: this.roomjid,\n                type: 'set' })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\n                .c('value')\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\n\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\n                .c('value').t('anyone').up().up();\n\n            this.connection.sendIQ(formSubmit);\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room configuration form: ', error);\n        });\n    }\n\n    /**\n     * Handles Xmpp Connection status updates.\n     *\n     * @param {Strophe.Status} status - The Strophe connection status.\n     */\n    onConnStatusChanged(status) {\n        // Send cached presence when the XMPP connection is re-established.\n        if (status === XmppConnection.Status.CONNECTED) {\n            this.sendPresence();\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n        const member = {};\n        const statusEl = pres.getElementsByTagName('status')[0];\n\n        if (statusEl) {\n            member.status = statusEl.textContent || '';\n        }\n        let hasStatusUpdate = false;\n        let hasVersionUpdate = false;\n        const xElement\n            = pres.getElementsByTagNameNS(\n                'http://jabber.org/protocol/muc#user', 'x')[0];\n        const mucUserItem\n            = xElement && xElement.getElementsByTagName('item')[0];\n\n        member.affiliation\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\n\n        // Focus recognition\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\n\n        member.jid = jid;\n        member.isFocus\n            = jid && jid.indexOf(`${this.moderator.getFocusUserJid()}/`) === 0;\n        member.isHiddenDomain\n            = jid && jid.indexOf('@') > 0\n                && this.options.hiddenDomain\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\n\n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\n            fromHiddenDomain: member.isHiddenDomain,\n            presence: pres\n        });\n\n        const xEl = pres.querySelector('x');\n\n        if (xEl) {\n            xEl.remove();\n        }\n\n        const nodes = [];\n\n        parser.packet2JSON(pres, nodes);\n        this.lastPresences[from] = nodes;\n\n        // process nodes to extract data needed for MUC_JOINED and\n        // MUC_MEMBER_JOINED events\n        const extractIdentityInformation = node => {\n            const identity = {};\n            const userInfo = node.children.find(c => c.tagName === 'user');\n\n            if (userInfo) {\n                identity.user = {};\n                for (const tag of [ 'id', 'name', 'avatar' ]) {\n                    const child\n                        = userInfo.children.find(c => c.tagName === tag);\n\n                    if (child) {\n                        identity.user[tag] = child.value;\n                    }\n                }\n            }\n            const groupInfo = node.children.find(c => c.tagName === 'group');\n\n            if (groupInfo) {\n                identity.group = groupInfo.value;\n            }\n\n            return identity;\n        };\n\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'bot': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { type } = attributes;\n\n                member.botType = type;\n                break;\n            }\n            case 'nick':\n                member.nick = node.value;\n                break;\n            case 'userId':\n                member.id = node.value;\n                break;\n            case 'stats-id':\n                member.statsID = node.value;\n                break;\n            case 'identity':\n                member.identity = extractIdentityInformation(node);\n                break;\n            case 'features': {\n                member.features = this._extractFeatures(node);\n                break;\n            }\n            case 'stat': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { name } = attributes;\n\n                if (name === 'version') {\n                    member.version = attributes.value;\n                }\n                break;\n            }\n            }\n        }\n\n        if (from === this.myroomjid) {\n            const newRole\n                = member.affiliation === 'owner' ? member.role : 'none';\n\n            if (this.role !== newRole) {\n                this.role = newRole;\n                this.eventEmitter.emit(\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\n                    this.role);\n            }\n            if (!this.joined) {\n                this.joined = true;\n                const now = this.connectionTimes['muc.joined']\n                    = window.performance.now();\n\n                logger.log('(TIME) MUC joined:\\t', now);\n\n                // set correct initial state of locked\n                if (this.password) {\n                    this.locked = true;\n                }\n\n                // Re-send presence in case any presence updates were added,\n                // but blocked from sending, during the join process.\n                // send the presence only if there was a modification after we had synced it\n                if (this.presenceUpdateTime >= this.presenceSyncTime) {\n                    this.sendPresence();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\n\n                // Now let's check the disco-info to retrieve the\n                // meeting Id if any\n                !this.options.disableDiscoInfo && this.discoRoomInfo();\n            }\n        } else if (jid === undefined) {\n            logger.info('Ignoring member with undefined JID');\n        } else if (this.members[from] === undefined) {\n            // new participant\n            this.members[from] = member;\n            logger.log('entered', from, member);\n            hasStatusUpdate = member.status !== undefined;\n            hasVersionUpdate = member.version !== undefined;\n            if (member.isFocus) {\n                this._initFocus(from, member.features);\n            } else {\n                // identity is being added to member joined, so external\n                // services can be notified for that (currently identity is\n                // not used inside library)\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_JOINED,\n                    from,\n                    member.nick,\n                    member.role,\n                    member.isHiddenDomain,\n                    member.statsID,\n                    member.status,\n                    member.identity,\n                    member.botType,\n                    member.jid,\n                    member.features);\n\n                // we are reporting the status with the join\n                // so we do not want a second event about status update\n                hasStatusUpdate = false;\n            }\n        } else {\n            // Presence update for existing participant\n            // Watch role change:\n            const memberOfThis = this.members[from];\n\n            if (memberOfThis.role !== member.role) {\n                memberOfThis.role = member.role;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\n            }\n\n            // affiliation changed\n            if (memberOfThis.affiliation !== member.affiliation) {\n                memberOfThis.affiliation = member.affiliation;\n            }\n\n            // fire event that botType had changed\n            if (memberOfThis.botType !== member.botType) {\n                memberOfThis.botType = member.botType;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n                    from,\n                    member.botType);\n            }\n\n            if (member.isFocus) {\n                // From time to time first few presences of the focus are not\n                // containing it's jid. That way we can mark later the focus\n                // member instead of not marking it at all and not starting the\n                // conference.\n                // FIXME: Maybe there is a better way to handle this issue. It\n                // seems there is some period of time in prosody that the\n                // configuration form is received but not applied. And if any\n                // participant joins during that period of time the first\n                // presence from the focus won't contain\n                // <item jid=\"focus...\" />.\n                // By default we are disabling the waiting for form submission in order to use the room\n                // and we had enabled by default that jids are public in the room ,\n                // so this case should not happen, if public jid is turned off we will receive the jid\n                // when we become moderator in the room\n                memberOfThis.isFocus = true;\n                this._initFocus(from, member.features);\n            }\n\n            // store the new display name\n            if (member.displayName) {\n                memberOfThis.displayName = member.displayName;\n            }\n\n            // update stored status message to be able to detect changes\n            if (memberOfThis.status !== member.status) {\n                hasStatusUpdate = true;\n                memberOfThis.status = member.status;\n            }\n\n            if (memberOfThis.version !== member.version) {\n                hasVersionUpdate = true;\n                memberOfThis.version = member.version;\n            }\n\n            if (!isEqual(memberOfThis.features, member.features)) {\n                memberOfThis.features = member.features;\n                this.eventEmitter.emit(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, from, member.features);\n            }\n        }\n\n        // after we had fired member or room joined events, lets fire events\n        // for the rest info we got in presence\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'nick':\n                if (!member.isFocus) {\n                    const displayName\n                        = this.xmpp.options.displayJids\n                            ? Strophe.getResourceFromJid(from)\n                            : member.nick;\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\n                        from,\n                        displayName);\n                }\n                break;\n            case 'bridgeNotAvailable':\n                if (member.isFocus && !this.noBridgeAvailable) {\n                    this.noBridgeAvailable = true;\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\n                }\n                break;\n            case 'conference-properties':\n                if (member.isFocus) {\n                    const properties = {};\n\n                    for (let j = 0; j < node.children.length; j++) {\n                        const { attributes } = node.children[j];\n\n                        if (attributes && attributes.key) {\n                            properties[attributes.key] = attributes.value;\n                        }\n                    }\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\n\n                    this.restartByTerminateSupported = properties['support-terminate-restart'] === 'true';\n                    logger.info(`Jicofo supports restart by terminate: ${this.supportsRestartByTerminate()}`);\n                }\n                break;\n            case 'transcription-status': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n\n                const { status } = attributes;\n\n                if (status && status !== this.transcriptionStatus) {\n                    this.transcriptionStatus = status;\n                    this.eventEmitter.emit(\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n                        status\n                    );\n                }\n\n\n                break;\n            }\n            case 'call-control': {\n                const att = node.attributes;\n\n                if (!att) {\n                    break;\n                }\n                this.phoneNumber = att.phone || null;\n                this.phonePin = att.pin || null;\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\n                break;\n            }\n            default:\n                this.processNode(node, from);\n            }\n        }\n\n        // Trigger status message update if necessary\n        if (hasStatusUpdate) {\n            this.eventEmitter.emit(\n                XMPPEvents.PRESENCE_STATUS,\n                from,\n                member.status);\n        }\n\n        if (hasVersionUpdate) {\n            logger.info(`Received version for ${jid}: ${member.version}`);\n        }\n    }\n\n    /**\n     * Extracts the features from the presence.\n     * @param node the node to process.\n     * @return features the Set of features where extracted data is added.\n     * @private\n     */\n    _extractFeatures(node) {\n        const features = new Set();\n\n        for (let j = 0; j < node.children.length; j++) {\n            const { attributes } = node.children[j];\n\n            if (attributes && attributes.var) {\n                features.add(attributes.var);\n            }\n        }\n\n        return features;\n    }\n\n    /**\n     * Initialize some properties when the focus participant is verified.\n     * @param from jid of the focus\n     * @param features the features reported in jicofo presence\n     */\n    _initFocus(from, features) {\n        this.focusMucJid = from;\n        this.focusFeatures = features;\n    }\n\n    /**\n     * Sets the special listener to be used for \"command\"s whose name starts\n     * with \"jitsi_participant_\".\n     */\n    setParticipantPropertyListener(listener) {\n        this.participantPropertyListener = listener;\n    }\n\n    /**\n     * Checks if Jicofo supports restarting Jingle session after 'session-terminate'.\n     * @returns {boolean}\n     */\n    supportsRestartByTerminate() {\n        return this.restartByTerminateSupported;\n    }\n\n    /**\n     *\n     * @param node\n     * @param from\n     */\n    processNode(node, from) {\n        // make sure we catch all errors coming from any handler\n        // otherwise we can remove the presence handler from strophe\n        try {\n            let tagHandlers = this.presHandlers[node.tagName];\n\n            if (node.tagName.startsWith('jitsi_participant_')) {\n                tagHandlers = [ this.participantPropertyListener ];\n            }\n\n            if (tagHandlers) {\n                tagHandlers.forEach(handler => {\n                    handler(node, Strophe.getResourceFromJid(from), from);\n                });\n            }\n        } catch (e) {\n            GlobalOnErrorHandler.callErrorHandler(e);\n            logger.error(`Error processing:${node.tagName} node.`, e);\n        }\n    }\n\n    /**\n     * Send text message to the other participants in the conference\n     * @param message\n     * @param elementName\n     * @param nickname\n     */\n    sendMessage(message, elementName, nickname) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        // We are adding the message in a packet extension. If this element\n        // is different from 'body', we add a custom namespace.\n        // e.g. for 'json-message' extension of message stanza.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n        if (nickname) {\n            msg.c('nick', { xmlns: 'http://jabber.org/protocol/nick' })\n                .t(nickname)\n                .up()\n                .up();\n        }\n        this.connection.send(msg);\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Send private text message to another participant of the conference\n     * @param id id/muc resource of the receiver\n     * @param message\n     * @param elementName\n     * @param nickname\n     */\n    sendPrivateMessage(id, message, elementName, nickname) {\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\n            type: 'chat' });\n\n        // We are adding the message in packet. If this element is different\n        // from 'body', we add our custom namespace for the same.\n        // e.g. for 'json-message' message extension.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n        if (nickname) {\n            msg.c('nick', { xmlns: 'http://jabber.org/protocol/nick' })\n                .t(nickname)\n                .up()\n                .up();\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\n    }\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param subject\n     */\n    setSubject(subject) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        msg.c('subject', subject);\n        this.connection.send(msg);\n    }\n\n    /**\n     * Called when participant leaves.\n     * @param jid the jid of the participant that leaves\n     * @param skipEvents optional params to skip any events, including check\n     * whether this is the focus that left\n     */\n    onParticipantLeft(jid, skipEvents) {\n        delete this.lastPresences[jid];\n\n        if (skipEvents) {\n            return;\n        }\n\n        this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid);\n\n        this.moderator.onMucMemberLeft(jid);\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceUnavailable(pres, from) {\n        // ignore presence\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\n            return true;\n        }\n\n        // room destroyed ?\n        const destroySelect = $(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>destroy');\n\n        if (destroySelect.length) {\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>destroy>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason, destroySelect.attr('jid'));\n            this.connection.emuc.doLeave(this.roomjid);\n\n            return true;\n        }\n\n        // Status code 110 indicates that this notification is \"self-presence\".\n        const isSelfPresence\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\n                        + 'status[code=\"110\"]')\n                .length;\n        const isKick\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>status[code=\"307\"]')\n                .length;\n        const membersKeys = Object.keys(this.members);\n\n        if (isKick) {\n            const actorSelect\n                = $(pres)\n                .find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>item>actor');\n\n            let actorNick;\n\n            if (actorSelect.length) {\n                actorNick = actorSelect.attr('nick');\n            }\n\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                + '>item>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            // we first fire the kicked so we can show the participant\n            // who kicked, before notifying that participant left\n            // we fire kicked for us and for any participant kicked\n            this.eventEmitter.emit(\n                XMPPEvents.KICKED,\n                isSelfPresence,\n                actorNick,\n                Strophe.getResourceFromJid(from),\n                reason);\n        }\n\n        if (isSelfPresence) {\n            // If the status code is 110 this means we're leaving and we would\n            // like to remove everyone else from our view, so we trigger the\n            // event.\n            membersKeys.forEach(jid => {\n                const member = this.members[jid];\n\n                delete this.members[jid];\n                this.onParticipantLeft(jid, member.isFocus);\n            });\n            this.connection.emuc.doLeave(this.roomjid);\n\n            // we fire muc_left only if this is not a kick,\n            // kick has both statuses 110 and 307.\n            if (!isKick) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\n            }\n        } else {\n            delete this.members[from];\n            this.onParticipantLeft(from, false);\n        }\n    }\n\n    /**\n     *\n     * @param msg\n     * @param from\n     */\n    onMessage(msg, from) {\n        const nick\n            = $(msg).find('>nick[xmlns=\"http://jabber.org/protocol/nick\"]')\n                .text()\n            || Strophe.getResourceFromJid(from);\n\n        const type = msg.getAttribute('type');\n\n        if (type === 'error') {\n            const errorMsg = $(msg).find('>error>text').text();\n\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED, errorMsg);\n\n            return true;\n        }\n\n        const txt = $(msg).find('>body').text();\n        const subject = $(msg).find('>subject');\n\n        if (subject.length) {\n            const subjectText = subject.text();\n\n            if (subjectText || subjectText === '') {\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\n                logger.log(`Subject is changed to ${subjectText}`);\n            }\n        }\n\n        // xep-0203 delay\n        let stamp = $(msg).find('>delay').attr('stamp');\n\n        if (!stamp) {\n            // or xep-0091 delay, UTC timestamp\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\n\n            if (stamp) {\n                // the format is CCYYMMDDThh:mm:ss\n                const dateParts\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\n\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\n            }\n        }\n\n        if (from === this.roomjid) {\n            let invite;\n\n            if ($(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>status[code=\"104\"]').length) {\n                this.discoRoomInfo();\n            } else if ((invite = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>invite'))\n                        && invite.length) {\n                const passwordSelect = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>password');\n                let password;\n\n                if (passwordSelect && passwordSelect.length) {\n                    password = passwordSelect.text();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                    from, invite.attr('from'), txt, password);\n            }\n        }\n\n        const jsonMessage = $(msg).find('>json-message').text();\n\n        if (jsonMessage) {\n            const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\n\n            // We emit this event if the message is a valid json, and is not\n            // delivered after a delay, i.e. stamp is undefined.\n            // e.g. - subtitles should not be displayed if delayed.\n            if (parsedJson && stamp === undefined) {\n                this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\n                    from, parsedJson);\n\n                return;\n            }\n        }\n\n        if (txt) {\n            if (type === 'chat') {\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n                        from, nick, txt, this.myroomjid, stamp);\n            } else if (type === 'groupchat') {\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\n                        from, nick, txt, this.myroomjid, stamp);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceError(pres, from) {\n        if ($(pres)\n                .find(\n                    '>error[type=\"auth\"]'\n                        + '>not-authorized['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            logger.log('on password required', from);\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\n        } else if ($(pres)\n                .find(\n                    '>error[type=\"cancel\"]'\n                        + '>not-allowed['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\n\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\n                // enter the room by replying with 'not-authorized'. This would\n                // result in reconnection from authorized domain.\n                // We're either missing Jicofo/Prosody config for anonymous\n                // domains or something is wrong.\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\n\n            } else {\n                logger.warn('onPresError ', pres);\n                this.eventEmitter.emit(\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\n            }\n        } else if ($(pres).find('>error>service-unavailable').length) {\n            logger.warn('Maximum users limit for the room has been reached',\n                pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR);\n        } else if ($(pres)\n            .find(\n                '>error[type=\"auth\"]'\n                + '>registration-required['\n                + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]').length) {\n\n            // let's extract the lobby jid from the custom field\n            const lobbyRoomNode = $(pres).find('>lobbyroom');\n            let lobbyRoomJid;\n\n            if (lobbyRoomNode.length) {\n                lobbyRoomJid = lobbyRoomNode.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR, lobbyRoomJid);\n        } else {\n            logger.warn('onPresError ', pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     * @param affiliation\n     */\n    setAffiliation(jid, affiliation) {\n        const grantIQ = $iq({\n            to: this.roomjid,\n            type: 'set'\n        })\n        .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n        .c('item', {\n            affiliation,\n            nick: Strophe.getResourceFromJid(jid)\n        })\n        .c('reason').t(`Your affiliation has been changed to '${affiliation}'.`)\n        .up().up().up();\n\n        this.connection.sendIQ(\n            grantIQ,\n            result => logger.log('Set affiliation of participant with jid: ', jid, 'to', affiliation, result),\n            error => logger.log('Set affiliation of participant error: ', error));\n    }\n\n    /**\n     *\n     * @param jid\n     * @param reason\n     */\n    kick(jid, reason = 'You have been kicked.') {\n        const kickIQ = $iq({ to: this.roomjid,\n            type: 'set' })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\n                role: 'none' })\n            .c('reason').t(reason).up().up().up();\n\n        this.connection.sendIQ(\n            kickIQ,\n            result => logger.log('Kick participant with jid: ', jid, result),\n            error => logger.log('Kick participant error: ', error));\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param key\n     * @param onSuccess\n     * @param onError\n     * @param onNotSupported\n     */\n    lockRoom(key, onSuccess, onError, onNotSupported) {\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\n        this.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res)\n                        .find(\n                            '>query>x[xmlns=\"jabber:x:data\"]'\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\n                        .length) {\n                    const formsubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        })\n                            .c('query', {\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\n                            });\n\n                    formsubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formsubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\n                        .c('value')\n                        .t(key)\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field',\n                             { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                        .c('value')\n                        .t(key === null || key.length === 0 ? '0' : '1')\n                        .up()\n                        .up();\n\n                    // if members only enabled\n                    if (this.membersOnlyEnabled) {\n                        formsubmit\n                            .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                            .c('value')\n                            .t('true')\n                            .up()\n                            .up();\n                    }\n\n                    // Fixes a bug in prosody 0.9.+\n                    // https://prosody.im/issues/issue/373\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\n                        .c('value')\n                        .t('anyone')\n                        .up()\n                        .up();\n\n                    this.connection.sendIQ(\n                        formsubmit,\n                        () => {\n\n                            // we set the password in chat room so we can use it\n                            // later when dialing out\n                            this.password = key;\n                            onSuccess();\n                        },\n                        onError);\n                } else {\n                    onNotSupported();\n                }\n            },\n            onError);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Turns off or on the members only config for the main room.\n     *\n     * @param {boolean} enabled - Whether to turn it on or off.\n     * @param onSuccess - optional callback.\n     * @param onError - optional callback.\n     */\n    setMembersOnly(enabled, onSuccess, onError) {\n        if (enabled && Object.values(this.members).filter(m => !m.isFocus).length) {\n            // first grant membership to all that are in the room\n            // currently there is a bug in prosody where it handles only the first item\n            // that's why we will send iq per member\n            Object.values(this.members).forEach(m => {\n                if (m.jid && !MEMBERS_AFFILIATIONS.includes(m.affiliation)) {\n                    this.xmpp.connection.sendIQ(\n                        $iq({\n                            to: this.roomjid,\n                            type: 'set' })\n                        .c('query', {\n                            xmlns: 'http://jabber.org/protocol/muc#admin' })\n                        .c('item', {\n                            'affiliation': 'member',\n                            'jid': m.jid\n                        }).up().up());\n                }\n            });\n        }\n\n        const errorCallback = onError ? onError : () => {}; // eslint-disable-line no-empty-function\n\n        this.xmpp.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res).find('>query>x[xmlns=\"jabber:x:data\"]>field[var=\"muc#roomconfig_membersonly\"]').length) {\n                    const formToSubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n                    formToSubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formToSubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formToSubmit\n                        .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                        .c('value')\n                        .t(enabled ? 'true' : 'false')\n                        .up()\n                        .up();\n\n                    // if room is locked from other participant or we are locking it\n                    if (this.locked) {\n                        formToSubmit\n                            .c('field',\n                                { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                            .c('value')\n                            .t('1')\n                            .up()\n                            .up();\n                    }\n\n                    this.xmpp.connection.sendIQ(formToSubmit, onSuccess, errorCallback);\n                } else {\n                    errorCallback(new Error('Setting members only room not supported!'));\n                }\n            },\n            errorCallback);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * This method is used by jibri.\n     *\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replce was\n     * performed as the value was already there.\n     * @deprecated Use 'addOrReplaceInPresence' instead. TODO: remove it from here and jibri.\n     */\n    addToPresence(key, values) {\n        return this.addOrReplaceInPresence(key, values);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replace was\n     * performed as the value was already there.\n     */\n    addOrReplaceInPresence(key, values) {\n        values.tagName = key;\n\n        const matchingNodes = this.presMap.nodes.filter(node => key === node.tagName);\n\n        // if we have found just one, let's check is it the same\n        if (matchingNodes.length === 1 && isEqual(matchingNodes[0], values)) {\n            return false;\n        }\n\n        this.removeFromPresence(key);\n        this.presMap.nodes.push(values);\n        this.presenceUpdateTime = Date.now();\n\n        return true;\n    }\n\n    /**\n     * Retrieves a value from the presence map.\n     *\n     * @param {string} key - The key to find the value for.\n     * @returns {Object?}\n     */\n    getFromPresence(key) {\n        return this.presMap.nodes.find(node => key === node.tagName);\n    }\n\n    /**\n     * Removes a key from the presence map.\n     * @param key\n     */\n    removeFromPresence(key) {\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\n\n        this.presMap.nodes = nodes;\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    addPresenceListener(name, handler) {\n        if (typeof handler !== 'function') {\n            throw new Error('\"handler\" is not a function');\n        }\n        let tagHandlers = this.presHandlers[name];\n\n        if (!tagHandlers) {\n            this.presHandlers[name] = tagHandlers = [];\n        }\n        if (tagHandlers.indexOf(handler) === -1) {\n            tagHandlers.push(handler);\n        } else {\n            logger.warn(\n                `Trying to add the same handler more than once for: ${name}`);\n        }\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    removePresenceListener(name, handler) {\n        const tagHandlers = this.presHandlers[name];\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\n\n        // eslint-disable-next-line no-negated-condition\n        if (handlerIdx !== -1) {\n            tagHandlers.splice(handlerIdx, 1);\n        } else {\n            logger.warn(`Handler for: ${name} was not registered`);\n        }\n    }\n\n    /**\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\n     * focus.\n     * @param mucJid the full MUC address of the user to be checked.\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\n     * the MUC then <tt>null</tt> is returned.\n     */\n    isFocus(mucJid) {\n        const member = this.members[mucJid];\n\n        if (member) {\n            return member.isFocus;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     */\n    isModerator() {\n        return this.role === 'moderator';\n    }\n\n    /**\n     *\n     * @param peerJid\n     */\n    getMemberRole(peerJid) {\n        if (this.members[peerJid]) {\n            return this.members[peerJid].role;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    setVideoMute(mute, callback) {\n        this.sendVideoInfoPresence(mute);\n        if (callback) {\n            callback(mute);\n        }\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    setAudioMute(mute, callback) {\n        return this.sendAudioInfoPresence(mute, callback);\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addAudioInfoToPresence(mute) {\n        const audioMutedTagName = 'audiomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(audioMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            audioMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    sendAudioInfoPresence(mute, callback) {\n        // FIXME resend presence on CONNECTED\n        this.addAudioInfoToPresence(mute) && this.sendPresence();\n        if (callback) {\n            callback();\n        }\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addVideoInfoToPresence(mute) {\n        const videoMutedTagName = 'videomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(videoMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            videoMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    sendVideoInfoPresence(mute) {\n        this.addVideoInfoToPresence(mute) && this.sendPresence();\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given endpoint JID.\n     * @param {string} endpointId the endpoint ID mapped to the participant\n     * which corresponds to MUC nickname.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available or if\n     * the media type given is invalid.\n     */\n    getMediaPresenceInfo(endpointId, mediaType) {\n        // Will figure out current muted status by looking up owner's presence\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\n\n        if (!pres) {\n            // No presence available\n            return null;\n        }\n        const data = {\n            muted: true, // muted by default\n            videoType: undefined // no video type by default\n        };\n        let mutedNode = null;\n\n        if (mediaType === MediaType.AUDIO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\n        } else if (mediaType === MediaType.VIDEO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\n            const codecTypeNode = filterNodeFromPresenceJSON(pres, 'jitsi_participant_codecType');\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\n\n            if (videoTypeNode.length > 0) {\n                data.videoType = videoTypeNode[0].value;\n            }\n            if (codecTypeNode.length > 0) {\n                data.codecType = codecTypeNode[0].value;\n            }\n        } else {\n            logger.error(`Unsupported media type: ${mediaType}`);\n\n            return null;\n        }\n\n        if (mutedNode.length > 0) {\n            data.muted = mutedNode[0].value === 'true';\n        }\n\n        return data;\n    }\n\n    /**\n     * Returns true if the SIP calls are supported and false otherwise\n     */\n    isSIPCallingSupported() {\n        if (this.moderator) {\n            return this.moderator.isSipGatewayEnabled();\n        }\n\n        return false;\n    }\n\n    /**\n     * Dials a number.\n     * @param number the number\n     */\n    dial(number) {\n        return this.connection.rayo.dial(number, 'fromnumber',\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\n            this.focusMucJid);\n    }\n\n    /**\n     * Hangup an existing call\n     */\n    hangup() {\n        return this.connection.rayo.hangup();\n    }\n\n    /**\n     *\n     * @returns {Lobby}\n     */\n    getLobby() {\n        return this.lobby;\n    }\n\n    /**\n     * Returns the phone number for joining the conference.\n     */\n    getPhoneNumber() {\n        return this.phoneNumber;\n    }\n\n    /**\n     * Returns the pin for joining the conference with phone.\n     */\n    getPhonePin() {\n        return this.phonePin;\n    }\n\n    /**\n     * Returns the meeting unique ID if any came from backend.\n     *\n     * @returns {string} - The meeting ID.\n     */\n    getMeetingId() {\n        return this.meetingId;\n    }\n\n    /**\n     * Mutes remote participant.\n     * @param jid of the participant\n     * @param mute\n     * @param mediaType\n     */\n    muteParticipant(jid, mute, mediaType) {\n        logger.info('set mute', mute);\n        const iqToFocus = $iq(\n            { to: this.focusMucJid,\n                type: 'set' })\n            .c('mute', {\n                xmlns: `http://jitsi.org/jitmeet/${mediaType}`,\n                jid\n            })\n            .t(mute.toString())\n            .up();\n\n        this.connection.sendIQ(\n            iqToFocus,\n            result => logger.log('set mute', result),\n            error => logger.log('set mute error', error));\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.VIDEO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * Clean any listeners or resources, executed on leaving.\n     */\n    clean() {\n        this._removeConnListeners.forEach(remove => remove());\n        this._removeConnListeners = [];\n\n        this.joined = false;\n    }\n\n    /**\n     * Leaves the room. Closes the jingle session.\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\n     * less than 5s after sending presence unavailable. Otherwise the promise is\n     * rejected.\n     */\n    leave() {\n        return new Promise((resolve, reject) => {\n            const timeout = setTimeout(() => onMucLeft(true), 5000);\n            const eventEmitter = this.eventEmitter;\n\n            this.clean();\n\n            /**\n             *\n             * @param doReject\n             */\n            function onMucLeft(doReject = false) {\n                eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\n                clearTimeout(timeout);\n                if (doReject) {\n                    // the timeout expired\n                    reject(new Error('The timeout for the confirmation about '\n                        + 'leaving the room expired.'));\n                } else {\n                    resolve();\n                }\n            }\n            eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\n            this.doLeave();\n        });\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The command type for updating a lobby participant's e-mail address.\n *\n * @type {string}\n */\nconst EMAIL_COMMAND = 'email';\n\n/**\n * The Lobby room implementation. Setting a room to members only, joining the lobby room\n * approving or denying access to participants from the lobby room.\n */\nexport default class Lobby {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this.xmpp = room.xmpp;\n        this.mainRoom = room;\n\n        const maybeJoinLobbyRoom = this._maybeJoinLobbyRoom.bind(this);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.LOCAL_ROLE_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n            jid => {\n                this.lobbyRoomJid = jid;\n            });\n    }\n\n    /**\n     * Whether lobby is supported on backend.\n     *\n     * @returns {boolean} whether lobby is supported on backend.\n     */\n    isSupported() {\n        return this.xmpp.lobbySupported;\n    }\n\n    /**\n     * Enables lobby by setting the main room to be members only and joins the lobby chat room.\n     *\n     * @returns {Promise}\n     */\n    enable() {\n        if (!this.isSupported()) {\n            return Promise.reject(new Error('Lobby not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.mainRoom.setMembersOnly(true, resolve, reject);\n        });\n    }\n\n    /**\n     * Disable lobby by setting the main room to be non members only and levaes the lobby chat room if joined.\n     *\n     * @returns {void}\n     */\n    disable() {\n        if (!this.isSupported() || !this.mainRoom.isModerator()\n                || !this.lobbyRoom || !this.mainRoom.membersOnlyEnabled) {\n            return;\n        }\n\n        this.mainRoom.setMembersOnly(false);\n    }\n\n    /**\n     * Leaves the lobby room.\n     * @private\n     */\n    _leaveLobbyRoom() {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.leave()\n                .then(() => {\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left!');\n                })\n                .catch(() => {}); // eslint-disable-line no-empty-function\n        }\n    }\n\n    /**\n     * We had received a jid for the lobby room.\n     *\n     * @param jid the lobby room jid to join.\n     */\n    setLobbyRoomJid(jid) {\n        this.lobbyRoomJid = jid;\n    }\n\n    /**\n     * Checks the state of mainRoom, lobbyRoom and current user role to decide whether to join lobby room.\n     * @private\n     */\n    _maybeJoinLobbyRoom() {\n        if (!this.isSupported()) {\n            return;\n        }\n\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (isModerator && this.mainRoom.membersOnlyEnabled && !this.lobbyRoom) {\n            // join the lobby\n            this.join()\n                .then(() => logger.info('Joined lobby room'))\n                .catch(e => logger.error('Failed joining lobby', e));\n        }\n    }\n\n    /**\n     * Joins a lobby room setting display name and eventually avatar(using the email provided).\n     *\n     * @param {string} username is required.\n     * @param {string} email is optional.\n     * @returns {Promise} resolves once we join the room.\n     */\n    join(displayName, email) {\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (!this.lobbyRoomJid) {\n            return Promise.reject(new Error('Missing lobbyRoomJid, cannot join lobby room.'));\n        }\n\n        const roomName = Strophe.getNodeFromJid(this.lobbyRoomJid);\n        const customDomain = Strophe.getDomainFromJid(this.lobbyRoomJid);\n\n        this.lobbyRoom = this.xmpp.createRoom(\n            roomName, {\n                customDomain,\n                disableDiscoInfo: true,\n                disableFocus: true,\n                enableLobby: false\n            }\n        );\n\n        if (displayName) {\n            // remove previously set nickname\n            this.lobbyRoom.addOrReplaceInPresence('nick', {\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n                value: displayName\n            });\n        }\n\n        if (isModerator) {\n            this.lobbyRoom.addPresenceListener(EMAIL_COMMAND, (node, from) => {\n                this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED, from, { email: node.value });\n            });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_JOINED,\n                // eslint-disable-next-line max-params\n                (from, nick, role, isHiddenDomain, statsID, status, identity, botType, jid) => {\n                    // we need to ignore joins on lobby for participants that are already in the main room\n                    if (Object.values(this.mainRoom.members).find(m => m.jid === jid)) {\n                        return;\n                    }\n\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n                        Strophe.getResourceFromJid(from),\n                        nick,\n                        identity ? identity.avatar : undefined\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_LEFT, from => {\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n                        Strophe.getResourceFromJid(from)\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                () => {\n                    // let's make sure we emit that all lobby users had left\n                    Object.keys(this.lobbyRoom.members)\n                        .forEach(j => this.mainRoom.eventEmitter.emit(\n                            XMPPEvents.MUC_LOBBY_MEMBER_LEFT, Strophe.getResourceFromJid(j)));\n\n                    this.lobbyRoom.clean();\n\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left(destroyed)!');\n                });\n        } else {\n            // this should only be handled by those waiting in lobby\n            this.lobbyRoom.addEventListener(XMPPEvents.KICKED, isSelfPresence => {\n                if (isSelfPresence) {\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DENIED_ACCESS);\n\n                    this.lobbyRoom.clean();\n\n                    return;\n                }\n            });\n\n            // As there is still reference of the main room\n            // the invite will be detected and addressed to its eventEmitter, even though we are not in it\n            // the invite message should be received directly to the xmpp conn in general\n            this.mainRoom.addEventListener(\n                XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                (roomJid, from, txt, invitePassword) => {\n                    logger.debug(`Received approval to join ${roomJid} ${from} ${txt}`);\n                    if (roomJid === this.mainRoom.roomjid) {\n                        // we are now allowed let's join and leave lobby\n                        this.mainRoom.join(invitePassword);\n\n                        this._leaveLobbyRoom();\n                    }\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                (reason, jid) => {\n                    // we are receiving the jid of the main room\n                    // means we are invited to join, maybe lobby was disabled\n                    if (jid) {\n                        this.mainRoom.join();\n\n                        return;\n                    }\n\n                    this.lobbyRoom.clean();\n\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\n                });\n\n            // If participant retries joining shared password while waiting in the lobby\n            // and succeeds make sure we leave lobby\n            this.mainRoom.addEventListener(\n                XMPPEvents.MUC_JOINED,\n                () => {\n                    this._leaveLobbyRoom();\n                });\n        }\n\n        return new Promise((resolve, reject) => {\n            this.lobbyRoom.addEventListener(XMPPEvents.MUC_JOINED, () => {\n                resolve();\n\n                // send our email, as we do not handle this on initial presence we need a second one\n                if (email && !isModerator) {\n                    this.lobbyRoom.addOrReplaceInPresence(EMAIL_COMMAND, { value: email })\n                        && this.lobbyRoom.sendPresence();\n                }\n            });\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_JOIN_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_ERROR, reject);\n\n            this.lobbyRoom.join();\n        });\n\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    denyAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        const jid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (jid) {\n            this.lobbyRoom.kick(jid);\n        } else {\n            logger.error(`Not found member for ${id} in lobby room.`);\n        }\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    approveAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        const memberRoomJid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (memberRoomJid) {\n            const jid = this.lobbyRoom.members[memberRoomJid].jid;\n            const msgToSend\n                = $msg({ to: this.mainRoom.roomjid })\n                    .c('x', { xmlns: 'http://jabber.org/protocol/muc#user' })\n                    .c('invite', { to: jid });\n\n            this.xmpp.connection.sendIQ(msgToSend,\n                () => { }, // eslint-disable-line no-empty-function\n                e => {\n                    logger.error(`Error sending invite for ${jid}`, e);\n                });\n        } else {\n            logger.error(`Not found member for ${memberRoomJid} in lobby room.`);\n        }\n    }\n}\n","/* global $, Promise */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport Settings from '../settings/Settings';\n\nconst AuthenticationEvents\n    = require('../../service/authentication/AuthenticationEvents');\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n *\n * @param step\n */\nfunction createExpBackoffTimer(step) {\n    let count = 1;\n\n    return function(reset) {\n        // Reset call\n        if (reset) {\n            count = 1;\n\n            return;\n        }\n\n        // Calculate next timeout\n        const timeout = Math.pow(2, count - 1);\n\n        count += 1;\n\n        return timeout * step;\n    };\n}\n\n/* eslint-disable max-params */\n\n/**\n *\n * @param roomName\n * @param xmpp\n * @param emitter\n * @param options\n */\nexport default function Moderator(roomName, xmpp, emitter, options) {\n    this.roomName = roomName;\n    this.xmppService = xmpp;\n    this.getNextTimeout = createExpBackoffTimer(1000);\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\n\n    // External authentication stuff\n    this.externalAuthEnabled = false;\n    this.options = options;\n\n    // Whether SIP gateway (jigasi) support is enabled. This is set\n    // based on conference properties received in presence.\n    this.sipGatewayEnabled = false;\n\n    this.eventEmitter = emitter;\n\n    this.connection = this.xmppService.connection;\n\n    // FIXME: Message listener that talks to POPUP window\n    /**\n     *\n     * @param event\n     */\n    function listener(event) {\n        if (event.data && event.data.sessionId) {\n            if (event.origin !== window.location.origin) {\n                logger.warn(\n                    `Ignoring sessionId from different origin: ${\n                        event.origin}`);\n\n                return;\n            }\n            Settings.sessionId = event.data.sessionId;\n\n            // After popup is closed we will authenticate\n        }\n    }\n\n    // Register\n    if (window.addEventListener) {\n        window.addEventListener('message', listener, false);\n    } else {\n        window.attachEvent('onmessage', listener);\n    }\n}\n\n/* eslint-enable max-params */\n\nModerator.prototype.isExternalAuthEnabled = function() {\n    return this.externalAuthEnabled;\n};\n\nModerator.prototype.isSipGatewayEnabled = function() {\n    return this.sipGatewayEnabled;\n};\n\nModerator.prototype.onMucMemberLeft = function(jid) {\n    logger.info(`Someone left is it focus ? ${jid}`);\n    const resource = Strophe.getResourceFromJid(jid);\n\n    if (resource === 'focus') {\n        logger.info(\n            'Focus has left the room - leaving conference');\n        this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\n    }\n};\n\nModerator.prototype.setFocusUserJid = function(focusJid) {\n    if (!this.focusUserJid) {\n        this.focusUserJid = focusJid;\n        logger.info(`Focus jid set to:  ${this.focusUserJid}`);\n    }\n};\n\nModerator.prototype.getFocusUserJid = function() {\n    return this.focusUserJid;\n};\n\nModerator.prototype.getFocusComponent = function() {\n    // Get focus component address\n    let focusComponent = this.options.connection.hosts.focus;\n\n    // If not specified use default:  'focus.domain'\n\n    if (!focusComponent) {\n        focusComponent = `focus.${this.options.connection.hosts.domain}`;\n    }\n\n    return focusComponent;\n};\n\nModerator.prototype.createConferenceIq = function() {\n    // Generate create conference IQ\n    const elem = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n\n    // Session Id used for authentication\n    const { sessionId } = Settings;\n    const machineUID = Settings.machineId;\n    const config = this.options.conference;\n\n    logger.info(`Session ID: ${sessionId} machine UID: ${machineUID}`);\n\n    elem.c('conference', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': machineUID\n    });\n\n    if (sessionId) {\n        elem.attrs({ 'session-id': sessionId });\n    }\n\n    elem.c(\n        'property', {\n            name: 'disableRtx',\n            value: Boolean(config.disableRtx)\n        }).up();\n\n    if (config.audioPacketDelay !== undefined) {\n        elem.c(\n            'property', {\n                name: 'audioPacketDelay',\n                value: config.audioPacketDelay\n            }).up();\n    }\n    if (config.startBitrate) {\n        elem.c(\n            'property', {\n                name: 'startBitrate',\n                value: config.startBitrate\n            }).up();\n    }\n    if (config.minBitrate) {\n        elem.c(\n            'property', {\n                name: 'minBitrate',\n                value: config.minBitrate\n            }).up();\n    }\n\n    if (this.options.conference.startAudioMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startAudioMuted',\n                value: this.options.conference.startAudioMuted\n            }).up();\n    }\n    if (this.options.conference.startVideoMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startVideoMuted',\n                value: this.options.conference.startVideoMuted\n            }).up();\n    }\n    elem.up();\n\n    return elem;\n};\n\n\nModerator.prototype.parseSessionId = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    const sessionId = $(resultIq).find('conference').attr('session-id');\n\n    if (sessionId) {\n        logger.info(`Received sessionId:  ${sessionId}`);\n        Settings.sessionId = sessionId;\n    }\n};\n\nModerator.prototype.parseConfigOptions = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    this.setFocusUserJid($(resultIq).find('conference').attr('focusjid'));\n\n    const authenticationEnabled\n        = $(resultIq).find(\n            '>conference>property'\n            + '[name=\\'authentication\\'][value=\\'true\\']').length > 0;\n\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\n\n    this.externalAuthEnabled = $(resultIq).find(\n        '>conference>property'\n            + '[name=\\'externalAuth\\'][value=\\'true\\']').length > 0;\n\n    logger.info(\n        `External authentication enabled: ${this.externalAuthEnabled}`);\n\n    if (!this.externalAuthEnabled) {\n        // We expect to receive sessionId in 'internal' authentication mode\n        this.parseSessionId(resultIq);\n    }\n\n    // eslint-disable-next-line newline-per-chained-call\n    const authIdentity = $(resultIq).find('>conference').attr('identity');\n\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED,\n        authenticationEnabled, authIdentity);\n\n    // Check if jicofo has jigasi support enabled.\n    if ($(resultIq).find(\n        '>conference>property'\n        + '[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length) {\n        this.sipGatewayEnabled = true;\n    }\n\n    logger.info(`Sip gateway enabled:  ${this.sipGatewayEnabled}`);\n};\n\n// FIXME We need to show the fact that we're waiting for the focus to the user\n// (or that the focus is not available)\n/**\n * Allocates the conference focus.\n *\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\n * rejected and it'll keep on pinging Jicofo forever.\n */\nModerator.prototype.allocateConferenceFocus = function() {\n    return new Promise(resolve => {\n        // Try to use focus user JID from the config\n        this.setFocusUserJid(this.options.connection.focusUserJid);\n\n        // Send create conference IQ\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => this._allocateConferenceFocusSuccess(result, resolve),\n            error => this._allocateConferenceFocusError(error, resolve));\n\n        // XXX We're pressed for time here because we're beginning a complex\n        // and/or lengthy conference-establishment process which supposedly\n        // involves multiple RTTs. We don't have the time to wait for Strophe to\n        // decide to send our IQ.\n        this.connection.flush();\n    });\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving an\n * error result.\n *\n * @param error - the error result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusError = function(error, callback) {\n    // If the session is invalid, remove and try again without session ID to get\n    // a new one\n    const invalidSession\n        = $(error).find('>error>session-invalid').length\n            || $(error).find('>error>not-acceptable').length;\n\n    if (invalidSession) {\n        logger.info('Session expired! - removing');\n        Settings.sessionId = undefined;\n    }\n    if ($(error).find('>error>graceful-shutdown').length) {\n        this.eventEmitter.emit(XMPPEvents.GRACEFUL_SHUTDOWN);\n\n        return;\n    }\n\n    // Check for error returned by the reservation system\n    const reservationErr = $(error).find('>error>reservation-error');\n\n    if (reservationErr.length) {\n        // Trigger error event\n        const errorCode = reservationErr.attr('error-code');\n        const errorTextNode = $(error).find('>error>text');\n        let errorMsg;\n\n        if (errorTextNode) {\n            errorMsg = errorTextNode.text();\n        }\n        this.eventEmitter.emit(\n            XMPPEvents.RESERVATION_ERROR,\n            errorCode,\n            errorMsg);\n\n        return;\n    }\n\n    // Not authorized to create new room\n    if ($(error).find('>error>not-authorized').length) {\n        logger.warn('Unauthorized to start the conference', error);\n        const toDomain = Strophe.getDomainFromJid(error.getAttribute('to'));\n\n        if (toDomain !== this.options.connection.hosts.anonymousdomain) {\n            // FIXME \"is external\" should come either from the focus or\n            // config.js\n            this.externalAuthEnabled = true;\n        }\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\n\n        return;\n    }\n    const waitMs = this.getNextErrorTimeout();\n    const errmsg = `Focus error, retry after ${waitMs}`;\n\n    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n    logger.error(errmsg, error);\n\n    // Show message\n    const focusComponent = this.getFocusComponent();\n    const retrySec = waitMs / 1000;\n\n    // FIXME: message is duplicated ? Do not show in case of session invalid\n    // which means just a retry\n\n    if (!invalidSession) {\n        this.eventEmitter.emit(\n            XMPPEvents.FOCUS_DISCONNECTED,\n            focusComponent,\n            retrySec);\n    }\n\n    // Reset response timeout\n    this.getNextTimeout(true);\n    window.setTimeout(\n        () => this.allocateConferenceFocus().then(callback),\n        waitMs);\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving a\n * success (i.e. non-error) result.\n *\n * @param result - the success (i.e. non-error) result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusSuccess = function(\n        result,\n        callback) {\n    // Setup config options\n    this.parseConfigOptions(result);\n\n    // Reset the error timeout (because we haven't failed here).\n    this.getNextErrorTimeout(true);\n\n    // eslint-disable-next-line newline-per-chained-call\n    if ($(result).find('conference').attr('ready') === 'true') {\n        // Reset the non-error timeout (because we've succeeded here).\n        this.getNextTimeout(true);\n\n        // Exec callback\n        callback();\n    } else {\n        const waitMs = this.getNextTimeout();\n\n        logger.info(`Waiting for the focus... ${waitMs}`);\n        window.setTimeout(\n            () => this.allocateConferenceFocus().then(callback),\n            waitMs);\n    }\n};\n\nModerator.prototype.authenticate = function() {\n    return new Promise((resolve, reject) => {\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => {\n                this.parseSessionId(result);\n                resolve();\n            },\n            errorIq => reject({\n                error: $(errorIq).find('iq>error :first')\n                    .prop('tagName'),\n                message: $(errorIq).find('iq>error>text')\n                    .text()\n            })\n        );\n    });\n};\n\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\n};\n\n/**\n *\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\n * {@link Moderator#getPopupLoginUrl}\n * @param urlCb\n * @param failureCb\n */\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'get' });\n    const attrs = {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': Settings.machineId\n    };\n    let str = 'auth url'; // for logger\n\n    if (popup) {\n        attrs.popup = true;\n        str = `POPUP ${str}`;\n    }\n    iq.c('login-url', attrs);\n\n    /**\n     * Implements a failure callback which reports an error message and an error\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\n     *\n     * @param {string} errmsg the error messsage to report\n     * @param {*} error the error to report (in addition to errmsg)\n     */\n    function reportError(errmsg, err) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n        logger.error(errmsg, err);\n        failureCb(err);\n    }\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let url = $(result).find('login-url').attr('url');\n\n            url = decodeURIComponent(url);\n            if (url) {\n                logger.info(`Got ${str}: ${url}`);\n                urlCb(url);\n            } else {\n                reportError(`Failed to get ${str} from the focus`, result);\n            }\n        },\n        reportError.bind(undefined, `Get ${str} error`)\n    );\n};\n\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\n};\n\nModerator.prototype.logout = function(callback) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n    const { sessionId } = Settings;\n\n    if (!sessionId) {\n        callback();\n\n        return;\n    }\n    iq.c('logout', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        'session-id': sessionId\n    });\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let logoutUrl = $(result).find('logout').attr('logout-url');\n\n            if (logoutUrl) {\n                logoutUrl = decodeURIComponent(logoutUrl);\n            }\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\n            Settings.sessionId = undefined;\n            callback(logoutUrl);\n        },\n        error => {\n            const errmsg = 'Logout error';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg, error);\n        }\n    );\n};\n","const RandomUtil = require('./RandomUtil');\n\n/**\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\n * MIT License\n * http://github.com/marak/faker.js/\n *\n * @const\n */\nconst names = [\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\n    'Zoila', 'Zola', 'Zora', 'Zula'\n];\n\n/**\n * Generate random username.\n * @returns {string} random username\n */\nfunction generateUsername() {\n    const name = RandomUtil.randomElement(names);\n    const suffix = RandomUtil.randomAlphanumStr(3);\n\n    return `${name}-${suffix}`;\n}\n\nmodule.exports = {\n    generateUsername\n};\n","/* global $, __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport {\n    ACTION_JINGLE_TR_RECEIVED,\n    ACTION_JINGLE_TR_SUCCESS,\n    createJingleEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport RandomUtil from '../util/RandomUtil';\n\nimport ConnectionPlugin from './ConnectionPlugin';\nimport JingleSessionPC from './JingleSessionPC';\n\nconst logger = getLogger(__filename);\n\n// XXX Strophe is build around the idea of chaining function calls so allow long\n// function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n *\n */\nexport default class JingleConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Creates new <tt>JingleConnectionPlugin</tt>\n     * @param {XMPP} xmpp\n     * @param {EventEmitter} eventEmitter\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\n     */\n    constructor(xmpp, eventEmitter, iceConfig) {\n        super();\n        this.xmpp = xmpp;\n        this.eventEmitter = eventEmitter;\n        this.sessions = {};\n        this.jvbIceConfig = iceConfig.jvb;\n        this.p2pIceConfig = iceConfig.p2p;\n        this.mediaConstraints = {\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n        };\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.addHandler(this.onJingle.bind(this),\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onJingle(iq) {\n        const sid = $(iq).find('jingle').attr('sid');\n        const action = $(iq).find('jingle').attr('action');\n        const fromJid = iq.getAttribute('from');\n\n        // send ack first\n        const ack = $iq({ type: 'result',\n            to: fromJid,\n            id: iq.getAttribute('id')\n        });\n\n        logger.log(`on jingle ${action} from ${fromJid}`, iq);\n        let sess = this.sessions[sid];\n\n        if (action !== 'session-initiate') {\n            if (!sess) {\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                logger.warn('invalid session id', iq);\n                this.connection.send(ack);\n\n                return true;\n            }\n\n            // local jid is not checked\n            if (fromJid !== sess.remoteJid) {\n                logger.warn(\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                this.connection.send(ack);\n\n                return true;\n            }\n        } else if (sess !== undefined) {\n            // Existing session with same session id. This might be out-of-order\n            // if the sess.remoteJid is the same as from.\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('service-unavailable', {\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                })\n                .up();\n            logger.warn('duplicate session id', sid, iq);\n            this.connection.send(ack);\n\n            return true;\n        }\n        const now = window.performance.now();\n\n        // FIXME that should work most of the time, but we'd have to\n        // think how secure it is to assume that user with \"focus\"\n        // nickname is Jicofo.\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\n\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\n\n        switch (action) {\n        case 'session-initiate': {\n            logger.log('(TIME) received session-initiate:\\t', now);\n            const startMuted = $(iq).find('jingle>startmuted');\n\n            if (startMuted && startMuted.length > 0) {\n                const audioMuted = startMuted.attr('audio');\n                const videoMuted = startMuted.attr('video');\n\n                this.eventEmitter.emit(\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\n                    audioMuted === 'true',\n                    videoMuted === 'true');\n            }\n\n            logger.info(\n                `Marking session from ${fromJid\n                } as ${isP2P ? '' : '*not*'} P2P`);\n\n            const iceConfig = isP2P ? this.p2pIceConfig : this.jvbIceConfig;\n\n            sess\n                = new JingleSessionPC(\n                    $(iq).find('jingle').attr('sid'),\n                    $(iq).attr('to'),\n                    fromJid,\n                    this.connection,\n                    this.mediaConstraints,\n\n                    // Makes a copy in order to prevent exception thrown on RN when either this.p2pIceConfig or\n                    // this.jvbIceConfig is modified and there's a PeerConnection instance holding a reference\n                    JSON.parse(JSON.stringify(iceConfig)),\n                    isP2P,\n                    /* initiator */ false);\n\n            this.sessions[sess.sid] = sess;\n\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING,\n                sess, $(iq).find('>jingle'), now);\n            break;\n        }\n        case 'session-accept': {\n            this.eventEmitter.emit(\n                XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'content-modify': {\n            sess.modifyContents($(iq).find('>jingle'));\n            break;\n        }\n        case 'transport-info': {\n            this.eventEmitter.emit(\n                XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'session-terminate': {\n            logger.log('terminating...', sess.sid);\n            let reasonCondition = null;\n            let reasonText = null;\n\n            if ($(iq).find('>jingle>reason').length) {\n                reasonCondition\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\n                reasonText = $(iq).find('>jingle>reason>text').text();\n            }\n            this.terminate(sess.sid, reasonCondition, reasonText);\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED,\n                sess, reasonCondition, reasonText);\n            break;\n        }\n        case 'transport-replace':\n            logger.info('(TIME) Start transport replace:\\t', now);\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_TR_RECEIVED,\n                {\n                    p2p: isP2P,\n                    value: now\n                }));\n\n            sess.replaceTransport($(iq).find('>jingle'), () => {\n                const successTime = window.performance.now();\n\n                logger.info('(TIME) Transport replace success:\\t', successTime);\n                Statistics.sendAnalytics(createJingleEvent(\n                    ACTION_JINGLE_TR_SUCCESS,\n                    {\n                        p2p: isP2P,\n                        value: successTime\n                    }));\n            }, error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Transport replace failed', error);\n                sess.sendTransportReject();\n            });\n            break;\n        case 'addsource': // FIXME: proprietary, un-jingleish\n        case 'source-add': // FIXME: proprietary\n            sess.addRemoteStream($(iq).find('>jingle>content'));\n            break;\n        case 'removesource': // FIXME: proprietary, un-jingleish\n        case 'source-remove': // FIXME: proprietary\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\n            break;\n        default:\n            logger.warn('jingle action not implemented', action);\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('bad-request',\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\n                .up();\n            break;\n        }\n        this.connection.send(ack);\n\n        return true;\n    }\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\n     * connection, configured as 'initiator'.\n     * @param {string} me our JID\n     * @param {string} peer remote participant's JID\n     * @return {JingleSessionPC}\n     */\n    newP2PJingleSession(me, peer) {\n        const sess\n            = new JingleSessionPC(\n                RandomUtil.randomHexString(12),\n                me,\n                peer,\n                this.connection,\n                this.mediaConstraints,\n                this.p2pIceConfig,\n                /* P2P */ true,\n                /* initiator */ true);\n\n        this.sessions[sess.sid] = sess;\n\n        return sess;\n    }\n\n    /**\n     *\n     * @param sid\n     * @param reasonCondition\n     * @param reasonText\n     */\n    terminate(sid, reasonCondition, reasonText) {\n        if (this.sessions.hasOwnProperty(sid)) {\n            if (this.sessions[sid].state !== 'ended') {\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\n            }\n            delete this.sessions[sid];\n        }\n    }\n\n    /**\n     *\n     */\n    getStunAndTurnCredentials() {\n        // get stun and turn configuration from server via xep-0215\n        // uses time-limited credentials as described in\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\n        //\n        // See https://modules.prosody.im/mod_turncredentials.html\n        // for a prosody module which implements this.\n        // Or the new implementation https://modules.prosody.im/mod_external_services which will be in prosody 0.12\n        //\n        // Currently, this doesn't work with updateIce and therefore credentials\n        // with a long validity have to be fetched before creating the\n        // peerconnection.\n        // TODO: implement refresh via updateIce as described in\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\n        this.connection.sendIQ(\n            $iq({ type: 'get',\n                to: this.xmpp.options.hosts.domain })\n                .c('services', { xmlns: 'urn:xmpp:extdisco:2' }),\n            v2Res => this.onReceiveStunAndTurnCredentials(v2Res),\n            v2Err => {\n                logger.warn('getting turn credentials with extdisco:2 failed, trying extdisco:1', v2Err);\n                this.connection.sendIQ(\n                    $iq({ type: 'get',\n                        to: this.xmpp.options.hosts.domain })\n                        .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\n                    v1Res => this.onReceiveStunAndTurnCredentials(v1Res),\n                    v1Err => {\n                        logger.warn('getting turn credentials failed', v1Err);\n                        logger.warn('is mod_turncredentials or similar installed and configured?');\n                    }\n                );\n            });\n    }\n\n    /**\n     * Parses response when querying for services using urn:xmpp:extdisco:1 or urn:xmpp:extdisco:2.\n     * Stores results in jvbIceConfig and p2pIceConfig.\n     * @param res The response iq.\n     * @return {boolean} Whether something was processed from the supplied message.\n     */\n    onReceiveStunAndTurnCredentials(res) {\n        const iceservers = [];\n\n        $(res).find('>services>service').each((idx, el) => {\n            // eslint-disable-next-line no-param-reassign\n            el = $(el);\n            const dict = {};\n            const type = el.attr('type');\n\n            switch (type) {\n            case 'stun':\n                dict.urls = `stun:${el.attr('host')}`;\n                if (el.attr('port')) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                iceservers.push(dict);\n                break;\n            case 'turn':\n            case 'turns': {\n                dict.urls = `${type}:`;\n                dict.username = el.attr('username');\n                dict.urls += el.attr('host');\n                const port = el.attr('port');\n\n                if (port) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                const transport = el.attr('transport');\n\n                if (transport && transport !== 'udp') {\n                    dict.urls += `?transport=${transport}`;\n                }\n\n                dict.credential = el.attr('password')\n                        || dict.credential;\n                iceservers.push(dict);\n                break;\n            }\n            }\n        });\n\n        const options = this.xmpp.options;\n\n        // Shuffle ICEServers for loadbalancing\n        for (let i = iceservers.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = iceservers[i];\n\n            iceservers[i] = iceservers[j];\n            iceservers[j] = temp;\n        }\n\n        let filter;\n\n        if (options.useTurnUdp) {\n            filter = s => s.urls.startsWith('turn');\n        } else {\n            // By default we filter out STUN and TURN/UDP and leave only TURN/TCP.\n            filter = s => s.urls.startsWith('turn') && (s.urls.indexOf('transport=tcp') >= 0);\n        }\n\n        this.jvbIceConfig.iceServers = iceservers.filter(filter);\n        this.p2pIceConfig.iceServers = iceservers;\n\n        return iceservers.length > 0;\n    }\n\n    /**\n     * Returns the data saved in 'updateLog' in a format to be logged.\n     */\n    getLog() {\n        const data = {};\n\n        Object.keys(this.sessions).forEach(sid => {\n            const session = this.sessions[sid];\n            const pc = session.peerconnection;\n\n            if (pc && pc.updateLog) {\n                // FIXME: should probably be a .dump call\n                data[`jingle_${sid}`] = {\n                    updateLog: pc.updateLog,\n                    stats: pc.stats,\n                    url: window.location.href\n                };\n            }\n        });\n\n        return data;\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar SDPUtils = require('sdp');\n\nfunction fixStatsType(stat) {\n  return {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  }[stat.type] || stat.type;\n}\n\nfunction writeMediaSection(transceiver, caps, type, stream, dtlsRole) {\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\n\n  // Map ICE parameters (ufrag, pwd) to SDP.\n  sdp += SDPUtils.writeIceParameters(\n      transceiver.iceGatherer.getLocalParameters());\n\n  // Map DTLS parameters to SDP.\n  sdp += SDPUtils.writeDtlsParameters(\n      transceiver.dtlsTransport.getLocalParameters(),\n      type === 'offer' ? 'actpass' : dtlsRole || 'active');\n\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n  if (transceiver.rtpSender && transceiver.rtpReceiver) {\n    sdp += 'a=sendrecv\\r\\n';\n  } else if (transceiver.rtpSender) {\n    sdp += 'a=sendonly\\r\\n';\n  } else if (transceiver.rtpReceiver) {\n    sdp += 'a=recvonly\\r\\n';\n  } else {\n    sdp += 'a=inactive\\r\\n';\n  }\n\n  if (transceiver.rtpSender) {\n    var trackId = transceiver.rtpSender._initialTrackId ||\n        transceiver.rtpSender.track.id;\n    transceiver.rtpSender._initialTrackId = trackId;\n    // spec.\n    var msid = 'msid:' + (stream ? stream.id : '-') + ' ' +\n        trackId + '\\r\\n';\n    sdp += 'a=' + msid;\n    // for Chrome. Legacy should no longer be required.\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n        ' ' + msid;\n\n    // RTX\n    if (transceiver.sendEncodingParameters[0].rtx) {\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n          ' ' + msid;\n      sdp += 'a=ssrc-group:FID ' +\n          transceiver.sendEncodingParameters[0].ssrc + ' ' +\n          transceiver.sendEncodingParameters[0].rtx.ssrc +\n          '\\r\\n';\n    }\n  }\n  // FIXME: this should be written by writeRtpDescription.\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n        ' cname:' + SDPUtils.localCName + '\\r\\n';\n  }\n  return sdp;\n}\n\n// Edge does not like\n// 1) stun: filtered after 14393 unless ?transport=udp is present\n// 2) turn: that does not have all of turn:host:port?transport=udp\n// 3) turn: with ipv6 addresses\n// 4) turn: occurring muliple times\nfunction filterIceServers(iceServers, edgeVersion) {\n  var hasTurn = false;\n  iceServers = JSON.parse(JSON.stringify(iceServers));\n  return iceServers.filter(function(server) {\n    if (server && (server.urls || server.url)) {\n      var urls = server.urls || server.url;\n      if (server.url && !server.urls) {\n        console.warn('RTCIceServer.url is deprecated! Use urls instead.');\n      }\n      var isString = typeof urls === 'string';\n      if (isString) {\n        urls = [urls];\n      }\n      urls = urls.filter(function(url) {\n        var validTurn = url.indexOf('turn:') === 0 &&\n            url.indexOf('transport=udp') !== -1 &&\n            url.indexOf('turn:[') === -1 &&\n            !hasTurn;\n\n        if (validTurn) {\n          hasTurn = true;\n          return true;\n        }\n        return url.indexOf('stun:') === 0 && edgeVersion >= 14393 &&\n            url.indexOf('?transport=udp') === -1;\n      });\n\n      delete server.url;\n      server.urls = isString ? urls[0] : urls;\n      return !!urls.length;\n    }\n  });\n}\n\n// Determines the intersection of local and remote capabilities.\nfunction getCommonCapabilities(localCapabilities, remoteCapabilities) {\n  var commonCapabilities = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: []\n  };\n\n  var findCodecByPayloadType = function(pt, codecs) {\n    pt = parseInt(pt, 10);\n    for (var i = 0; i < codecs.length; i++) {\n      if (codecs[i].payloadType === pt ||\n          codecs[i].preferredPayloadType === pt) {\n        return codecs[i];\n      }\n    }\n  };\n\n  var rtxCapabilityMatches = function(lRtx, rRtx, lCodecs, rCodecs) {\n    var lCodec = findCodecByPayloadType(lRtx.parameters.apt, lCodecs);\n    var rCodec = findCodecByPayloadType(rRtx.parameters.apt, rCodecs);\n    return lCodec && rCodec &&\n        lCodec.name.toLowerCase() === rCodec.name.toLowerCase();\n  };\n\n  localCapabilities.codecs.forEach(function(lCodec) {\n    for (var i = 0; i < remoteCapabilities.codecs.length; i++) {\n      var rCodec = remoteCapabilities.codecs[i];\n      if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() &&\n          lCodec.clockRate === rCodec.clockRate) {\n        if (lCodec.name.toLowerCase() === 'rtx' &&\n            lCodec.parameters && rCodec.parameters.apt) {\n          // for RTX we need to find the local rtx that has a apt\n          // which points to the same local codec as the remote one.\n          if (!rtxCapabilityMatches(lCodec, rCodec,\n              localCapabilities.codecs, remoteCapabilities.codecs)) {\n            continue;\n          }\n        }\n        rCodec = JSON.parse(JSON.stringify(rCodec)); // deepcopy\n        // number of channels is the highest common number of channels\n        rCodec.numChannels = Math.min(lCodec.numChannels,\n            rCodec.numChannels);\n        // push rCodec so we reply with offerer payload type\n        commonCapabilities.codecs.push(rCodec);\n\n        // determine common feedback mechanisms\n        rCodec.rtcpFeedback = rCodec.rtcpFeedback.filter(function(fb) {\n          for (var j = 0; j < lCodec.rtcpFeedback.length; j++) {\n            if (lCodec.rtcpFeedback[j].type === fb.type &&\n                lCodec.rtcpFeedback[j].parameter === fb.parameter) {\n              return true;\n            }\n          }\n          return false;\n        });\n        // FIXME: also need to determine .parameters\n        //  see https://github.com/openpeer/ortc/issues/569\n        break;\n      }\n    }\n  });\n\n  localCapabilities.headerExtensions.forEach(function(lHeaderExtension) {\n    for (var i = 0; i < remoteCapabilities.headerExtensions.length;\n         i++) {\n      var rHeaderExtension = remoteCapabilities.headerExtensions[i];\n      if (lHeaderExtension.uri === rHeaderExtension.uri) {\n        commonCapabilities.headerExtensions.push(rHeaderExtension);\n        break;\n      }\n    }\n  });\n\n  // FIXME: fecMechanisms\n  return commonCapabilities;\n}\n\n// is action=setLocalDescription with type allowed in signalingState\nfunction isActionAllowedInSignalingState(action, type, signalingState) {\n  return {\n    offer: {\n      setLocalDescription: ['stable', 'have-local-offer'],\n      setRemoteDescription: ['stable', 'have-remote-offer']\n    },\n    answer: {\n      setLocalDescription: ['have-remote-offer', 'have-local-pranswer'],\n      setRemoteDescription: ['have-local-offer', 'have-remote-pranswer']\n    }\n  }[type][action].indexOf(signalingState) !== -1;\n}\n\nfunction maybeAddCandidate(iceTransport, candidate) {\n  // Edge's internal representation adds some fields therefore\n  // not all fieldѕ are taken into account.\n  var alreadyAdded = iceTransport.getRemoteCandidates()\n      .find(function(remoteCandidate) {\n        return candidate.foundation === remoteCandidate.foundation &&\n            candidate.ip === remoteCandidate.ip &&\n            candidate.port === remoteCandidate.port &&\n            candidate.priority === remoteCandidate.priority &&\n            candidate.protocol === remoteCandidate.protocol &&\n            candidate.type === remoteCandidate.type;\n      });\n  if (!alreadyAdded) {\n    iceTransport.addRemoteCandidate(candidate);\n  }\n  return !alreadyAdded;\n}\n\n\nfunction makeError(name, description) {\n  var e = new Error(description);\n  e.name = name;\n  // legacy error codes from https://heycam.github.io/webidl/#idl-DOMException-error-names\n  e.code = {\n    NotSupportedError: 9,\n    InvalidStateError: 11,\n    InvalidAccessError: 15,\n    TypeError: undefined,\n    OperationError: undefined\n  }[name];\n  return e;\n}\n\nmodule.exports = function(window, edgeVersion) {\n  // https://w3c.github.io/mediacapture-main/#mediastream\n  // Helper function to add the track to the stream and\n  // dispatch the event ourselves.\n  function addTrackToStreamAndFireEvent(track, stream) {\n    stream.addTrack(track);\n    stream.dispatchEvent(new window.MediaStreamTrackEvent('addtrack',\n        {track: track}));\n  }\n\n  function removeTrackFromStreamAndFireEvent(track, stream) {\n    stream.removeTrack(track);\n    stream.dispatchEvent(new window.MediaStreamTrackEvent('removetrack',\n        {track: track}));\n  }\n\n  function fireAddTrack(pc, track, receiver, streams) {\n    var trackEvent = new Event('track');\n    trackEvent.track = track;\n    trackEvent.receiver = receiver;\n    trackEvent.transceiver = {receiver: receiver};\n    trackEvent.streams = streams;\n    window.setTimeout(function() {\n      pc._dispatchEvent('track', trackEvent);\n    });\n  }\n\n  var RTCPeerConnection = function(config) {\n    var pc = this;\n\n    var _eventTarget = document.createDocumentFragment();\n    ['addEventListener', 'removeEventListener', 'dispatchEvent']\n        .forEach(function(method) {\n          pc[method] = _eventTarget[method].bind(_eventTarget);\n        });\n\n    this.canTrickleIceCandidates = null;\n\n    this.needNegotiation = false;\n\n    this.localStreams = [];\n    this.remoteStreams = [];\n\n    this._localDescription = null;\n    this._remoteDescription = null;\n\n    this.signalingState = 'stable';\n    this.iceConnectionState = 'new';\n    this.connectionState = 'new';\n    this.iceGatheringState = 'new';\n\n    config = JSON.parse(JSON.stringify(config || {}));\n\n    this.usingBundle = config.bundlePolicy === 'max-bundle';\n    if (config.rtcpMuxPolicy === 'negotiate') {\n      throw(makeError('NotSupportedError',\n          'rtcpMuxPolicy \\'negotiate\\' is not supported'));\n    } else if (!config.rtcpMuxPolicy) {\n      config.rtcpMuxPolicy = 'require';\n    }\n\n    switch (config.iceTransportPolicy) {\n      case 'all':\n      case 'relay':\n        break;\n      default:\n        config.iceTransportPolicy = 'all';\n        break;\n    }\n\n    switch (config.bundlePolicy) {\n      case 'balanced':\n      case 'max-compat':\n      case 'max-bundle':\n        break;\n      default:\n        config.bundlePolicy = 'balanced';\n        break;\n    }\n\n    config.iceServers = filterIceServers(config.iceServers || [], edgeVersion);\n\n    this._iceGatherers = [];\n    if (config.iceCandidatePoolSize) {\n      for (var i = config.iceCandidatePoolSize; i > 0; i--) {\n        this._iceGatherers.push(new window.RTCIceGatherer({\n          iceServers: config.iceServers,\n          gatherPolicy: config.iceTransportPolicy\n        }));\n      }\n    } else {\n      config.iceCandidatePoolSize = 0;\n    }\n\n    this._config = config;\n\n    // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...\n    // everything that is needed to describe a SDP m-line.\n    this.transceivers = [];\n\n    this._sdpSessionId = SDPUtils.generateSessionId();\n    this._sdpSessionVersion = 0;\n\n    this._dtlsRole = undefined; // role for a=setup to use in answers.\n\n    this._isClosed = false;\n  };\n\n  Object.defineProperty(RTCPeerConnection.prototype, 'localDescription', {\n    configurable: true,\n    get: function() {\n      return this._localDescription;\n    }\n  });\n  Object.defineProperty(RTCPeerConnection.prototype, 'remoteDescription', {\n    configurable: true,\n    get: function() {\n      return this._remoteDescription;\n    }\n  });\n\n  // set up event handlers on prototype\n  RTCPeerConnection.prototype.onicecandidate = null;\n  RTCPeerConnection.prototype.onaddstream = null;\n  RTCPeerConnection.prototype.ontrack = null;\n  RTCPeerConnection.prototype.onremovestream = null;\n  RTCPeerConnection.prototype.onsignalingstatechange = null;\n  RTCPeerConnection.prototype.oniceconnectionstatechange = null;\n  RTCPeerConnection.prototype.onconnectionstatechange = null;\n  RTCPeerConnection.prototype.onicegatheringstatechange = null;\n  RTCPeerConnection.prototype.onnegotiationneeded = null;\n  RTCPeerConnection.prototype.ondatachannel = null;\n\n  RTCPeerConnection.prototype._dispatchEvent = function(name, event) {\n    if (this._isClosed) {\n      return;\n    }\n    this.dispatchEvent(event);\n    if (typeof this['on' + name] === 'function') {\n      this['on' + name](event);\n    }\n  };\n\n  RTCPeerConnection.prototype._emitGatheringStateChange = function() {\n    var event = new Event('icegatheringstatechange');\n    this._dispatchEvent('icegatheringstatechange', event);\n  };\n\n  RTCPeerConnection.prototype.getConfiguration = function() {\n    return this._config;\n  };\n\n  RTCPeerConnection.prototype.getLocalStreams = function() {\n    return this.localStreams;\n  };\n\n  RTCPeerConnection.prototype.getRemoteStreams = function() {\n    return this.remoteStreams;\n  };\n\n  // internal helper to create a transceiver object.\n  // (which is not yet the same as the WebRTC 1.0 transceiver)\n  RTCPeerConnection.prototype._createTransceiver = function(kind, doNotAdd) {\n    var hasBundleTransport = this.transceivers.length > 0;\n    var transceiver = {\n      track: null,\n      iceGatherer: null,\n      iceTransport: null,\n      dtlsTransport: null,\n      localCapabilities: null,\n      remoteCapabilities: null,\n      rtpSender: null,\n      rtpReceiver: null,\n      kind: kind,\n      mid: null,\n      sendEncodingParameters: null,\n      recvEncodingParameters: null,\n      stream: null,\n      associatedRemoteMediaStreams: [],\n      wantReceive: true\n    };\n    if (this.usingBundle && hasBundleTransport) {\n      transceiver.iceTransport = this.transceivers[0].iceTransport;\n      transceiver.dtlsTransport = this.transceivers[0].dtlsTransport;\n    } else {\n      var transports = this._createIceAndDtlsTransports();\n      transceiver.iceTransport = transports.iceTransport;\n      transceiver.dtlsTransport = transports.dtlsTransport;\n    }\n    if (!doNotAdd) {\n      this.transceivers.push(transceiver);\n    }\n    return transceiver;\n  };\n\n  RTCPeerConnection.prototype.addTrack = function(track, stream) {\n    if (this._isClosed) {\n      throw makeError('InvalidStateError',\n          'Attempted to call addTrack on a closed peerconnection.');\n    }\n\n    var alreadyExists = this.transceivers.find(function(s) {\n      return s.track === track;\n    });\n\n    if (alreadyExists) {\n      throw makeError('InvalidAccessError', 'Track already exists.');\n    }\n\n    var transceiver;\n    for (var i = 0; i < this.transceivers.length; i++) {\n      if (!this.transceivers[i].track &&\n          this.transceivers[i].kind === track.kind) {\n        transceiver = this.transceivers[i];\n      }\n    }\n    if (!transceiver) {\n      transceiver = this._createTransceiver(track.kind);\n    }\n\n    this._maybeFireNegotiationNeeded();\n\n    if (this.localStreams.indexOf(stream) === -1) {\n      this.localStreams.push(stream);\n    }\n\n    transceiver.track = track;\n    transceiver.stream = stream;\n    transceiver.rtpSender = new window.RTCRtpSender(track,\n        transceiver.dtlsTransport);\n    return transceiver.rtpSender;\n  };\n\n  RTCPeerConnection.prototype.addStream = function(stream) {\n    var pc = this;\n    if (edgeVersion >= 15025) {\n      stream.getTracks().forEach(function(track) {\n        pc.addTrack(track, stream);\n      });\n    } else {\n      // Clone is necessary for local demos mostly, attaching directly\n      // to two different senders does not work (build 10547).\n      // Fixed in 15025 (or earlier)\n      var clonedStream = stream.clone();\n      stream.getTracks().forEach(function(track, idx) {\n        var clonedTrack = clonedStream.getTracks()[idx];\n        track.addEventListener('enabled', function(event) {\n          clonedTrack.enabled = event.enabled;\n        });\n      });\n      clonedStream.getTracks().forEach(function(track) {\n        pc.addTrack(track, clonedStream);\n      });\n    }\n  };\n\n  RTCPeerConnection.prototype.removeTrack = function(sender) {\n    if (this._isClosed) {\n      throw makeError('InvalidStateError',\n          'Attempted to call removeTrack on a closed peerconnection.');\n    }\n\n    if (!(sender instanceof window.RTCRtpSender)) {\n      throw new TypeError('Argument 1 of RTCPeerConnection.removeTrack ' +\n          'does not implement interface RTCRtpSender.');\n    }\n\n    var transceiver = this.transceivers.find(function(t) {\n      return t.rtpSender === sender;\n    });\n\n    if (!transceiver) {\n      throw makeError('InvalidAccessError',\n          'Sender was not created by this connection.');\n    }\n    var stream = transceiver.stream;\n\n    transceiver.rtpSender.stop();\n    transceiver.rtpSender = null;\n    transceiver.track = null;\n    transceiver.stream = null;\n\n    // remove the stream from the set of local streams\n    var localStreams = this.transceivers.map(function(t) {\n      return t.stream;\n    });\n    if (localStreams.indexOf(stream) === -1 &&\n        this.localStreams.indexOf(stream) > -1) {\n      this.localStreams.splice(this.localStreams.indexOf(stream), 1);\n    }\n\n    this._maybeFireNegotiationNeeded();\n  };\n\n  RTCPeerConnection.prototype.removeStream = function(stream) {\n    var pc = this;\n    stream.getTracks().forEach(function(track) {\n      var sender = pc.getSenders().find(function(s) {\n        return s.track === track;\n      });\n      if (sender) {\n        pc.removeTrack(sender);\n      }\n    });\n  };\n\n  RTCPeerConnection.prototype.getSenders = function() {\n    return this.transceivers.filter(function(transceiver) {\n      return !!transceiver.rtpSender;\n    })\n    .map(function(transceiver) {\n      return transceiver.rtpSender;\n    });\n  };\n\n  RTCPeerConnection.prototype.getReceivers = function() {\n    return this.transceivers.filter(function(transceiver) {\n      return !!transceiver.rtpReceiver;\n    })\n    .map(function(transceiver) {\n      return transceiver.rtpReceiver;\n    });\n  };\n\n\n  RTCPeerConnection.prototype._createIceGatherer = function(sdpMLineIndex,\n      usingBundle) {\n    var pc = this;\n    if (usingBundle && sdpMLineIndex > 0) {\n      return this.transceivers[0].iceGatherer;\n    } else if (this._iceGatherers.length) {\n      return this._iceGatherers.shift();\n    }\n    var iceGatherer = new window.RTCIceGatherer({\n      iceServers: this._config.iceServers,\n      gatherPolicy: this._config.iceTransportPolicy\n    });\n    Object.defineProperty(iceGatherer, 'state',\n        {value: 'new', writable: true}\n    );\n\n    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = [];\n    this.transceivers[sdpMLineIndex].bufferCandidates = function(event) {\n      var end = !event.candidate || Object.keys(event.candidate).length === 0;\n      // polyfill since RTCIceGatherer.state is not implemented in\n      // Edge 10547 yet.\n      iceGatherer.state = end ? 'completed' : 'gathering';\n      if (pc.transceivers[sdpMLineIndex].bufferedCandidateEvents !== null) {\n        pc.transceivers[sdpMLineIndex].bufferedCandidateEvents.push(event);\n      }\n    };\n    iceGatherer.addEventListener('localcandidate',\n      this.transceivers[sdpMLineIndex].bufferCandidates);\n    return iceGatherer;\n  };\n\n  // start gathering from an RTCIceGatherer.\n  RTCPeerConnection.prototype._gather = function(mid, sdpMLineIndex) {\n    var pc = this;\n    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\n    if (iceGatherer.onlocalcandidate) {\n      return;\n    }\n    var bufferedCandidateEvents =\n      this.transceivers[sdpMLineIndex].bufferedCandidateEvents;\n    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = null;\n    iceGatherer.removeEventListener('localcandidate',\n      this.transceivers[sdpMLineIndex].bufferCandidates);\n    iceGatherer.onlocalcandidate = function(evt) {\n      if (pc.usingBundle && sdpMLineIndex > 0) {\n        // if we know that we use bundle we can drop candidates with\n        // ѕdpMLineIndex > 0. If we don't do this then our state gets\n        // confused since we dispose the extra ice gatherer.\n        return;\n      }\n      var event = new Event('icecandidate');\n      event.candidate = {sdpMid: mid, sdpMLineIndex: sdpMLineIndex};\n\n      var cand = evt.candidate;\n      // Edge emits an empty object for RTCIceCandidateComplete‥\n      var end = !cand || Object.keys(cand).length === 0;\n      if (end) {\n        // polyfill since RTCIceGatherer.state is not implemented in\n        // Edge 10547 yet.\n        if (iceGatherer.state === 'new' || iceGatherer.state === 'gathering') {\n          iceGatherer.state = 'completed';\n        }\n      } else {\n        if (iceGatherer.state === 'new') {\n          iceGatherer.state = 'gathering';\n        }\n        // RTCIceCandidate doesn't have a component, needs to be added\n        cand.component = 1;\n        // also the usernameFragment. TODO: update SDP to take both variants.\n        cand.ufrag = iceGatherer.getLocalParameters().usernameFragment;\n\n        var serializedCandidate = SDPUtils.writeCandidate(cand);\n        event.candidate = Object.assign(event.candidate,\n            SDPUtils.parseCandidate(serializedCandidate));\n\n        event.candidate.candidate = serializedCandidate;\n        event.candidate.toJSON = function() {\n          return {\n            candidate: event.candidate.candidate,\n            sdpMid: event.candidate.sdpMid,\n            sdpMLineIndex: event.candidate.sdpMLineIndex,\n            usernameFragment: event.candidate.usernameFragment\n          };\n        };\n      }\n\n      // update local description.\n      var sections = SDPUtils.getMediaSections(pc._localDescription.sdp);\n      if (!end) {\n        sections[event.candidate.sdpMLineIndex] +=\n            'a=' + event.candidate.candidate + '\\r\\n';\n      } else {\n        sections[event.candidate.sdpMLineIndex] +=\n            'a=end-of-candidates\\r\\n';\n      }\n      pc._localDescription.sdp =\n          SDPUtils.getDescription(pc._localDescription.sdp) +\n          sections.join('');\n      var complete = pc.transceivers.every(function(transceiver) {\n        return transceiver.iceGatherer &&\n            transceiver.iceGatherer.state === 'completed';\n      });\n\n      if (pc.iceGatheringState !== 'gathering') {\n        pc.iceGatheringState = 'gathering';\n        pc._emitGatheringStateChange();\n      }\n\n      // Emit candidate. Also emit null candidate when all gatherers are\n      // complete.\n      if (!end) {\n        pc._dispatchEvent('icecandidate', event);\n      }\n      if (complete) {\n        pc._dispatchEvent('icecandidate', new Event('icecandidate'));\n        pc.iceGatheringState = 'complete';\n        pc._emitGatheringStateChange();\n      }\n    };\n\n    // emit already gathered candidates.\n    window.setTimeout(function() {\n      bufferedCandidateEvents.forEach(function(e) {\n        iceGatherer.onlocalcandidate(e);\n      });\n    }, 0);\n  };\n\n  // Create ICE transport and DTLS transport.\n  RTCPeerConnection.prototype._createIceAndDtlsTransports = function() {\n    var pc = this;\n    var iceTransport = new window.RTCIceTransport(null);\n    iceTransport.onicestatechange = function() {\n      pc._updateIceConnectionState();\n      pc._updateConnectionState();\n    };\n\n    var dtlsTransport = new window.RTCDtlsTransport(iceTransport);\n    dtlsTransport.ondtlsstatechange = function() {\n      pc._updateConnectionState();\n    };\n    dtlsTransport.onerror = function() {\n      // onerror does not set state to failed by itself.\n      Object.defineProperty(dtlsTransport, 'state',\n          {value: 'failed', writable: true});\n      pc._updateConnectionState();\n    };\n\n    return {\n      iceTransport: iceTransport,\n      dtlsTransport: dtlsTransport\n    };\n  };\n\n  // Destroy ICE gatherer, ICE transport and DTLS transport.\n  // Without triggering the callbacks.\n  RTCPeerConnection.prototype._disposeIceAndDtlsTransports = function(\n      sdpMLineIndex) {\n    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\n    if (iceGatherer) {\n      delete iceGatherer.onlocalcandidate;\n      delete this.transceivers[sdpMLineIndex].iceGatherer;\n    }\n    var iceTransport = this.transceivers[sdpMLineIndex].iceTransport;\n    if (iceTransport) {\n      delete iceTransport.onicestatechange;\n      delete this.transceivers[sdpMLineIndex].iceTransport;\n    }\n    var dtlsTransport = this.transceivers[sdpMLineIndex].dtlsTransport;\n    if (dtlsTransport) {\n      delete dtlsTransport.ondtlsstatechange;\n      delete dtlsTransport.onerror;\n      delete this.transceivers[sdpMLineIndex].dtlsTransport;\n    }\n  };\n\n  // Start the RTP Sender and Receiver for a transceiver.\n  RTCPeerConnection.prototype._transceive = function(transceiver,\n      send, recv) {\n    var params = getCommonCapabilities(transceiver.localCapabilities,\n        transceiver.remoteCapabilities);\n    if (send && transceiver.rtpSender) {\n      params.encodings = transceiver.sendEncodingParameters;\n      params.rtcp = {\n        cname: SDPUtils.localCName,\n        compound: transceiver.rtcpParameters.compound\n      };\n      if (transceiver.recvEncodingParameters.length) {\n        params.rtcp.ssrc = transceiver.recvEncodingParameters[0].ssrc;\n      }\n      transceiver.rtpSender.send(params);\n    }\n    if (recv && transceiver.rtpReceiver && params.codecs.length > 0) {\n      // remove RTX field in Edge 14942\n      if (transceiver.kind === 'video'\n          && transceiver.recvEncodingParameters\n          && edgeVersion < 15019) {\n        transceiver.recvEncodingParameters.forEach(function(p) {\n          delete p.rtx;\n        });\n      }\n      if (transceiver.recvEncodingParameters.length) {\n        params.encodings = transceiver.recvEncodingParameters;\n      } else {\n        params.encodings = [{}];\n      }\n      params.rtcp = {\n        compound: transceiver.rtcpParameters.compound\n      };\n      if (transceiver.rtcpParameters.cname) {\n        params.rtcp.cname = transceiver.rtcpParameters.cname;\n      }\n      if (transceiver.sendEncodingParameters.length) {\n        params.rtcp.ssrc = transceiver.sendEncodingParameters[0].ssrc;\n      }\n      transceiver.rtpReceiver.receive(params);\n    }\n  };\n\n  RTCPeerConnection.prototype.setLocalDescription = function(description) {\n    var pc = this;\n\n    // Note: pranswer is not supported.\n    if (['offer', 'answer'].indexOf(description.type) === -1) {\n      return Promise.reject(makeError('TypeError',\n          'Unsupported type \"' + description.type + '\"'));\n    }\n\n    if (!isActionAllowedInSignalingState('setLocalDescription',\n        description.type, pc.signalingState) || pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not set local ' + description.type +\n          ' in state ' + pc.signalingState));\n    }\n\n    var sections;\n    var sessionpart;\n    if (description.type === 'offer') {\n      // VERY limited support for SDP munging. Limited to:\n      // * changing the order of codecs\n      sections = SDPUtils.splitSections(description.sdp);\n      sessionpart = sections.shift();\n      sections.forEach(function(mediaSection, sdpMLineIndex) {\n        var caps = SDPUtils.parseRtpParameters(mediaSection);\n        pc.transceivers[sdpMLineIndex].localCapabilities = caps;\n      });\n\n      pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n        pc._gather(transceiver.mid, sdpMLineIndex);\n      });\n    } else if (description.type === 'answer') {\n      sections = SDPUtils.splitSections(pc._remoteDescription.sdp);\n      sessionpart = sections.shift();\n      var isIceLite = SDPUtils.matchPrefix(sessionpart,\n          'a=ice-lite').length > 0;\n      sections.forEach(function(mediaSection, sdpMLineIndex) {\n        var transceiver = pc.transceivers[sdpMLineIndex];\n        var iceGatherer = transceiver.iceGatherer;\n        var iceTransport = transceiver.iceTransport;\n        var dtlsTransport = transceiver.dtlsTransport;\n        var localCapabilities = transceiver.localCapabilities;\n        var remoteCapabilities = transceiver.remoteCapabilities;\n\n        // treat bundle-only as not-rejected.\n        var rejected = SDPUtils.isRejected(mediaSection) &&\n            SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\n\n        if (!rejected && !transceiver.rejected) {\n          var remoteIceParameters = SDPUtils.getIceParameters(\n              mediaSection, sessionpart);\n          var remoteDtlsParameters = SDPUtils.getDtlsParameters(\n              mediaSection, sessionpart);\n          if (isIceLite) {\n            remoteDtlsParameters.role = 'server';\n          }\n\n          if (!pc.usingBundle || sdpMLineIndex === 0) {\n            pc._gather(transceiver.mid, sdpMLineIndex);\n            if (iceTransport.state === 'new') {\n              iceTransport.start(iceGatherer, remoteIceParameters,\n                  isIceLite ? 'controlling' : 'controlled');\n            }\n            if (dtlsTransport.state === 'new') {\n              dtlsTransport.start(remoteDtlsParameters);\n            }\n          }\n\n          // Calculate intersection of capabilities.\n          var params = getCommonCapabilities(localCapabilities,\n              remoteCapabilities);\n\n          // Start the RTCRtpSender. The RTCRtpReceiver for this\n          // transceiver has already been started in setRemoteDescription.\n          pc._transceive(transceiver,\n              params.codecs.length > 0,\n              false);\n        }\n      });\n    }\n\n    pc._localDescription = {\n      type: description.type,\n      sdp: description.sdp\n    };\n    if (description.type === 'offer') {\n      pc._updateSignalingState('have-local-offer');\n    } else {\n      pc._updateSignalingState('stable');\n    }\n\n    return Promise.resolve();\n  };\n\n  RTCPeerConnection.prototype.setRemoteDescription = function(description) {\n    var pc = this;\n\n    // Note: pranswer is not supported.\n    if (['offer', 'answer'].indexOf(description.type) === -1) {\n      return Promise.reject(makeError('TypeError',\n          'Unsupported type \"' + description.type + '\"'));\n    }\n\n    if (!isActionAllowedInSignalingState('setRemoteDescription',\n        description.type, pc.signalingState) || pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not set remote ' + description.type +\n          ' in state ' + pc.signalingState));\n    }\n\n    var streams = {};\n    pc.remoteStreams.forEach(function(stream) {\n      streams[stream.id] = stream;\n    });\n    var receiverList = [];\n    var sections = SDPUtils.splitSections(description.sdp);\n    var sessionpart = sections.shift();\n    var isIceLite = SDPUtils.matchPrefix(sessionpart,\n        'a=ice-lite').length > 0;\n    var usingBundle = SDPUtils.matchPrefix(sessionpart,\n        'a=group:BUNDLE ').length > 0;\n    pc.usingBundle = usingBundle;\n    var iceOptions = SDPUtils.matchPrefix(sessionpart,\n        'a=ice-options:')[0];\n    if (iceOptions) {\n      pc.canTrickleIceCandidates = iceOptions.substr(14).split(' ')\n          .indexOf('trickle') >= 0;\n    } else {\n      pc.canTrickleIceCandidates = false;\n    }\n\n    sections.forEach(function(mediaSection, sdpMLineIndex) {\n      var lines = SDPUtils.splitLines(mediaSection);\n      var kind = SDPUtils.getKind(mediaSection);\n      // treat bundle-only as not-rejected.\n      var rejected = SDPUtils.isRejected(mediaSection) &&\n          SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\n      var protocol = lines[0].substr(2).split(' ')[2];\n\n      var direction = SDPUtils.getDirection(mediaSection, sessionpart);\n      var remoteMsid = SDPUtils.parseMsid(mediaSection);\n\n      var mid = SDPUtils.getMid(mediaSection) || SDPUtils.generateIdentifier();\n\n      // Reject datachannels which are not implemented yet.\n      if (rejected || (kind === 'application' && (protocol === 'DTLS/SCTP' ||\n          protocol === 'UDP/DTLS/SCTP'))) {\n        // TODO: this is dangerous in the case where a non-rejected m-line\n        //     becomes rejected.\n        pc.transceivers[sdpMLineIndex] = {\n          mid: mid,\n          kind: kind,\n          protocol: protocol,\n          rejected: true\n        };\n        return;\n      }\n\n      if (!rejected && pc.transceivers[sdpMLineIndex] &&\n          pc.transceivers[sdpMLineIndex].rejected) {\n        // recycle a rejected transceiver.\n        pc.transceivers[sdpMLineIndex] = pc._createTransceiver(kind, true);\n      }\n\n      var transceiver;\n      var iceGatherer;\n      var iceTransport;\n      var dtlsTransport;\n      var rtpReceiver;\n      var sendEncodingParameters;\n      var recvEncodingParameters;\n      var localCapabilities;\n\n      var track;\n      // FIXME: ensure the mediaSection has rtcp-mux set.\n      var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);\n      var remoteIceParameters;\n      var remoteDtlsParameters;\n      if (!rejected) {\n        remoteIceParameters = SDPUtils.getIceParameters(mediaSection,\n            sessionpart);\n        remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,\n            sessionpart);\n        remoteDtlsParameters.role = 'client';\n      }\n      recvEncodingParameters =\n          SDPUtils.parseRtpEncodingParameters(mediaSection);\n\n      var rtcpParameters = SDPUtils.parseRtcpParameters(mediaSection);\n\n      var isComplete = SDPUtils.matchPrefix(mediaSection,\n          'a=end-of-candidates', sessionpart).length > 0;\n      var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')\n          .map(function(cand) {\n            return SDPUtils.parseCandidate(cand);\n          })\n          .filter(function(cand) {\n            return cand.component === 1;\n          });\n\n      // Check if we can use BUNDLE and dispose transports.\n      if ((description.type === 'offer' || description.type === 'answer') &&\n          !rejected && usingBundle && sdpMLineIndex > 0 &&\n          pc.transceivers[sdpMLineIndex]) {\n        pc._disposeIceAndDtlsTransports(sdpMLineIndex);\n        pc.transceivers[sdpMLineIndex].iceGatherer =\n            pc.transceivers[0].iceGatherer;\n        pc.transceivers[sdpMLineIndex].iceTransport =\n            pc.transceivers[0].iceTransport;\n        pc.transceivers[sdpMLineIndex].dtlsTransport =\n            pc.transceivers[0].dtlsTransport;\n        if (pc.transceivers[sdpMLineIndex].rtpSender) {\n          pc.transceivers[sdpMLineIndex].rtpSender.setTransport(\n              pc.transceivers[0].dtlsTransport);\n        }\n        if (pc.transceivers[sdpMLineIndex].rtpReceiver) {\n          pc.transceivers[sdpMLineIndex].rtpReceiver.setTransport(\n              pc.transceivers[0].dtlsTransport);\n        }\n      }\n      if (description.type === 'offer' && !rejected) {\n        transceiver = pc.transceivers[sdpMLineIndex] ||\n            pc._createTransceiver(kind);\n        transceiver.mid = mid;\n\n        if (!transceiver.iceGatherer) {\n          transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,\n              usingBundle);\n        }\n\n        if (cands.length && transceiver.iceTransport.state === 'new') {\n          if (isComplete && (!usingBundle || sdpMLineIndex === 0)) {\n            transceiver.iceTransport.setRemoteCandidates(cands);\n          } else {\n            cands.forEach(function(candidate) {\n              maybeAddCandidate(transceiver.iceTransport, candidate);\n            });\n          }\n        }\n\n        localCapabilities = window.RTCRtpReceiver.getCapabilities(kind);\n\n        // filter RTX until additional stuff needed for RTX is implemented\n        // in adapter.js\n        if (edgeVersion < 15019) {\n          localCapabilities.codecs = localCapabilities.codecs.filter(\n              function(codec) {\n                return codec.name !== 'rtx';\n              });\n        }\n\n        sendEncodingParameters = transceiver.sendEncodingParameters || [{\n          ssrc: (2 * sdpMLineIndex + 2) * 1001\n        }];\n\n        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\n        var isNewTrack = false;\n        if (direction === 'sendrecv' || direction === 'sendonly') {\n          isNewTrack = !transceiver.rtpReceiver;\n          rtpReceiver = transceiver.rtpReceiver ||\n              new window.RTCRtpReceiver(transceiver.dtlsTransport, kind);\n\n          if (isNewTrack) {\n            var stream;\n            track = rtpReceiver.track;\n            // FIXME: does not work with Plan B.\n            if (remoteMsid && remoteMsid.stream === '-') {\n              // no-op. a stream id of '-' means: no associated stream.\n            } else if (remoteMsid) {\n              if (!streams[remoteMsid.stream]) {\n                streams[remoteMsid.stream] = new window.MediaStream();\n                Object.defineProperty(streams[remoteMsid.stream], 'id', {\n                  get: function() {\n                    return remoteMsid.stream;\n                  }\n                });\n              }\n              Object.defineProperty(track, 'id', {\n                get: function() {\n                  return remoteMsid.track;\n                }\n              });\n              stream = streams[remoteMsid.stream];\n            } else {\n              if (!streams.default) {\n                streams.default = new window.MediaStream();\n              }\n              stream = streams.default;\n            }\n            if (stream) {\n              addTrackToStreamAndFireEvent(track, stream);\n              transceiver.associatedRemoteMediaStreams.push(stream);\n            }\n            receiverList.push([track, rtpReceiver, stream]);\n          }\n        } else if (transceiver.rtpReceiver && transceiver.rtpReceiver.track) {\n          transceiver.associatedRemoteMediaStreams.forEach(function(s) {\n            var nativeTrack = s.getTracks().find(function(t) {\n              return t.id === transceiver.rtpReceiver.track.id;\n            });\n            if (nativeTrack) {\n              removeTrackFromStreamAndFireEvent(nativeTrack, s);\n            }\n          });\n          transceiver.associatedRemoteMediaStreams = [];\n        }\n\n        transceiver.localCapabilities = localCapabilities;\n        transceiver.remoteCapabilities = remoteCapabilities;\n        transceiver.rtpReceiver = rtpReceiver;\n        transceiver.rtcpParameters = rtcpParameters;\n        transceiver.sendEncodingParameters = sendEncodingParameters;\n        transceiver.recvEncodingParameters = recvEncodingParameters;\n\n        // Start the RTCRtpReceiver now. The RTPSender is started in\n        // setLocalDescription.\n        pc._transceive(pc.transceivers[sdpMLineIndex],\n            false,\n            isNewTrack);\n      } else if (description.type === 'answer' && !rejected) {\n        transceiver = pc.transceivers[sdpMLineIndex];\n        iceGatherer = transceiver.iceGatherer;\n        iceTransport = transceiver.iceTransport;\n        dtlsTransport = transceiver.dtlsTransport;\n        rtpReceiver = transceiver.rtpReceiver;\n        sendEncodingParameters = transceiver.sendEncodingParameters;\n        localCapabilities = transceiver.localCapabilities;\n\n        pc.transceivers[sdpMLineIndex].recvEncodingParameters =\n            recvEncodingParameters;\n        pc.transceivers[sdpMLineIndex].remoteCapabilities =\n            remoteCapabilities;\n        pc.transceivers[sdpMLineIndex].rtcpParameters = rtcpParameters;\n\n        if (cands.length && iceTransport.state === 'new') {\n          if ((isIceLite || isComplete) &&\n              (!usingBundle || sdpMLineIndex === 0)) {\n            iceTransport.setRemoteCandidates(cands);\n          } else {\n            cands.forEach(function(candidate) {\n              maybeAddCandidate(transceiver.iceTransport, candidate);\n            });\n          }\n        }\n\n        if (!usingBundle || sdpMLineIndex === 0) {\n          if (iceTransport.state === 'new') {\n            iceTransport.start(iceGatherer, remoteIceParameters,\n                'controlling');\n          }\n          if (dtlsTransport.state === 'new') {\n            dtlsTransport.start(remoteDtlsParameters);\n          }\n        }\n\n        // If the offer contained RTX but the answer did not,\n        // remove RTX from sendEncodingParameters.\n        var commonCapabilities = getCommonCapabilities(\n          transceiver.localCapabilities,\n          transceiver.remoteCapabilities);\n\n        var hasRtx = commonCapabilities.codecs.filter(function(c) {\n          return c.name.toLowerCase() === 'rtx';\n        }).length;\n        if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {\n          delete transceiver.sendEncodingParameters[0].rtx;\n        }\n\n        pc._transceive(transceiver,\n            direction === 'sendrecv' || direction === 'recvonly',\n            direction === 'sendrecv' || direction === 'sendonly');\n\n        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\n        if (rtpReceiver &&\n            (direction === 'sendrecv' || direction === 'sendonly')) {\n          track = rtpReceiver.track;\n          if (remoteMsid) {\n            if (!streams[remoteMsid.stream]) {\n              streams[remoteMsid.stream] = new window.MediaStream();\n            }\n            addTrackToStreamAndFireEvent(track, streams[remoteMsid.stream]);\n            receiverList.push([track, rtpReceiver, streams[remoteMsid.stream]]);\n          } else {\n            if (!streams.default) {\n              streams.default = new window.MediaStream();\n            }\n            addTrackToStreamAndFireEvent(track, streams.default);\n            receiverList.push([track, rtpReceiver, streams.default]);\n          }\n        } else {\n          // FIXME: actually the receiver should be created later.\n          delete transceiver.rtpReceiver;\n        }\n      }\n    });\n\n    if (pc._dtlsRole === undefined) {\n      pc._dtlsRole = description.type === 'offer' ? 'active' : 'passive';\n    }\n\n    pc._remoteDescription = {\n      type: description.type,\n      sdp: description.sdp\n    };\n    if (description.type === 'offer') {\n      pc._updateSignalingState('have-remote-offer');\n    } else {\n      pc._updateSignalingState('stable');\n    }\n    Object.keys(streams).forEach(function(sid) {\n      var stream = streams[sid];\n      if (stream.getTracks().length) {\n        if (pc.remoteStreams.indexOf(stream) === -1) {\n          pc.remoteStreams.push(stream);\n          var event = new Event('addstream');\n          event.stream = stream;\n          window.setTimeout(function() {\n            pc._dispatchEvent('addstream', event);\n          });\n        }\n\n        receiverList.forEach(function(item) {\n          var track = item[0];\n          var receiver = item[1];\n          if (stream.id !== item[2].id) {\n            return;\n          }\n          fireAddTrack(pc, track, receiver, [stream]);\n        });\n      }\n    });\n    receiverList.forEach(function(item) {\n      if (item[2]) {\n        return;\n      }\n      fireAddTrack(pc, item[0], item[1], []);\n    });\n\n    // check whether addIceCandidate({}) was called within four seconds after\n    // setRemoteDescription.\n    window.setTimeout(function() {\n      if (!(pc && pc.transceivers)) {\n        return;\n      }\n      pc.transceivers.forEach(function(transceiver) {\n        if (transceiver.iceTransport &&\n            transceiver.iceTransport.state === 'new' &&\n            transceiver.iceTransport.getRemoteCandidates().length > 0) {\n          console.warn('Timeout for addRemoteCandidate. Consider sending ' +\n              'an end-of-candidates notification');\n          transceiver.iceTransport.addRemoteCandidate({});\n        }\n      });\n    }, 4000);\n\n    return Promise.resolve();\n  };\n\n  RTCPeerConnection.prototype.close = function() {\n    this.transceivers.forEach(function(transceiver) {\n      /* not yet\n      if (transceiver.iceGatherer) {\n        transceiver.iceGatherer.close();\n      }\n      */\n      if (transceiver.iceTransport) {\n        transceiver.iceTransport.stop();\n      }\n      if (transceiver.dtlsTransport) {\n        transceiver.dtlsTransport.stop();\n      }\n      if (transceiver.rtpSender) {\n        transceiver.rtpSender.stop();\n      }\n      if (transceiver.rtpReceiver) {\n        transceiver.rtpReceiver.stop();\n      }\n    });\n    // FIXME: clean up tracks, local streams, remote streams, etc\n    this._isClosed = true;\n    this._updateSignalingState('closed');\n  };\n\n  // Update the signaling state.\n  RTCPeerConnection.prototype._updateSignalingState = function(newState) {\n    this.signalingState = newState;\n    var event = new Event('signalingstatechange');\n    this._dispatchEvent('signalingstatechange', event);\n  };\n\n  // Determine whether to fire the negotiationneeded event.\n  RTCPeerConnection.prototype._maybeFireNegotiationNeeded = function() {\n    var pc = this;\n    if (this.signalingState !== 'stable' || this.needNegotiation === true) {\n      return;\n    }\n    this.needNegotiation = true;\n    window.setTimeout(function() {\n      if (pc.needNegotiation) {\n        pc.needNegotiation = false;\n        var event = new Event('negotiationneeded');\n        pc._dispatchEvent('negotiationneeded', event);\n      }\n    }, 0);\n  };\n\n  // Update the ice connection state.\n  RTCPeerConnection.prototype._updateIceConnectionState = function() {\n    var newState;\n    var states = {\n      'new': 0,\n      closed: 0,\n      checking: 0,\n      connected: 0,\n      completed: 0,\n      disconnected: 0,\n      failed: 0\n    };\n    this.transceivers.forEach(function(transceiver) {\n      if (transceiver.iceTransport && !transceiver.rejected) {\n        states[transceiver.iceTransport.state]++;\n      }\n    });\n\n    newState = 'new';\n    if (states.failed > 0) {\n      newState = 'failed';\n    } else if (states.checking > 0) {\n      newState = 'checking';\n    } else if (states.disconnected > 0) {\n      newState = 'disconnected';\n    } else if (states.new > 0) {\n      newState = 'new';\n    } else if (states.connected > 0) {\n      newState = 'connected';\n    } else if (states.completed > 0) {\n      newState = 'completed';\n    }\n\n    if (newState !== this.iceConnectionState) {\n      this.iceConnectionState = newState;\n      var event = new Event('iceconnectionstatechange');\n      this._dispatchEvent('iceconnectionstatechange', event);\n    }\n  };\n\n  // Update the connection state.\n  RTCPeerConnection.prototype._updateConnectionState = function() {\n    var newState;\n    var states = {\n      'new': 0,\n      closed: 0,\n      connecting: 0,\n      connected: 0,\n      completed: 0,\n      disconnected: 0,\n      failed: 0\n    };\n    this.transceivers.forEach(function(transceiver) {\n      if (transceiver.iceTransport && transceiver.dtlsTransport &&\n          !transceiver.rejected) {\n        states[transceiver.iceTransport.state]++;\n        states[transceiver.dtlsTransport.state]++;\n      }\n    });\n    // ICETransport.completed and connected are the same for this purpose.\n    states.connected += states.completed;\n\n    newState = 'new';\n    if (states.failed > 0) {\n      newState = 'failed';\n    } else if (states.connecting > 0) {\n      newState = 'connecting';\n    } else if (states.disconnected > 0) {\n      newState = 'disconnected';\n    } else if (states.new > 0) {\n      newState = 'new';\n    } else if (states.connected > 0) {\n      newState = 'connected';\n    }\n\n    if (newState !== this.connectionState) {\n      this.connectionState = newState;\n      var event = new Event('connectionstatechange');\n      this._dispatchEvent('connectionstatechange', event);\n    }\n  };\n\n  RTCPeerConnection.prototype.createOffer = function() {\n    var pc = this;\n\n    if (pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createOffer after close'));\n    }\n\n    var numAudioTracks = pc.transceivers.filter(function(t) {\n      return t.kind === 'audio';\n    }).length;\n    var numVideoTracks = pc.transceivers.filter(function(t) {\n      return t.kind === 'video';\n    }).length;\n\n    // Determine number of audio and video tracks we need to send/recv.\n    var offerOptions = arguments[0];\n    if (offerOptions) {\n      // Reject Chrome legacy constraints.\n      if (offerOptions.mandatory || offerOptions.optional) {\n        throw new TypeError(\n            'Legacy mandatory/optional constraints not supported.');\n      }\n      if (offerOptions.offerToReceiveAudio !== undefined) {\n        if (offerOptions.offerToReceiveAudio === true) {\n          numAudioTracks = 1;\n        } else if (offerOptions.offerToReceiveAudio === false) {\n          numAudioTracks = 0;\n        } else {\n          numAudioTracks = offerOptions.offerToReceiveAudio;\n        }\n      }\n      if (offerOptions.offerToReceiveVideo !== undefined) {\n        if (offerOptions.offerToReceiveVideo === true) {\n          numVideoTracks = 1;\n        } else if (offerOptions.offerToReceiveVideo === false) {\n          numVideoTracks = 0;\n        } else {\n          numVideoTracks = offerOptions.offerToReceiveVideo;\n        }\n      }\n    }\n\n    pc.transceivers.forEach(function(transceiver) {\n      if (transceiver.kind === 'audio') {\n        numAudioTracks--;\n        if (numAudioTracks < 0) {\n          transceiver.wantReceive = false;\n        }\n      } else if (transceiver.kind === 'video') {\n        numVideoTracks--;\n        if (numVideoTracks < 0) {\n          transceiver.wantReceive = false;\n        }\n      }\n    });\n\n    // Create M-lines for recvonly streams.\n    while (numAudioTracks > 0 || numVideoTracks > 0) {\n      if (numAudioTracks > 0) {\n        pc._createTransceiver('audio');\n        numAudioTracks--;\n      }\n      if (numVideoTracks > 0) {\n        pc._createTransceiver('video');\n        numVideoTracks--;\n      }\n    }\n\n    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,\n        pc._sdpSessionVersion++);\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      // For each track, create an ice gatherer, ice transport,\n      // dtls transport, potentially rtpsender and rtpreceiver.\n      var track = transceiver.track;\n      var kind = transceiver.kind;\n      var mid = transceiver.mid || SDPUtils.generateIdentifier();\n      transceiver.mid = mid;\n\n      if (!transceiver.iceGatherer) {\n        transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,\n            pc.usingBundle);\n      }\n\n      var localCapabilities = window.RTCRtpSender.getCapabilities(kind);\n      // filter RTX until additional stuff needed for RTX is implemented\n      // in adapter.js\n      if (edgeVersion < 15019) {\n        localCapabilities.codecs = localCapabilities.codecs.filter(\n            function(codec) {\n              return codec.name !== 'rtx';\n            });\n      }\n      localCapabilities.codecs.forEach(function(codec) {\n        // work around https://bugs.chromium.org/p/webrtc/issues/detail?id=6552\n        // by adding level-asymmetry-allowed=1\n        if (codec.name === 'H264' &&\n            codec.parameters['level-asymmetry-allowed'] === undefined) {\n          codec.parameters['level-asymmetry-allowed'] = '1';\n        }\n\n        // for subsequent offers, we might have to re-use the payload\n        // type of the last offer.\n        if (transceiver.remoteCapabilities &&\n            transceiver.remoteCapabilities.codecs) {\n          transceiver.remoteCapabilities.codecs.forEach(function(remoteCodec) {\n            if (codec.name.toLowerCase() === remoteCodec.name.toLowerCase() &&\n                codec.clockRate === remoteCodec.clockRate) {\n              codec.preferredPayloadType = remoteCodec.payloadType;\n            }\n          });\n        }\n      });\n      localCapabilities.headerExtensions.forEach(function(hdrExt) {\n        var remoteExtensions = transceiver.remoteCapabilities &&\n            transceiver.remoteCapabilities.headerExtensions || [];\n        remoteExtensions.forEach(function(rHdrExt) {\n          if (hdrExt.uri === rHdrExt.uri) {\n            hdrExt.id = rHdrExt.id;\n          }\n        });\n      });\n\n      // generate an ssrc now, to be used later in rtpSender.send\n      var sendEncodingParameters = transceiver.sendEncodingParameters || [{\n        ssrc: (2 * sdpMLineIndex + 1) * 1001\n      }];\n      if (track) {\n        // add RTX\n        if (edgeVersion >= 15019 && kind === 'video' &&\n            !sendEncodingParameters[0].rtx) {\n          sendEncodingParameters[0].rtx = {\n            ssrc: sendEncodingParameters[0].ssrc + 1\n          };\n        }\n      }\n\n      if (transceiver.wantReceive) {\n        transceiver.rtpReceiver = new window.RTCRtpReceiver(\n            transceiver.dtlsTransport, kind);\n      }\n\n      transceiver.localCapabilities = localCapabilities;\n      transceiver.sendEncodingParameters = sendEncodingParameters;\n    });\n\n    // always offer BUNDLE and dispose on return if not supported.\n    if (pc._config.bundlePolicy !== 'max-compat') {\n      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {\n        return t.mid;\n      }).join(' ') + '\\r\\n';\n    }\n    sdp += 'a=ice-options:trickle\\r\\n';\n\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      sdp += writeMediaSection(transceiver, transceiver.localCapabilities,\n          'offer', transceiver.stream, pc._dtlsRole);\n      sdp += 'a=rtcp-rsize\\r\\n';\n\n      if (transceiver.iceGatherer && pc.iceGatheringState !== 'new' &&\n          (sdpMLineIndex === 0 || !pc.usingBundle)) {\n        transceiver.iceGatherer.getLocalCandidates().forEach(function(cand) {\n          cand.component = 1;\n          sdp += 'a=' + SDPUtils.writeCandidate(cand) + '\\r\\n';\n        });\n\n        if (transceiver.iceGatherer.state === 'completed') {\n          sdp += 'a=end-of-candidates\\r\\n';\n        }\n      }\n    });\n\n    var desc = new window.RTCSessionDescription({\n      type: 'offer',\n      sdp: sdp\n    });\n    return Promise.resolve(desc);\n  };\n\n  RTCPeerConnection.prototype.createAnswer = function() {\n    var pc = this;\n\n    if (pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createAnswer after close'));\n    }\n\n    if (!(pc.signalingState === 'have-remote-offer' ||\n        pc.signalingState === 'have-local-pranswer')) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createAnswer in signalingState ' + pc.signalingState));\n    }\n\n    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,\n        pc._sdpSessionVersion++);\n    if (pc.usingBundle) {\n      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {\n        return t.mid;\n      }).join(' ') + '\\r\\n';\n    }\n    sdp += 'a=ice-options:trickle\\r\\n';\n\n    var mediaSectionsInOffer = SDPUtils.getMediaSections(\n        pc._remoteDescription.sdp).length;\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      if (sdpMLineIndex + 1 > mediaSectionsInOffer) {\n        return;\n      }\n      if (transceiver.rejected) {\n        if (transceiver.kind === 'application') {\n          if (transceiver.protocol === 'DTLS/SCTP') { // legacy fmt\n            sdp += 'm=application 0 DTLS/SCTP 5000\\r\\n';\n          } else {\n            sdp += 'm=application 0 ' + transceiver.protocol +\n                ' webrtc-datachannel\\r\\n';\n          }\n        } else if (transceiver.kind === 'audio') {\n          sdp += 'm=audio 0 UDP/TLS/RTP/SAVPF 0\\r\\n' +\n              'a=rtpmap:0 PCMU/8000\\r\\n';\n        } else if (transceiver.kind === 'video') {\n          sdp += 'm=video 0 UDP/TLS/RTP/SAVPF 120\\r\\n' +\n              'a=rtpmap:120 VP8/90000\\r\\n';\n        }\n        sdp += 'c=IN IP4 0.0.0.0\\r\\n' +\n            'a=inactive\\r\\n' +\n            'a=mid:' + transceiver.mid + '\\r\\n';\n        return;\n      }\n\n      // FIXME: look at direction.\n      if (transceiver.stream) {\n        var localTrack;\n        if (transceiver.kind === 'audio') {\n          localTrack = transceiver.stream.getAudioTracks()[0];\n        } else if (transceiver.kind === 'video') {\n          localTrack = transceiver.stream.getVideoTracks()[0];\n        }\n        if (localTrack) {\n          // add RTX\n          if (edgeVersion >= 15019 && transceiver.kind === 'video' &&\n              !transceiver.sendEncodingParameters[0].rtx) {\n            transceiver.sendEncodingParameters[0].rtx = {\n              ssrc: transceiver.sendEncodingParameters[0].ssrc + 1\n            };\n          }\n        }\n      }\n\n      // Calculate intersection of capabilities.\n      var commonCapabilities = getCommonCapabilities(\n          transceiver.localCapabilities,\n          transceiver.remoteCapabilities);\n\n      var hasRtx = commonCapabilities.codecs.filter(function(c) {\n        return c.name.toLowerCase() === 'rtx';\n      }).length;\n      if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {\n        delete transceiver.sendEncodingParameters[0].rtx;\n      }\n\n      sdp += writeMediaSection(transceiver, commonCapabilities,\n          'answer', transceiver.stream, pc._dtlsRole);\n      if (transceiver.rtcpParameters &&\n          transceiver.rtcpParameters.reducedSize) {\n        sdp += 'a=rtcp-rsize\\r\\n';\n      }\n    });\n\n    var desc = new window.RTCSessionDescription({\n      type: 'answer',\n      sdp: sdp\n    });\n    return Promise.resolve(desc);\n  };\n\n  RTCPeerConnection.prototype.addIceCandidate = function(candidate) {\n    var pc = this;\n    var sections;\n    if (candidate && !(candidate.sdpMLineIndex !== undefined ||\n        candidate.sdpMid)) {\n      return Promise.reject(new TypeError('sdpMLineIndex or sdpMid required'));\n    }\n\n    // TODO: needs to go into ops queue.\n    return new Promise(function(resolve, reject) {\n      if (!pc._remoteDescription) {\n        return reject(makeError('InvalidStateError',\n            'Can not add ICE candidate without a remote description'));\n      } else if (!candidate || candidate.candidate === '') {\n        for (var j = 0; j < pc.transceivers.length; j++) {\n          if (pc.transceivers[j].rejected) {\n            continue;\n          }\n          pc.transceivers[j].iceTransport.addRemoteCandidate({});\n          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);\n          sections[j] += 'a=end-of-candidates\\r\\n';\n          pc._remoteDescription.sdp =\n              SDPUtils.getDescription(pc._remoteDescription.sdp) +\n              sections.join('');\n          if (pc.usingBundle) {\n            break;\n          }\n        }\n      } else {\n        var sdpMLineIndex = candidate.sdpMLineIndex;\n        if (candidate.sdpMid) {\n          for (var i = 0; i < pc.transceivers.length; i++) {\n            if (pc.transceivers[i].mid === candidate.sdpMid) {\n              sdpMLineIndex = i;\n              break;\n            }\n          }\n        }\n        var transceiver = pc.transceivers[sdpMLineIndex];\n        if (transceiver) {\n          if (transceiver.rejected) {\n            return resolve();\n          }\n          var cand = Object.keys(candidate.candidate).length > 0 ?\n              SDPUtils.parseCandidate(candidate.candidate) : {};\n          // Ignore Chrome's invalid candidates since Edge does not like them.\n          if (cand.protocol === 'tcp' && (cand.port === 0 || cand.port === 9)) {\n            return resolve();\n          }\n          // Ignore RTCP candidates, we assume RTCP-MUX.\n          if (cand.component && cand.component !== 1) {\n            return resolve();\n          }\n          // when using bundle, avoid adding candidates to the wrong\n          // ice transport. And avoid adding candidates added in the SDP.\n          if (sdpMLineIndex === 0 || (sdpMLineIndex > 0 &&\n              transceiver.iceTransport !== pc.transceivers[0].iceTransport)) {\n            if (!maybeAddCandidate(transceiver.iceTransport, cand)) {\n              return reject(makeError('OperationError',\n                  'Can not add ICE candidate'));\n            }\n          }\n\n          // update the remoteDescription.\n          var candidateString = candidate.candidate.trim();\n          if (candidateString.indexOf('a=') === 0) {\n            candidateString = candidateString.substr(2);\n          }\n          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);\n          sections[sdpMLineIndex] += 'a=' +\n              (cand.type ? candidateString : 'end-of-candidates')\n              + '\\r\\n';\n          pc._remoteDescription.sdp =\n              SDPUtils.getDescription(pc._remoteDescription.sdp) +\n              sections.join('');\n        } else {\n          return reject(makeError('OperationError',\n              'Can not add ICE candidate'));\n        }\n      }\n      resolve();\n    });\n  };\n\n  RTCPeerConnection.prototype.getStats = function(selector) {\n    if (selector && selector instanceof window.MediaStreamTrack) {\n      var senderOrReceiver = null;\n      this.transceivers.forEach(function(transceiver) {\n        if (transceiver.rtpSender &&\n            transceiver.rtpSender.track === selector) {\n          senderOrReceiver = transceiver.rtpSender;\n        } else if (transceiver.rtpReceiver &&\n            transceiver.rtpReceiver.track === selector) {\n          senderOrReceiver = transceiver.rtpReceiver;\n        }\n      });\n      if (!senderOrReceiver) {\n        throw makeError('InvalidAccessError', 'Invalid selector.');\n      }\n      return senderOrReceiver.getStats();\n    }\n\n    var promises = [];\n    this.transceivers.forEach(function(transceiver) {\n      ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport',\n          'dtlsTransport'].forEach(function(method) {\n            if (transceiver[method]) {\n              promises.push(transceiver[method].getStats());\n            }\n          });\n    });\n    return Promise.all(promises).then(function(allStats) {\n      var results = new Map();\n      allStats.forEach(function(stats) {\n        stats.forEach(function(stat) {\n          results.set(stat.id, stat);\n        });\n      });\n      return results;\n    });\n  };\n\n  // fix low-level stat names and return Map instead of object.\n  var ortcObjects = ['RTCRtpSender', 'RTCRtpReceiver', 'RTCIceGatherer',\n    'RTCIceTransport', 'RTCDtlsTransport'];\n  ortcObjects.forEach(function(ortcObjectName) {\n    var obj = window[ortcObjectName];\n    if (obj && obj.prototype && obj.prototype.getStats) {\n      var nativeGetstats = obj.prototype.getStats;\n      obj.prototype.getStats = function() {\n        return nativeGetstats.apply(this)\n        .then(function(nativeStats) {\n          var mapStats = new Map();\n          Object.keys(nativeStats).forEach(function(id) {\n            nativeStats[id].type = fixStatsType(nativeStats[id]);\n            mapStats.set(id, nativeStats[id]);\n          });\n          return mapStats;\n        });\n      };\n    }\n  });\n\n  // legacy callback shims. Should be moved to adapter.js some days.\n  var methods = ['createOffer', 'createAnswer'];\n  methods.forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[0] === 'function' ||\n          typeof args[1] === 'function') { // legacy\n        return nativeMethod.apply(this, [arguments[2]])\n        .then(function(description) {\n          if (typeof args[0] === 'function') {\n            args[0].apply(null, [description]);\n          }\n        }, function(error) {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null, [error]);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  methods = ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'];\n  methods.forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[1] === 'function' ||\n          typeof args[2] === 'function') { // legacy\n        return nativeMethod.apply(this, arguments)\n        .then(function() {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null);\n          }\n        }, function(error) {\n          if (typeof args[2] === 'function') {\n            args[2].apply(null, [error]);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  // getStats is special. It doesn't have a spec legacy method yet we support\n  // getStats(something, cb) without error callbacks.\n  ['getStats'].forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[1] === 'function') {\n        return nativeMethod.apply(this, arguments)\n        .then(function() {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  return RTCPeerConnection;\n};\n","/* global __filename */\n\nimport async from 'async';\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\n/**\n * A queue for async task execution.\n */\nexport default class AsyncQueue {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        this._queue = async.queue(this._processQueueTasks.bind(this), 1);\n        this._stopped = false;\n    }\n\n    /**\n     * Removes any pending tasks from the queue.\n     */\n    clear() {\n        this._queue.kill();\n    }\n\n    /**\n     * Internal task processing implementation which makes things work.\n     */\n    _processQueueTasks(task, finishedCallback) {\n        try {\n            task(finishedCallback);\n        } catch (error) {\n            logger.error(`Task failed: ${error}`);\n            finishedCallback(error);\n        }\n    }\n\n    /**\n     * The 'task' function will be given a callback it MUST call with either:\n     *  1) No arguments if it was successful or\n     *  2) An error argument if there was an error\n     * If the task wants to process the success or failure of the task, it\n     * should pass the {@code callback} to the push function, e.g.:\n     * queue.push(task, (err) => {\n     *     if (err) {\n     *         // error handling\n     *     } else {\n     *         // success handling\n     *     }\n     * });\n     *\n     * @param {function} task - The task to be executed. See the description above.\n     * @param {function} [callback] - Optional callback to be called after the task has been executed.\n     */\n    push(task, callback) {\n        if (this._stopped) {\n            callback && callback(new Error('The queue has been stopped'));\n\n            return;\n        }\n        this._queue.push(task, callback);\n    }\n\n    /**\n     * Shutdowns the queue. All already queued tasks will execute, but no future tasks can be added. If a task is added\n     * after the queue has been shutdown then the callback will be called with an error.\n     */\n    shutdown() {\n        this._stopped = true;\n    }\n}\n","/*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n/*jshint onevar: false, indent:4 */\n/*global setImmediate: false, setTimeout: false, console: false */\n(function () {\n\n    var async = {};\n\n    // global on the server, window in the browser\n    var root, previous_async;\n\n    root = this;\n    if (root != null) {\n      previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        var called = false;\n        return function() {\n            if (called) throw new Error(\"Callback was already called.\");\n            called = true;\n            fn.apply(root, arguments);\n        }\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _toString = Object.prototype.toString;\n\n    var _isArray = Array.isArray || function (obj) {\n        return _toString.call(obj) === '[object Array]';\n    };\n\n    var _each = function (arr, iterator) {\n        if (arr.forEach) {\n            return arr.forEach(iterator);\n        }\n        for (var i = 0; i < arr.length; i += 1) {\n            iterator(arr[i], i, arr);\n        }\n    };\n\n    var _map = function (arr, iterator) {\n        if (arr.map) {\n            return arr.map(iterator);\n        }\n        var results = [];\n        _each(arr, function (x, i, a) {\n            results.push(iterator(x, i, a));\n        });\n        return results;\n    };\n\n    var _reduce = function (arr, iterator, memo) {\n        if (arr.reduce) {\n            return arr.reduce(iterator, memo);\n        }\n        _each(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    };\n\n    var _keys = function (obj) {\n        if (Object.keys) {\n            return Object.keys(obj);\n        }\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n    if (typeof process === 'undefined' || !(process.nextTick)) {\n        if (typeof setImmediate === 'function') {\n            async.nextTick = function (fn) {\n                // not a direct alias for IE10 compatibility\n                setImmediate(fn);\n            };\n            async.setImmediate = async.nextTick;\n        }\n        else {\n            async.nextTick = function (fn) {\n                setTimeout(fn, 0);\n            };\n            async.setImmediate = async.nextTick;\n        }\n    }\n    else {\n        async.nextTick = process.nextTick;\n        if (typeof setImmediate !== 'undefined') {\n            async.setImmediate = function (fn) {\n              // not a direct alias for IE10 compatibility\n              setImmediate(fn);\n            };\n        }\n        else {\n            async.setImmediate = async.nextTick;\n        }\n    }\n\n    async.each = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        _each(arr, function (x) {\n            iterator(x, only_once(done) );\n        });\n        function done(err) {\n          if (err) {\n              callback(err);\n              callback = function () {};\n          }\n          else {\n              completed += 1;\n              if (completed >= arr.length) {\n                  callback();\n              }\n          }\n        }\n    };\n    async.forEach = async.each;\n\n    async.eachSeries = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        var iterate = function () {\n            iterator(arr[completed], function (err) {\n                if (err) {\n                    callback(err);\n                    callback = function () {};\n                }\n                else {\n                    completed += 1;\n                    if (completed >= arr.length) {\n                        callback();\n                    }\n                    else {\n                        iterate();\n                    }\n                }\n            });\n        };\n        iterate();\n    };\n    async.forEachSeries = async.eachSeries;\n\n    async.eachLimit = function (arr, limit, iterator, callback) {\n        var fn = _eachLimit(limit);\n        fn.apply(null, [arr, iterator, callback]);\n    };\n    async.forEachLimit = async.eachLimit;\n\n    var _eachLimit = function (limit) {\n\n        return function (arr, iterator, callback) {\n            callback = callback || function () {};\n            if (!arr.length || limit <= 0) {\n                return callback();\n            }\n            var completed = 0;\n            var started = 0;\n            var running = 0;\n\n            (function replenish () {\n                if (completed >= arr.length) {\n                    return callback();\n                }\n\n                while (running < limit && started < arr.length) {\n                    started += 1;\n                    running += 1;\n                    iterator(arr[started - 1], function (err) {\n                        if (err) {\n                            callback(err);\n                            callback = function () {};\n                        }\n                        else {\n                            completed += 1;\n                            running -= 1;\n                            if (completed >= arr.length) {\n                                callback();\n                            }\n                            else {\n                                replenish();\n                            }\n                        }\n                    });\n                }\n            })();\n        };\n    };\n\n\n    var doParallel = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.each].concat(args));\n        };\n    };\n    var doParallelLimit = function(limit, fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [_eachLimit(limit)].concat(args));\n        };\n    };\n    var doSeries = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.eachSeries].concat(args));\n        };\n    };\n\n\n    var _asyncMap = function (eachfn, arr, iterator, callback) {\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        if (!callback) {\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err) {\n                    callback(err);\n                });\n            });\n        } else {\n            var results = [];\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err, v) {\n                    results[x.index] = v;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n    async.mapLimit = function (arr, limit, iterator, callback) {\n        return _mapLimit(limit)(arr, iterator, callback);\n    };\n\n    var _mapLimit = function(limit) {\n        return doParallelLimit(limit, _asyncMap);\n    };\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.eachSeries(arr, function (x, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n    // inject alias\n    async.inject = async.reduce;\n    // foldl alias\n    async.foldl = async.reduce;\n\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, function (x) {\n            return x;\n        }).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n    // foldr alias\n    async.foldr = async.reduceRight;\n\n    var _filter = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.filter = doParallel(_filter);\n    async.filterSeries = doSeries(_filter);\n    // select alias\n    async.select = async.filter;\n    async.selectSeries = async.filterSeries;\n\n    var _reject = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (!v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.reject = doParallel(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    var _detect = function (eachfn, arr, iterator, main_callback) {\n        eachfn(arr, function (x, callback) {\n            iterator(x, function (result) {\n                if (result) {\n                    main_callback(x);\n                    main_callback = function () {};\n                }\n                else {\n                    callback();\n                }\n            });\n        }, function (err) {\n            main_callback();\n        });\n    };\n    async.detect = doParallel(_detect);\n    async.detectSeries = doSeries(_detect);\n\n    async.some = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    main_callback(true);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(false);\n        });\n    };\n    // any alias\n    async.any = async.some;\n\n    async.every = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (!v) {\n                    main_callback(false);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(true);\n        });\n    };\n    // all alias\n    async.all = async.every;\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                var fn = function (left, right) {\n                    var a = left.criteria, b = right.criteria;\n                    return a < b ? -1 : a > b ? 1 : 0;\n                };\n                callback(null, _map(results.sort(fn), function (x) {\n                    return x.value;\n                }));\n            }\n        });\n    };\n\n    async.auto = function (tasks, callback) {\n        callback = callback || function () {};\n        var keys = _keys(tasks);\n        var remainingTasks = keys.length\n        if (!remainingTasks) {\n            return callback();\n        }\n\n        var results = {};\n\n        var listeners = [];\n        var addListener = function (fn) {\n            listeners.unshift(fn);\n        };\n        var removeListener = function (fn) {\n            for (var i = 0; i < listeners.length; i += 1) {\n                if (listeners[i] === fn) {\n                    listeners.splice(i, 1);\n                    return;\n                }\n            }\n        };\n        var taskComplete = function () {\n            remainingTasks--\n            _each(listeners.slice(0), function (fn) {\n                fn();\n            });\n        };\n\n        addListener(function () {\n            if (!remainingTasks) {\n                var theCallback = callback;\n                // prevent final callback from calling itself if it errors\n                callback = function () {};\n\n                theCallback(null, results);\n            }\n        });\n\n        _each(keys, function (k) {\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\n            var taskCallback = function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                if (err) {\n                    var safeResults = {};\n                    _each(_keys(results), function(rkey) {\n                        safeResults[rkey] = results[rkey];\n                    });\n                    safeResults[k] = args;\n                    callback(err, safeResults);\n                    // stop subsequent errors hitting callback multiple times\n                    callback = function () {};\n                }\n                else {\n                    results[k] = args;\n                    async.setImmediate(taskComplete);\n                }\n            };\n            var requires = task.slice(0, Math.abs(task.length - 1)) || [];\n            var ready = function () {\n                return _reduce(requires, function (a, x) {\n                    return (a && results.hasOwnProperty(x));\n                }, true) && !results.hasOwnProperty(k);\n            };\n            if (ready()) {\n                task[task.length - 1](taskCallback, results);\n            }\n            else {\n                var listener = function () {\n                    if (ready()) {\n                        removeListener(listener);\n                        task[task.length - 1](taskCallback, results);\n                    }\n                };\n                addListener(listener);\n            }\n        });\n    };\n\n    async.retry = function(times, task, callback) {\n        var DEFAULT_TIMES = 5;\n        var attempts = [];\n        // Use defaults if times not passed\n        if (typeof times === 'function') {\n            callback = task;\n            task = times;\n            times = DEFAULT_TIMES;\n        }\n        // Make sure times is a number\n        times = parseInt(times, 10) || DEFAULT_TIMES;\n        var wrappedTask = function(wrappedCallback, wrappedResults) {\n            var retryAttempt = function(task, finalAttempt) {\n                return function(seriesCallback) {\n                    task(function(err, result){\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\n                    }, wrappedResults);\n                };\n            };\n            while (times) {\n                attempts.push(retryAttempt(task, !(times-=1)));\n            }\n            async.series(attempts, function(done, data){\n                data = data[data.length - 1];\n                (wrappedCallback || callback)(data.err, data.result);\n            });\n        }\n        // If a callback is passed, run this as a controll flow\n        return callback ? wrappedTask() : wrappedTask\n    };\n\n    async.waterfall = function (tasks, callback) {\n        callback = callback || function () {};\n        if (!_isArray(tasks)) {\n          var err = new Error('First argument to waterfall must be an array of functions');\n          return callback(err);\n        }\n        if (!tasks.length) {\n            return callback();\n        }\n        var wrapIterator = function (iterator) {\n            return function (err) {\n                if (err) {\n                    callback.apply(null, arguments);\n                    callback = function () {};\n                }\n                else {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    async.setImmediate(function () {\n                        iterator.apply(null, args);\n                    });\n                }\n            };\n        };\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    var _parallel = function(eachfn, tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            eachfn.map(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            eachfn.each(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.parallel = function (tasks, callback) {\n        _parallel({ map: async.map, each: async.each }, tasks, callback);\n    };\n\n    async.parallelLimit = function(tasks, limit, callback) {\n        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);\n    };\n\n    async.series = function (tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            async.mapSeries(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            async.eachSeries(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.iterator = function (tasks) {\n        var makeCallback = function (index) {\n            var fn = function () {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            };\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        };\n        return makeCallback(0);\n    };\n\n    async.apply = function (fn) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        return function () {\n            return fn.apply(\n                null, args.concat(Array.prototype.slice.call(arguments))\n            );\n        };\n    };\n\n    var _concat = function (eachfn, arr, fn, callback) {\n        var r = [];\n        eachfn(arr, function (x, cb) {\n            fn(x, function (err, y) {\n                r = r.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, r);\n        });\n    };\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        if (test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.whilst(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doWhilst = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (test.apply(null, args)) {\n                async.doWhilst(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.until = function (test, iterator, callback) {\n        if (!test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.until(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doUntil = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (!test.apply(null, args)) {\n                async.doUntil(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.queue = function (worker, concurrency) {\n        if (concurrency === undefined) {\n            concurrency = 1;\n        }\n        function _insert(q, data, pos, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n\n              if (pos) {\n                q.tasks.unshift(item);\n              } else {\n                q.tasks.push(item);\n              }\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n\n        var workers = 0;\n        var q = {\n            tasks: [],\n            concurrency: concurrency,\n            saturated: null,\n            empty: null,\n            drain: null,\n            started: false,\n            paused: false,\n            push: function (data, callback) {\n              _insert(q, data, false, callback);\n            },\n            kill: function () {\n              q.drain = null;\n              q.tasks = [];\n            },\n            unshift: function (data, callback) {\n              _insert(q, data, true, callback);\n            },\n            process: function () {\n                if (!q.paused && workers < q.concurrency && q.tasks.length) {\n                    var task = q.tasks.shift();\n                    if (q.empty && q.tasks.length === 0) {\n                        q.empty();\n                    }\n                    workers += 1;\n                    var next = function () {\n                        workers -= 1;\n                        if (task.callback) {\n                            task.callback.apply(task, arguments);\n                        }\n                        if (q.drain && q.tasks.length + workers === 0) {\n                            q.drain();\n                        }\n                        q.process();\n                    };\n                    var cb = only_once(next);\n                    worker(task.data, cb);\n                }\n            },\n            length: function () {\n                return q.tasks.length;\n            },\n            running: function () {\n                return workers;\n            },\n            idle: function() {\n                return q.tasks.length + workers === 0;\n            },\n            pause: function () {\n                if (q.paused === true) { return; }\n                q.paused = true;\n                q.process();\n            },\n            resume: function () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                q.process();\n            }\n        };\n        return q;\n    };\n    \n    async.priorityQueue = function (worker, concurrency) {\n        \n        function _compareTasks(a, b){\n          return a.priority - b.priority;\n        };\n        \n        function _binarySearch(sequence, item, compare) {\n          var beg = -1,\n              end = sequence.length - 1;\n          while (beg < end) {\n            var mid = beg + ((end - beg + 1) >>> 1);\n            if (compare(item, sequence[mid]) >= 0) {\n              beg = mid;\n            } else {\n              end = mid - 1;\n            }\n          }\n          return beg;\n        }\n        \n        function _insert(q, data, priority, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  priority: priority,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n              \n              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n        \n        // Start with a normal queue\n        var q = async.queue(worker, concurrency);\n        \n        // Override push to accept second parameter representing priority\n        q.push = function (data, priority, callback) {\n          _insert(q, data, priority, callback);\n        };\n        \n        // Remove unshift function\n        delete q.unshift;\n\n        return q;\n    };\n\n    async.cargo = function (worker, payload) {\n        var working     = false,\n            tasks       = [];\n\n        var cargo = {\n            tasks: tasks,\n            payload: payload,\n            saturated: null,\n            empty: null,\n            drain: null,\n            drained: true,\n            push: function (data, callback) {\n                if (!_isArray(data)) {\n                    data = [data];\n                }\n                _each(data, function(task) {\n                    tasks.push({\n                        data: task,\n                        callback: typeof callback === 'function' ? callback : null\n                    });\n                    cargo.drained = false;\n                    if (cargo.saturated && tasks.length === payload) {\n                        cargo.saturated();\n                    }\n                });\n                async.setImmediate(cargo.process);\n            },\n            process: function process() {\n                if (working) return;\n                if (tasks.length === 0) {\n                    if(cargo.drain && !cargo.drained) cargo.drain();\n                    cargo.drained = true;\n                    return;\n                }\n\n                var ts = typeof payload === 'number'\n                            ? tasks.splice(0, payload)\n                            : tasks.splice(0, tasks.length);\n\n                var ds = _map(ts, function (task) {\n                    return task.data;\n                });\n\n                if(cargo.empty) cargo.empty();\n                working = true;\n                worker(ds, function () {\n                    working = false;\n\n                    var args = arguments;\n                    _each(ts, function (data) {\n                        if (data.callback) {\n                            data.callback.apply(null, args);\n                        }\n                    });\n\n                    process();\n                });\n            },\n            length: function () {\n                return tasks.length;\n            },\n            running: function () {\n                return working;\n            }\n        };\n        return cargo;\n    };\n\n    var _console_fn = function (name) {\n        return function (fn) {\n            var args = Array.prototype.slice.call(arguments, 1);\n            fn.apply(null, args.concat([function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (typeof console !== 'undefined') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _each(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            }]));\n        };\n    };\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        var queues = {};\n        hasher = hasher || function (x) {\n            return x;\n        };\n        var memoized = function () {\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (key in memo) {\n                async.nextTick(function () {\n                    callback.apply(null, memo[key]);\n                });\n            }\n            else if (key in queues) {\n                queues[key].push(callback);\n            }\n            else {\n                queues[key] = [callback];\n                fn.apply(null, args.concat([function () {\n                    memo[key] = arguments;\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                      q[i].apply(null, arguments);\n                    }\n                }]));\n            }\n        };\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    };\n\n    async.unmemoize = function (fn) {\n      return function () {\n        return (fn.unmemoized || fn).apply(null, arguments);\n      };\n    };\n\n    async.times = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.map(counter, iterator, callback);\n    };\n\n    async.timesSeries = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.mapSeries(counter, iterator, callback);\n    };\n\n    async.seq = function (/* functions... */) {\n        var fns = arguments;\n        return function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            async.reduce(fns, args, function (newargs, fn, cb) {\n                fn.apply(that, newargs.concat([function () {\n                    var err = arguments[0];\n                    var nextargs = Array.prototype.slice.call(arguments, 1);\n                    cb(err, nextargs);\n                }]))\n            },\n            function (err, results) {\n                callback.apply(that, [err].concat(results));\n            });\n        };\n    };\n\n    async.compose = function (/* functions... */) {\n      return async.seq.apply(null, Array.prototype.reverse.call(arguments));\n    };\n\n    var _applyEach = function (eachfn, fns /*args...*/) {\n        var go = function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            return eachfn(fns, function (fn, cb) {\n                fn.apply(that, args.concat([cb]));\n            },\n            callback);\n        };\n        if (arguments.length > 2) {\n            var args = Array.prototype.slice.call(arguments, 2);\n            return go.apply(this, args);\n        }\n        else {\n            return go;\n        }\n    };\n    async.applyEach = doParallel(_applyEach);\n    async.applyEachSeries = doSeries(_applyEach);\n\n    async.forever = function (fn, callback) {\n        function next(err) {\n            if (err) {\n                if (callback) {\n                    return callback(err);\n                }\n                throw err;\n            }\n            fn(next);\n        }\n        next();\n    };\n\n    // Node.js\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = async;\n    }\n    // AMD / RequireJS\n    else if (typeof define !== 'undefined' && define.amd) {\n        define([], function () {\n            return async;\n        });\n    }\n    // included directly via <script> tag\n    else {\n        root.async = async;\n    }\n\n}());\n","/**\n * Implements a simple hash code for a string (see\n * https://en.wikipedia.org/wiki/Java_hashCode()).\n *\n * @param {string} The string to return a hash of.\n * @return {Number} the integer hash code of the string.\n */\nfunction integerHash(string) {\n    if (!string) {\n        return 0;\n    }\n\n    let char, hash = 0, i;\n\n    for (i = 0; i < string.length; i++) {\n        char = string.charCodeAt(i);\n        hash += char * Math.pow(31, string.length - 1 - i);\n        hash = Math.abs(hash | 0); // eslint-disable-line no-bitwise\n    }\n\n    return hash;\n}\n\nmodule.exports = { integerHash };\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport Listenable from '../util/Listenable';\n\nimport * as JingleSessionState from './JingleSessionState';\n\nconst logger = getLogger(__filename);\n\n/**\n * JingleSession provides an API to manage a single Jingle session. We will\n * have different implementations depending on the underlying interface used\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\n */\nexport default class JingleSession extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSession</tt>.\n     * @param {string} sid the Jingle session identifier\n     * @param {string} localJid our JID\n     * @param {string} remoteJid the JID of the remote peer\n     * @param {XmppConnection} connection the XMPP connection\n     * @param {Object} mediaConstraints the media constraints object passed to\n     * the PeerConnection onCreateAnswer/Offer as defined by the WebRTC.\n     * @param {Object} iceConfig the ICE servers config object as defined by\n     * the WebRTC. Passed to the PeerConnection's constructor.\n     * @param {boolean} isInitiator indicates if it will be the side which\n     * initiates the session.\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            iceConfig,\n            isInitiator) {\n        super();\n        this.sid = sid;\n        this.localJid = localJid;\n        this.remoteJid = remoteJid;\n        this.connection = connection;\n        this.mediaConstraints = mediaConstraints;\n        this.iceConfig = iceConfig;\n\n        /**\n         * Indicates whether this instance is an initiator or an answerer of\n         * the Jingle session.\n         * @type {boolean}\n         */\n        this.isInitiator = isInitiator;\n\n        /**\n         * Whether to use dripping or not. Dripping is sending trickle\n         * candidates not one-by-one.\n         */\n        this.usedrip = true;\n\n        /**\n         *  When dripping is used, stores ICE candidates which are to be sent.\n         */\n        this.dripContainer = [];\n\n        /**\n         * The chat room instance associated with the session.\n         * @type {ChatRoom}\n         */\n        this.room = null;\n\n        /**\n         * Jingle session state - uninitialized until {@link initialize} is\n         * called @type {JingleSessionState}\n         */\n        this.state = null;\n\n        /**\n         * The RTC service instance\n         * @type {RTC}\n         */\n        this.rtc = null;\n    }\n\n    /**\n     * Returns XMPP address of this session's initiator.\n     * @return {string}\n     */\n    get initiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /**\n     * Returns XMPP address of this session's responder.\n     * @return {string}\n     */\n    get responderJid() {\n        return this.isInitiator ? this.remoteJid : this.localJid;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Prepares this object to initiate a session.\n     * @param {ChatRoom} room the chat room for the conference associated with\n     * this session\n     * @param {RTC} rtc the RTC service instance\n     * @param {object} options - the options, see implementing class's\n     * {@link #doInitialize} description for more details.\n     */\n    initialize(room, rtc, options) {\n        if (this.state !== null) {\n            const errmsg\n                = `attempt to initiate on session ${this.sid}\n                   in state ${this.state}`;\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.room = room;\n        this.rtc = rtc;\n        this.state = JingleSessionState.PENDING;\n        this.doInitialize(options);\n    }\n\n    /**\n     * The implementing class finishes initialization here. Called at the end of\n     * {@link initialize}.\n     * @param {Object} options - The options specific to the implementing class.\n     * @protected\n     */\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Adds the ICE candidates found in the 'contents' array as remote\n     * candidates?\n     * Note: currently only used on transport-info\n     *\n     * @param contents\n     */\n    addIceCandidates(contents) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n\n    /**\n     * Returns current state of this <tt>JingleSession</tt> instance.\n     * @returns {JingleSessionState} the current state of this session instance.\n     */\n    getState() {\n        return this.state;\n    }\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Handles an 'add-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    addSources(contents) {}\n\n    /**\n     * Handles a 'remove-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    removeSources(contents) {}\n\n    /**\n     * Terminates this Jingle session by sending session-terminate\n     * @param success a callback called once the 'session-terminate' packet has\n     * been acknowledged with RESULT.\n     * @param failure a callback called when either timeout occurs or ERROR\n     * response is received.\n     * @param {Object} options\n     * @param {string} [options.reason] XMPP Jingle error condition\n     * @param {string} [options.reasonDescription] some meaningful error message\n     * @param {boolean} [options.requestRestart=false] set to true to ask Jicofo to start a new session one this once is\n     * terminated.\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\n     * sending session-terminate. It may not make sense to send it if the XMPP\n     * connection has been closed already or if the remote peer has disconnected\n     */\n    terminate(success, failure, options) {}\n\n    /**\n     * Handles an offer from the remote peer (prepares to accept a session).\n     * @param jingle the 'jingle' XML element.\n     * @param success callback called when we the incoming session has been\n     * accepted\n     * @param failure callback called when we fail for any reason, will supply\n     * error object with details(which is meant more to be printed to the logger\n     * than analysed in the code, as the error is unrecoverable anyway)\n     */\n    acceptOffer(jingle, success, failure) {}\n\n    /**\n     * Returns the JID of the initiator of the jingle session.\n     */\n    _getInitiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport SignalingLayer from '../../service/RTC/SignalingLayer';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\n * the data from the MUC presence.\n */\nexport default class SignalingLayerImpl extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams. And is used only locally\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        const oldChatRoom = this.chatRoom;\n\n        this.chatRoom = room;\n        if (oldChatRoom) {\n            oldChatRoom.removePresenceListener(\n                'audiomuted', this._audioMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videomuted', this._videoMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videoType', this._videoTypeHandler);\n        }\n        if (room) {\n            // SignalingEvents\n            this._audioMuteHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_MUTED_CHANGED,\n                    from, MediaType.AUDIO, node.value === 'true');\n            };\n            room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n            this._videoMuteHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_MUTED_CHANGED,\n                    from, MediaType.VIDEO, node.value === 'true');\n            };\n            room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n            this._videoTypeHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                    from, node.value);\n            };\n            room.addPresenceListener('videoType', this._videoTypeHandler);\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType) {\n        if (this.chatRoom) {\n            return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\n        }\n        logger.error('Requested peer media info, before room was set');\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * Set an SSRC owner.\n     * @param {number} ssrc an SSRC to be owned\n     * @param {string} endpointId owner's ID (MUC nickname)\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n}\n","\nimport Listenable from '../../modules/util/Listenable';\n\n/**\n * An object that carries the info about specific media type advertised by\n * participant in the signaling channel.\n * @typedef {Object} PeerMediaInfo\n * @property {boolean} muted indicates if the media is currently muted\n * @property {VideoType|undefined} videoType the type of the video if applicable\n */\n\n/**\n * Interface used to expose the information carried over the signaling channel\n * which is not available to the RTC module in the media SDP.\n *\n * @interface SignalingLayer\n */\nexport default class SignalingLayer extends Listenable {\n\n    /**\n     * Obtains the endpoint ID for given SSRC.\n     * @param {number} ssrc the SSRC number.\n     * @return {string|null} the endpoint ID for given media SSRC.\n     */\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given MUC JID.\n     * @param {string} owner the MUC jid of the participant for whom\n     * {@link PeerMediaInfo} will be obtained.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available for given\n     * JID or if the media type given is invalid.\n     */\n    getPeerMediaInfo(owner, mediaType) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n}\n","import { Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n/**\n *  Logs raw stanzas and makes them available for download as JSON\n */\nclass StropheLogger extends ConnectionPlugin {\n    /**\n     *\n     */\n    constructor() {\n        super();\n        this.log = [];\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.rawInput = this.logIncoming.bind(this);\n        this.connection.rawOutput = this.logOutgoing.bind(this);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logIncoming(stanza) {\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logOutgoing(stanza) {\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\n}\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\n\n/**\n *\n */\nexport default class RayoConnectionPlugin extends ConnectionPlugin {\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        this.connection.addHandler(\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onRayo(iq) {\n        logger.info('Rayo IQ', iq);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param to\n     * @param from\n     * @param roomName\n     * @param roomPass\n     * @param focusMucJid\n     */\n    dial(to, from, roomName, roomPass, focusMucJid) {\n        return new Promise((resolve, reject) => {\n            if (!focusMucJid) {\n                reject(new Error('Internal error!'));\n\n                return;\n            }\n            const req = $iq({\n                type: 'set',\n                to: focusMucJid\n            });\n\n            req.c('dial', {\n                xmlns: RAYO_XMLNS,\n                to,\n                from\n            });\n            req.c('header', {\n                name: 'JvbRoomName',\n                value: roomName\n            }).up();\n\n            if (roomPass && roomPass.length) {\n                req.c('header', {\n                    name: 'JvbRoomPassword',\n                    value: roomPass\n                }).up();\n            }\n\n            this.connection.sendIQ(\n                req,\n                result => {\n                    logger.info('Dial result ', result);\n\n                    // eslint-disable-next-line newline-per-chained-call\n                    const resource = $(result).find('ref').attr('uri');\n\n                    this.callResource = resource.substr('xmpp:'.length);\n                    logger.info(`Received call resource: ${this.callResource}`);\n                    resolve();\n                },\n                error => {\n                    logger.info('Dial error ', error);\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    hangup() {\n        return new Promise((resolve, reject) => {\n            if (!this.callResource) {\n                reject(new Error('No call in progress'));\n                logger.warn('No call in progress');\n\n                return;\n            }\n\n            const req = $iq({\n                type: 'set',\n                to: this.callResource\n            });\n\n            req.c('hangup', {\n                xmlns: RAYO_XMLNS\n            });\n\n            this.connection.sendIQ(req, result => {\n                logger.info('Hangup result ', result);\n                this.callResource = null;\n                resolve();\n            }, error => {\n                logger.info('Hangup error ', error);\n                this.callResource = null;\n                reject(new Error('Hangup error '));\n            });\n        });\n    }\n}\n","/* global __filename */\n/**\n * Strophe logger implementation. Logs from level WARN and above.\n */\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * This is the last HTTP error status captured from Strophe debug logs.\n * The purpose of storing it is to distinguish between the network and\n * infrastructure reason for connection being dropped (see connectionHandler in\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\n * which means that the failure could be transient.\n *\n * FIXME in the latest Strophe (not released on npm) there is API to handle\n * particular HTTP errors, but there is no way to learn if the subsequent\n * request succeeded in order to tell if the error was one time incident or if\n * it was the reason for dropping the connection by Strophe (the connection is\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\n * details about the reason on why the connection stopped.\n *\n * @type {number}\n */\nlet lastErrorStatus = -1;\n\n/**\n * A regular expression used to catch Strophe's log message indicating that the\n * last BOSH request was successful. When there is such message seen the\n * {@link lastErrorStatus} will be set back to '-1'.\n * @type {RegExp}\n */\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\n\n/**\n * A regular expression used to capture the current value of the BOSH request\n * error status (HTTP error code or '0' or something else).\n * @type {RegExp}\n */\nconst lastErrorStatusRegExpr\n    = /request errored, status: (\\d+), number of errors: \\d+/;\n\n/**\n *\n */\nexport default function() {\n\n    Strophe.log = function(level, msg) {\n        // Our global handler reports uncaught errors to the stats which may\n        // interpret those as partial call failure.\n        // Strophe log entry about secondary request timeout does not mean that\n        // it's a final failure(the request will be restarted), so we lower it's\n        // level here to a warning.\n        logger.trace('Strophe', level, msg);\n        if (typeof msg === 'string'\n                && msg.indexOf('Request ') !== -1\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\n            // eslint-disable-next-line no-param-reassign\n            level = Strophe.LogLevel.WARN;\n        }\n\n        /* eslint-disable no-case-declarations */\n        switch (level) {\n        case Strophe.LogLevel.DEBUG:\n            // The log message which reports successful status is logged on\n            // Strophe's DEBUG level.\n            if (lastErrorStatus !== -1\n                    && resetLastErrorStatusRegExpr.test(msg)) {\n                logger.debug('Reset lastErrorStatus');\n                lastErrorStatus = -1;\n            }\n            break;\n        case Strophe.LogLevel.WARN:\n            logger.warn(`Strophe: ${msg}`);\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\n\n            if (errStatusCapture && errStatusCapture.length === 2) {\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\n            }\n            break;\n        case Strophe.LogLevel.ERROR:\n        case Strophe.LogLevel.FATAL:\n            // eslint-disable-next-line no-param-reassign\n            msg = `Strophe: ${msg}`;\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\n            logger.error(msg);\n            break;\n        }\n\n        /* eslint-enable no-case-declarations */\n    };\n\n    /**\n     * Returns error status (HTTP error code) of the last BOSH request.\n     *\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\n     * (this is a hack).\n     */\n    Strophe.getLastErrorStatus = function() {\n        return lastErrorStatus;\n    };\n\n    Strophe.getStatusString = function(status) {\n        switch (status) {\n        case Strophe.Status.BINDREQUIRED:\n            return 'BINDREQUIRED';\n        case Strophe.Status.ERROR:\n            return 'ERROR';\n        case Strophe.Status.CONNECTING:\n            return 'CONNECTING';\n        case Strophe.Status.CONNFAIL:\n            return 'CONNFAIL';\n        case Strophe.Status.AUTHENTICATING:\n            return 'AUTHENTICATING';\n        case Strophe.Status.AUTHFAIL:\n            return 'AUTHFAIL';\n        case Strophe.Status.CONNECTED:\n            return 'CONNECTED';\n        case Strophe.Status.DISCONNECTED:\n            return 'DISCONNECTED';\n        case Strophe.Status.DISCONNECTING:\n            return 'DISCONNECTING';\n        case Strophe.Status.ATTACHED:\n            return 'ATTACHED';\n        default:\n            return 'unknown';\n        }\n    };\n}\n","\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class handles the codec selection mechanism for the conference based on the config.js settings.\n * The preferred codec is selected based on the settings and the list of codecs supported by the browser.\n * The preferred codec is published in presence which is then used by the other endpoints in the\n * conference to pick a supported codec at join time and when the call transitions between p2p and jvb\n * connections.\n */\nexport class CodecSelection {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance\n     * @param {*} options\n     * @param {string} options.disabledCodec the codec that needs to be disabled.\n     * @param {boolean} options.enforcePreferredCodec whether codec preference has to be\n     * enforced even when an endpoints that doesn't support the preferred codec joins the call.\n     * Falling back to the standard codec will be skipped when this option is true, endpoints\n     * that do not support the preferred codec may not be able to encode/decode video when this happens.\n     * @param {string} options.jvbCodec the codec that is preferred on jvb connection.\n     * @param {string} options.p2pCodec the codec that is preferred on p2p connection.\n     */\n    constructor(conference, options) {\n        this.conference = conference;\n        this.options = options;\n\n        // VP8 cannot be disabled and it will be the default codec when no preference is set.\n        this.disabledCodec = options.disabledCodec === CodecMimeType.VP8\n            ? undefined\n            : this._getCodecMimeType(options.disabledCodec);\n\n        // Check if the codec values passed are valid.\n        const jvbCodec = this._getCodecMimeType(options.jvbCodec);\n        const p2pCodec = this._getCodecMimeType(options.p2pCodec);\n\n        this.jvbPreferredCodec = jvbCodec && this._isCodecSupported(jvbCodec) ? jvbCodec : CodecMimeType.VP8;\n        this.p2pPreferredCodec = p2pCodec && this._isCodecSupported(p2pCodec) ? p2pCodec : CodecMimeType.VP8;\n        logger.debug(`Codec preferences for the conference are JVB: ${this.jvbPreferredCodec},\n            P2P: ${this.p2pPreferredCodec}`);\n\n        // Do not prefer VP9 on Firefox because of the following bug.\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1633876\n        if (browser.isFirefox() && this.jvbPreferredCodec === CodecMimeType.VP9) {\n            this.jvbPreferredCodec = CodecMimeType.VP8;\n        }\n\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStared(session));\n    }\n\n    /**\n     * Checks if a given string is a valid video codec mime type.\n     *\n     * @param {string} codec the codec string that needs to be validated.\n     * @returns {CodecMimeType|null} mime type if valid, null otherwise.\n     * @private\n     */\n    _getCodecMimeType(codec) {\n        if (typeof codec === 'string') {\n            return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks if the given codec is supported by the browser.\n     *\n     * @param {CodecMimeType} preferredCodec codec to be checked.\n     * @returns {boolean} true if the given codec is supported, false otherwise.\n     * @private\n     */\n    _isCodecSupported(preferredCodec) {\n        // Skip the check on FF and RN because they do not support the getCapabilities API.\n        // It is safe to assume both of them support all the codecs supported by Chrome.\n        if (browser.isFirefox() || browser.isReactNative()) {\n            return true;\n        }\n\n        return window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('video').codecs\n            .some(codec => codec.mimeType.toLowerCase() === `video/${preferredCodec}`);\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents._MEDIA_SESSION_STARTED} event. Codecs need to be\n     * configured on the media session that is newly created.\n     *\n     * @param {JingleSessionPC} mediaSession media session that started.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStared(mediaSession) {\n        const preferredCodec = mediaSession.isP2P ? this.p2pPreferredCodec : this.jvbPreferredCodec;\n        const disabledCodec = this.disabledCodec && this._isCodecSupported(this.disabledCodec)\n            ? this.disabledCodec\n            : null;\n\n        this._selectPreferredCodec(mediaSession, preferredCodec, disabledCodec);\n    }\n\n    /**\n     * Sets the codec on the media session based on the preferred codec setting and the supported codecs\n     * published by the remote participants in their presence.\n     *\n     * @param {JingleSessionPC} mediaSession session for which the codec selection has to be made.\n     * @param {CodecMimeType} preferredCodec preferred codec.\n     * @param {CodecMimeType} disabledCodec codec that needs to be disabled.\n     */\n    _selectPreferredCodec(mediaSession = null, preferredCodec = null, disabledCodec = null) {\n        const session = mediaSession ? mediaSession : this.conference.jvbJingleSession;\n        const codec = preferredCodec ? preferredCodec : this.jvbPreferredCodec;\n        let selectedCodec = codec;\n\n        if (session && !session.isP2P && !this.options.enforcePreferredCodec) {\n            const remoteParticipants = this.conference.getParticipants().map(participant => participant.getId());\n\n            for (const remote of remoteParticipants) {\n                const peerMediaInfo = session.signalingLayer.getPeerMediaInfo(remote, MediaType.VIDEO);\n\n                if (peerMediaInfo && peerMediaInfo.codecType && peerMediaInfo.codecType !== codec) {\n                    selectedCodec = peerMediaInfo.codecType;\n                }\n            }\n        }\n        session && session.setVideoCodecs(selectedCodec, disabledCodec);\n    }\n\n    /**\n     * Returns the preferred codec for the conference. The preferred codec for the JVB media session\n     * is the one that gets published in presence and a comparision is made whenever a participant joins\n     * or leaves the call.\n     *\n     * @returns {CodecMimeType} preferred codec.\n     */\n    getPreferredCodec() {\n        return this.jvbPreferredCodec;\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createBridgeChannelClosedEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\n * with the videobridge.\n */\nexport default class BridgeChannel {\n    /**\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\n     * instance, or creates a WebSocket connection with the videobridge.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     * @param {EventEmitter} emitter the EventEmitter instance to use for event emission.\n     */\n    constructor(peerconnection, wsUrl, emitter) {\n        if (!peerconnection && !wsUrl) {\n            throw new TypeError('At least peerconnection or wsUrl must be given');\n        } else if (peerconnection && wsUrl) {\n            throw new TypeError('Just one of peerconnection or wsUrl must be given');\n        }\n\n        if (peerconnection) {\n            logger.debug('constructor() with peerconnection');\n        } else {\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\n        }\n\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\n        // @type {RTCDataChannel|WebSocket}\n        this._channel = null;\n\n        // @type {EventEmitter}\n        this._eventEmitter = emitter;\n\n        // Whether a RTCDataChannel or WebSocket is internally used.\n        // @type {string} \"datachannel\" / \"websocket\"\n        this._mode = null;\n\n        // Indicates whether the connection retries are enabled or not.\n        this._areRetriesEnabled = false;\n\n        // Indicates whether the connection was closed from the client or not.\n        this._closedFromClient = false;\n\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\n        // event.\n        if (peerconnection) {\n            const datachannel\n                = peerconnection.createDataChannel(\n                    'JVB data channel', {\n                        protocol: 'http://jitsi.org/protocols/colibri'\n                    });\n\n            // Handle the RTCDataChannel.\n            this._handleChannel(datachannel);\n            this._mode = 'datachannel';\n\n        // Otherwise create a WebSocket connection.\n        } else if (wsUrl) {\n            this._areRetriesEnabled = true;\n            this._wsUrl = wsUrl;\n            this._initWebSocket();\n        }\n    }\n\n    /**\n     * Initializes the web socket channel.\n     *\n     * @returns {void}\n     */\n    _initWebSocket() {\n        // Create a WebSocket instance.\n        const ws = new WebSocket(this._wsUrl);\n\n        // Handle the WebSocket.\n        this._handleChannel(ws);\n        this._mode = 'websocket';\n    }\n\n    /**\n     * Starts the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _startConnectionRetries() {\n        let timeoutS = 1;\n\n        const reload = () => {\n            if (this.isOpen()) {\n                return;\n            }\n            this._initWebSocket(this._wsUrl);\n            timeoutS = Math.min(timeoutS * 2, 60);\n            this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n        };\n\n        this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n    }\n\n    /**\n     * Stops the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _stopConnectionRetries() {\n        if (this._retryTimeout) {\n            clearTimeout(this._retryTimeout);\n            this._retryTimeout = undefined;\n        }\n    }\n\n    /**\n     * Retries to establish the websocket connection after the connection was closed by the server.\n     *\n     * @param {CloseEvent} closeEvent - The close event that triggered the retries.\n     * @returns {void}\n     */\n    _retryWebSocketConnection(closeEvent) {\n        if (!this._areRetriesEnabled) {\n            return;\n        }\n        const { code, reason } = closeEvent;\n\n        Statistics.sendAnalytics(createBridgeChannelClosedEvent(code, reason));\n        this._areRetriesEnabled = false;\n        this._eventEmitter.once(RTCEvents.DATA_CHANNEL_OPEN, () => {\n            this._stopConnectionRetries();\n            this._areRetriesEnabled = true;\n        });\n        this._startConnectionRetries();\n    }\n\n    /**\n     * The channel mode.\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    /**\n     * Closes the currently opened channel.\n     */\n    close() {\n        this._closedFromClient = true;\n        this._stopConnectionRetries();\n        this._areRetriesEnabled = false;\n        if (this._channel) {\n            try {\n                this._channel.close();\n            } catch (error) {} // eslint-disable-line no-empty\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\n     * open.\n     * @return {boolean}\n     */\n    isOpen() {\n        return this._channel && (this._channel.readyState === 'open'\n            || this._channel.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * Sends local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        this._send({\n            colibriClass: 'EndpointStats',\n            ...payload\n        });\n    }\n\n    /**\n     * Sends message via the channel.\n     * @param {string} to The id of the endpoint that should receive the\n     * message. If \"\" the message will be sent to all participants.\n     * @param  {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendMessage(to, payload) {\n        this._send({\n            colibriClass: 'EndpointMessage',\n            msgPayload: payload,\n            to\n        });\n    }\n\n    /**\n     * Sends a \"lastN value changed\" message via the channel.\n     * @param {number} value The new value for lastN. -1 means unlimited.\n     */\n    sendSetLastNMessage(value) {\n        logger.log(`Sending lastN=${value}.`);\n\n        this._send({\n            colibriClass: 'LastNChangedEvent',\n            lastN: value\n        });\n    }\n\n    /**\n     * Sends a \"selected endpoints changed\" message via the channel.\n     *\n     * @param {Array<string>} endpointIds - The ids of the selected endpoints.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendSelectedEndpointsMessage(endpointIds) {\n        logger.log(`Sending selected endpoints: ${endpointIds}.`);\n\n        this._send({\n            colibriClass: 'SelectedEndpointsChangedEvent',\n            selectedEndpoints: endpointIds\n        });\n    }\n\n    /**\n     * Sends a \"receiver video constraint\" message via the channel.\n     * @param {Number} maxFrameHeightPixels the maximum frame height,\n     * in pixels, this receiver is willing to receive\n     */\n    sendReceiverVideoConstraintMessage(maxFrameHeightPixels) {\n        logger.log(`Sending ReceiverVideoConstraint with maxFrameHeight=${maxFrameHeightPixels}px`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraint',\n            maxFrameHeight: maxFrameHeightPixels\n        });\n    }\n\n    /**\n     * Sends a 'ReceiverVideoConstraints' message via the bridge channel.\n     *\n     * @param {ReceiverVideoConstraints} constraints video constraints.\n     */\n    sendNewReceiverVideoConstraintsMessage(constraints) {\n        logger.log(`Sending ReceiverVideoConstraints with ${JSON.stringify(constraints)}`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraints',\n            ...constraints\n        });\n    }\n\n    /**\n     * Sends a 'VideoTypeMessage' message via the bridge channel.\n     *\n     * @param {string} videoType 'camera', 'desktop' or 'none'.\n     */\n    sendVideoTypeMessage(videoType) {\n        logger.debug(`Sending VideoTypeMessage with video type as ${videoType}`);\n        this._send({\n            colibriClass: 'VideoTypeMessage',\n            videoType\n        });\n    }\n\n    /**\n     * Set events on the given RTCDataChannel or WebSocket instance.\n     */\n    _handleChannel(channel) {\n        const emitter = this._eventEmitter;\n\n        channel.onopen = () => {\n            logger.info(`${this._mode} channel opened`);\n\n            // Code sample for sending string and/or binary data.\n            // Sends string message to the bridge:\n            //     channel.send(\"Hello bridge!\");\n            // Sends 12 bytes binary message to the bridge:\n            //     channel.send(new ArrayBuffer(12));\n\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\n        };\n\n        channel.onerror = event => {\n            // WS error events contain no information about the failure (this is available in the onclose event) and\n            // the event references the WS object itself, which causes hangs on mobile.\n            if (this._mode !== 'websocket') {\n                logger.error(`Channel error: ${event.message}`);\n            }\n        };\n\n        channel.onmessage = ({ data }) => {\n            // JSON object.\n            let obj;\n\n            try {\n                obj = JSON.parse(data);\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Failed to parse channel message as JSON: ', data, error);\n\n                return;\n            }\n\n            const colibriClass = obj.colibriClass;\n\n            switch (colibriClass) {\n            case 'DominantSpeakerEndpointChangeEvent': {\n                const { dominantSpeakerEndpoint, previousSpeakers = [] } = obj;\n\n                logger.debug(`Dominant speaker: ${dominantSpeakerEndpoint}, previous speakers: ${previousSpeakers}`);\n                emitter.emit(RTCEvents.DOMINANT_SPEAKER_CHANGED, dominantSpeakerEndpoint, previousSpeakers);\n                break;\n            }\n            case 'EndpointConnectivityStatusChangeEvent': {\n                const endpoint = obj.endpoint;\n                const isActive = obj.active === 'true';\n\n                logger.info(`Endpoint connection status changed: ${endpoint} active=${isActive}`);\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED, endpoint, isActive);\n\n                break;\n            }\n            case 'EndpointMessage': {\n                emitter.emit(RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from, obj.msgPayload);\n\n                break;\n            }\n            case 'EndpointStats': {\n                emitter.emit(RTCEvents.ENDPOINT_STATS_RECEIVED, obj.from, obj);\n\n                break;\n            }\n            case 'LastNEndpointsChangeEvent': {\n                // The new/latest list of last-n endpoint IDs (i.e. endpoints for which the bridge is sending video).\n                const lastNEndpoints = obj.lastNEndpoints;\n\n                logger.info(`New forwarded endpoints: ${lastNEndpoints}`);\n                emitter.emit(RTCEvents.LASTN_ENDPOINT_CHANGED, lastNEndpoints);\n\n                break;\n            }\n            case 'SenderVideoConstraints': {\n                const videoConstraints = obj.videoConstraints;\n\n                if (videoConstraints) {\n                    logger.info(`SenderVideoConstraints: ${JSON.stringify(videoConstraints)}`);\n                    emitter.emit(RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, videoConstraints);\n                }\n                break;\n            }\n            case 'ServerHello': {\n                logger.info(`Received ServerHello, version=${obj.version}.`);\n                break;\n            }\n            default: {\n                logger.debug('Channel JSON-formatted message: ', obj);\n\n                // The received message appears to be appropriately formatted\n                // (i.e. is a JSON object which assigns a value to the\n                // mandatory property colibriClass) so don't just swallow it,\n                // expose it to public consumption.\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\n            }\n            }\n        };\n\n        channel.onclose = event => {\n            logger.info(`Channel closed by ${this._closedFromClient ? 'client' : 'server'}`);\n\n            if (this._mode === 'websocket') {\n                if (!this._closedFromClient) {\n                    logger.error(`Channel closed: ${event.code} ${event.reason}`);\n                    this._retryWebSocketConnection(event);\n                }\n            }\n\n            // Remove the channel.\n            this._channel = null;\n        };\n\n        // Store the channel.\n        this._channel = channel;\n    }\n\n    /**\n     * Sends passed object via the channel.\n     * @param {object} jsonObject The object that will be sent.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    _send(jsonObject) {\n        const channel = this._channel;\n\n        if (!this.isOpen()) {\n            logger.error('Bridge Channel send: no opened channel.');\n            throw new Error('No opened channel');\n        }\n\n        channel.send(JSON.stringify(jsonObject));\n    }\n}\n","/* global __filename, RTCSessionDescription */\n\nimport { Interop } from '@jitsi/sdp-interop';\nimport { getLogger } from 'jitsi-meet-logger';\nimport transform from 'sdp-transform';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport * as VideoType from '../../service/RTC/VideoType';\nimport browser from '../browser';\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport RtxModifier from '../xmpp/RtxModifier';\nimport SDP from '../xmpp/SDP';\nimport SDPUtil from '../xmpp/SDPUtil';\nimport SdpConsistency from '../xmpp/SdpConsistency';\nimport { SdpTransformWrap } from '../xmpp/SdpTransformUtil';\n\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\nimport LocalSdpMunger from './LocalSdpMunger';\nimport RTC from './RTC';\nimport RTCUtils from './RTCUtils';\nimport { SIM_LAYER_RIDS, TPCUtils } from './TPCUtils';\n\n// FIXME SDP tools should end up in some kind of util module\n\nconst logger = getLogger(__filename);\nconst DEGRADATION_PREFERENCE_CAMERA = 'maintain-framerate';\nconst DEGRADATION_PREFERENCE_DESKTOP = 'maintain-resolution';\nconst DESKTOP_SHARE_RATE = 500000;\nconst HD_BITRATE = 2500000;\nconst LD_BITRATE = 200000;\nconst SD_BITRATE = 700000;\n\n/* eslint-disable max-params */\n\n/**\n * Creates new instance of 'TraceablePeerConnection'.\n *\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\n * @param {number} id the peer connection id assigned by the parent RTC module.\n * @param {SignalingLayer} signalingLayer the signaling layer instance\n * @param {object} iceConfig WebRTC 'PeerConnection' ICE config\n * @param {object} constraints WebRTC 'PeerConnection' constraints\n * @param {boolean} isP2P indicates whether or not the new instance will be used\n * in a peer to peer connection\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n * @param {boolean} options.disableSimulcast if set to 'true' will disable\n * the simulcast.\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX\n * @param {boolean} options.capScreenshareBitrate if set to 'true' simulcast will\n * be disabled for screenshare and a max bitrate of 500Kbps will applied on the\n * stream.\n * @param {string} options.disabledCodec the mime type of the code that should\n * not be negotiated on the peerconnection.\n * @param {boolean} options.disableH264 If set to 'true' H264 will be\n *      disabled by removing it from the SDP (deprecated)\n * @param {boolean} options.preferH264 if set to 'true' H264 will be preferred\n * over other video codecs. (deprecated)\n * @param {string} options.preferredCodec the mime type of the codec that needs\n * to be made the preferred codec for the connection.\n * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n *\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\n * debug the peer connection. Since many other responsibilities have been added\n * it would make sense to extract a separate class from it and come up with\n * a more suitable name.\n *\n * @constructor\n */\nexport default function TraceablePeerConnection(\n        rtc,\n        id,\n        signalingLayer,\n        iceConfig,\n        constraints,\n        isP2P,\n        options) {\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.audioTransferActive = !(options.startSilent === true);\n\n    /**\n     * The DTMF sender instance used to send DTMF tones.\n     *\n     * @type {RTCDTMFSender|undefined}\n     * @private\n     */\n    this._dtmfSender = undefined;\n\n    /**\n     * @typedef {Object} TouchToneRequest\n     * @property {string} tones - The DTMF tones string as defined by\n     * {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n     * @property {number} duration - The amount of time in milliseconds that\n     * each DTMF should last.\n     * @property {string} interToneGap - The length of time in miliseconds to\n     * wait between tones.\n     */\n    /**\n     * TouchToneRequests which are waiting to be played. This queue is filled\n     * if there are touch tones currently being played.\n     *\n     * @type {Array<TouchToneRequest>}\n     * @private\n     */\n    this._dtmfTonesQueue = [];\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.videoTransferActive = true;\n\n    /**\n     * The parent instance of RTC service which created this\n     * <tt>TracablePeerConnection</tt>.\n     * @type {RTC}\n     */\n    this.rtc = rtc;\n\n    /**\n     * The peer connection identifier assigned by the RTC module.\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Indicates whether or not this instance is used in a peer to peer\n     * connection.\n     * @type {boolean}\n     */\n    this.isP2P = isP2P;\n\n    // FIXME: We should support multiple streams per jid.\n    /**\n     * The map holds remote tracks associated with this peer connection.\n     * It maps user's JID to media type and remote track\n     * (one track per media type per user's JID).\n     * @type {Map<string, Map<MediaType, JitsiRemoteTrack>>}\n     */\n    this.remoteTracks = new Map();\n\n    /**\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, JitsiLocalTrack>}\n     */\n    this.localTracks = new Map();\n\n    /**\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\n     * the underlying WebRTC PeerConnection.\n     * @type {Array}\n     * @private\n     */\n    this._addedStreams = [];\n\n    /**\n     * @typedef {Object} TPCGroupInfo\n     * @property {string} semantics the SSRC groups semantics\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\n     * on...\n     */\n    /**\n     * @typedef {Object} TPCSSRCInfo\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\n     * groups\n     */\n    /**\n     * Holds the info about local track's SSRCs mapped per their\n     * {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, TPCSSRCInfo>}\n     */\n    this.localSSRCs = new Map();\n\n    /**\n     * The local ICE username fragment for this session.\n     */\n    this.localUfrag = null;\n\n    /**\n     * The remote ICE username fragment for this session.\n     */\n    this.remoteUfrag = null;\n\n    /**\n     * The signaling layer which operates this peer connection.\n     * @type {SignalingLayer}\n     */\n    this.signalingLayer = signalingLayer;\n\n    // SignalingLayer listeners\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n        this._peerVideoTypeChanged);\n\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_MUTED_CHANGED,\n        this._peerMutedChanged);\n    this.options = options;\n\n    // Make sure constraints is properly formatted in order to provide information about whether or not this\n    // connection is P2P to rtcstats.\n    const safeConstraints = constraints || {};\n\n    safeConstraints.optional = safeConstraints.optional || [];\n\n    // The `optional` parameter needs to be of type array, otherwise chrome will throw an error.\n    // Firefox and Safari just ignore it.\n    if (Array.isArray(safeConstraints.optional)) {\n        safeConstraints.optional.push({ rtcStatsSFUP2P: this.isP2P });\n    } else {\n        logger.warn('Optional param is not an array, rtcstats p2p data is omitted.');\n    }\n\n    this.peerconnection\n        = new RTCUtils.RTCPeerConnectionType(iceConfig, safeConstraints);\n\n    // The standard video bitrates are used in Unified plan when switching\n    // between camera/desktop tracks on the same sender.\n    const standardVideoBitrates = {\n        low: LD_BITRATE,\n        standard: SD_BITRATE,\n        high: HD_BITRATE\n    };\n\n    // Check if the max. bitrates for video are specified through config.js videoQuality settings.\n    // These bitrates will be applied on all browsers for camera sources in both simulcast and p2p mode.\n    this.videoBitrates = this.options.videoQuality && this.options.videoQuality.maxBitratesVideo\n        ? this.options.videoQuality.maxBitratesVideo\n        : standardVideoBitrates;\n\n    this.tpcUtils = new TPCUtils(this, this.videoBitrates);\n    this.updateLog = [];\n    this.stats = {};\n    this.statsinterval = null;\n\n    /**\n     * @type {number} The max number of stats to keep in this.stats. Limit to\n     * 300 values, i.e. 5 minutes; set to 0 to disable\n     */\n    this.maxstats = options.maxstats;\n\n    this.interop = new Interop();\n    const Simulcast = require('@jitsi/sdp-simulcast');\n\n    this.simulcast = new Simulcast(\n        {\n            numOfLayers: SIM_LAYER_RIDS.length,\n            explodeRemoteSimulcast: false,\n            usesUnifiedPlan: browser.usesUnifiedPlan()\n        });\n    this.sdpConsistency = new SdpConsistency(this.toString());\n\n    /**\n     * Munges local SDP provided to the Jingle Session in order to prevent from\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\n     * @type {LocalSdpMunger}\n     */\n    this.localSdpMunger = new LocalSdpMunger(this);\n\n    /**\n     * TracablePeerConnection uses RTC's eventEmitter\n     * @type {EventEmitter}\n     */\n    this.eventEmitter = rtc.eventEmitter;\n    this.rtxModifier = new RtxModifier();\n\n    /**\n     * The height constraint applied on the video sender.\n     */\n    this.senderVideoMaxHeight = null;\n\n    // override as desired\n    this.trace = (what, info) => {\n        logger.debug(what, info);\n\n        this.updateLog.push({\n            time: new Date(),\n            type: what,\n            value: info || ''\n        });\n    };\n    this.onicecandidate = null;\n    this.peerconnection.onicecandidate = event => {\n        this.trace(\n            'onicecandidate',\n            JSON.stringify(event.candidate, null, ' '));\n\n        if (this.onicecandidate !== null) {\n            this.onicecandidate(event);\n        }\n    };\n\n    // Use stream events in plan-b and track events in unified plan.\n    if (browser.usesPlanB()) {\n        this.peerconnection.onaddstream\n            = event => this._remoteStreamAdded(event.stream);\n        this.peerconnection.onremovestream\n            = event => this._remoteStreamRemoved(event.stream);\n    } else {\n        this.peerconnection.ontrack = event => {\n            const stream = event.streams[0];\n\n            this._remoteTrackAdded(stream, event.track, event.transceiver);\n            stream.onremovetrack = evt => {\n                this._remoteTrackRemoved(stream, evt.track);\n            };\n        };\n    }\n    this.onsignalingstatechange = null;\n    this.peerconnection.onsignalingstatechange = event => {\n        this.trace('onsignalingstatechange', this.signalingState);\n        if (this.onsignalingstatechange !== null) {\n            this.onsignalingstatechange(event);\n        }\n    };\n    this.oniceconnectionstatechange = null;\n    this.peerconnection.oniceconnectionstatechange = event => {\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\n        if (this.oniceconnectionstatechange !== null) {\n            this.oniceconnectionstatechange(event);\n        }\n    };\n    this.onnegotiationneeded = null;\n    this.peerconnection.onnegotiationneeded = event => {\n        this.trace('onnegotiationneeded');\n        if (this.onnegotiationneeded !== null) {\n            this.onnegotiationneeded(event);\n        }\n    };\n    this.ondatachannel = null;\n    this.peerconnection.ondatachannel = event => {\n        this.trace('ondatachannel');\n        if (this.ondatachannel !== null) {\n            this.ondatachannel(event);\n        }\n    };\n\n    if (this.maxstats) {\n        this.statsinterval = window.setInterval(() => {\n            this.getStats(stats => {\n                if (stats.result\n                    && typeof stats.result === 'function') {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n\n                        res.names().forEach(name => {\n                            this._processStat(res, name, res.stat(name));\n                        });\n                    }\n                } else {\n                    stats.forEach(r => this._processStat(r, '', r));\n                }\n            });\n        }, 1000);\n    }\n\n    logger.info(`Create new ${this}`);\n}\n\n/* eslint-enable max-params */\n\n/**\n * Process stat and adds it to the array of stats we store.\n * @param report the current stats report.\n * @param name the name of the report, if available\n * @param statValue the value to add.\n * @private\n */\nTraceablePeerConnection.prototype._processStat\n    = function(report, name, statValue) {\n        const id = `${report.id}-${name}`;\n        let s = this.stats[id];\n        const now = new Date();\n\n        if (!s) {\n            this.stats[id] = s = {\n                startTime: now,\n                endTime: now,\n                values: [],\n                times: []\n            };\n        }\n        s.values.push(statValue);\n        s.times.push(now.getTime());\n        if (s.values.length > this.maxstats) {\n            s.values.shift();\n            s.times.shift();\n        }\n        s.endTime = now;\n    };\n\n/**\n * Returns a string representation of a SessionDescription object.\n */\nconst dumpSDP = function(description) {\n    if (typeof description === 'undefined' || description === null) {\n        return '';\n    }\n\n    return `type: ${description.type}\\r\\n${description.sdp}`;\n};\n\n\n/**\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\n * succeeded and is up and running. We never see \"completed\" state for\n * the JVB connection, but it started appearing for the P2P one. This method\n * allows to adapt old logic to this new situation.\n * @return {string}\n */\nTraceablePeerConnection.prototype.getConnectionState = function() {\n    const state = this.peerconnection.iceConnectionState;\n\n    if (state === 'completed') {\n        return 'connected';\n    }\n\n    return state;\n};\n\n/**\n * Obtains the media direction for given {@link MediaType}. The method takes\n * into account whether or not there are any local tracks for media and\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\n * @param {MediaType} mediaType\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\n * etc.) which should be used when setting local description on the peer\n * connection.\n * @private\n */\nTraceablePeerConnection.prototype._getDesiredMediaDirection = function(\n        mediaType) {\n    let mediaTransferActive = true;\n\n    if (mediaType === MediaType.AUDIO) {\n        mediaTransferActive = this.audioTransferActive;\n    } else if (mediaType === MediaType.VIDEO) {\n        mediaTransferActive = this.videoTransferActive;\n    }\n    if (mediaTransferActive) {\n        return this.hasAnyTracksOfType(mediaType) ? 'sendrecv' : 'recvonly';\n    }\n\n    return 'inactive';\n};\n\n/**\n * Returns the list of RTCRtpReceivers created for the source of the given media type associated with\n * the set of remote endpoints specified.\n * @param {Array<string>} endpoints list of the endpoints\n * @param {string} mediaType 'audio' or 'video'\n * @returns {Array<RTCRtpReceiver>} list of receivers created by the peerconnection.\n */\nTraceablePeerConnection.prototype._getReceiversByEndpointIds = function(endpoints, mediaType) {\n    let remoteTracks = [];\n    let receivers = [];\n\n    for (const endpoint of endpoints) {\n        remoteTracks = remoteTracks.concat(this.getRemoteTracks(endpoint, mediaType));\n    }\n\n    // Get the ids of the MediaStreamTracks associated with each of these remote tracks.\n    const remoteTrackIds = remoteTracks.map(remote => remote.track?.id);\n\n    receivers = this.peerconnection.getReceivers()\n        .filter(receiver => receiver.track\n            && receiver.track.kind === mediaType\n            && remoteTrackIds.find(trackId => trackId === receiver.track.id));\n\n    return receivers;\n};\n\n/**\n * Tells whether or not this TPC instance is using Simulcast.\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\n * <tt>false</tt> if it's turned off.\n */\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\n    return !this.options.disableSimulcast;\n};\n\n/**\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n * @private\n */\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(\n        endpointId,\n        videoType) {\n    // Check if endpointId has a value to avoid action on random track\n    if (!endpointId) {\n        logger.error(`No endpointID on peerVideoTypeChanged ${this}`);\n\n        return;\n    }\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\n\n    if (videoTrack.length) {\n        // NOTE 1 track per media type is assumed\n        videoTrack[0]._setVideoType(videoType);\n    }\n};\n\n/**\n * Handles remote track mute / unmute events.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new mute state\n * @private\n */\nTraceablePeerConnection.prototype._peerMutedChanged = function(\n        endpointId,\n        mediaType,\n        isMuted) {\n    // Check if endpointId is a value to avoid doing action on all remote tracks\n    if (!endpointId) {\n        logger.error('On peerMuteChanged - no endpoint ID');\n\n        return;\n    }\n    const track = this.getRemoteTracks(endpointId, mediaType);\n\n    if (track.length) {\n        // NOTE 1 track per media type is assumed\n        track[0].setMute(isMuted);\n    }\n};\n\n/**\n * Obtains audio levels of the remote audio tracks by getting the source information on the RTCRtpReceivers.\n * The information relevant to the ssrc is updated each time a RTP packet constaining the ssrc is received.\n * @param {Array<string>} speakerList list of endpoint ids for which audio levels are to be gathered.\n * @returns {Object} containing ssrc and audio level information as a key-value pair.\n */\nTraceablePeerConnection.prototype.getAudioLevels = function(speakerList = []) {\n    const audioLevels = {};\n    const audioReceivers = speakerList.length\n        ? this._getReceiversByEndpointIds(speakerList, MediaType.AUDIO)\n        : this.peerconnection.getReceivers()\n            .filter(receiver => receiver.track && receiver.track.kind === MediaType.AUDIO && receiver.track.enabled);\n\n    audioReceivers.forEach(remote => {\n        const ssrc = remote.getSynchronizationSources();\n\n        if (ssrc && ssrc.length) {\n            // As per spec, this audiolevel is a value between 0..1 (linear), where 1.0\n            // represents 0 dBov, 0 represents silence, and 0.5 represents approximately\n            // 6 dBSPL change in the sound pressure level from 0 dBov.\n            // https://www.w3.org/TR/webrtc/#dom-rtcrtpcontributingsource-audiolevel\n            audioLevels[ssrc[0].source] = ssrc[0].audioLevel;\n        }\n    });\n\n    return audioLevels;\n};\n\n/**\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\n * argument is omitted the list of all local tracks will be returned.\n * @param {MediaType} [mediaType]\n * @return {Array<JitsiLocalTrack>}\n */\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\n    let tracks = Array.from(this.localTracks.values());\n\n    if (mediaType !== undefined) {\n        tracks = tracks.filter(track => track.getType() === mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Retrieves the local video track.\n *\n * @returns {JitsiLocalTrack|undefined} - local video track.\n */\nTraceablePeerConnection.prototype.getLocalVideoTrack = function() {\n    return this.getLocalTracks(MediaType.VIDEO)[0];\n};\n\n/**\n * Checks whether or not this {@link TraceablePeerConnection} instance contains\n * any local tracks for given <tt>mediaType</tt>.\n * @param {MediaType} mediaType\n * @return {boolean}\n */\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\n    if (!mediaType) {\n        throw new Error('\"mediaType\" is required');\n    }\n\n    return this.getLocalTracks(mediaType).length > 0;\n};\n\n/**\n * Obtains all remote tracks currently known to this PeerConnection instance.\n * @param {string} [endpointId] the track owner's identifier (MUC nickname)\n * @param {MediaType} [mediaType] the remote tracks will be filtered\n * by their media type if this argument is specified.\n * @return {Array<JitsiRemoteTrack>}\n */\nTraceablePeerConnection.prototype.getRemoteTracks = function(\n        endpointId,\n        mediaType) {\n    const remoteTracks = [];\n    const endpoints\n        = endpointId ? [ endpointId ] : this.remoteTracks.keys();\n\n    for (const endpoint of endpoints) {\n        const endpointTrackMap = this.remoteTracks.get(endpoint);\n\n        if (!endpointTrackMap) {\n\n            // Otherwise an empty Map() would have to be allocated above\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n\n        for (const trackMediaType of endpointTrackMap.keys()) {\n            // per media type filtering\n            if (!mediaType || mediaType === trackMediaType) {\n                const mediaTrack = endpointTrackMap.get(trackMediaType);\n\n                if (mediaTrack) {\n                    remoteTracks.push(mediaTrack);\n                }\n            }\n        }\n    }\n\n    return remoteTracks;\n};\n\n/**\n * Parses the remote description and returns the sdp lines of the sources associated with a remote participant.\n *\n * @param {string} id Endpoint id of the remote participant.\n * @returns {Array<string>} The sdp lines that have the ssrc information.\n */\nTraceablePeerConnection.prototype.getRemoteSourceInfoByParticipant = function(id) {\n    const removeSsrcInfo = [];\n    const remoteTracks = this.getRemoteTracks(id);\n\n    if (!remoteTracks?.length) {\n        return removeSsrcInfo;\n    }\n    const primarySsrcs = remoteTracks.map(track => track.getSSRC());\n    const sdp = new SDP(this.remoteDescription.sdp);\n\n    primarySsrcs.forEach((ssrc, idx) => {\n        for (const media of sdp.media) {\n            let lines = '';\n            let ssrcLines = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n            if (ssrcLines.length) {\n                if (!removeSsrcInfo[idx]) {\n                    removeSsrcInfo[idx] = '';\n                }\n\n                // Check if there are any FID groups present for the primary ssrc.\n                const fidLines = SDPUtil.findLines(media, `a=ssrc-group:FID ${ssrc}`);\n\n                if (fidLines.length) {\n                    const secondarySsrc = fidLines[0].split(' ')[2];\n\n                    lines += `${fidLines[0]}\\r\\n`;\n                    ssrcLines = ssrcLines.concat(SDPUtil.findLines(media, `a=ssrc:${secondarySsrc}`));\n                }\n                removeSsrcInfo[idx] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                removeSsrcInfo[idx] += lines;\n            }\n        }\n    });\n\n    return removeSsrcInfo;\n};\n\n/**\n * Returns the target bitrates configured for the local video source.\n *\n * @returns {Object}\n */\nTraceablePeerConnection.prototype.getTargetVideoBitrates = function() {\n    const currentCodec = this.getConfiguredVideoCodec();\n\n    return this.videoBitrates[currentCodec.toUpperCase()] || this.videoBitrates;\n};\n\n/**\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\n * local and remote tracks bound to this instance.\n * @param {number} ssrc\n * @return {JitsiTrack|null}\n */\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\n    if (typeof ssrc !== 'number') {\n        throw new Error(`SSRC ${ssrc} is not a number`);\n    }\n    for (const localTrack of this.localTracks.values()) {\n        if (this.getLocalSSRC(localTrack) === ssrc) {\n            return localTrack;\n        }\n    }\n    for (const remoteTrack of this.getRemoteTracks()) {\n        if (remoteTrack.getSSRC() === ssrc) {\n            return remoteTrack;\n        }\n    }\n\n    return null;\n};\n\n/**\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\n * both local and remote tracks bound to this instance.\n * @param {string} id\n * @return {number|null}\n */\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\n\n    const findTrackById = track => track.getTrack().id === id;\n    const localTrack = this.getLocalTracks().find(findTrackById);\n\n    if (localTrack) {\n        return this.getLocalSSRC(localTrack);\n    }\n\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\n\n    if (remoteTrack) {\n        return remoteTrack.getSSRC();\n    }\n\n    return null;\n};\n\n/**\n * Called when new remote MediaStream is added to the PeerConnection.\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\n */\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\n    const streamId = RTC.getStreamID(stream);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(\n            `${this} ignored remote 'stream added' event for non-user stream`\n             + `id: ${streamId}`);\n\n        return;\n    }\n\n    // Bind 'addtrack'/'removetrack' event handlers\n    if (browser.isChromiumBased()) {\n        stream.onaddtrack = event => {\n            this._remoteTrackAdded(stream, event.track);\n        };\n        stream.onremovetrack = event => {\n            this._remoteTrackRemoved(stream, event.track);\n        };\n    }\n\n    // Call remoteTrackAdded for each track in the stream\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackAdded(stream, audioTrack);\n    }\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackAdded(stream, videoTrack);\n    }\n};\n\n\n/**\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\n * handle streams on per track basis). Finds the owner and the SSRC for\n * the track and passes that to ChatRoom for further processing.\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\n * the parent of the track\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\n * participant.\n * @param {RTCRtpTransceiver} transceiver the WebRTC transceiver that is created\n * for the remote participant in unified plan.\n */\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track, transceiver = null) {\n    const streamId = RTC.getStreamID(stream);\n    const mediaType = track.kind;\n\n    if (!this.isP2P && !RTC.isUserStreamById(streamId)) {\n        logger.info(\n            `${this} ignored remote 'stream added' event for non-user stream`\n             + `id: ${streamId}`);\n\n        return;\n    }\n    logger.info(`${this} remote track added:`, streamId, mediaType);\n\n    // look up an associated JID for a stream id\n    if (!mediaType) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `MediaType undefined for remote track, stream id: ${streamId}`\n            ));\n\n        // Abort\n        return;\n    }\n\n    const remoteSDP = browser.usesPlanB()\n        ? new SDP(this.remoteDescription.sdp)\n        : new SDP(this.peerconnection.remoteDescription.sdp);\n    let mediaLines;\n\n    if (browser.usesUnifiedPlan()) {\n        if (transceiver && transceiver.mid) {\n            const mid = transceiver.mid;\n\n            mediaLines = remoteSDP.media.filter(mls => SDPUtil.findLine(mls, `a=mid:${mid}`));\n        } else {\n            mediaLines = remoteSDP.media.filter(mls => {\n                const msid = SDPUtil.findLine(mls, 'a=msid:');\n\n                return typeof msid !== 'undefined' && streamId === msid.substring(7).split(' ')[0];\n            });\n        }\n    } else {\n        mediaLines = remoteSDP.media.filter(mls => mls.startsWith(`m=${mediaType}`));\n    }\n\n    if (!mediaLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No media lines for type ${\n                    mediaType} found in remote SDP for remote track: ${\n                    streamId}`));\n\n        // Abort\n        return;\n    }\n\n    let ssrcLines = SDPUtil.findLines(mediaLines[0], 'a=ssrc:');\n\n    ssrcLines\n        = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\n    if (!ssrcLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC lines for streamId ${\n                    streamId} for remote track, media type: ${mediaType}`));\n\n        // Abort\n        return;\n    }\n\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\n    // with global error handler anyway\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\n    const trackSsrc = Number(ssrcStr);\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\n\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `Invalid SSRC: ${ssrcStr} for remote track, msid: ${\n                    streamId} media type: ${mediaType}`));\n\n        // Abort\n        return;\n    } else if (!ownerEndpointId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC owner known for: ${\n                    trackSsrc} for remote track, msid: ${\n                    streamId} media type: ${mediaType}`));\n\n        // Abort\n        return;\n    }\n\n    logger.log(`${this} associated ssrc`, ownerEndpointId, trackSsrc);\n\n    const peerMediaInfo\n        = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType);\n\n    if (!peerMediaInfo) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `${this}: no peer media info available for ${\n                    ownerEndpointId}`));\n\n        return;\n    }\n\n    const muted = peerMediaInfo.muted;\n    const videoType = peerMediaInfo.videoType; // can be undefined\n\n    this._createRemoteTrack(\n        ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted);\n};\n\n// FIXME cleanup params\n/* eslint-disable max-params */\n\n/**\n * Initializes a new JitsiRemoteTrack instance with the data provided by\n * the signaling layer and SDP.\n *\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\n * @param {MediaStream} stream the WebRTC stream instance\n * @param {MediaStreamTrack} track the WebRTC track instance\n * @param {MediaType} mediaType the track's type of the media\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\n * @param {number} ssrc the track's main SSRC number\n * @param {boolean} muted the initial muted status\n */\nTraceablePeerConnection.prototype._createRemoteTrack = function(\n        ownerEndpointId,\n        stream,\n        track,\n        mediaType,\n        videoType,\n        ssrc,\n        muted) {\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\n\n    if (!remoteTracksMap) {\n        remoteTracksMap = new Map();\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\n    }\n\n    const existingTrack = remoteTracksMap.get(mediaType);\n\n    // Delete the existing track and create the new one because of a known bug on Safari.\n    // RTCPeerConnection.ontrack fires when a new remote track is added but MediaStream.onremovetrack doesn't so\n    // it needs to be removed whenever a new track is received for the same endpoint id.\n    if (existingTrack && browser.isWebKitBased()) {\n        this._remoteTrackRemoved(existingTrack.getOriginalStream(), existingTrack.getTrack());\n    }\n\n    if (existingTrack && existingTrack.getTrack() === track) {\n        // Ignore duplicated event which can originate either from 'onStreamAdded' or 'onTrackAdded'.\n        logger.info(\n            `${this} ignored duplicated remote track added event for: `\n                + `${ownerEndpointId}, ${mediaType}`);\n\n        return;\n    } else if (existingTrack) {\n        logger.error(`${this} received a second remote track for ${ownerEndpointId} ${mediaType}, `\n            + 'deleting the existing track.');\n\n        // The exisiting track needs to be removed here. We can get here when Jicofo reverses the order of source-add\n        // and source-remove messages. Ideally, when a remote endpoint changes source, like switching devices, it sends\n        // a source-remove (for old ssrc) followed by a source-add (for new ssrc) and Jicofo then should forward these\n        // two messages to all the other endpoints in the conference in the same order. However, sometimes, these\n        // messages arrive at the client in the reverse order resulting in two remote tracks (of same media type) being\n        // created and in case of video, a black strip (that of the first track which has ended) appears over the live\n        // track obscuring it. Removing the existing track when that happens will fix this issue.\n        this._remoteTrackRemoved(existingTrack.getOriginalStream(), existingTrack.getTrack());\n    }\n\n    const remoteTrack\n        = new JitsiRemoteTrack(\n                this.rtc,\n                this.rtc.conference,\n                ownerEndpointId,\n                stream,\n                track,\n                mediaType,\n                videoType,\n                ssrc,\n                muted,\n                this.isP2P);\n\n    remoteTracksMap.set(mediaType, remoteTrack);\n\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack, this);\n};\n\n/* eslint-enable max-params */\n\n/**\n * Handles remote stream removal.\n * @param stream the WebRTC MediaStream object which is being removed from the\n * PeerConnection\n */\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\n    if (!RTC.isUserStream(stream)) {\n        const id = RTC.getStreamID(stream);\n\n        logger.info(\n            `Ignored remote 'stream removed' event for non-user stream ${id}`);\n\n        return;\n    }\n\n    // Call remoteTrackRemoved for each track in the stream\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackRemoved(stream, videoTrack);\n    }\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackRemoved(stream, audioTrack);\n    }\n};\n\n/**\n * Handles remote media track removal.\n * @param {MediaStream} stream WebRTC MediaStream instance which is the parent\n * of the track.\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack which has been\n * removed from the PeerConnection.\n */\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(\n        stream,\n        track) {\n    const streamId = RTC.getStreamID(stream);\n    const trackId = track && RTC.getTrackID(track);\n\n    logger.info(`${this} - remote track removed: ${streamId}, ${trackId}`);\n\n    if (!streamId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this} remote track removal failed - no stream ID`));\n\n        return;\n    }\n\n    if (!trackId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this} remote track removal failed - no track ID`));\n\n        return;\n    }\n\n    if (!this._removeRemoteTrackById(streamId, trackId)) {\n        // NOTE this warning is always printed when user leaves the room,\n        // because we remove remote tracks manually on MUC member left event,\n        // before the SSRCs are removed by Jicofo. In most cases it is fine to\n        // ignore this warning, but still it's better to keep it printed for\n        // debugging purposes.\n        //\n        // We could change the behaviour to emit track removed only from here,\n        // but the order of the events will change and consuming apps could\n        // behave unexpectedly (the \"user left\" event would come before \"track\n        // removed\" events).\n        logger.warn(\n            `${this} Removed track not found for msid: ${streamId},\n             track id: ${trackId}`);\n    }\n};\n\n/**\n * Finds remote track by it's stream and track ids.\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @return {JitsiRemoteTrack|undefined} the track's instance or\n * <tt>undefined</tt> if not found.\n * @private\n */\nTraceablePeerConnection.prototype._getRemoteTrackById = function(\n        streamId,\n        trackId) {\n    // .find will break the loop once the first match is found\n    for (const endpointTrackMap of this.remoteTracks.values()) {\n        for (const mediaTrack of endpointTrackMap.values()) {\n            // FIXME verify and try to use ===\n            /* eslint-disable eqeqeq */\n            if (mediaTrack.getStreamId() == streamId\n                && mediaTrack.getTrackId() == trackId) {\n                return mediaTrack;\n            }\n\n            /* eslint-enable eqeqeq */\n        }\n    }\n\n    return undefined;\n};\n\n/**\n * Removes all JitsiRemoteTracks associated with given MUC nickname\n * (resource part of the JID). Returns array of removed tracks.\n *\n * @param {string} owner - The resource part of the MUC JID.\n * @returns {JitsiRemoteTrack[]}\n */\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\n    const removedTracks = [];\n    const remoteTracksMap = this.remoteTracks.get(owner);\n\n    if (remoteTracksMap) {\n        const removedAudioTrack = remoteTracksMap.get(MediaType.AUDIO);\n        const removedVideoTrack = remoteTracksMap.get(MediaType.VIDEO);\n\n        removedAudioTrack && removedTracks.push(removedAudioTrack);\n        removedVideoTrack && removedTracks.push(removedVideoTrack);\n\n        this.remoteTracks.delete(owner);\n    }\n\n    logger.debug(\n        `${this} removed remote tracks for ${owner} count: ${\n            removedTracks.length}`);\n\n    return removedTracks;\n};\n\n/**\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits\n * {@link RTCEvents.REMOTE_TRACK_REMOVED}.\n * @param {JitsiRemoteTrack} toBeRemoved\n */\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\n    toBeRemoved.dispose();\n    const participantId = toBeRemoved.getParticipantId();\n    const remoteTracksMap = this.remoteTracks.get(participantId);\n\n    if (!remoteTracksMap) {\n        logger.error(\n            `removeRemoteTrack: no remote tracks map for ${participantId}`);\n    } else if (!remoteTracksMap.delete(toBeRemoved.getType())) {\n        logger.error(\n            `Failed to remove ${toBeRemoved} - type mapping messed up ?`);\n    }\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\n};\n\n/**\n * Removes and disposes <tt>JitsiRemoteTrack</tt> identified by given stream and\n * track ids.\n *\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @returns {JitsiRemoteTrack|undefined} the track which has been removed or\n * <tt>undefined</tt> if no track matching given stream and track ids was\n * found.\n */\nTraceablePeerConnection.prototype._removeRemoteTrackById = function(\n        streamId,\n        trackId) {\n    const toBeRemoved = this._getRemoteTrackById(streamId, trackId);\n\n    if (toBeRemoved) {\n        this._removeRemoteTrack(toBeRemoved);\n    }\n\n    return toBeRemoved;\n};\n\n/**\n * @typedef {Object} SSRCGroupInfo\n * @property {Array<number>} ssrcs group's SSRCs\n * @property {string} semantics\n */\n/**\n * @typedef {Object} TrackSSRCInfo\n * @property {Array<number>} ssrcs track's SSRCs\n * @property {Array<SSRCGroupInfo>} groups track's SSRC groups\n */\n/**\n * Returns map with keys msid and <tt>TrackSSRCInfo</tt> values.\n * @param {Object} desc the WebRTC SDP instance.\n * @return {Map<string,TrackSSRCInfo>}\n */\nfunction extractSSRCMap(desc) {\n    /**\n     * Track SSRC infos mapped by stream ID (msid)\n     * @type {Map<string,TrackSSRCInfo>}\n     */\n    const ssrcMap = new Map();\n\n    /**\n     * Groups mapped by primary SSRC number\n     * @type {Map<number,Array<SSRCGroupInfo>>}\n     */\n    const groupsMap = new Map();\n\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument.');\n\n        return ssrcMap;\n    }\n\n    const session = transform.parse(desc.sdp);\n\n    if (!Array.isArray(session.media)) {\n        return ssrcMap;\n    }\n\n    for (const mLine of session.media) {\n        if (!Array.isArray(mLine.ssrcs)) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        if (Array.isArray(mLine.ssrcGroups)) {\n            for (const group of mLine.ssrcGroups) {\n                if (typeof group.semantics !== 'undefined'\n                    && typeof group.ssrcs !== 'undefined') {\n                    // Parse SSRCs and store as numbers\n                    const groupSSRCs\n                        = group.ssrcs.split(' ').map(\n                            ssrcStr => parseInt(ssrcStr, 10));\n                    const primarySSRC = groupSSRCs[0];\n\n                    // Note that group.semantics is already present\n\n                    group.ssrcs = groupSSRCs;\n\n                    // eslint-disable-next-line max-depth\n                    if (!groupsMap.has(primarySSRC)) {\n                        groupsMap.set(primarySSRC, []);\n                    }\n                    groupsMap.get(primarySSRC).push(group);\n                }\n            }\n        }\n        for (const ssrc of mLine.ssrcs) {\n            if (ssrc.attribute !== 'msid') {\n                continue; // eslint-disable-line no-continue\n            }\n\n            const msid = ssrc.value;\n            let ssrcInfo = ssrcMap.get(msid);\n\n            if (!ssrcInfo) {\n                ssrcInfo = {\n                    ssrcs: [],\n                    groups: [],\n                    msid\n                };\n                ssrcMap.set(msid, ssrcInfo);\n            }\n\n            const ssrcNumber = ssrc.id;\n\n            ssrcInfo.ssrcs.push(ssrcNumber);\n\n            if (groupsMap.has(ssrcNumber)) {\n                const ssrcGroups = groupsMap.get(ssrcNumber);\n\n                for (const group of ssrcGroups) {\n                    ssrcInfo.groups.push(group);\n                }\n            }\n        }\n    }\n\n    return ssrcMap;\n}\n\n/**\n * Takes a SessionDescription object and returns a \"normalized\" version.\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\n * only SSRCs.\n */\nconst normalizePlanB = function(desc) {\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument.');\n\n        return desc;\n    }\n\n    // eslint-disable-next-line no-shadow\n    const transform = require('sdp-transform');\n    const session = transform.parse(desc.sdp);\n\n    if (typeof session !== 'undefined'\n            && typeof session.media !== 'undefined'\n            && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n\n            // Chrome appears to be picky about the order in which a=ssrc lines\n            // are listed in an m-line when rtx is enabled (and thus there are\n            // a=ssrc-group lines with FID semantics). Specifically if we have\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\n            // the \"a=ssrc:S1\" lines, SRD fails.\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\n            // first.\n            const firstSsrcs = [];\n            const newSsrcLines = [];\n\n            if (typeof mLine.ssrcGroups !== 'undefined'\n                && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(group => {\n                    if (typeof group.semantics !== 'undefined'\n                        && group.semantics === 'FID') {\n                        if (typeof group.ssrcs !== 'undefined') {\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\n                        }\n                    }\n                });\n            }\n\n            if (Array.isArray(mLine.ssrcs)) {\n                let i;\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] === 'object'\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                        delete mLine.ssrcs[i];\n                    }\n                }\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                    }\n                }\n\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\n            }\n        });\n    }\n\n    const resStr = transform.write(session);\n\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n};\n\n/**\n * Unified plan differentiates a remote track not associated with a stream using\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\n * line. Normally the ssrcs are not used by the client, as the bridge controls\n * media flow, but keep one reference to the ssrc for the p2p case.\n *\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\n * @private\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\n */\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\n        return ssrcLines;\n    }\n\n    let filteredLines = [ ...ssrcLines ];\n\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\n        .map(ssrcLine => ssrcLine.id);\n\n    problematicSsrcIds.forEach(ssrcId => {\n        // Find the cname which is to be modified and left in.\n        const cnameLine = filteredLines.find(line =>\n            line.id === ssrcId && line.attribute === 'cname');\n\n        cnameLine.value = `recvonly-${ssrcId}`;\n\n        // Remove all of lines for the ssrc.\n        filteredLines\n            = filteredLines.filter(line => line.id !== ssrcId);\n\n        // But re-add the cname line so there is a reference kept to the ssrc\n        // in the SDP.\n        filteredLines.push(cnameLine);\n    });\n\n    return filteredLines;\n}\n\n/**\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\n * @param {Object} localDescription the SDP object as defined by WebRTC.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n */\nconst enforceSendRecv = function(localDescription, options) {\n    if (!localDescription) {\n        throw new Error('No local description passed in.');\n    }\n\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    const audioMedia = transformer.selectMedia('audio');\n    let changed = false;\n\n    if (audioMedia && audioMedia.direction !== 'sendrecv') {\n        if (options.startSilent) {\n            audioMedia.direction = 'inactive';\n        } else {\n            audioMedia.direction = 'sendrecv';\n        }\n\n        changed = true;\n    }\n\n    const videoMedia = transformer.selectMedia('video');\n\n    if (videoMedia && videoMedia.direction !== 'sendrecv') {\n        videoMedia.direction = 'sendrecv';\n        changed = true;\n    }\n\n    if (changed) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n *\n * @param {JitsiLocalTrack} localTrack\n */\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\n\n    return ssrcInfo && ssrcInfo.ssrcs[0];\n};\n\n/**\n * When doing unified plan simulcast, we'll have a set of ssrcs with the\n * same msid but no ssrc-group, since unified plan signals the simulcast\n * group via the a=simulcast line.  Unfortunately, Jicofo will complain\n * if it sees ssrcs with matching msids but no ssrc-group, so we'll inject\n * an ssrc-group line to make Jicofo happy.\n * @param desc A session description object (with 'type' and 'sdp' fields)\n * @return A session description object with its sdp field modified to\n * contain an inject ssrc-group for simulcast\n */\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast\n    = function(desc) {\n        const sdp = transform.parse(desc.sdp);\n        const video = sdp.media.find(mline => mline.type === 'video');\n\n        // Check if the browser supports RTX, add only the primary ssrcs to the\n        // SIM group if that is the case.\n        video.ssrcGroups = video.ssrcGroups || [];\n        const fidGroups = video.ssrcGroups.filter(group => group.semantics === 'FID');\n\n        if (video.simulcast || video.simulcast_03) {\n            const ssrcs = [];\n\n            if (fidGroups && fidGroups.length) {\n                fidGroups.forEach(group => {\n                    ssrcs.push(group.ssrcs.split(' ')[0]);\n                });\n            } else {\n                video.ssrcs.forEach(ssrc => {\n                    if (ssrc.attribute === 'msid') {\n                        ssrcs.push(ssrc.id);\n                    }\n                });\n            }\n            if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\n                // Group already exists, no need to do anything\n                return desc;\n            }\n            video.ssrcGroups.push({\n                semantics: 'SIM',\n                ssrcs: ssrcs.join(' ')\n            });\n        }\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    };\n\n/* eslint-disable-next-line vars-on-top */\nconst getters = {\n    signalingState() {\n        return this.peerconnection.signalingState;\n    },\n    iceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    },\n    localDescription() {\n        let desc = this.peerconnection.localDescription;\n\n        if (!desc) {\n            logger.debug('getLocalDescription no localDescription found');\n\n            return {};\n        }\n\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\n\n        // if we're running on FF, transform to Plan B first.\n        if (browser.usesUnifiedPlan()) {\n            desc = this.interop.toPlanB(desc);\n            this.trace('getLocalDescription::postTransform (Plan B)',\n                dumpSDP(desc));\n\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\n                dumpSDP(desc));\n        } else {\n            if (browser.doesVideoMuteByStreamRemove()) {\n                desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\n                logger.debug(\n                    'getLocalDescription::postTransform (munge local SDP)', desc);\n            }\n\n            // What comes out of this getter will be signalled over Jingle to\n            // the other peer, so we need to make sure the media direction is\n            // 'sendrecv' because we won't change the direction later and don't want\n            // the other peer to think we can't send or receive.\n            //\n            // Note that the description we set in chrome does have the accurate\n            // direction (e.g. 'recvonly'), since that is technically what is\n            // happening (check setLocalDescription impl).\n            desc = enforceSendRecv(desc, this.options);\n        }\n\n        // See the method's doc for more info about this transformation.\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\n\n        return desc;\n    },\n    remoteDescription() {\n        let desc = this.peerconnection.remoteDescription;\n\n        if (!desc) {\n            logger.debug('getRemoteDescription no remoteDescription found');\n\n            return {};\n        }\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\n\n        // if we're running on FF, transform to Plan B first.\n        if (browser.usesUnifiedPlan()) {\n            desc = this.interop.toPlanB(desc);\n            this.trace(\n                'getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\n        }\n\n        return desc;\n    }\n};\n\nObject.keys(getters).forEach(prop => {\n    Object.defineProperty(\n        TraceablePeerConnection.prototype,\n        prop, {\n            get: getters[prop]\n        }\n    );\n});\n\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\n    return this.localSSRCs.get(rtcId);\n};\n\n/**\n * Checks if screensharing is in progress.\n *\n * @returns {boolean}  Returns true if a desktop track has been added to the\n * peerconnection, false otherwise.\n */\nTraceablePeerConnection.prototype._isSharingScreen = function() {\n    const track = this.getLocalVideoTrack();\n\n    return track && track.videoType === VideoType.DESKTOP;\n};\n\n/**\n * Munges the order of the codecs in the SDP passed based on the preference\n * set through config.js settings. All instances of the specified codec are\n * moved up to the top of the list when it is preferred. The specified codec\n * is deleted from the list if the configuration specifies that the codec be\n * disabled.\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeCodecOrder = function(description) {\n    if (!this.codecPreference || browser.supportsCodecPreferences()) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n\n    for (const mLine of parsedSdp.media) {\n        if (this.codecPreference.enable && mLine.type === this.codecPreference.mediaType) {\n            SDPUtil.preferCodec(mLine, this.codecPreference.mimeType);\n\n            // Strip the high profile H264 codecs on mobile clients for p2p connection.\n            // High profile codecs give better quality at the expense of higher load which\n            // we do not want on mobile clients.\n            // Jicofo offers only the baseline code for the jvb connection.\n            // TODO - add check for mobile browsers once js-utils provides that check.\n            if (this.codecPreference.mimeType === CodecMimeType.H264 && browser.isReactNative() && this.isP2P) {\n                SDPUtil.stripCodec(mLine, this.codecPreference.mimeType, true /* high profile */);\n            }\n\n            // Set the max bitrate here on the SDP so that the configured max. bitrate is effective\n            // as soon as the browser switches to VP9.\n            if (this.codecPreference.mimeType === CodecMimeType.VP9) {\n                const bitrates = this.videoBitrates.VP9 || this.videoBitrates;\n                const hdBitrate = bitrates.high ? bitrates.high : HD_BITRATE;\n                const limit = Math.floor((this._isSharingScreen() ? HD_BITRATE : hdBitrate) / 1000);\n\n                // Use only the HD bitrate for now as there is no API available yet for configuring\n                // the bitrates on the individual SVC layers.\n                mLine.bandwidth = [ {\n                    type: 'AS',\n                    limit\n                } ];\n            } else {\n                // Clear the bandwidth limit in SDP when VP9 is no longer the preferred codec.\n                // This is needed on react native clients as react-native-webrtc returns the\n                // SDP that the application passed instead of returning the SDP off the native side.\n                // This line automatically gets cleared on web on every renegotiation.\n                mLine.bandwidth = undefined;\n            }\n        } else if (mLine.type === this.codecPreference.mediaType) {\n            SDPUtil.stripCodec(mLine, this.codecPreference.mimeType);\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Checks if given track belongs to this peerconnection instance.\n *\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track - The track to be checked.\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.containsTrack = function(track) {\n    if (track.isLocal()) {\n        return this.localTracks.has(track.rtcId);\n    }\n\n    const participantId = track.getParticipantId();\n    const remoteTracksMap = this.remoteTracks.get(participantId);\n\n    return Boolean(remoteTracksMap && remoteTracksMap.get(track.getType()) === track);\n};\n\n/**\n * Add {@link JitsiLocalTrack} to this TPC.\n * @param {JitsiLocalTrack} track\n * @param {boolean} isInitiator indicates if the endpoint is the offerer.\n * @returns {Promise<void>} - resolved when done.\n */\nTraceablePeerConnection.prototype.addTrack = function(track, isInitiator = false) {\n    const rtcId = track.rtcId;\n\n    logger.info(`add ${track} to: ${this}`);\n\n    if (this.localTracks.has(rtcId)) {\n\n        return Promise.reject(new Error(`${track} is already in ${this}`));\n    }\n\n    this.localTracks.set(rtcId, track);\n\n    // For p2p unified case, use addTransceiver API to add the tracks on the peerconnection.\n    if (browser.usesUnifiedPlan() && this.isP2P) {\n        this.tpcUtils.addTrack(track, isInitiator);\n    } else {\n        // In all other cases, i.e., plan-b and unified plan bridge case, use addStream API to\n        // add the track to the peerconnection.\n        // TODO - addTransceiver doesn't generate a MSID for the stream, which is needed for signaling\n        // the ssrc to Jicofo. Switch to using UUID as MSID when addTransceiver is used in Unified plan\n        // JVB connection case as well.\n        const webrtcStream = track.getOriginalStream();\n\n        if (webrtcStream) {\n            this._addStream(webrtcStream);\n\n        // It's not ok for a track to not have a WebRTC stream if:\n        } else if (!browser.doesVideoMuteByStreamRemove()\n                    || track.isAudioTrack()\n                    || (track.isVideoTrack() && !track.isMuted())) {\n            return Promise.reject(new Error(`${this} no WebRTC stream for: ${track}`));\n        }\n\n        // Muted video tracks do not have WebRTC stream\n        if (browser.usesPlanB() && browser.doesVideoMuteByStreamRemove()\n                && track.isVideoTrack() && track.isMuted()) {\n            const ssrcInfo = this.generateNewStreamSSRCInfo(track);\n\n            this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\n            const simGroup\n                = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\n\n            if (simGroup) {\n                this.simulcast.setSsrcCache(simGroup.ssrcs);\n            }\n            const fidGroups\n                = ssrcInfo.groups.filter(\n                    groupInfo => groupInfo.semantics === 'FID');\n\n            if (fidGroups) {\n                const rtxSsrcMapping = new Map();\n\n                fidGroups.forEach(fidGroup => {\n                    const primarySsrc = fidGroup.ssrcs[0];\n                    const rtxSsrc = fidGroup.ssrcs[1];\n\n                    rtxSsrcMapping.set(primarySsrc, rtxSsrc);\n                });\n                this.rtxModifier.setSsrcCache(rtxSsrcMapping);\n            }\n        }\n    }\n\n    let promiseChain = Promise.resolve();\n\n    // On Firefox, the encodings have to be configured on the sender only after the transceiver is created.\n    if (browser.isFirefox()) {\n        promiseChain = this.tpcUtils.setEncodings(track);\n    }\n\n    return promiseChain;\n};\n\n/**\n * Adds local track as part of the unmute operation.\n * @param {JitsiLocalTrack} track the track to be added as part of the unmute\n * operation\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.addTrackUnmute = function(track) {\n    if (!this._assertTrackBelongs('addTrackUnmute', track)) {\n        // Abort\n        return Promise.reject('Track not found on the peerconnection');\n    }\n\n    logger.info(`Adding ${track} as unmute to ${this}`);\n    const webRtcStream = track.getOriginalStream();\n\n    if (!webRtcStream) {\n        logger.error(\n            `Unable to add ${track} as unmute to ${this} - no WebRTC stream`);\n\n        return Promise.reject('Stream not found');\n    }\n\n    if (browser.usesUnifiedPlan()) {\n        return this.tpcUtils.addTrackUnmute(track);\n    }\n\n    this._addStream(webRtcStream);\n\n    return Promise.resolve(true);\n};\n\n/**\n * Adds WebRTC media stream to the underlying PeerConnection\n * @param {MediaStream} mediaStream\n * @private\n */\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\n    this.peerconnection.addStream(mediaStream);\n    this._addedStreams.push(mediaStream);\n};\n\n/**\n * Removes WebRTC media stream from the underlying PeerConection\n * @param {MediaStream} mediaStream\n */\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\n    this.peerconnection.removeStream(mediaStream);\n    this._addedStreams\n        = this._addedStreams.filter(stream => stream !== mediaStream);\n};\n\n/**\n * This method when called will check if given <tt>localTrack</tt> belongs to\n * this TPC (that it has been previously added using {@link addTrack}). If the\n * track does not belong an error message will be logged.\n * @param {string} methodName the method name that will be logged in an error\n * message\n * @param {JitsiLocalTrack} localTrack\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\n * <tt>false</tt> otherwise.\n * @private\n */\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\n        methodName,\n        localTrack) {\n    const doesBelong = this.localTracks.has(localTrack.rtcId);\n\n    if (!doesBelong) {\n        logger.error(\n            `${methodName}: ${localTrack} does not belong to ${this}`);\n    }\n\n    return doesBelong;\n};\n\n/**\n * Returns the codec that is configured on the client as the preferred video codec.\n * This takes into account the current order of codecs in the local description sdp.\n *\n * @returns {CodecMimeType} The codec that is set as the preferred codec to receive\n * video in the local SDP.\n */\nTraceablePeerConnection.prototype.getConfiguredVideoCodec = function() {\n    const sdp = this.localDescription.sdp;\n    const defaultCodec = CodecMimeType.VP8;\n\n    if (!sdp) {\n        return defaultCodec;\n    }\n    const parsedSdp = transform.parse(sdp);\n    const mLine = parsedSdp.media.find(m => m.type === MediaType.VIDEO);\n    const codec = mLine.rtp[0].codec;\n\n    if (codec) {\n        return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n    }\n\n    return defaultCodec;\n};\n\n/**\n * Sets the codec preference on the peerconnection. The codec preference goes into effect when\n * the next renegotiation happens.\n *\n * @param {CodecMimeType} preferredCodec the preferred codec.\n * @param {CodecMimeType} disabledCodec the codec that needs to be disabled.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.setVideoCodecs = function(preferredCodec = null, disabledCodec = null) {\n    // If both enable and disable are set, disable settings will prevail.\n    const enable = disabledCodec === null;\n    const mimeType = disabledCodec ? disabledCodec : preferredCodec;\n\n    if (this.codecPreference && (preferredCodec || disabledCodec)) {\n        this.codecPreference.enable = enable;\n        this.codecPreference.mimeType = mimeType;\n    } else if (preferredCodec || disabledCodec) {\n        this.codecPreference = {\n            enable,\n            mediaType: MediaType.VIDEO,\n            mimeType\n        };\n    } else {\n        logger.warn(`Invalid codec settings: preferred ${preferredCodec}, disabled ${disabledCodec},\n            atleast one value is needed`);\n    }\n\n    if (browser.supportsCodecPreferences()) {\n        const transceiver = this.peerconnection.getTransceivers()\n            .find(t => t.receiver && t.receiver?.track?.kind === MediaType.VIDEO);\n\n        if (!transceiver) {\n            return;\n        }\n        let capabilities = RTCRtpReceiver.getCapabilities('video').codecs;\n\n        if (enable) {\n            // Move the desired codec (all variations of it as well) to the beginning of the list.\n            /* eslint-disable-next-line arrow-body-style */\n            capabilities.sort(caps => {\n                return caps.mimeType.toLowerCase() === `video/${mimeType}` ? -1 : 1;\n            });\n        } else {\n            capabilities = capabilities.filter(caps => caps.mimeType.toLowerCase() !== `video/${mimeType}`);\n        }\n\n        try {\n            transceiver.setCodecPreferences(capabilities);\n        } catch (err) {\n            logger.warn(`Setting ${mimeType} as ${enable ? 'preferred' : 'disabled'} codec failed`, err);\n        }\n    }\n};\n\n/**\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\n * the underlying WebRTC PeerConnection.\n * @param {MediaStream} mediaStream\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\n    return this._addedStreams.indexOf(mediaStream) > -1;\n};\n\n/**\n * Remove local track from this TPC.\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\n *\n * FIXME It should probably remove a boolean just like {@link removeTrackMute}\n *       The same applies to addTrack.\n */\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStream',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\n\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\n        // Abort - nothing to be done here\n        return;\n    }\n    this.localTracks.delete(localTrack.rtcId);\n    this.localSSRCs.delete(localTrack.rtcId);\n\n    if (webRtcStream) {\n        this.peerconnection.removeStream(webRtcStream);\n    }\n};\n\n/**\n * Returns the sender corresponding to the given media type.\n * @param {MEDIA_TYPE} mediaType - The media type 'audio' or 'video' to be used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByKind = function(mediaType) {\n    return this.peerconnection.getSenders().find(s => s.track && s.track.kind === mediaType);\n};\n\n/**\n * Returns the receiver corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpReceiver|undefined} - The found receiver or undefined if no receiver\n * was found.\n */\nTraceablePeerConnection.prototype.findReceiverForTrack = function(track) {\n    return this.peerconnection.getReceivers().find(r => r.track === track);\n};\n\n/**\n * Returns the sender corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderForTrack = function(track) {\n    return this.peerconnection.getSenders().find(s => s.track === track);\n};\n\n/**\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n * <tt>oldTrack</tt>\n *\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be\n * replaced\n * @param {JitsiLocalTrack|null} newTrack - The new track to use\n * @returns {Promise<boolean>} - If the promise resolves with true,\n * renegotiation will be needed. Otherwise no renegotiation is needed.\n */\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\n    if (browser.usesUnifiedPlan()) {\n        logger.debug('TPC.replaceTrack using unified plan.');\n\n        return this.tpcUtils.replaceTrack(oldTrack, newTrack)\n\n            // renegotiate when SDP is used for simulcast munging\n            .then(() => this.isSimulcastOn() && browser.usesSdpMungingForSimulcast());\n    }\n\n    logger.debug('TPC.replaceTrack using plan B.');\n\n    let promiseChain = Promise.resolve();\n\n    if (oldTrack) {\n        this.removeTrack(oldTrack);\n    }\n    if (newTrack) {\n        promiseChain = this.addTrack(newTrack);\n    }\n\n    return promiseChain.then(() => true);\n};\n\n/**\n * Removes local track as part of the mute operation.\n * @param {JitsiLocalTrack} localTrack the local track to be remove as part of\n * the mute operation.\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.removeTrackMute = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStreamMute',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\n\n    if (!this._assertTrackBelongs('removeStreamMute', localTrack)) {\n        // Abort - nothing to be done here\n        return Promise.reject('Track not found in the peerconnection');\n    }\n\n    if (browser.usesUnifiedPlan()) {\n        return this.tpcUtils.removeTrackMute(localTrack);\n    }\n\n    if (webRtcStream) {\n        logger.info(\n            `Removing ${localTrack} as mute from ${this}`);\n        this._removeStream(webRtcStream);\n\n        return Promise.resolve(true);\n    }\n\n    logger.error(`removeStreamMute - no WebRTC stream for ${localTrack}`);\n\n    return Promise.reject('Stream not found');\n};\n\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\n    this.trace('createDataChannel', label, opts);\n\n    return this.peerconnection.createDataChannel(label, opts);\n};\n\n/**\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\n * in the SDP so that simulcast is properly activated.\n *\n * @param {Object} localSdp the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(\n        localSdp) {\n    let sdpStr = localSdp.sdp;\n\n    const videoStartIndex = sdpStr.indexOf('m=video');\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n\n    if (simStartIndex === -1\n        || otherStartIndex === -1\n        || otherStartIndex === simStartIndex) {\n        return localSdp;\n    }\n\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\n\n    sdpStr = sdpStr.replace(simStr, '');\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\n    const simStrTrimmed = simStr.trim();\n    const sdpTail = sdpStr.slice(otherEndIndex);\n\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\n\n    return new RTCSessionDescription({\n        type: localSdp.type,\n        sdp: sdpStr\n    });\n};\n\n/**\n * Will adjust audio and video media direction in the given SDP object to\n * reflect the current status of the {@link audioTransferActive} and\n * {@link videoTransferActive} flags.\n * @param {Object} localDescription the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(\n        localDescription) {\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    let modifiedDirection = false;\n    const audioMedia = transformer.selectMedia('audio');\n\n    if (audioMedia) {\n        const desiredAudioDirection\n            = this._getDesiredMediaDirection(MediaType.AUDIO);\n\n        if (audioMedia.direction !== desiredAudioDirection) {\n            audioMedia.direction = desiredAudioDirection;\n            logger.info(\n                `Adjusted local audio direction to ${desiredAudioDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn('No \"audio\" media found int the local description');\n    }\n\n    const videoMedia = transformer.selectMedia('video');\n\n    if (videoMedia) {\n        const desiredVideoDirection\n            = this._getDesiredMediaDirection(MediaType.VIDEO);\n\n        if (videoMedia.direction !== desiredVideoDirection) {\n            videoMedia.direction = desiredVideoDirection;\n            logger.info(\n                `Adjusted local video direction to ${desiredVideoDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn('No \"video\" media found in the local description');\n    }\n\n    if (modifiedDirection) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n * Munges the stereo flag as well as the opusMaxAverageBitrate in the SDP, based\n * on values set through config.js, if present.\n *\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeOpus = function(description) {\n    const { audioQuality } = this.options;\n\n    if (!audioQuality?.stereo && !audioQuality?.opusMaxAverageBitrate) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media;\n\n    for (const mLine of mLines) {\n        if (mLine.type === 'audio') {\n            const { payload } = mLine.rtp.find(protocol => protocol.codec === CodecMimeType.OPUS);\n\n            if (!payload) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let fmtpOpus = mLine.fmtp.find(protocol => protocol.payload === payload);\n\n            if (!fmtpOpus) {\n                fmtpOpus = {\n                    payload,\n                    config: ''\n                };\n            }\n\n            const fmtpConfig = transform.parseParams(fmtpOpus.config);\n            let sdpChanged = false;\n\n            if (audioQuality?.stereo) {\n                fmtpConfig.stereo = 1;\n                sdpChanged = true;\n            }\n\n            if (audioQuality?.opusMaxAverageBitrate) {\n                fmtpConfig.opusMaxAverageBitrate = audioQuality.opusMaxAverageBitrate;\n                sdpChanged = true;\n            }\n\n            if (!sdpChanged) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let mungedConfig = '';\n\n            for (const key of Object.keys(fmtpConfig)) {\n                mungedConfig += `${key}=${fmtpConfig[key]}; `;\n            }\n\n            fmtpOpus.config = mungedConfig.trim();\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\n    let localSdp = description;\n\n    this.trace('setLocalDescription::preTransform', dumpSDP(localSdp));\n\n    // Munge the order of the codecs based on the preferences set through config.js\n    localSdp = this._mungeCodecOrder(localSdp);\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    localSdp = this._mungeOpus(localSdp);\n\n    if (browser.usesPlanB()) {\n        localSdp = this._adjustLocalMediaDirection(localSdp);\n        localSdp = this._ensureSimulcastGroupIsLast(localSdp);\n    } else {\n\n        // if we're using unified plan, transform to it first.\n        localSdp = this.interop.toUnifiedPlan(localSdp);\n        this.trace(\n            'setLocalDescription::postTransform (Unified Plan)',\n            dumpSDP(localSdp));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setLocalDescription(localSdp)\n            .then(() => {\n                this.trace('setLocalDescriptionOnSuccess');\n                const localUfrag = SDPUtil.getUfrag(localSdp.sdp);\n\n                if (localUfrag !== this.localUfrag) {\n                    this.localUfrag = localUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setLocalDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n                    err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Enables/disables audio media transmission on this peer connection. When\n * disabled the SDP audio media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable audio media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setAudioTransferActive = function(active) {\n    logger.debug(`${this} audio transfer active: ${active}`);\n    const changed = this.audioTransferActive !== active;\n\n    this.audioTransferActive = active;\n\n    if (browser.usesUnifiedPlan()) {\n        this.tpcUtils.setAudioTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\n/**\n * Sets the degradation preference on the video sender. This setting determines if\n * resolution or framerate will be preferred when bandwidth or cpu is constrained.\n * Sets it to 'maintain-framerate' when a camera track is added to the pc, sets it\n * to 'maintain-resolution' when a desktop track is being shared instead.\n * @returns {Promise<void>}\n */\nTraceablePeerConnection.prototype.setSenderVideoDegradationPreference = function() {\n    if (!this.peerconnection.getSenders) {\n        logger.debug('Browser does not support RTCRtpSender');\n\n        return Promise.resolve();\n    }\n    const localVideoTrack = this.getLocalVideoTrack();\n    const videoSender = this.findSenderByKind(MediaType.VIDEO);\n\n    if (!videoSender) {\n        return Promise.resolve();\n    }\n    const parameters = videoSender.getParameters();\n    const preference = localVideoTrack.videoType === VideoType.CAMERA\n        ? DEGRADATION_PREFERENCE_CAMERA\n        : this.options.capScreenshareBitrate && browser.usesPlanB()\n\n            // Prefer resolution for low fps share.\n            ? DEGRADATION_PREFERENCE_DESKTOP\n\n            // Prefer frame-rate for high fps share.\n            : DEGRADATION_PREFERENCE_CAMERA;\n\n    logger.info(`Setting a degradation preference of ${preference} on local video track`);\n    parameters.degradationPreference = preference;\n    this.tpcUtils.updateEncodingsResolution(parameters);\n\n    return videoSender.setParameters(parameters);\n};\n\n/**\n * Sets the max bitrate on the RTCRtpSender so that the\n * bitrate of the enocder doesn't exceed the configured value.\n * This is needed for the desktop share until spec-complaint\n * simulcast is implemented.\n * @param {JitsiLocalTrack} localTrack - the local track whose\n * max bitrate is to be configured.\n * @returns {Promise<void>}\n */\nTraceablePeerConnection.prototype.setMaxBitRate = function() {\n    // For VP9, max bitrate is configured by setting b=AS value in SDP. Browsers do\n    // not yet support setting max bitrates for individual VP9 SVC layers.\n    if (this.getConfiguredVideoCodec() === CodecMimeType.VP9 || !window.RTCRtpSender) {\n        return Promise.resolve();\n    }\n    const localVideoTrack = this.getLocalVideoTrack();\n\n    if (!localVideoTrack) {\n        return Promise.resolve();\n    }\n\n    const videoType = localVideoTrack.videoType;\n    const planBScreenSharing = browser.usesPlanB() && videoType === VideoType.DESKTOP;\n\n    // Apply the maxbitrates on the video track when one of the conditions is met.\n    // 1. Max. bitrates for video are specified through videoQuality settings in config.js\n    // 2. Track is a desktop track and bitrate is capped using capScreenshareBitrate option in plan-b mode.\n    // 3. The client is running in Unified plan mode.\n    if (!((this.options.videoQuality && this.options.videoQuality.maxBitratesVideo)\n        || (planBScreenSharing && this.options.capScreenshareBitrate)\n        || browser.usesUnifiedPlan())) {\n        return Promise.resolve();\n    }\n\n    const presenterEnabled = localVideoTrack._originalStream\n        && localVideoTrack._originalStream.id !== localVideoTrack.getStreamId();\n    const videoSender = this.findSenderByKind(MediaType.VIDEO);\n\n    if (!videoSender) {\n        return Promise.resolve();\n    }\n    const parameters = videoSender.getParameters();\n\n    if (!(parameters.encodings && parameters.encodings.length)) {\n        return Promise.resolve();\n    }\n\n    if (this.isSimulcastOn()) {\n        for (const encoding in parameters.encodings) {\n            if (parameters.encodings.hasOwnProperty(encoding)) {\n                let bitrate;\n\n                if (planBScreenSharing) {\n                    // On chromium, set a max bitrate of 500 Kbps for screenshare when capScreenshareBitrate\n                    // is enabled through config.js and presenter is not turned on.\n                    // FIXME the top 'isSimulcastOn' condition is confusing for screensharing, because\n                    // if capScreenshareBitrate option is enabled then the simulcast is turned off\n                    bitrate = this.options.capScreenshareBitrate\n                        ? presenterEnabled ? HD_BITRATE : DESKTOP_SHARE_RATE\n\n                        // Remove the bitrate config if not capScreenshareBitrate:\n                        // When switching from camera to desktop and videoQuality.maxBitratesVideo were set,\n                        // then the 'maxBitrate' setting must be cleared, because if simulcast is enabled for screen\n                        // and maxBitrates are set then Chrome will not send the screen stream (plan B).\n                        : undefined;\n                } else {\n                    bitrate = this.tpcUtils.localStreamEncodingsConfig[encoding].maxBitrate;\n                }\n\n                logger.info(`${this} Setting a max bitrate of ${bitrate} bps on layer `\n                    + `${this.tpcUtils.localStreamEncodingsConfig[encoding].rid}`);\n                parameters.encodings[encoding].maxBitrate = bitrate;\n            }\n        }\n    } else {\n        // Do not change the max bitrate for desktop tracks in non-simulcast mode.\n        let bitrate = this.getTargetVideoBitrates()?.high;\n\n        if (videoType === VideoType.CAMERA) {\n            // Determine the bitrates based on the sender constraint applied for unicast tracks.\n            const scaleFactor = this.senderVideoMaxHeight\n                ? Math.floor(localVideoTrack.resolution / this.senderVideoMaxHeight)\n                : 1;\n            const encoding = this.tpcUtils.localStreamEncodingsConfig\n                .find(layer => layer.scaleResolutionDownBy === scaleFactor);\n\n            if (encoding) {\n                logger.info(`${this} Setting a max bitrate of ${encoding.maxBitrate} bps on local video track`);\n                bitrate = encoding.maxBitrate;\n            }\n        }\n        parameters.encodings[0].maxBitrate = bitrate;\n    }\n    this.tpcUtils.updateEncodingsResolution(parameters);\n\n    return videoSender.setParameters(parameters);\n};\n\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\n\n    /* eslint-disable no-param-reassign */\n\n    // Munge the order of the codecs based on the preferences set through config.js\n    description = this._mungeCodecOrder(description);\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    description = this._mungeOpus(description);\n\n    /* eslint-enable no-param-reassign */\n\n    if (browser.usesPlanB()) {\n        // TODO the focus should squeze or explode the remote simulcast\n        if (this.isSimulcastOn()) {\n            // eslint-disable-next-line no-param-reassign\n            description = this.simulcast.mungeRemoteDescription(description, true /* add x-google-conference flag */);\n            this.trace(\n                'setRemoteDescription::postTransform (simulcast)',\n                dumpSDP(description));\n        }\n\n        // eslint-disable-next-line no-param-reassign\n        description = normalizePlanB(description);\n    } else {\n        const currentDescription = this.peerconnection.remoteDescription;\n\n        // eslint-disable-next-line no-param-reassign\n        description = this.interop.toUnifiedPlan(description, currentDescription);\n        this.trace(\n            'setRemoteDescription::postTransform (Unified)',\n            dumpSDP(description));\n\n        if (this.isSimulcastOn()) {\n            // eslint-disable-next-line no-param-reassign\n            description = this.simulcast.mungeRemoteDescription(description);\n\n            // eslint-disable-next-line no-param-reassign\n            description = this.tpcUtils.insertUnifiedPlanSimulcastReceive(description);\n            this.trace(\n                'setRemoteDescription::postTransform (sim receive)',\n                dumpSDP(description));\n\n            // eslint-disable-next-line no-param-reassign\n            description = this.tpcUtils.ensureCorrectOrderOfSsrcs(description);\n        }\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setRemoteDescription(description)\n            .then(() => {\n                this.trace('setRemoteDescriptionOnSuccess');\n                const remoteUfrag = SDPUtil.getUfrag(description.sdp);\n\n                if (remoteUfrag !== this.remoteUfrag) {\n                    this.remoteUfrag = remoteUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setRemoteDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n                    err,\n                    this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Changes the resolution of the video stream that is sent to the peer based on\n * the user preferred value. If simulcast is enabled on the peerconection, all the\n * simulcast encodings that have a resolution height lower or equal to the value\n * provided will remain active. For the non-simulcast case, video constraint is\n * applied on the track.\n * @param {number} frameHeight - The user preferred max frame height.\n * @returns {Promise} promise that will be resolved when the operation is\n * successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.setSenderVideoConstraint = function(frameHeight = null) {\n    if (frameHeight < 0) {\n        throw new Error(`Invalid frameHeight: ${frameHeight}`);\n    }\n\n    // XXX: This is not yet supported on mobile.\n    if (browser.isReactNative()) {\n        return Promise.resolve();\n    }\n\n    // Need to explicitly check for null as 0 is falsy, but a valid value\n    const newHeight = frameHeight === null ? this.senderVideoMaxHeight : frameHeight;\n\n    this.senderVideoMaxHeight = newHeight;\n\n    // If layer suspension is disabled and sender constraint is not configured for the conference,\n    // resolve here so that the encodings stay enabled. This can happen in custom apps built using\n    // lib-jitsi-meet.\n    if (newHeight === null) {\n        return Promise.resolve();\n    }\n\n    logger.log(`${this} senderVideoMaxHeight: ${newHeight}`);\n\n    const localVideoTrack = this.getLocalVideoTrack();\n\n    if (!localVideoTrack || localVideoTrack.isMuted()) {\n        return Promise.resolve();\n    }\n    const videoSender = this.findSenderByKind(MediaType.VIDEO);\n\n    if (!videoSender) {\n        return Promise.resolve();\n    }\n    const parameters = videoSender.getParameters();\n\n    if (!parameters || !parameters.encodings || !parameters.encodings.length) {\n        return Promise.resolve();\n    }\n\n    if (this.isSimulcastOn()) {\n        // Determine the encodings that need to stay enabled based on the new frameHeight provided.\n        this.encodingsEnabledState = this.tpcUtils.getLocalStreamHeightConstraints(localVideoTrack.track)\n            .map(height => height <= newHeight);\n\n        // Always keep the LD stream enabled, specifically when the LD stream's resolution is higher than of the\n        // requested resolution. This can happen when camera is captured at resolutions higher than 720p but the\n        // requested resolution is 180. Since getParameters doesn't give us information about the resolutions\n        // of the simulcast encodings, we have to rely on our initial config for the simulcast streams.\n        const ldStreamIndex = this.tpcUtils.localStreamEncodingsConfig\n            .findIndex(layer => layer.scaleResolutionDownBy === 4.0);\n\n        if (newHeight > 0 && ldStreamIndex !== -1) {\n            this.encodingsEnabledState[ldStreamIndex] = true;\n        }\n        for (const encoding in parameters.encodings) {\n            if (parameters.encodings.hasOwnProperty(encoding)) {\n                parameters.encodings[encoding].active = this.encodingsEnabledState[encoding];\n            }\n        }\n        this.tpcUtils.updateEncodingsResolution(parameters);\n    } else if (newHeight > 0) {\n        // Do not scale down the desktop tracks until SendVideoController is able to propagate the sender constraints\n        // only on the active media connection. Right now, the sender constraints received on the bridge channel\n        // are propagated on both the jvb and p2p connections in cases where they both are active at the same time.\n        parameters.encodings[0].scaleResolutionDownBy\n            = localVideoTrack.videoType === VideoType.DESKTOP || localVideoTrack.resolution <= newHeight\n                ? 1\n                : Math.floor(localVideoTrack.resolution / newHeight);\n        parameters.encodings[0].active = true;\n    } else {\n        parameters.encodings[0].scaleResolutionDownBy = undefined;\n        parameters.encodings[0].active = false;\n    }\n\n    logger.info(`${this} setting max height of ${newHeight}, encodings: ${JSON.stringify(parameters.encodings)}`);\n\n    return videoSender.setParameters(parameters).then(() => {\n        localVideoTrack.maxEnabledResolution = newHeight;\n        this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED, localVideoTrack);\n\n        // Max bitrate needs to be reconfigured on the sender in p2p/non-simulcast case if needed when\n        // the send resolution changes.\n        if (this.isP2P || !this.isSimulcastOn()) {\n            return this.setMaxBitRate();\n        }\n    });\n};\n\n/**\n * Enables/disables video media transmission on this peer connection. When\n * disabled the SDP video media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\n    logger.debug(`${this} video transfer active: ${active}`);\n    const changed = this.videoTransferActive !== active;\n\n    this.videoTransferActive = active;\n\n    if (browser.usesUnifiedPlan()) {\n        this.tpcUtils.setVideoTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\n/**\n * Sends DTMF tones if possible.\n *\n * @param {string} tones - The DTMF tones string as defined by {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n * @param {number} duration - The amount of time in milliseconds that each DTMF should last. It's 200ms by default.\n * @param {number} interToneGap - The length of time in miliseconds to wait between tones. It's 200ms by default.\n *\n * @returns {void}\n */\nTraceablePeerConnection.prototype.sendTones = function(tones, duration = 200, interToneGap = 200) {\n    if (!this._dtmfSender) {\n        if (this.peerconnection.getSenders) {\n            const rtpSender = this.peerconnection.getSenders().find(s => s.dtmf);\n\n            this._dtmfSender = rtpSender && rtpSender.dtmf;\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using getSenders`);\n        }\n\n        if (!this._dtmfSender) {\n            const localAudioTrack = Array.from(this.localTracks.values()).find(t => t.isAudioTrack());\n\n            if (this.peerconnection.createDTMFSender && localAudioTrack) {\n                this._dtmfSender = this.peerconnection.createDTMFSender(localAudioTrack.getTrack());\n            }\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using deprecated createDTMFSender`);\n        }\n\n        if (this._dtmfSender) {\n            this._dtmfSender.ontonechange = this._onToneChange.bind(this);\n        }\n    }\n\n    if (this._dtmfSender) {\n        if (this._dtmfSender.toneBuffer) {\n            this._dtmfTonesQueue.push({\n                tones,\n                duration,\n                interToneGap\n            });\n\n            return;\n        }\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    } else {\n        logger.warn(`${this} sendTones - failed to select DTMFSender`);\n    }\n};\n\n/**\n * Callback ivoked by {@code this._dtmfSender} when it has finished playing\n * a single tone.\n *\n * @param {Object} event - The tonechange event which indicates what characters\n * are left to be played for the current tone.\n * @private\n * @returns {void}\n */\nTraceablePeerConnection.prototype._onToneChange = function(event) {\n    // An empty event.tone indicates the current tones have finished playing.\n    // Automatically start playing any queued tones on finish.\n    if (this._dtmfSender && event.tone === '' && this._dtmfTonesQueue.length) {\n        const { tones, duration, interToneGap } = this._dtmfTonesQueue.shift();\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    }\n};\n\n/**\n * Makes the underlying TraceablePeerConnection generate new SSRC for\n * the recvonly video stream.\n */\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\n    const newSSRC = SDPUtil.generateSsrc();\n\n    logger.info(`${this} generated new recvonly SSRC: ${newSSRC}`);\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\n};\n\n/**\n * Makes the underlying TraceablePeerConnection forget the current primary video\n * SSRC.\n */\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\n    logger.info('Clearing primary video SSRC!');\n    this.sdpConsistency.clearVideoSsrcCache();\n};\n\n/**\n * Closes underlying WebRTC PeerConnection instance and removes all remote\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\n * them.\n */\nTraceablePeerConnection.prototype.close = function() {\n    this.trace('stop');\n\n    // Off SignalingEvents\n    this.signalingLayer.off(\n        SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.signalingLayer.off(\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n\n    for (const peerTracks of this.remoteTracks.values()) {\n        for (const remoteTrack of peerTracks.values()) {\n            this._removeRemoteTrack(remoteTrack);\n        }\n    }\n    this.remoteTracks.clear();\n\n    this._addedStreams = [];\n\n    this._dtmfSender = null;\n    this._dtmfTonesQueue = [];\n\n    if (!this.rtc._removePeerConnection(this)) {\n        logger.error('RTC._removePeerConnection returned false');\n    }\n    if (this.statsinterval !== null) {\n        window.clearInterval(this.statsinterval);\n        this.statsinterval = null;\n    }\n    logger.info(`Closing ${this}...`);\n    this.peerconnection.close();\n};\n\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\n    return this._createOfferOrAnswer(false /* answer */, constraints);\n};\n\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\n    return this._createOfferOrAnswer(true /* offer */, constraints);\n};\n\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\n        isOffer,\n        constraints) {\n    const logName = isOffer ? 'Offer' : 'Answer';\n\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\n\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\n        try {\n            this.trace(\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\n\n            if (browser.usesPlanB()) {\n                // If there are no local video tracks, then a \"recvonly\"\n                // SSRC needs to be generated\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\n                    this.generateRecvonlySsrc();\n                }\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\n                        resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}OnSuccess::postTransform `\n                         + '(make primary audio/video ssrcs consistent)',\n                    dumpSDP(resultSdp));\n            }\n\n            // Configure simulcast for camera tracks always and for desktop tracks only when\n            // the \"capScreenshareBitrate\" flag in config.js is disabled.\n            if (this.isSimulcastOn() && browser.usesSdpMungingForSimulcast()\n                && (!this.options.capScreenshareBitrate\n                || (this.options.capScreenshareBitrate && !this._isSharingScreen()))) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\n                this.trace(\n                    `create${logName}`\n                        + 'OnSuccess::postTransform (simulcast)',\n                    dumpSDP(resultSdp));\n            }\n\n            if (!this.options.disableRtx && browser.usesSdpMungingForSimulcast()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}`\n                         + 'OnSuccess::postTransform (rtx modifier)',\n                    dumpSDP(resultSdp));\n            }\n\n            const ssrcMap = extractSSRCMap(resultSdp);\n\n            logger.debug('Got local SSRCs MAP: ', ssrcMap);\n            this._processLocalSSRCsMap(ssrcMap);\n\n            resolveFn(resultSdp);\n        } catch (e) {\n            this.trace(`create${logName}OnError`, e);\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\n            logger.error(`create${logName}OnError`, e, dumpSDP(resultSdp));\n\n            rejectFn(e);\n        }\n    };\n\n    const handleFailure = (err, rejectFn) => {\n        this.trace(`create${logName}OnFailure`, err);\n        const eventType\n            = isOffer\n                ? RTCEvents.CREATE_OFFER_FAILED\n                : RTCEvents.CREATE_ANSWER_FAILED;\n\n        this.eventEmitter.emit(eventType, err, this);\n\n        rejectFn(err);\n    };\n\n    return new Promise((resolve, reject) => {\n        let oaPromise;\n\n        if (isOffer) {\n            oaPromise = this.peerconnection.createOffer(constraints);\n        } else {\n            oaPromise = this.peerconnection.createAnswer(constraints);\n        }\n\n        oaPromise\n            .then(\n                sdp => handleSuccess(sdp, resolve, reject),\n                error => handleFailure(error, reject));\n    });\n};\n\n/**\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\n * @param {TrackSSRCInfo} ssrcObj\n * @return {number|null} the primary SSRC or <tt>null</tt>\n */\nTraceablePeerConnection.prototype._extractPrimarySSRC = function(ssrcObj) {\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\n        return ssrcObj.groups[0].ssrcs[0];\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\n        return ssrcObj.ssrcs[0];\n    }\n\n    return null;\n};\n\n/**\n * Goes over the SSRC map extracted from the latest local description and tries\n * to match them with the local tracks (by MSID). Will update the values\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\n * @private\n */\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\n    for (const track of this.localTracks.values()) {\n        const trackMSID = track.storedMSID;\n\n        if (ssrcMap.has(trackMSID)) {\n            const newSSRC = ssrcMap.get(trackMSID);\n\n            if (!newSSRC) {\n                logger.error(`No SSRC found for: ${trackMSID} in ${this}`);\n\n                return;\n            }\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\n            const newSSRCNum = this._extractPrimarySSRC(newSSRC);\n            const oldSSRCNum = this._extractPrimarySSRC(oldSSRC);\n\n            // eslint-disable-next-line no-negated-condition\n            if (newSSRCNum !== oldSSRCNum) {\n                if (oldSSRCNum === null) {\n                    logger.info(\n                        `Storing new local SSRC for ${track} in ${this}`,\n                        newSSRC);\n                } else {\n                    logger.error(\n                        `Overwriting SSRC for ${track} ${trackMSID} in ${this\n                        } with: `, newSSRC);\n                }\n                this.localSSRCs.set(track.rtcId, newSSRC);\n\n                this.eventEmitter.emit(\n                    RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\n            } else {\n                logger.debug(\n                    `The local SSRC(${newSSRCNum}) for ${track} ${trackMSID}`\n                     + `is still up to date in ${this}`);\n            }\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\n            // It is normal to find no SSRCs for a muted video track in\n            // the local SDP as the recv-only SSRC is no longer munged in.\n            // So log the warning only if it's not a muted video track.\n            logger.warn(`No SSRCs found in the local SDP for ${track} MSID: ${trackMSID} in ${this}`);\n        }\n    }\n};\n\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\n    this.trace('addIceCandidate', JSON.stringify({\n        candidate: candidate.candidate,\n        sdpMid: candidate.sdpMid,\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        usernameFragment: candidate.usernameFragment\n    }, null, ' '));\n\n    return this.peerconnection.addIceCandidate(candidate);\n};\n\n/**\n * Returns the number of simulcast streams that are currently enabled on the peerconnection.\n *\n * @returns {number} The number of simulcast streams currently enabled or 1 when simulcast is disabled.\n */\nTraceablePeerConnection.prototype.getActiveSimulcastStreams = function() {\n    let activeStreams = 1;\n\n    if (this.isSimulcastOn() && this.encodingsEnabledState) {\n        activeStreams = this.encodingsEnabledState.filter(stream => Boolean(stream))?.length;\n    } else if (this.isSimulcastOn()) {\n        activeStreams = SIM_LAYER_RIDS.length;\n    }\n\n    return activeStreams;\n};\n\n/**\n * Obtains call-related stats from the peer connection.\n *\n * @param {Function} callback - The function to invoke after successfully obtaining stats.\n * @param {Function} errback - The function to invoke after failing to obtain stats.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.getStats = function(callback, errback) {\n    // eslint-disable-next-line no-empty-function\n    this.peerconnection.getStats().then(callback, errback || (() => {}));\n};\n\n/**\n * Generates and stores new SSRC info object for given local track.\n * The method should be called only for a video track being added to this TPC\n * in the muted state (given that the current browser uses this strategy).\n * @param {JitsiLocalTrack} track\n * @return {TPCSSRCInfo}\n */\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\n    const rtcId = track.rtcId;\n    let ssrcInfo = this._getSSRC(rtcId);\n\n    if (ssrcInfo) {\n        logger.error(`Will overwrite local SSRCs for track ID: ${rtcId}`);\n    }\n\n    // Configure simulcast for camera tracks always and for desktop tracks only when\n    // the \"capScreenshareBitrate\" flag in config.js is disabled.\n    if (this.isSimulcastOn()\n        && (!this.options.capScreenshareBitrate\n        || (this.options.capScreenshareBitrate && !this._isSharingScreen()))) {\n        ssrcInfo = {\n            ssrcs: [],\n            groups: []\n        };\n        for (let i = 0; i < SIM_LAYER_RIDS.length; i++) {\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\n        }\n        ssrcInfo.groups.push({\n            ssrcs: ssrcInfo.ssrcs.slice(),\n            semantics: 'SIM'\n        });\n    } else {\n        ssrcInfo = {\n            ssrcs: [ SDPUtil.generateSsrc() ],\n            groups: []\n        };\n    }\n    if (!this.options.disableRtx) {\n        // Specifically use a for loop here because we'll\n        //  be adding to the list we're iterating over, so we\n        //  only want to iterate through the items originally\n        //  on the list\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\n\n        for (let i = 0; i < currNumSsrcs; ++i) {\n            const primarySsrc = ssrcInfo.ssrcs[i];\n            const rtxSsrc = SDPUtil.generateSsrc();\n\n            ssrcInfo.ssrcs.push(rtxSsrc);\n            ssrcInfo.groups.push({\n                ssrcs: [ primarySsrc, rtxSsrc ],\n                semantics: 'FID'\n            });\n        }\n    }\n    ssrcInfo.msid = track.storedMSID;\n    this.localSSRCs.set(rtcId, ssrcInfo);\n\n    return ssrcInfo;\n};\n\n/**\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\n * instance.\n * @return {string}\n */\nTraceablePeerConnection.prototype.toString = function() {\n    return `TPC[${this.id},p2p:${this.isP2P}]`;\n};\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport SDPUtil from './SDPUtil';\nimport { parseSecondarySSRC, SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Begin helper functions\n */\n/**\n * Updates or inserts the appropriate rtx information for primarySsrc with\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\n * @param {MLineWrap} mLine\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\n *  primary ssrc\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\n */\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\n    logger.debug(\n        `Updating mline to associate ${rtxSsrc}`\n        + `rtx ssrc with primary stream, ${primarySsrcInfo.id}`);\n    const primarySsrc = primarySsrcInfo.id;\n    const primarySsrcMsid = primarySsrcInfo.msid;\n    const primarySsrcCname = primarySsrcInfo.cname;\n\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\n\n    if (previousRtxSSRC === rtxSsrc) {\n        logger.debug(`${rtxSsrc} was already associated with ${primarySsrc}`);\n\n        return;\n    }\n    if (previousRtxSSRC) {\n        logger.debug(\n            `${primarySsrc} was previously associated with rtx`\n            + `${previousRtxSSRC}, removing all references to it`);\n\n        // Stream already had an rtx ssrc that is different than the one given,\n        //  remove all trace of the old one\n        mLine.removeSSRC(previousRtxSSRC);\n\n        logger.debug(`groups before filtering for ${previousRtxSSRC}`);\n        logger.debug(mLine.dumpSSRCGroups());\n\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\n    }\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'cname',\n        value: primarySsrcCname\n    });\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'msid',\n        value: primarySsrcMsid\n    });\n    mLine.addSSRCGroup({\n        semantics: 'FID',\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\n    });\n}\n\n/**\n * End helper functions\n */\n\n/**\n * Adds any missing RTX streams for video streams\n *  and makes sure that they remain consistent\n */\nexport default class RtxModifier {\n    /**\n     * Constructor\n     */\n    constructor() {\n        /**\n         * Map of video ssrc to corresponding RTX\n         *  ssrc\n         */\n        this.correspondingRtxSsrcs = new Map();\n    }\n\n    /**\n     * Clear the cached map of primary video ssrcs to\n     *  their corresponding rtx ssrcs so that they will\n     *  not be used for the next call to modifyRtxSsrcs\n     */\n    clearSsrcCache() {\n        this.correspondingRtxSsrcs.clear();\n    }\n\n    /**\n     * Explicitly set the primary video ssrc -> rtx ssrc\n     *  mapping to be used in modifyRtxSsrcs\n     * @param {Map} ssrcMapping a mapping of primary video\n     *  ssrcs to their corresponding rtx ssrcs\n     */\n    setSsrcCache(ssrcMapping) {\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\n        this.correspondingRtxSsrcs = ssrcMapping;\n    }\n\n    /**\n     * Adds RTX ssrcs for any video ssrcs that don't\n     *  already have them.  If the video ssrc has been\n     *  seen before, and already had an RTX ssrc generated,\n     *  the same RTX ssrc will be used again.\n     * @param {string} sdpStr sdp in raw string format\n     */\n    modifyRtxSsrcs(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        return this.modifyRtxSsrcs2(videoMLine)\n            ? sdpTransformer.toRawSDP() : sdpStr;\n    }\n\n    /**\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the\n     *  {@link MLineWrap} instance wrapping video media as an argument.\n     * @param {MLineWrap} videoMLine\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by\n     *  {@link SdpTransformWrap} has been modified or <tt>false</tt> otherwise.\n     */\n    modifyRtxSsrcs2(videoMLine) {\n        if (videoMLine.direction === 'recvonly') {\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\n\n            return false;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\n\n            return false;\n        }\n        logger.debug('Current ssrc mapping: ', this.correspondingRtxSsrcs);\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\n\n        logger.debug('Parsed primary video ssrcs ', primaryVideoSsrcs,\n            ' making sure all have rtx streams');\n        for (const ssrc of primaryVideoSsrcs) {\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\n\n            if (correspondingRtxSsrc) {\n                logger.debug(\n                    'Already have an associated rtx ssrc for'\n                    + `video ssrc ${ssrc}: ${correspondingRtxSsrc}`);\n            } else {\n                logger.debug(\n                    `No previously associated rtx ssrc for video ssrc ${ssrc}`);\n\n                // If there's one in the sdp already for it, we'll just set\n                //  that as the corresponding one\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\n\n                if (previousAssociatedRtxStream) {\n                    logger.debug(\n                        `Rtx stream ${previousAssociatedRtxStream} `\n                        + 'already existed in the sdp as an rtx stream for '\n                        + `${ssrc}`);\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\n                } else {\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\n                    logger.debug(`Generated rtx ssrc ${correspondingRtxSsrc} `\n                                 + `for ssrc ${ssrc}`);\n                }\n                logger.debug(`Caching rtx ssrc ${correspondingRtxSsrc} `\n                             + `for video ssrc ${ssrc}`);\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\n            }\n            updateAssociatedRtxStream(\n                videoMLine,\n                {\n                    id: ssrc,\n                    cname,\n                    msid\n                },\n                correspondingRtxSsrc);\n        }\n\n        // FIXME we're not looking into much details whether the SDP has been\n        // modified or not once the precondition requirements are met.\n        return true;\n    }\n\n    /**\n     * Strip all rtx streams from the given sdp\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} sdp string with all rtx streams stripped\n     */\n    stripRtx(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n        if (videoMLine.direction === 'recvonly') {\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\n\n            return sdpStr;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\n\n            return sdpStr;\n        }\n        if (!videoMLine.containsAnySSRCGroups()) {\n            logger.debug('RtxModifier doing nothing, '\n              + 'no video ssrcGroups present');\n\n            return sdpStr;\n        }\n        const fidGroups = videoMLine.findGroups('FID');\n\n        // Remove the fid groups from the mline\n\n        videoMLine.removeGroupsBySemantics('FID');\n\n        // Get the rtx ssrcs and remove them from the mline\n        for (const fidGroup of fidGroups) {\n            const rtxSsrc = parseSecondarySSRC(fidGroup);\n\n            videoMLine.removeSSRC(rtxSsrc);\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport {\n    parsePrimarySSRC,\n    parseSecondarySSRC,\n    SdpTransformWrap\n} from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles the work of keeping video ssrcs consistent across multiple\n * o/a cycles, making it such that all stream operations can be\n * kept local and do not need to be signaled.\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\n * the primary video stream\n */\nexport default class SdpConsistency {\n    /**\n     * Constructor\n     * @param {string} logPrefix the log prefix appended to every logged\n     * message, currently used to distinguish for which\n     * <tt>TraceablePeerConnection</tt> the instance works.\n     */\n    constructor(logPrefix) {\n        this.clearVideoSsrcCache();\n        this.logPrefix = logPrefix;\n    }\n\n    /**\n     * Clear the cached video primary and primary rtx ssrcs so that\n     *  they will not be used for the next call to\n     *  makeVideoPrimarySsrcsConsistent\n     */\n    clearVideoSsrcCache() {\n        this.cachedPrimarySsrc = null;\n        this.injectRecvOnly = false;\n    }\n\n    /**\n     * Explicitly set the primary ssrc to be used in\n     *  makeVideoPrimarySsrcsConsistent\n     * @param {number} primarySsrc the primarySsrc to be used\n     *  in future calls to makeVideoPrimarySsrcsConsistent\n     * @throws Error if <tt>primarySsrc</tt> is not a number\n     */\n    setPrimarySsrc(primarySsrc) {\n        if (typeof primarySsrc !== 'number') {\n            throw new Error('Primary SSRC must be a number!');\n        }\n        this.cachedPrimarySsrc = primarySsrc;\n    }\n\n    /**\n     * Checks whether or not there is a primary video SSRC cached already.\n     * @return {boolean}\n     */\n    hasPrimarySsrcCached() {\n        return Boolean(this.cachedPrimarySsrc);\n    }\n\n    /**\n     * Given an sdp string, either:\n     *  1) record the primary video and primary rtx ssrcs to be\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\n     *  2) change the primary and primary rtx ssrcs in the given sdp\n     *   to match the ones previously cached\n     * @param {string} sdpStr the sdp string to (potentially)\n     *  change to make the video ssrcs consistent\n     * @returns {string} a (potentially) modified sdp string\n     *  with ssrcs consistent with this class' cache\n     */\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.logPrefix} no 'video' media found in the sdp: `\n                    + `${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        if (videoMLine.direction === 'recvonly') {\n            // If the mline is recvonly, we'll add the primary\n            //  ssrc as a recvonly ssrc\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\n                videoMLine.addSSRCAttribute({\n                    id: this.cachedPrimarySsrc,\n                    attribute: 'cname',\n                    value: `recvonly-${this.cachedPrimarySsrc}`\n                });\n            } else {\n                logger.info(\n                    `${this.logPrefix} no SSRC found for the recvonly video`\n                        + 'stream!');\n            }\n        } else {\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\n\n            if (!newPrimarySsrc) {\n                logger.info(\n                    `${this.logPrefix} sdp-consistency couldn't`\n                        + ' parse new primary ssrc');\n\n                return sdpStr;\n            }\n            if (this.cachedPrimarySsrc) {\n                logger.info(\n                    `${this.logPrefix} sdp-consistency replacing new ssrc`\n                        + `${newPrimarySsrc} with cached `\n                        + `${this.cachedPrimarySsrc}`);\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\n                for (const group of videoMLine.ssrcGroups) {\n                    if (group.semantics === 'FID') {\n                        const primarySsrc = parsePrimarySSRC(group);\n                        const rtxSsrc = parseSecondarySSRC(group);\n\n                        // eslint-disable-next-line max-depth\n                        if (primarySsrc === newPrimarySsrc) {\n                            group.ssrcs\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\n                        }\n                    }\n                }\n            } else {\n                this.cachedPrimarySsrc = newPrimarySsrc;\n                logger.info(\n                    `${this.logPrefix} sdp-consistency caching primary ssrc`\n                        + `${this.cachedPrimarySsrc}`);\n            }\n\n            this.injectRecvOnly = true;\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\nconst RTCEvents = require('../../service/RTC/RTCEvents');\n\nlet ttfmTrackerAudioAttached = false;\nlet ttfmTrackerVideoAttached = false;\n\n/**\n * List of container events that we are going to process. _onContainerEventHandler will be added as listener to the\n * container for every event in the list.\n */\nconst containerEvents = [\n    'abort', 'canplay', 'canplaythrough', 'emptied', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart',\n    'pause', 'play', 'playing', 'ratechange', 'stalled', 'suspend', 'waiting'\n];\n\n/* eslint-disable max-params */\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiRemoteTrack extends JitsiTrack {\n    /**\n     * Creates new JitsiRemoteTrack instance.\n     * @param {RTC} rtc the RTC service instance.\n     * @param {JitsiConference} conference the conference to which this track\n     *        belongs to\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\n     *        the new JitsiRemoteTrack\n     * @param {MediaType} mediaType the type of the media\n     * @param {VideoType} videoType the type of the video if applicable\n     * @param {number} ssrc the SSRC number of the Media Stream\n     * @param {boolean} muted the initial muted state\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\n     * P2P session\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\n     * @constructor\n     */\n    constructor(\n            rtc,\n            conference,\n            ownerEndpointId,\n            stream,\n            track,\n            mediaType,\n            videoType,\n            ssrc,\n            muted,\n            isP2P) {\n        super(\n            conference,\n            stream,\n            track,\n            () => {\n                // Nothing to do if the track is inactive.\n            },\n            mediaType,\n            videoType);\n        this.rtc = rtc;\n\n        // Prevent from mixing up type of SSRC which should be a number\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\n        }\n        this.ssrc = ssrc;\n        this.ownerEndpointId = ownerEndpointId;\n        this.muted = muted;\n        this.isP2P = isP2P;\n\n        logger.debug(`New remote track added: ${this}`);\n\n        // we want to mark whether the track has been ever muted\n        // to detect ttfm events for startmuted conferences, as it can\n        // significantly increase ttfm values\n        this.hasBeenMuted = muted;\n\n        // Bind 'onmute' and 'onunmute' event handlers\n        if (this.rtc && this.track) {\n            this._bindTrackHandlers();\n        }\n        this._containerHandlers = {};\n        containerEvents.forEach(event => {\n            this._containerHandlers[event] = this._containerEventHandler.bind(this, event);\n        });\n    }\n\n    /* eslint-enable max-params */\n    /**\n     * Attaches the track handlers.\n     *\n     * @returns {void}\n     */\n    _bindTrackHandlers() {\n        this.track.addEventListener('mute', () => this._onTrackMute());\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\n        this.track.addEventListener('ended', () => {\n            logger.debug(`\"onended\" event(${Date.now()}): ${this}`);\n        });\n    }\n\n    /**\n     * Callback invoked when the track is muted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackMute() {\n        logger.debug(`\"onmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\n    }\n\n    /**\n     * Callback invoked when the track is unmuted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackUnmute() {\n        logger.debug(`\"onunmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\n    }\n\n    /**\n     * Sets current muted status and fires an events for the change.\n     * @param value the muted status.\n     */\n    setMute(value) {\n        if (this.muted === value) {\n            return;\n        }\n\n        if (value) {\n            this.hasBeenMuted = true;\n        }\n\n        // we can have a fake video stream\n        if (this.stream) {\n            this.stream.muted = value;\n        }\n\n        this.muted = value;\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\n    }\n\n    /**\n     * Returns the current muted status of the track.\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\n     * muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        return this.muted;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.ownerEndpointId;\n    }\n\n    /**\n     * Return false;\n     */\n    isLocal() {\n        return false;\n    }\n\n    /**\n     * Returns the synchronization source identifier (SSRC) of this remote\n     * track.\n     *\n     * @returns {number} the SSRC of this remote track.\n     */\n    getSSRC() {\n        return this.ssrc;\n    }\n\n    /**\n     * Changes the video type of the track.\n     *\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\n     */\n    _setVideoType(type) {\n        if (this.videoType === type) {\n            return;\n        }\n        this.videoType = type;\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\n    }\n\n    /**\n     * Handles track play events.\n     */\n    _playCallback() {\n        const type = this.isVideoTrack() ? 'video' : 'audio';\n\n        const now = window.performance.now();\n\n        console.log(`(TIME) Render ${type}:\\t`, now);\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\n\n        // The conference can be started without calling GUM\n        // FIXME if there would be a module for connection times this kind\n        // of logic (gumDuration or ttfm) should end up there\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\n        const gumDuration\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\n\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\n        // waits until there are 2 participants to start Jingle sessions.\n        const ttfm = now\n            - (this.conference.getConnectionTimes()['session.initiate']\n                - this.conference.getConnectionTimes()['muc.joined'])\n            - gumDuration;\n\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\n\n        Statistics.sendAnalytics(createTtfmEvent(\n            {\n                'media_type': type,\n                muted: this.hasBeenMuted,\n                value: ttfm\n            }));\n\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     * @private\n     */\n    _attachTTFMTracker(container) {\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\n            return;\n        }\n\n        if (this.isAudioTrack()) {\n            ttfmTrackerAudioAttached = true;\n        }\n        if (this.isVideoTrack()) {\n            ttfmTrackerVideoAttached = true;\n        }\n\n        container.addEventListener('canplay', this._playCallback.bind(this));\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) {\n        logger.debug(`Track has been attached to a container: ${this}`);\n\n        containerEvents.forEach(event => {\n            container.addEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) {\n        logger.debug(`Track has been detached from a container: ${this}`);\n\n        containerEvents.forEach(event => {\n            container.removeEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * An event handler for events triggered by the attached container.\n     *\n     * @param {string} type - The type of the event.\n     */\n    _containerEventHandler(type) {\n        logger.debug(`${type} handler was called for a container with attached ${this}`);\n    }\n\n    /**\n     * Returns a string with a description of the current status of the track.\n     *\n     * @returns {string}\n     */\n    _getStatus() {\n        const { enabled, muted, readyState } = this.track;\n\n        return `readyState: ${readyState}, muted: ${muted}, enabled: ${enabled}`;\n    }\n\n    /**\n     * Creates a text representation of this remote track instance.\n     * @return {string}\n     */\n    toString() {\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\n            this.getSSRC()}, p2p: ${this.isP2P}, status: ${this._getStatus()}]`;\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport { SdpTransformWrap } from '../xmpp/SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\n * description getter. Modifies the SDP, so that it will contain muted local\n * video tracks description, even though their underlying {MediaStreamTrack}s\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\n * side.\n */\nexport default class LocalSdpMunger {\n\n    /**\n     * Creates new <tt>LocalSdpMunger</tt> instance.\n     *\n     * @param {TraceablePeerConnection} tpc\n     */\n    constructor(tpc) {\n        this.tpc = tpc;\n    }\n\n    /**\n     * Makes sure that muted local video tracks associated with the parent\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\n     * removed from the peerconnection).\n     *\n     * NOTE 1 video track is assumed\n     *\n     * @param {SdpTransformWrap} transformer the transformer instance which will\n     * be used to process the SDP.\n     * @return {boolean} <tt>true</tt> if there were any modifications to\n     * the SDP wrapped by <tt>transformer</tt>.\n     * @private\n     */\n    _addMutedLocalVideoTracksToSDP(transformer) {\n        // Go over each video tracks and check if the SDP has to be changed\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\n\n        if (!localVideos.length) {\n            return false;\n        } else if (localVideos.length !== 1) {\n            logger.error(\n                `${this.tpc} there is more than 1 video track ! `\n                    + 'Strange things may happen !', localVideos);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.tpc} unable to hack local video track SDP`\n                    + '- no \"video\" media');\n\n            return false;\n        }\n\n        let modified = false;\n\n        for (const videoTrack of localVideos) {\n            const muted = videoTrack.isMuted();\n            const mediaStream = videoTrack.getOriginalStream();\n\n            // During the mute/unmute operation there are periods of time when\n            // the track's underlying MediaStream is not added yet to\n            // the PeerConnection. The SDP needs to be munged in such case.\n            const isInPeerConnection\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\n            const shouldFakeSdp = muted || !isInPeerConnection;\n\n            logger.debug(\n                `${this.tpc} ${videoTrack} muted: ${\n                    muted}, is in PeerConnection: ${\n                    isInPeerConnection} => should fake sdp ? : ${\n                    shouldFakeSdp}`);\n\n            if (!shouldFakeSdp) {\n                continue; // eslint-disable-line no-continue\n            }\n\n            // Inject removed SSRCs\n            const requiredSSRCs\n                = this.tpc.isSimulcastOn()\n                    ? this.tpc.simulcast.ssrcCache\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\n\n            if (!requiredSSRCs.length) {\n                logger.error(\n                    `No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\n\n                continue; // eslint-disable-line no-continue\n            }\n\n            modified = true;\n\n            // We need to fake sendrecv.\n            // NOTE the SDP produced here goes only to Jicofo and is never set\n            // as localDescription. That's why\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\n            videoMLine.direction = 'sendrecv';\n\n            // Check if the recvonly has MSID\n            const primarySSRC = requiredSSRCs[0];\n\n            // FIXME The cname could come from the stream, but may turn out to\n            // be too complex. It is fine to come up with any value, as long as\n            // we only care about the actual SSRC values when deciding whether\n            // or not an update should be sent.\n            const primaryCname = `injected-${primarySSRC}`;\n\n            for (const ssrcNum of requiredSSRCs) {\n                // Remove old attributes\n                videoMLine.removeSSRC(ssrcNum);\n\n                // Inject\n                logger.debug(\n                    `${this.tpc} injecting video SSRC: ${ssrcNum} for ${\n                        videoTrack}`);\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'cname',\n                    value: primaryCname\n                });\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'msid',\n                    value: videoTrack.storedMSID\n                });\n            }\n            if (requiredSSRCs.length > 1) {\n                const group = {\n                    ssrcs: requiredSSRCs.join(' '),\n                    semantics: 'SIM'\n                };\n\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\n                    // Inject the group\n                    logger.debug(\n                        `${this.tpc} injecting SIM group for ${videoTrack}`,\n                        group);\n                    videoMLine.addSSRCGroup(group);\n                }\n            }\n\n            // Insert RTX\n            // FIXME in P2P RTX is used by Chrome regardless of config option\n            // status. Because of that 'source-remove'/'source-add'\n            // notifications are still sent to remove/add RTX SSRC and FID group\n            if (!this.tpc.options.disableRtx) {\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\n            }\n        }\n\n        return modified;\n    }\n\n    /**\n     * Modifies 'cname', 'msid', 'label' and 'mslabel' by appending\n     * the id of {@link LocalSdpMunger#tpc} at the end, preceding by a dash\n     * sign.\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the\n     * session description which will be modified in place.\n     * @returns {void}\n     * @private\n     */\n    _transformMediaIdentifiers(mediaSection) {\n        const pcId = this.tpc.id;\n\n        for (const ssrcLine of mediaSection.ssrcs) {\n            switch (ssrcLine.attribute) {\n            case 'cname':\n            case 'label':\n            case 'mslabel':\n                ssrcLine.value = ssrcLine.value && `${ssrcLine.value}-${pcId}`;\n                break;\n            case 'msid': {\n                if (ssrcLine.value) {\n                    const streamAndTrackIDs = ssrcLine.value.split(' ');\n\n                    if (streamAndTrackIDs.length === 2) {\n                        const streamId = streamAndTrackIDs[0];\n                        const trackId = streamAndTrackIDs[1];\n\n                        ssrcLine.value\n                            = `${streamId}-${pcId} ${trackId}-${pcId}`;\n                    } else {\n                        logger.warn(\n                            'Unable to munge local MSID'\n                                + `- weird format detected: ${ssrcLine.value}`);\n                    }\n                }\n                break;\n            }\n            }\n        }\n    }\n\n    /**\n     * Maybe modifies local description to fake local video tracks SDP when\n     * those are muted.\n     *\n     * @param {object} desc the WebRTC SDP object instance for the local\n     * description.\n     * @returns {RTCSessionDescription}\n     */\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\n        if (!desc) {\n            throw new Error('No local description passed in.');\n        }\n\n        const transformer = new SdpTransformWrap(desc.sdp);\n\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transformer.toRawSDP()\n            });\n        }\n\n        return desc;\n    }\n\n    /**\n     * This transformation will make sure that stream identifiers are unique\n     * across all of the local PeerConnections even if the same stream is used\n     * by multiple instances at the same time.\n     * Each PeerConnection assigns different SSRCs to the same local\n     * MediaStream, but the MSID remains the same as it's used to identify\n     * the stream by the WebRTC backend. The transformation will append\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\n     *\n     * @param {RTCSessionDescription} sessionDesc - The local session\n     * description (this instance remains unchanged).\n     * @return {RTCSessionDescription} - Transformed local session description\n     * (a modified copy of the one given as the input).\n     */\n    transformStreamIdentifiers(sessionDesc) {\n        // FIXME similar check is probably duplicated in all other transformers\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\n            return sessionDesc;\n        }\n\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\n        const audioMLine = transformer.selectMedia('audio');\n\n        if (audioMLine) {\n            this._transformMediaIdentifiers(audioMLine);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (videoMLine) {\n            this._transformMediaIdentifiers(videoMLine);\n        }\n\n        return new RTCSessionDescription({\n            type: sessionDesc.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport * as RTCEvents from '../../service/RTC/RTCEvents';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport browser from '../browser';\n\nconst Resolutions = require('../../service/RTC/Resolutions');\nconst VideoType = require('../../service/RTC/VideoType');\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\n\nconst logger = getLogger(__filename);\n\n/**\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\n * over the data channel.\n */\nconst STATS_MESSAGE_TYPE = 'stats';\n\nconst kSimulcastFormats = [\n    { width: 1920,\n        height: 1080,\n        layers: 3,\n        target: 'high',\n        targetRN: 4000000 },\n    { width: 1280,\n        height: 720,\n        layers: 3,\n        target: 'high',\n        targetRN: 2500000 },\n    { width: 960,\n        height: 540,\n        layers: 3,\n        target: 'standard',\n        targetRN: 900000 },\n    { width: 640,\n        height: 360,\n        layers: 2,\n        target: 'standard',\n        targetRN: 500000 },\n    { width: 480,\n        height: 270,\n        layers: 2,\n        target: 'low',\n        targetRN: 350000 },\n    { width: 320,\n        height: 180,\n        layers: 1,\n        target: 'low',\n        targetRN: 150000 }\n];\n\n/**\n * The maximum bitrate to use as a measurement against the participant's current\n * bitrate. This cap helps in the cases where the participant's bitrate is high\n * but not enough to fulfill high targets, such as with 1080p.\n */\nconst MAX_TARGET_BITRATE = 2500;\n\n/**\n * The initial bitrate for video in kbps.\n */\nlet startBitrate = 800;\n\n/**\n * Gets the expected bitrate (in kbps) in perfect network conditions.\n * @param simulcast {boolean} whether simulcast is enabled or not.\n * @param resolution {Resolution} the resolution.\n * @param millisSinceStart {number} the number of milliseconds since sending video started.\n * @param videoQualitySettings {Object} the bitrate and codec settings for the local video source.\n */\nfunction getTarget(simulcast, resolution, millisSinceStart, videoQualitySettings) {\n    // Completely ignore the bitrate in the first 5 seconds, as the first\n    // event seems to fire very early and the value is suspicious and causes\n    // false positives.\n    if (millisSinceStart < 15000) {\n        return 1;\n    }\n\n    let target = 0;\n    let height = Math.min(resolution.height, resolution.width);\n\n    // Find the first format with height no bigger than ours.\n    let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\n\n    if (simulcastFormat && simulcast && videoQualitySettings.codec === CodecMimeType.VP8) {\n        // Sum the target fields from all simulcast layers for the given\n        // resolution (e.g. 720p + 360p + 180p) for VP8 simulcast.\n        for (height = simulcastFormat.height; height >= 180; height /= 2) {\n            const targetHeight = height;\n\n            simulcastFormat = kSimulcastFormats.find(f => f.height === targetHeight);\n            if (simulcastFormat) {\n                target += browser.isReactNative()\n                    ? simulcastFormat.targetRN\n                    : videoQualitySettings[simulcastFormat.target];\n            } else {\n                break;\n            }\n        }\n    } else if (simulcastFormat) {\n        // For VP9 SVC, H.264 (simulcast automatically disabled) and p2p, target bitrate will be\n        // same as that of the individual stream bitrate.\n        target = browser.isReactNative()\n            ? simulcastFormat.targetRN\n            : videoQualitySettings[simulcastFormat.target];\n    }\n\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\n    // of connection quality by 1 second. Convert target from bps to kbps.\n    return Math.min(target / 1000, rampUp(Math.max(0, millisSinceStart - 1000)));\n}\n\n/**\n * Gets the bitrate to which GCC would have ramped up in perfect network\n * conditions after millisSinceStart milliseconds.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video was enabled.\n */\nfunction rampUp(millisSinceStart) {\n    if (millisSinceStart > 60000) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    // According to GCC the send side bandwidth estimation grows with at most\n    // 8% per second.\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\n}\n\n/**\n * A class which monitors the local statistics coming from the RTC modules, and\n * calculates a \"connection quality\" value, in percent, for the media\n * connection. A value of 100% indicates a very good network connection, and a\n * value of 0% indicates a poor connection.\n */\nexport default class ConnectionQuality {\n    /**\n     *\n     * @param conference\n     * @param eventEmitter\n     * @param options\n     */\n    constructor(conference, eventEmitter, options) {\n        this.eventEmitter = eventEmitter;\n\n        /**\n         * The owning JitsiConference.\n         */\n        this._conference = conference;\n\n        /**\n         * Holds statistics about the local connection quality.\n         */\n        this._localStats = {\n            connectionQuality: 100,\n            jvbRTT: undefined\n        };\n\n        /**\n         * The time this._localStats.connectionQuality was last updated.\n         */\n        this._lastConnectionQualityUpdate = -1;\n\n        /**\n         * Maps a participant ID to an object holding connection quality\n         * statistics received from this participant.\n         */\n        this._remoteStats = {};\n\n        /**\n         * The time that the ICE state last changed to CONNECTED. We use this\n         * to calculate how much time we as a sender have had to ramp-up.\n         */\n        this._timeIceConnected = -1;\n\n        /**\n         * The time that local video was unmuted. We use this to calculate how\n         * much time we as a sender have had to ramp-up.\n         */\n        this._timeVideoUnmuted = -1;\n\n        // We assume a global startBitrate value for the sake of simplicity.\n        if (options.config.startBitrate && options.config.startBitrate > 0) {\n            startBitrate = options.config.startBitrate;\n        }\n\n        // TODO: consider ignoring these events and letting the user of\n        // lib-jitsi-meet handle these separately.\n        conference.on(\n            ConferenceEvents.CONNECTION_INTERRUPTED,\n            () => {\n                this._updateLocalConnectionQuality(0);\n                this.eventEmitter.emit(\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n                    this._localStats);\n                this._broadcastLocalStats();\n            });\n\n        conference.room.addListener(\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n            (jingleSession, newState) => {\n                if (!jingleSession.isP2P && newState === 'connected') {\n                    this._timeIceConnected = window.performance.now();\n                }\n            });\n\n        // Listen to DataChannel message from other participants in the\n        // conference, and update the _remoteStats field accordingly.\n        // TODO - Delete this when all the mobile endpoints switch to using the new Colibri\n        // message format for sending the endpoint stats.\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === STATS_MESSAGE_TYPE) {\n                    this._updateRemoteStats(\n                        participant.getId(), payload.values);\n                }\n            });\n\n        conference.on(\n            ConferenceEvents.ENDPOINT_STATS_RECEIVED,\n            (participant, payload) => {\n                this._updateRemoteStats(participant.getId(), payload);\n            });\n\n        // Listen to local statistics events originating from the RTC module and update the _localStats field.\n        conference.statistics.addConnectionStatsListener(this._updateLocalStats.bind(this));\n\n        // Save the last time we were unmuted.\n        conference.on(\n            ConferenceEvents.TRACK_MUTE_CHANGED,\n            track => {\n                if (track.isVideoTrack()) {\n                    if (track.isMuted()) {\n                        this._timeVideoUnmuted = -1;\n                    } else {\n                        this._maybeUpdateUnmuteTime();\n                    }\n                }\n            });\n        conference.on(\n            ConferenceEvents.TRACK_ADDED,\n            track => {\n                if (track.isVideoTrack() && !track.isMuted()) {\n                    this._maybeUpdateUnmuteTime();\n                }\n            });\n        conference.rtc.on(\n            RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED,\n            track => {\n                this._localStats.maxEnabledResolution = track.maxEnabledResolution;\n            });\n\n        conference.on(\n            ConferenceEvents.SERVER_REGION_CHANGED,\n            serverRegion => {\n                this._localStats.serverRegion = serverRegion;\n            });\n\n        conference.on(\n            ConferenceEvents.PROPERTIES_CHANGED,\n            properties => {\n                this._localStats.bridgeCount\n                    = Number((properties || {})['bridge-count']);\n            }\n        );\n    }\n\n    /**\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\n     * doesn't change it.\n     */\n    _maybeUpdateUnmuteTime() {\n        if (this._timeVideoUnmuted < 0) {\n            this._timeVideoUnmuted = window.performance.now();\n        }\n    }\n\n    /**\n     * Calculates a new \"connection quality\" value.\n     * @param videoType {VideoType} the type of the video source (camera or a screen capture).\n     * @param isMuted {boolean} whether the local video is muted.\n     * @param resolutionName {Resolution} the input resolution used by the camera.\n     * @returns {*} the newly calculated connection quality.\n     */\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\n\n        // resolutionName is an index into Resolutions (where \"720\" is\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\n        const resolution = Resolutions[resolutionName];\n\n        let quality = 100;\n        let packetLoss;\n\n        // TODO: take into account packet loss for received streams\n\n        if (this._localStats.packetLoss) {\n            packetLoss = this._localStats.packetLoss.upload;\n\n            // Ugly Hack Alert (UHA):\n            // The packet loss for the upload direction is calculated based on\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\n            // termination for audio, these reports come from the actual\n            // receivers in the conference and therefore the reported packet\n            // loss includes loss from the bridge to the receiver.\n            // When we are sending video this effect is small, because the\n            // number of video packets is much larger than the number of audio\n            // packets (and our calculation is based on the total number of\n            // received and lost packets).\n            // When video is muted, however, the effect might be significant,\n            // but we don't know what it is. We do know that it is positive, so\n            // as a temporary solution, until RTCP termination is implemented\n            // for the audio streams, we relax the packet loss checks here.\n            if (isMuted) {\n                packetLoss *= 0.5;\n            }\n        }\n\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\n            || this._timeIceConnected < 0\n            || this._timeVideoUnmuted < 0) {\n\n            // Calculate a value based on packet loss only.\n            if (packetLoss === undefined) {\n                logger.error('Cannot calculate connection quality, unknown '\n                    + 'packet loss.');\n                quality = 100;\n            } else if (packetLoss <= 2) {\n                quality = 100; // Full 5 bars.\n            } else if (packetLoss <= 4) {\n                quality = 70; // 4 bars\n            } else if (packetLoss <= 6) {\n                quality = 50; // 3 bars\n            } else if (packetLoss <= 8) {\n                quality = 30; // 2 bars\n            } else if (packetLoss <= 12) {\n                quality = 10; // 1 bars\n            } else {\n                quality = 0; // Still 1 bar, but slower climb-up.\n            }\n        } else {\n            // Calculate a value based on the send video bitrate on the active TPC.\n            const activeTPC = this._conference.getActivePeerConnection();\n\n            if (activeTPC) {\n                const isSimulcastOn = activeTPC.isSimulcastOn();\n                const videoQualitySettings = activeTPC.getTargetVideoBitrates();\n\n                // Add the codec info as well.\n                videoQualitySettings.codec = activeTPC.getConfiguredVideoCodec();\n\n                // Time since sending of video was enabled.\n                const millisSinceStart = window.performance.now()\n                    - Math.max(this._timeVideoUnmuted, this._timeIceConnected);\n\n                // Expected sending bitrate in perfect conditions.\n                let target = getTarget(isSimulcastOn, resolution, millisSinceStart, videoQualitySettings);\n\n                target = Math.min(target, MAX_TARGET_BITRATE);\n                quality = 100 * this._localStats.bitrate.upload / target;\n            }\n\n            // Whatever the bitrate, drop early if there is significant loss\n            if (packetLoss && packetLoss >= 10) {\n                quality = Math.min(quality, 30);\n            }\n        }\n\n        // Make sure that the quality doesn't climb quickly\n        if (this._lastConnectionQualityUpdate > 0) {\n            const maxIncreasePerSecond = 2;\n            const prevConnectionQuality = this._localStats.connectionQuality;\n            const diffSeconds = (window.performance.now() - this._lastConnectionQualityUpdate) / 1000;\n\n            quality = Math.min(quality, prevConnectionQuality + (diffSeconds * maxIncreasePerSecond));\n        }\n\n        return Math.min(100, quality);\n    }\n\n    /**\n     * Updates the localConnectionQuality value\n     * @param values {number} the new value. Should be in [0, 100].\n     */\n    _updateLocalConnectionQuality(value) {\n        this._localStats.connectionQuality = value;\n        this._lastConnectionQualityUpdate = window.performance.now();\n    }\n\n    /**\n     * Broadcasts the local statistics to all other participants in the\n     * conference.\n     */\n    _broadcastLocalStats() {\n        // Send only the data that remote participants care about.\n        const data = {\n            bitrate: this._localStats.bitrate,\n            packetLoss: this._localStats.packetLoss,\n            connectionQuality: this._localStats.connectionQuality,\n            jvbRTT: this._localStats.jvbRTT,\n            serverRegion: this._localStats.serverRegion,\n            maxEnabledResolution: this._localStats.maxEnabledResolution,\n            avgAudioLevels: this._localStats.localAvgAudioLevels\n        };\n\n        try {\n            this._conference.sendEndpointStatsMessage(data);\n        } catch (err) {\n            // Ignore the error as we might hit it in the beginning of the call before the channel is ready.\n            // The statistics will be sent again after few seconds and error is logged elseware as well.\n        }\n    }\n\n    /**\n     * Updates the local statistics\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\n     * the stats\n     * @param data new statistics\n     */\n    _updateLocalStats(tpc, data) {\n        // Update jvbRTT\n        if (!tpc.isP2P) {\n            const jvbRTT\n                = data.transport\n                    && data.transport.length && data.transport[0].rtt;\n\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\n        }\n\n        // Do not continue with processing of other stats if they do not\n        // originate from the active peerconnection\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        let key;\n        const updateLocalConnectionQuality\n            = !this._conference.isConnectionInterrupted();\n        const localVideoTrack\n            = this._conference.getLocalVideoTrack();\n        const videoType\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\n        const resolution = localVideoTrack\n            ? Math.min(localVideoTrack.resolution, localVideoTrack.maxEnabledResolution) : null;\n\n        if (!isMuted) {\n            this._maybeUpdateUnmuteTime();\n        }\n\n        // Copy the fields already in 'data'.\n        for (key in data) {\n            if (data.hasOwnProperty(key)) {\n                this._localStats[key] = data[key];\n            }\n        }\n\n        // And re-calculate the connectionQuality field.\n        if (updateLocalConnectionQuality) {\n            this._updateLocalConnectionQuality(\n                this._calculateConnectionQuality(\n                    videoType,\n                    isMuted,\n                    resolution));\n        }\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._localStats);\n        this._broadcastLocalStats();\n    }\n\n    /**\n     * Updates remote statistics\n     * @param id the id of the remote participant\n     * @param data the statistics received\n     */\n    _updateRemoteStats(id, data) {\n        // Use only the fields we need\n        this._remoteStats[id] = {\n            bitrate: data.bitrate,\n            packetLoss: data.packetLoss,\n            connectionQuality: data.connectionQuality,\n            jvbRTT: data.jvbRTT,\n            serverRegion: data.serverRegion,\n            maxEnabledResolution: data.maxEnabledResolution,\n            avgAudioLevels: data.avgAudioLevels\n        };\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n            id,\n            this._remoteStats[id]);\n    }\n\n    /**\n     * Returns the local statistics.\n     * Exported only for use in jitsi-meet-torture.\n     */\n    getStats() {\n        return this._localStats;\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceErrors from '../../JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class deals with shenanigans around JVB media session's ICE failed status handling.\n *\n * If ICE restarts are NOT explicitly enabled by the {@code enableIceRestart} config option, then the conference will\n * delay emitting the {@JitsiConferenceErrors.ICE_FAILED} event by 15 seconds. If the network info module reports\n * the internet offline status then the time will start counting after the internet comes back online.\n *\n * If ICE restart are enabled, then a delayed ICE failed notification to Jicofo will be sent, only if the ICE connection\n * does not recover soon after or before the XMPP connection is restored (if it was ever broken). If ICE fails while\n * the XMPP connection is not broken then the notifications will be sent after 2 seconds delay.\n */\nexport default class IceFailedHandling {\n    /**\n     * Creates new {@code DelayedIceFailed} task.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n    }\n\n    /**\n     * After making sure there's no way for the ICE connection to recover this method either sends ICE failed\n     * notification to Jicofo or emits the ice failed conference event.\n     * @private\n     * @returns {void}\n     */\n    _actOnIceFailed() {\n        const { enableForcedReload, enableIceRestart } = this._conference.options.config;\n        const explicitlyDisabled = typeof enableIceRestart !== 'undefined' && !enableIceRestart;\n        const supportsRestartByTerminate = this._conference.room.supportsRestartByTerminate();\n        const useTerminateForRestart = supportsRestartByTerminate && !enableIceRestart;\n        const reloadClient = this._conference.restartInProgress && enableForcedReload;\n\n        logger.info('ICE failed,'\n            + ` enableForcedReload: ${enableForcedReload},`\n            + ` enableIceRestart: ${enableIceRestart},`\n            + ` restartInProgress: ${this._conference.restartInProgress},`\n            + ` supports restart by terminate: ${supportsRestartByTerminate}`);\n\n        if (explicitlyDisabled || (!enableIceRestart && !supportsRestartByTerminate) || reloadClient) {\n            logger.info('ICE failed, but ICE restarts are disabled');\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.ICE_FAILED);\n\n            return;\n        }\n\n        const jvbConnection = this._conference.jvbJingleSession;\n        const jvbConnIceState = jvbConnection && jvbConnection.getIceConnectionState();\n\n        if (!jvbConnection) {\n            logger.warn('Not sending ICE failed - no JVB connection');\n        } else if (jvbConnIceState === 'connected') {\n            logger.info('ICE connection restored - not sending ICE failed');\n        } else {\n            logger.info('Sending ICE failed - the connection did not recover, '\n                + `ICE state: ${jvbConnIceState}, `\n                + `use 'session-terminate': ${useTerminateForRestart}`);\n            if (useTerminateForRestart) {\n                this._conference.jvbJingleSession.terminate(\n                    () => {\n                        logger.info('session-terminate for ice restart - done');\n                    },\n                    error => {\n                        logger.error(`session-terminate for ice restart - error: ${error.message}`);\n                    }, {\n                        reason: 'connectivity-error',\n                        reasonDescription: 'ICE FAILED',\n                        requestRestart: true,\n                        sendSessionTerminate: true\n                    });\n            } else {\n                this._conference.jvbJingleSession.sendIceFailedNotification();\n            }\n        }\n    }\n\n    /**\n     * Starts the task.\n     */\n    start() {\n        //  Using xmpp.ping allows to handle both XMPP being disconnected and internet offline cases. The ping function\n        // uses sendIQ2 method which is resilient to XMPP connection disconnected state and will patiently wait until it\n        // gets reconnected.\n        //  This also handles the case about waiting for the internet to come back online, because ping\n        // will only succeed when the internet is online and then there's a chance for the ICE to recover from FAILED to\n        // CONNECTED which is the extra 2 second timeout after ping.\n        //  The 65 second timeout is given on purpose as there's no chance for XMPP to recover after 65 seconds of no\n        // communication with the server. Such resume attempt will result in unrecoverable conference failed event due\n        // to 'item-not-found' error returned by the server.\n        this._conference.xmpp.ping(65000).then(\n            () => {\n                if (!this._canceled) {\n                    this._iceFailedTimeout = window.setTimeout(() => {\n                        this._iceFailedTimeout = undefined;\n                        this._actOnIceFailed();\n                    }, 2000);\n                }\n            },\n            error => {\n                logger.error('PING error/timeout - not sending ICE failed', error);\n            });\n    }\n\n    /**\n     * Cancels the task.\n     */\n    cancel() {\n        this._canceled = true;\n        window.clearTimeout(this._iceFailedTimeout);\n    }\n}\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport browser from '../browser';\n\nimport * as DetectionEvents from './DetectionEvents';\n\n// We wait a certain time interval for constant silence input from the current device to account for\n// potential abnormalities and for a better use experience i.e. don't generate event the instant\n// an audio track is added to the tcr.\n// Potential improvement - add this as a configurable parameter.\nconst SILENCE_PERIOD_MS = 4000;\n\n/**\n * Detect if there is no audio input on the current TraceAblePeerConnection selected track. The no audio\n * state must be constant for a configured amount of time in order for the event to be triggered.\n * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n * @fires DetectionEvents.NO_AUDIO_INPUT\n */\nexport default class NoAudioSignalDetection extends EventEmitter {\n    /**\n     * Creates new NoAudioSignalDetection.\n     *\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        super();\n\n        this._conference = conference;\n        this._timeoutTrigger = null;\n        this._hasAudioInput = null;\n\n        if (!browser.supportsReceiverStats()) {\n            conference.statistics.addAudioLevelListener(this._audioLevel.bind(this));\n        }\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n    }\n\n    /**\n     * Clear the timeout state.\n     */\n    _clearTriggerTimeout() {\n        clearTimeout(this._timeoutTrigger);\n        this._timeoutTrigger = null;\n    }\n\n\n    /**\n     * Generated event triggered by a change in the current conference audio input state.\n     *\n     * @param {*} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n     */\n    _handleAudioInputStateChange(audioLevel) {\n        // Current audio input state of the active local track in the conference, true for audio input false for no\n        // audio input.\n        const status = audioLevel !== 0;\n\n        // If this is the first audio event picked up or the current status is different from the previous trigger\n        // the event.\n        if (this._hasAudioInput === null || this._hasAudioInput !== status) {\n            this._hasAudioInput = status;\n            this.emit(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, this._hasAudioInput);\n        }\n    }\n\n    /**\n     * Generate event triggered by a prolonged period of no audio input.\n     *\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.NO_AUDIO_INPUT\n     */\n    _handleNoAudioInputDetection(audioLevel) {\n        if (this._eventFired) {\n            return;\n        }\n\n        if (audioLevel === 0 && !this._timeoutTrigger) {\n            this._timeoutTrigger = setTimeout(() => {\n                this._eventFired = true;\n\n                this.emit(DetectionEvents.NO_AUDIO_INPUT);\n            }, SILENCE_PERIOD_MS);\n        } else if (audioLevel !== 0 && this._timeoutTrigger) {\n            this._clearTriggerTimeout();\n        }\n    }\n\n    /**\n     * Receives audio level events for all send and receive streams on the current TraceablePeerConnection.\n     *\n     * @param {TraceablePeerConnection} tpc - TraceablePeerConnection of the owning conference.\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of the endpoint/participant/stream\n     * being reported.\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @param {boolean} isLocal - true for local/send streams or false for remote/receive streams.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio streams\n        if (!isLocal || !this._audioTrack) {\n            return;\n        }\n\n        // Get currently active local tracks from the TraceablePeerConnection\n        const localSSRCs = tpc.localSSRCs.get(this._audioTrack.rtcId);\n\n        // Only target the current active track in the tpc. For some reason audio levels for previous\n        // devices are also picked up from the PeerConnection so we filter them out.\n        if (!localSSRCs || !localSSRCs.ssrcs.includes(ssrc)) {\n            return;\n        }\n\n        // First handle audio input state change. In case the state changed to no input the no audio input event\n        // can try to fire again.\n        this._handleAudioInputStateChange(audioLevel);\n        this._handleNoAudioInputDetection(audioLevel);\n    }\n\n    /**\n     * Notifies NoAudioSignalDetection that a JitsiTrack was added to the associated JitsiConference.\n     * Only take into account local audio tracks.\n     *\n     * @param {JitsiTrack} track - The added JitsiTrack.\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Reset state for the new track.\n            this._audioTrack = track;\n            this._eventFired = false;\n            this._clearTriggerTimeout();\n\n            // Listen for the audio levels on the newly added audio track\n            if (browser.supportsReceiverStats()) {\n                track.on(\n                    JitsiTrackEvents.NO_AUDIO_INPUT,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                    }\n                );\n                track.on(\n                    JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                        this._handleAudioInputStateChange(audioLevel);\n                    }\n                );\n            }\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\n * currently used.\n * Listens for changes in the audio level changes of the local p2p audio track\n * or remote p2p one and fires dominant speaker events to be able to use\n * features depending on those events (speaker stats), to make them work without\n * the video bridge.\n */\nexport default class P2PDominantSpeakerDetection {\n    /**\n     * Creates P2PDominantSpeakerDetection\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this._audioLevel.bind(this));\n\n        this.myUserID = this.conference.myUserId();\n    }\n\n    /**\n     * Receives audio level events for all streams in the conference.\n     *\n     * @param {String} id - The participant id\n     * @param {number} audioLevel - The audio level.\n     */\n    _audioLevel(id, audioLevel) {\n\n        // we do not process if p2p is not active\n        // or audio level is under certain threshold\n        // or if the audio level is for local audio track which is muted\n        if (!this.conference.isP2PActive()\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\n            || (id === this.myUserID\n                    && this.conference.getLocalAudioTrack().isMuted())) {\n            return;\n        }\n\n        this.conference.rtc.eventEmitter.emit(\n            RTCEvents.DOMINANT_SPEAKER_CHANGED,\n            id);\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage, filterPositiveValues } from '../util/MathUtil';\n\nimport { VAD_NOISY_DEVICE, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n/**\n * The average value VAD needs to be under over a period of time to be considered noise.\n * @type {number}\n */\nconst VAD_NOISE_AVG_THRESHOLD = 0.2;\n\n/**\n * The average values that audio input need to be over to be considered loud.\n * @type {number}\n */\nconst NOISY_AUDIO_LEVEL_THRESHOLD = 0.040;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst VAD_SCORE_TRIGGER = 0.2;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst AUDIO_LEVEL_SCORE_TRIGGER = 0.020;\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 1500;\n\n/**\n * Detect if provided VAD score and PCM data is considered noise.\n */\nexport default class VADNoiseDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADNoiseDetection</tt>\n     *\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Buffer that keeps audio level samples for a period of time.\n         */\n        this._audioLvlArray = [];\n\n        /**\n         * Current state of the service, if it's not active no processing will occur.\n         */\n        this._active = false;\n\n        this._calculateNoisyScore = this._calculateNoisyScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score and PCM audio levels once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * If the score is above the set threshold fire the event.\n     * @returns {void}\n     * @fires VAD_NOISY_DEVICE\n     */\n    _calculateNoisyScore() {\n        const scoreAvg = calculateAverage(this._scoreArray);\n        const audioLevelAvg = calculateAverage(this._audioLvlArray);\n\n        if (scoreAvg < VAD_NOISE_AVG_THRESHOLD && audioLevelAvg > NOISY_AUDIO_LEVEL_THRESHOLD) {\n            this.emit(VAD_NOISY_DEVICE);\n\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Record the vad score and average volume in the appropriate buffers.\n     *\n     * @param {number} vadScore\n     * @param {number} avgAudioLvl - average audio level of the PCM sample associated with the VAD score.s\n     */\n    _recordValues(vadScore, avgAudioLvl) {\n        this._scoreArray.push(vadScore);\n        this._audioLvlArray.push(avgAudioLvl);\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is not muted.\n        this._setActiveState(!isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Reset the processing context, clear buffers, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        this._audioLvlArray = [];\n        clearTimeout(this._processTimeout);\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} vadScore.pcmData - Raw PCM Data associated with the VAD score.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            // Filter and calculate sample average so we don't have to process one large array at a time.\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n\n            this._recordValues(vadScore.score, calculateAverage(posAudioLevels));\n\n            return;\n        }\n\n        // If the VAD score for the sample is low and audio level has a high enough level we can start listening for\n        // noise\n        if (vadScore.score < VAD_SCORE_TRIGGER) {\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n            const avgAudioLvl = calculateAverage(posAudioLevels);\n\n            if (avgAudioLvl > AUDIO_LEVEL_SCORE_TRIGGER) {\n                this._processing = true;\n                this._recordValues(vadScore.score, avgAudioLvl);\n\n                // Once the preset timeout executes the final score will be calculated.\n                this._processTimeout = setTimeout(this._calculateNoisyScore, PROCESS_TIME_FRAME_SPAN_MS);\n            }\n        }\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage } from '../util/MathUtil';\n\nimport { VAD_TALK_WHILE_MUTED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n\n/**\n * The threshold which the average VAD values for a span of time needs to exceed to trigger an event.\n * @type {number}\n */\nconst VAD_AVG_THRESHOLD = 0.6;\n\n/**\n * The VAD score needed to trigger the processing algorithm, i.e. if a sample has the VAD score >= VAD_VOICE_LEVEL\n * we start processing all scores for a time span defined by const PROCESS_TIME_FRAME_SPAN_MS.\n * @type {number}\n */\nconst VAD_VOICE_LEVEL = 0.9;\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 700;\n\n/**\n * Detect if provided VAD score which is generated on a muted device is voice and fires an event.\n */\nexport default class VADTalkMutedDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADTalkMutedDetection</tt>\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Current mute state of the audio track being monitored.\n         */\n        this._active = false;\n\n        this._calculateVADScore = this._calculateVADScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score function called once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * @returns {void}\n     * @fires VAD_TALK_WHILE_MUTED\n     */\n    _calculateVADScore() {\n        const score = calculateAverage(this._scoreArray);\n\n        if (score > VAD_AVG_THRESHOLD) {\n            this.emit(VAD_TALK_WHILE_MUTED);\n\n            // Event was fired. Stop event emitter and remove listeners so no residue events kick off after this point\n            // and a single VAD_TALK_WHILE_MUTED is generated per mic muted state.\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is muted.\n        this._setActiveState(isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            this._scoreArray.push(vadScore.score);\n\n            return;\n        }\n\n        // Because we remove all listeners on the vadEmitter once the main event is triggered,\n        // there is no need to check for rogue events.\n        if (vadScore.score > VAD_VOICE_LEVEL) {\n            this._processing = true;\n            this._scoreArray.push(vadScore.score);\n\n            // Start gathering VAD scores for the configured period of time.\n            this._processTimeout = setTimeout(this._calculateVADScore, PROCESS_TIME_FRAME_SPAN_MS);\n        }\n    }\n\n    /**\n     * Reset the processing context, clear buffer, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        clearTimeout(this._processTimeout);\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as E2ePingEvents\n    from '../../service/e2eping/E2ePingEvents';\nimport { createE2eRttEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * The 'type' of a message which designates an e2e ping request.\n * @type {string}\n */\nconst E2E_PING_REQUEST = 'e2e-ping-request';\n\n/**\n * The 'type' of a message which designates an e2e ping response.\n * @type {string}\n */\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\n\n/**\n * Saves e2e ping related state for a single JitsiParticipant.\n */\nclass ParticipantWrapper {\n    /**\n     * Creates a ParticipantWrapper\n     * @param {JitsiParticipant} participant - The remote participant that this\n     * object wraps.\n     * @param {E2ePing} e2eping\n     */\n    constructor(participant, e2eping) {\n        // The JitsiParticipant\n        this.participant = participant;\n\n        // The E2ePing\n        this.e2eping = e2eping;\n\n        // Caches the ID\n        this.id = participant.getId();\n\n        // Recently sent requests\n        this.requests = {};\n\n        // The ID of the last sent request. We just increment it for each new\n        // request. Start at 1 so we can consider only thruthy values valid.\n        this.lastRequestId = 1;\n\n        this.clearIntervals = this.clearIntervals.bind(this);\n        this.sendRequest = this.sendRequest.bind(this);\n        this.handleResponse = this.handleResponse.bind(this);\n        this.maybeSendAnalytics = this.maybeSendAnalytics.bind(this);\n        this.sendAnalytics = this.sendAnalytics.bind(this);\n\n        // If the data channel was already open (this is likely a participant\n        // joining an existing conference) send a request immediately.\n        if (e2eping.isDataChannelOpen) {\n            this.sendRequest();\n        }\n\n        this.pingInterval = window.setInterval(\n            this.sendRequest, e2eping.pingIntervalMs);\n        this.analyticsInterval = window.setTimeout(\n            this.maybeSendAnalytics, this.e2eping.analyticsIntervalMs);\n    }\n\n    /**\n     * Clears the interval which sends pings.\n     * @type {*}\n     */\n    clearIntervals() {\n        if (this.pingInterval) {\n            window.clearInterval(this.pingInterval);\n        }\n        if (this.analyticsInterval) {\n            window.clearInterval(this.analyticsInterval);\n        }\n    }\n\n    /**\n     * Sends the next ping request.\n     * @type {*}\n     */\n    sendRequest() {\n        const requestId = this.lastRequestId++;\n        const requestMessage = {\n            type: E2E_PING_REQUEST,\n            id: requestId\n        };\n\n        this.e2eping.sendMessage(requestMessage, this.id);\n        this.requests[requestId] = {\n            id: requestId,\n            timeSent: window.performance.now()\n        };\n    }\n\n    /**\n     * Handles a response from this participant.\n     * @type {*}\n     */\n    handleResponse(response) {\n        const request = this.requests[response.id];\n\n        if (request) {\n            request.rtt = window.performance.now() - request.timeSent;\n            this.e2eping.eventEmitter.emit(\n                E2ePingEvents.E2E_RTT_CHANGED,\n                this.participant,\n                request.rtt);\n        }\n\n        this.maybeSendAnalytics();\n    }\n\n    /**\n     * Goes over the requests, clearing ones which we don't need anymore, and\n     * if it finds at least one request with a valid RTT in the last\n     * 'analyticsIntervalMs' then sends an analytics event.\n     * @type {*}\n     */\n    maybeSendAnalytics() {\n        const now = window.performance.now();\n\n        // The RTT we'll report is the minimum RTT measured in the last\n        // analyticsInterval\n        let rtt = Infinity;\n        let request, requestId;\n\n        // It's time to send analytics. Clean up all requests and find the\n        for (requestId in this.requests) {\n            if (this.requests.hasOwnProperty(requestId)) {\n                request = this.requests[requestId];\n\n                if (request.timeSent < now - this.e2eping.analyticsIntervalMs) {\n                    // An old request. We don't care about it anymore.\n                    delete this.requests[requestId];\n                } else if (request.rtt) {\n                    rtt = Math.min(rtt, request.rtt);\n                }\n            }\n        }\n\n        if (rtt < Infinity) {\n            this.sendAnalytics(rtt);\n        }\n    }\n\n    /**\n     * Sends an analytics event for this participant with the given RTT.\n     * @type {*}\n     */\n    sendAnalytics(rtt) {\n        Statistics.sendAnalytics(createE2eRttEvent(\n            this.id,\n            this.participant.getProperty('region'),\n            rtt));\n    }\n}\n\n/**\n * Implements end-to-end ping (from one conference participant to another) via\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\n *\n * TODO: use a broadcast message instead of individual pings to each remote\n * participant.\n *\n * This class:\n * 1. Sends periodic ping requests to all other participants in the\n * conference.\n * 2. Responds to ping requests from other participants.\n * 3. Fires events with the end-to-end RTT to each participant whenever a\n * response is received.\n * 4. Fires analytics events with the end-to-end RTT periodically.\n */\nexport default class E2ePing {\n    /**\n     * @param {JitsiConference} conference - The conference.\n     * @param {Function} sendMessage - The function to use to send a message.\n     * @param {Object} options\n     */\n    constructor(conference, options, sendMessage) {\n        this.conference = conference;\n        this.eventEmitter = conference.eventEmitter;\n        this.sendMessage = sendMessage;\n\n        // The interval at which pings will be sent (<= 0 disables sending).\n        this.pingIntervalMs = 10000;\n\n        // The interval at which analytics events will be sent.\n        this.analyticsIntervalMs = 60000;\n\n        // Maps a participant ID to its ParticipantWrapper\n        this.participants = {};\n\n        // Whether the WebRTC channel has been opened or not.\n        this.isDataChannelOpen = false;\n\n        if (options && options.e2eping) {\n            if (typeof options.e2eping.pingInterval === 'number') {\n                this.pingIntervalMs = options.e2eping.pingInterval;\n            }\n            if (typeof options.e2eping.analyticsInterval === 'number') {\n                this.analyticsIntervalMs = options.e2eping.analyticsInterval;\n            }\n\n            // We want to report at most once a ping interval.\n            if (this.analyticsIntervalMs > 0 && this.analyticsIntervalMs\n                < this.pingIntervalMs) {\n                this.analyticsIntervalMs = this.pingIntervalMs;\n            }\n        }\n        logger.info(\n            `Initializing e2e ping; pingInterval=${\n                this.pingIntervalMs}, analyticsInterval=${\n                this.analyticsIntervalMs}.`);\n\n        this.participantJoined = this.participantJoined.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n\n        this.participantLeft = this.participantLeft.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n\n        this.messageReceived = this.messageReceived.bind(this);\n        conference.on(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n\n        this.dataChannelOpened = this.dataChannelOpened.bind(this);\n        conference.on(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n    }\n\n    /**\n     * Notifies this instance that the communications channel has been opened\n     * and it can now send messages via sendMessage.\n     */\n    dataChannelOpened() {\n        this.isDataChannelOpen = true;\n\n        // We don't want to wait the whole interval before sending the first\n        // request, but we can't send it immediately after the participant joins\n        // either, because our data channel might not have initialized.\n        // So once the data channel initializes, send requests to everyone.\n        // Wait an additional 200ms to give a chance to the remote side (if it\n        // also just connected as is the case for the first 2 participants in a\n        // conference) to open its data channel.\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                const participantWrapper = this.participants[id];\n\n                window.setTimeout(participantWrapper.sendRequest, 200);\n            }\n        }\n    }\n\n    /**\n     * Handles a message that was received.\n     *\n     * @param participant - The message sender.\n     * @param payload - The payload of the message.\n     */\n    messageReceived(participant, payload) {\n        // Listen to E2E PING requests and responses from other participants\n        // in the conference.\n        if (payload.type === E2E_PING_REQUEST) {\n            this.handleRequest(participant.getId(), payload);\n        } else if (payload.type === E2E_PING_RESPONSE) {\n            this.handleResponse(participant.getId(), payload);\n        }\n    }\n\n    /**\n     * Handles a participant joining the conference. Starts to send ping\n     * requests to the participant.\n     *\n     * @param {String} id - The ID of the participant.\n     * @param {JitsiParticipant} participant - The participant that joined.\n     */\n    participantJoined(id, participant) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            logger.info(\n                `Participant wrapper already exists for ${id}. Clearing.`);\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n\n        this.participants[id] = new ParticipantWrapper(participant, this);\n    }\n\n    /**\n     * Handles a participant leaving the conference. Stops sending requests.\n     *\n     * @param {String} id - The ID of the participant.\n     */\n    participantLeft(id) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a ping request coming from another participant.\n     *\n     * @param {string} participantId - The ID of the participant who sent the\n     * request.\n     * @param {Object} request - The request.\n     */\n    handleRequest(participantId, request) {\n        // If it's a valid request, just send a response.\n        if (request && request.id) {\n            const response = {\n                type: E2E_PING_RESPONSE,\n                id: request.id\n            };\n\n            this.sendMessage(response, participantId);\n        } else {\n            logger.info(\n                `Received an invalid e2e ping request from ${participantId}.`);\n        }\n    }\n\n    /**\n     * Handles a ping response coming from another participant\n     * @param {string} participantId - The ID of the participant who sent the\n     * response.\n     * @param {Object} response - The response.\n     */\n    handleResponse(participantId, response) {\n        const participantWrapper = this.participants[participantId];\n\n        if (participantWrapper) {\n            participantWrapper.handleResponse(response);\n        }\n    }\n\n    /**\n     * Stops this E2ePing (i.e. stop sending requests).\n     */\n    stop() {\n        logger.info('Stopping e2eping');\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n        this.conference.off(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n        this.conference.off(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                this.participants[id].clearIntervals();\n            }\n        }\n\n        this.participants = {};\n    }\n}\n\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\n * P2P status and the conference participants count. See the event description\n * for more info.\n */\nexport default class Jvb121EventGenerator {\n    /**\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n\n        /**\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\n         * the conference is currently in the P2P mode.\n         * @type {boolean}\n         * @private\n         */\n        this._jvb121 = true;\n\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\n    }\n\n    /**\n     * Checks whether the JVB121 value should be updated and a new event\n     * emitted.\n     */\n    evaluateStatus() {\n        const oldStatus = this._jvb121;\n        const newStatus\n            = !this._conference.isP2PActive()\n                && this._conference.getParticipantCount() <= 2;\n\n        if (oldStatus !== newStatus) {\n            this._jvb121 = newStatus;\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\n        }\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\nconst MAX_HEIGHT_ONSTAGE = 2160;\nconst MAX_HEIGHT_THUMBNAIL = 180;\nconst LASTN_UNLIMITED = -1;\n\n/**\n * This class translates the legacy signaling format between the client and the bridge (that affects bandwidth\n * allocation) to the new format described here https://github.com/jitsi/jitsi-videobridge/blob/master/doc/allocation.md\n */\nexport class ReceiverVideoConstraints {\n    /**\n     * Creates a new instance.\n     */\n    constructor() {\n        // Default constraints used for endpoints that are not explicitly included in constraints.\n        // These constraints are used for endpoints that are thumbnails in the stage view.\n        this._defaultConstraints = { 'maxHeight': MAX_HEIGHT_THUMBNAIL };\n\n        // The number of videos requested from the bridge.\n        this._lastN = LASTN_UNLIMITED;\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._receiverVideoConstraints = {\n            constraints: {},\n            defaultConstraints: this.defaultConstraints,\n            lastN: this._lastN,\n            onStageEndpoints: [],\n            selectedEndpoints: this._selectedEndpoints\n        };\n    }\n\n    /**\n     * Returns the receiver video constraints that need to be sent on the bridge channel.\n     */\n    get constraints() {\n        this._receiverVideoConstraints.lastN = this._lastN;\n\n        if (!this._selectedEndpoints.length) {\n            return this._receiverVideoConstraints;\n        }\n\n        // The client is assumed to be in TileView if it has selected more than one endpoint, otherwise it is\n        // assumed to be in StageView.\n        this._receiverVideoConstraints.constraints = {};\n        if (this._selectedEndpoints.length > 1) {\n            /**\n             * Tile view.\n             * Only the default constraints are specified here along with lastN (if it is set).\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'defaultConstraints': { 'maxHeight': 360 }\n             * }\n             */\n            this._receiverVideoConstraints.defaultConstraints = { 'maxHeight': this._maxFrameHeight };\n            this._receiverVideoConstraints.onStageEndpoints = [];\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        } else {\n            /**\n             * Stage view.\n             * The participant on stage is specified in onStageEndpoints and a higher maxHeight is specified\n             * for that endpoint while a default maxHeight of 180 is applied to all the other endpoints.\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'onStageEndpoints': ['A'],\n             *  'defaultConstraints': { 'maxHeight':  180 },\n             *  'constraints': {\n             *      'A': { 'maxHeight': 720 }\n             *   }\n             * }\n             */\n            this._receiverVideoConstraints.constraints[this._selectedEndpoints[0]] = {\n                'maxHeight': this._maxFrameHeight\n            };\n            this._receiverVideoConstraints.defaultConstraints = this._defaultConstraints;\n            this._receiverVideoConstraints.onStageEndpoints = this._selectedEndpoints;\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        }\n\n        return this._receiverVideoConstraints;\n    }\n\n    /**\n     * Updates the lastN field of the ReceiverVideoConstraints sent to the bridge.\n     *\n     * @param {number} value\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateLastN(value) {\n        const changed = this._lastN !== value;\n\n        if (changed) {\n            this._lastN = value;\n            logger.debug(`Updating ReceiverVideoConstraints lastN(${value})`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the resolution (height requested) in the contraints field of the ReceiverVideoConstraints\n     * sent to the bridge.\n     *\n     * @param {number} maxFrameHeight\n     * @requires {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiveResolution(maxFrameHeight) {\n        const changed = this._maxFrameHeight !== maxFrameHeight;\n\n        if (changed) {\n            this._maxFrameHeight = maxFrameHeight;\n            logger.debug(`Updating receive maxFrameHeight: ${maxFrameHeight}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the receiver constraints sent to the bridge.\n     *\n     * @param {Object} videoConstraints\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiverVideoConstraints(videoConstraints) {\n        const changed = !isEqual(this._receiverVideoConstraints, videoConstraints);\n\n        if (changed) {\n            this._receiverVideoConstraints = videoConstraints;\n            logger.debug(`Updating ReceiverVideoConstraints ${JSON.stringify(videoConstraints)}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the list of selected endpoints.\n     *\n     * @param {Array<string>} ids\n     * @returns {void}\n     */\n    updateSelectedEndpoints(ids) {\n        logger.debug(`Updating selected endpoints: ${JSON.stringify(ids)}`);\n        this._selectedEndpoints = ids;\n    }\n}\n\n/**\n * This class manages the receive video contraints for a given {@link JitsiConference}. These constraints are\n * determined by the application based on how the remote video streams need to be displayed. This class is responsible\n * for communicating these constraints to the bridge over the bridge channel.\n */\nexport class ReceiveVideoController {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance for which the new instance will be managing\n     * the receive video quality constraints.\n     * @param {RTC} rtc the rtc instance which is responsible for initializing the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this._conference = conference;\n        this._rtc = rtc;\n\n        // Enable new receiver constraints by default unless it is explicitly disabled through config.js.\n        const useNewReceiverConstraints = conference.options?.config?.useNewBandwidthAllocationStrategy ?? true;\n\n        // Translate the legacy bridge channel signaling format to the new format.\n        this._receiverVideoConstraints = useNewReceiverConstraints ? new ReceiverVideoConstraints() : undefined;\n\n        // The number of videos requested from the bridge, -1 represents unlimited or all available videos.\n        this._lastN = LASTN_UNLIMITED;\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. The preferred receive frameHeight is applied on the media session.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        if (mediaSession.isP2P || !this._receiverVideoConstraints) {\n            mediaSession.setReceiverVideoConstraint(this._maxFrameHeight);\n        } else {\n            this._receiverVideoConstraints.updateReceiveResolution(this._maxFrameHeight);\n            this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        }\n    }\n\n    /**\n     * Returns the lastN value for the conference.\n     *\n     * @returns {number}\n     */\n    getLastN() {\n        return this._lastN;\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected participants in order to always receive video\n     * for this participant (even when last n is enabled).\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._receiverVideoConstraints) {\n            // Filter out the local endpointId from the list of selected endpoints.\n            const remoteEndpointIds = ids.filter(id => id !== this._conference.myUserId());\n            const oldConstraints = JSON.parse(JSON.stringify(this._receiverVideoConstraints.constraints));\n\n            remoteEndpointIds.length && this._receiverVideoConstraints.updateSelectedEndpoints(remoteEndpointIds);\n            const newConstraints = this._receiverVideoConstraints.constraints;\n\n            // Send bridge message only when the constraints change.\n            if (!isEqual(newConstraints, oldConstraints)) {\n                this._rtc.setNewReceiverVideoConstraints(newConstraints);\n            }\n\n            return;\n        }\n        this._rtc.selectEndpoints(ids);\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going to be delivered after the value is\n     * in effect. Set to -1 for unlimited or all available videos.\n     *\n     * @param {number} value the new value for lastN.\n     * @returns {void}\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n\n            if (this._receiverVideoConstraints) {\n                const lastNUpdated = this._receiverVideoConstraints.updateLastN(value);\n\n                // Send out the message on the bridge channel if lastN was updated.\n                lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n\n                return;\n            }\n            this._rtc.setLastN(value);\n        }\n    }\n\n    /**\n     * Sets the maximum video resolution the local participant should receive from remote participants.\n     *\n     * @param {number|undefined} maxFrameHeight - the new value.\n     * @returns {void}\n     */\n    setPreferredReceiveMaxFrameHeight(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        for (const session of this._conference._getMediaSessions()) {\n            if (session.isP2P || !this._receiverVideoConstraints) {\n                maxFrameHeight && session.setReceiverVideoConstraint(maxFrameHeight);\n            } else {\n                const resolutionUpdated = this._receiverVideoConstraints.updateReceiveResolution(maxFrameHeight);\n\n                resolutionUpdated\n                    && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n            }\n        }\n    }\n\n    /**\n     * Sets the receiver constraints for the conference.\n     *\n     * @param {Object} constraints The video constraints.\n     */\n    setReceiverConstraints(constraints) {\n        if (!this._receiverVideoConstraints) {\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\n        }\n\n        const constraintsChanged = this._receiverVideoConstraints.updateReceiverVideoConstraints(constraints);\n\n        if (constraintsChanged) {\n            this._lastN = constraints.lastN ?? this._lastN;\n            this._selectedEndpoints = constraints.selectedEndpoints ?? this._selectedEndpoints;\n            this._rtc.setNewReceiverVideoConstraints(constraints);\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport MediaSessionEvents from '../xmpp/MediaSessionEvents';\n\n/**\n * The class manages send video constraints across media sessions({@link JingleSessionPC}) which belong to\n * {@link JitsiConference}. It finds the lowest common value, between the local user's send preference and\n * the remote party's receive preference. Also this module will consider only the active session's receive value,\n * because local tracks are shared and while JVB may have no preference, the remote p2p may have and they may be totally\n * different.\n */\nexport class SendVideoController {\n    /**\n     * Creates new instance for a given conference.\n     *\n     * @param {JitsiConference} conference - the conference instance for which the new instance will be managing\n     * the send video quality constraints.\n     * @param {RTC} rtc - the rtc instance that is responsible for sending the messages on the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this.conference = conference;\n        this.layerSuspensionEnabled = conference.options?.config?.enableLayerSuspension;\n        this.rtc = rtc;\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n            () => this._propagateSendMaxFrameHeight());\n        this.rtc.on(\n            RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED,\n            videoConstraints => {\n                // Propagate the sender constraint only if it has changed.\n                if (this._senderVideoConstraints?.idealHeight !== videoConstraints.idealHeight) {\n                    this._senderVideoConstraints = videoConstraints;\n                    this._propagateSendMaxFrameHeight();\n                }\n            });\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. It doesn't mean it's already active though. For example the JVB connection may be created after\n     * the conference has entered the p2p mode already.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        mediaSession.addListener(\n            MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED,\n            session => {\n                if (session === this.conference._getActiveMediaSession()) {\n                    this._propagateSendMaxFrameHeight();\n                }\n            });\n\n        // Set the degradation preference on the local video track.\n        mediaSession.setSenderVideoDegradationPreference();\n\n        // Set the max bitrates on video sender if they are specified in config.js videoQuality settings.\n        mediaSession.setSenderMaxBitrates();\n    }\n\n    /**\n     * Figures out the send video constraint as specified by {@link selectSendMaxFrameHeight} and sets it on all media\n     * sessions for the reasons mentioned in this class description.\n     *\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _propagateSendMaxFrameHeight() {\n        const sendMaxFrameHeight = this.selectSendMaxFrameHeight();\n        const promises = [];\n\n        if (sendMaxFrameHeight >= 0) {\n            for (const session of this.conference._getMediaSessions()) {\n                promises.push(session.setSenderVideoConstraint(sendMaxFrameHeight));\n            }\n        }\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Selects the lowest common value for the local video send constraint by looking at local user's preference and\n     * the active media session's receive preference set by the remote party.\n     *\n     * @returns {number|undefined}\n     */\n    selectSendMaxFrameHeight() {\n        const activeMediaSession = this.conference._getActiveMediaSession();\n        const remoteRecvMaxFrameHeight = activeMediaSession\n            ? activeMediaSession.isP2P\n                ? activeMediaSession.getRemoteRecvMaxFrameHeight()\n                : this.layerSuspensionEnabled ? this._senderVideoConstraints?.idealHeight : undefined\n            : undefined;\n\n        if (this.preferredSendMaxFrameHeight >= 0 && remoteRecvMaxFrameHeight >= 0) {\n            return Math.min(this.preferredSendMaxFrameHeight, remoteRecvMaxFrameHeight);\n        } else if (remoteRecvMaxFrameHeight >= 0) {\n            return remoteRecvMaxFrameHeight;\n        }\n\n        return this.preferredSendMaxFrameHeight;\n    }\n\n    /**\n     * Sets local preference for max send video frame height.\n     *\n     * @param {number} maxFrameHeight - the new value to set.\n     * @returns {Promise<void[]>} - resolved when the operation is complete.\n     */\n    setPreferredSendMaxFrameHeight(maxFrameHeight) {\n        this.preferredSendMaxFrameHeight = maxFrameHeight;\n\n        return this._propagateSendMaxFrameHeight();\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JibriSession from './JibriSession';\nimport recordingXMLUtils from './recordingXMLUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * A class responsible for starting and stopping recording sessions and emitting\n * state updates for them.\n */\nclass RecordingManager {\n    /**\n     * Initialize {@code RecordingManager} with other objects that are necessary\n     * for starting a recording.\n     *\n     * @param {ChatRoom} chatRoom - The chat room to handle.\n     * @returns {void}\n     */\n    constructor(chatRoom) {\n        /**\n         * All known recording sessions from the current conference.\n         */\n        this._sessions = {};\n\n        this._chatRoom = chatRoom;\n\n        this.onPresence = this.onPresence.bind(this);\n\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\n    }\n\n    /**\n     * Finds an existing recording session by session ID.\n     *\n     * @param {string} sessionID - The session ID associated with the recording.\n     * @returns {JibriSession|undefined}\n     */\n    getSession(sessionID) {\n        return this._sessions[sessionID];\n    }\n\n    /**\n     * Callback to invoke to parse through a presence update to find recording\n     * related updates (from Jibri participant doing the recording and the\n     * focus which controls recording).\n     *\n     * @param {Object} event - The presence data from the pubsub event.\n     * @param {Node} event.presence - An XMPP presence update.\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\n     * from a participant that is trusted but not visible, as would be the case\n     * with the Jibri recorder participant.\n     * @returns {void}\n     */\n    onPresence({ fromHiddenDomain, presence }) {\n        if (recordingXMLUtils.isFromFocus(presence)) {\n            this._handleFocusPresence(presence);\n        } else if (fromHiddenDomain) {\n            this._handleJibriPresence(presence);\n        }\n    }\n\n    /**\n     * Start a recording session.\n     *\n     * @param {Object} options - Configuration for the recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [optional] options.broadcastId - The channel on which a\n     * live stream will occur.\n     * @param {string} options.mode - The mode in which recording should be\n     * started. Recognized values are \"file\" and \"stream\".\n     * @param {string} [optional] options.streamId - The stream key to be used\n     * for live stream broadcasting. Required for live streaming.\n     * @returns {Promise} A promise for starting a recording, which will pass\n     * back the session on success. The promise resolves after receiving an\n     * acknowledgment of the start request success or fail.\n     */\n    startRecording(options) {\n        const session = new JibriSession({\n            ...options,\n            connection: this._chatRoom.connection\n        });\n\n        return session.start({\n            appData: options.appData,\n            broadcastId: options.broadcastId,\n            focusMucJid: this._chatRoom.focusMucJid,\n            streamId: options.streamId\n        })\n            .then(() => {\n                // Only store the session and emit if the session has not been\n                // added already. This is a workaround for the session getting\n                // created due to a presence update to announce a \"pending\"\n                // recording being received before JibriSession#start finishes.\n                if (!this.getSession(session.getID())) {\n                    this._addSession(session);\n                    this._emitSessionUpdate(session);\n                }\n\n                return session;\n            })\n            .catch(error => {\n                this._emitSessionUpdate(session);\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Stop a recording session.\n     *\n     * @param {string} sessionID - The ID associated with the recording session\n     * to be stopped.\n     * @returns {Promise} The promise resolves after receiving an\n     * acknowledgment of the stop request success or fail.\n     */\n    stopRecording(sessionID) {\n        const session = this.getSession(sessionID);\n\n        if (session) {\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\n        }\n\n        return Promise.reject(new Error('Could not find session'));\n    }\n\n    /**\n     * Stores a reference to the passed in JibriSession.\n     *\n     * @param {string} session - The JibriSession instance to store.\n     * @returns {void}\n     */\n    _addSession(session) {\n        this._sessions[session.getID()] = session;\n    }\n\n    /**\n     * Create a new instance of a recording session and stores a reference to\n     * it.\n     *\n     * @param {string} sessionID - The session ID of the recording in progress.\n     * @param {string} status - The current status of the recording session.\n     * @param {string} mode - The recording mode of the session.\n     * @returns {JibriSession}\n     */\n    _createSession(sessionID, status, mode) {\n        const session = new JibriSession({\n            connection: this._chatRoom.connection,\n            focusMucJid: this._chatRoom.focusMucJid,\n            mode,\n            sessionID,\n            status\n        });\n\n        this._addSession(session);\n\n        return session;\n    }\n\n    /**\n     * Notifies listeners of an update to a recording session.\n     *\n     * @param {JibriSession} session - The session that has been updated.\n     * @param {string|undefined} initiator - The jid of the initiator of the update.\n     */\n    _emitSessionUpdate(session, initiator) {\n        this._chatRoom.eventEmitter.emit(\n            XMPPEvents.RECORDER_STATE_CHANGED, session, initiator);\n    }\n\n    /**\n     * Parses presence to update an existing JibriSession or to create a new\n     * JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleFocusPresence(presence) {\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        const { error, initiator, recordingMode, sessionID, status } = jibriStatus;\n\n        // We'll look for an existing session or create one (in case we're a\n        // participant joining a call with an existing recording going on).\n        let session = this.getSession(sessionID);\n\n        // Handle the case where a status update is received in presence but\n        // the local participant has joined while the JibriSession has already\n        // ended.\n        if (!session && status === 'off') {\n            logger.warn(\n                'Ignoring recording presence update',\n                'Received a new session with status off.');\n\n            return;\n        }\n\n        // Jicofo sends updates via presence, and any extension in presence\n        // is sent until it is explicitly removed.  It's difficult for\n        // Jicofo to know when a presence has been sent once, so it won't\n        // remove jibri status extension.  This means we may receive the same\n        // status update more than once, so check for that here\n        if (session\n            && session.getStatus() === status\n            && session.getError() === error) {\n            logger.warn('Ignoring duplicate presence update: ',\n                JSON.stringify(jibriStatus));\n\n            return;\n        }\n\n        if (!session) {\n            session = this._createSession(sessionID, status, recordingMode);\n        }\n\n        session.setStatus(status);\n\n        if (error) {\n            session.setError(error);\n        }\n\n        this._emitSessionUpdate(session, initiator);\n    }\n\n    /**\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\n     * needs to be updated in a JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleJibriPresence(presence) {\n        const { liveStreamViewURL, mode, sessionID }\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\n\n        if (!sessionID) {\n            logger.warn(\n                'Ignoring potential jibri presence due to no session id.');\n\n            return;\n        }\n\n        let session = this.getSession(sessionID);\n\n        if (!session) {\n            session = this._createSession(sessionID, '', mode);\n        }\n\n        session.setLiveStreamViewURL(liveStreamViewURL);\n\n        this._emitSessionUpdate(session);\n    }\n}\n\nexport default RecordingManager;\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport { createAudioOutputProblemEvent } from '../../service/statistics/AnalyticsEvents';\n\nimport Statistics from './statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Number of local samples that will be used for comparison before and after the remote sample is received.\n */\nconst NUMBER_OF_LOCAL_SAMPLES = 2;\n\n/**\n * Collects the average audio levels per participant from the local stats and the stats received by every remote\n * participant and compares them to detect potential audio problem for a participant.\n */\nexport default class AudioOutputProblemDetector {\n\n    /**\n     * Creates new <tt>AudioOutputProblemDetector</tt> instance.\n     *\n     * @param {JitsiCofnerence} conference - The conference instance to be monitored.\n     */\n    constructor(conference) {\n        this._conference = conference;\n        this._localAudioLevelCache = {};\n        this._reportedParticipants = [];\n        this._audioProblemCandidates = {};\n        this._numberOfRemoteAudioLevelsReceived = {};\n        this._onLocalAudioLevelsReport = this._onLocalAudioLevelsReport.bind(this);\n        this._onRemoteAudioLevelReceived = this._onRemoteAudioLevelReceived.bind(this);\n        this._clearUserData = this._clearUserData.bind(this);\n        this._conference.on(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.statistics.addConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._conference.on(ConferenceEvents.USER_LEFT, this._clearUserData);\n    }\n\n    /**\n     * A listener for audio level data received by a remote participant.\n     *\n     * @param {string} userID - The user id of the participant that sent the data.\n     * @param {number} audioLevel - The average audio level value.\n     * @returns {void}\n     */\n    _onRemoteAudioLevelReceived(userID, { avgAudioLevels }) {\n        const numberOfReports = (this._numberOfRemoteAudioLevelsReceived[userID] + 1) || 0;\n\n        this._numberOfRemoteAudioLevelsReceived[userID] = numberOfReports;\n\n        if (this._reportedParticipants.indexOf(userID) !== -1 || (userID in this._audioProblemCandidates)\n                || avgAudioLevels <= 0 || numberOfReports < 3) {\n            return;\n        }\n\n        const participant = this._conference.getParticipantById(userID);\n\n        if (participant) {\n            const tracks = participant.getTracksByMediaType(MediaType.AUDIO);\n\n            if (tracks.length > 0 && participant.isAudioMuted()) {\n                // We don't need to report an error if everything seems fine with the participant and its tracks but\n                // the participant is audio muted. Since those are average audio levels we potentially can receive non\n                // zero values for muted track.\n                return;\n            }\n        }\n\n        const localAudioLevels = this._localAudioLevelCache[userID];\n\n        if (!Array.isArray(localAudioLevels) || localAudioLevels.every(audioLevel => audioLevel === 0)) {\n            this._audioProblemCandidates[userID] = {\n                remoteAudioLevels: avgAudioLevels,\n                localAudioLevels: []\n            };\n        }\n    }\n\n    /**\n     * A listener for audio level data retrieved by the local stats.\n     *\n     * @param {TraceablePeerConnection} tpc - The <tt>TraceablePeerConnection</tt> instance used to gather the data.\n     * @param {Object} avgAudioLevels - The average audio levels per participant.\n     * @returns {void}\n     */\n    _onLocalAudioLevelsReport(tpc, { avgAudioLevels }) {\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        Object.keys(avgAudioLevels).forEach(userID => {\n            if (this._reportedParticipants.indexOf(userID) !== -1) {\n                return;\n            }\n\n            const localAudioLevels = this._localAudioLevelCache[userID];\n\n            if (!Array.isArray(localAudioLevels)) {\n                this._localAudioLevelCache[userID] = [ ];\n            } else if (localAudioLevels.length >= NUMBER_OF_LOCAL_SAMPLES) {\n                localAudioLevels.shift();\n            }\n\n            this._localAudioLevelCache[userID].push(avgAudioLevels[userID]);\n        });\n\n\n        Object.keys(this._audioProblemCandidates).forEach(userID => {\n            const { localAudioLevels, remoteAudioLevels } = this._audioProblemCandidates[userID];\n\n            localAudioLevels.push(avgAudioLevels[userID]);\n\n            if (localAudioLevels.length === NUMBER_OF_LOCAL_SAMPLES) {\n                if (localAudioLevels.every(audioLevel => typeof audioLevel === 'undefined' || audioLevel === 0)) {\n                    const localAudioLevelsString = JSON.stringify(localAudioLevels);\n\n                    Statistics.sendAnalytics(\n                        createAudioOutputProblemEvent(userID, localAudioLevelsString, remoteAudioLevels));\n                    logger.warn(`A potential problem is detected with the audio output for participant ${\n                        userID}, local audio levels: ${localAudioLevelsString}, remote audio levels: ${\n                        remoteAudioLevels}`);\n                    this._reportedParticipants.push(userID);\n                    this._clearUserData(userID);\n                }\n\n                delete this._audioProblemCandidates[userID];\n            }\n        });\n    }\n\n    /**\n     * Clears the data stored for a participant.\n     *\n     * @param {string} userID - The id of the participant.\n     * @returns {void}\n     */\n    _clearUserData(userID) {\n        delete this._localAudioLevelCache[userID];\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._conference.off(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.off(ConferenceEvents.USER_LEFT, this._clearUserData);\n        this._conference.statistics.removeConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._localAudioLevelCache = undefined;\n        this._audioProblemCandidates = undefined;\n        this._reportedParticipants = undefined;\n        this._numberOfRemoteAudioLevelsReceived = undefined;\n        this._conference = undefined;\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as VideoType from '../../service/RTC/VideoType';\nimport * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport {\n    createRtpStatsEvent,\n    createTransportStatsEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nimport Statistics from './statistics';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * This will calculate an average for one, named stat and submit it to\n * the analytics module when requested. It automatically counts the samples.\n */\nclass AverageStatReport {\n    /**\n     * Creates new <tt>AverageStatReport</tt> for given name.\n     * @param {string} name that's the name of the event that will be reported\n     * to the analytics module.\n     */\n    constructor(name) {\n        this.name = name;\n        this.count = 0;\n        this.sum = 0;\n        this.samples = [];\n    }\n\n    /**\n     * Adds the next value that will be included in the average when\n     * {@link calculate} is called.\n     * @param {number} nextValue\n     */\n    addNext(nextValue) {\n        if (typeof nextValue !== 'number') {\n            logger.error(\n                `${this.name} - invalid value for idx: ${this.count}`,\n                nextValue);\n        } else if (!isNaN(nextValue)) {\n            this.sum += nextValue;\n            this.samples.push(nextValue);\n            this.count += 1;\n        }\n    }\n\n    /**\n     * Calculates an average for the samples collected using {@link addNext}.\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\n     * if no samples were collected.\n     */\n    calculate() {\n        return this.sum / this.count;\n    }\n\n    /**\n     * Appends the report to the analytics \"data\" object. The object will be\n     * set under <tt>prefix</tt> + {@link this.name} key.\n     * @param {Object} report the analytics \"data\" object\n     */\n    appendReport(report) {\n        report[`${this.name}_avg`] = this.calculate();\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\n    }\n\n    /**\n     * Clears all memory of any samples collected, so that new average can be\n     * calculated using this instance.\n     */\n    reset() {\n        this.samples = [];\n        this.sum = 0;\n        this.count = 0;\n    }\n}\n\n/**\n * Class gathers the stats that are calculated and reported for a\n * {@link TraceablePeerConnection} even if it's not currently active. For\n * example we want to monitor RTT for the JVB connection while in P2P mode.\n */\nclass ConnectionAvgStats {\n    /**\n     * Creates new <tt>ConnectionAvgStats</tt>\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\n     * @param {boolean} isP2P\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(avgRtpStatsReporter, isP2P, n) {\n        /**\n         * Is this instance for JVB or P2P connection ?\n         * @type {boolean}\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * How many samples are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * Average round trip time reported by the ICE candidate pair.\n         * @type {AverageStatReport}\n         */\n        this._avgRTT = new AverageStatReport('rtt');\n\n        /**\n         * Map stores average RTT to the JVB reported by remote participants.\n         * Mapped per participant id {@link JitsiParticipant.getId}.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {Map<string,AverageStatReport>}\n         * @private\n         */\n        this._avgRemoteRTTMap = new Map();\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\n\n        /**\n         * The latest average E2E RTT for the JVB connection only.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {number}\n         */\n        this._avgEnd2EndRTT = undefined;\n\n        this._onConnectionStats = (tpc, stats) => {\n            if (this.isP2P === tpc.isP2P) {\n                this._calculateAvgStats(stats);\n            }\n        };\n\n        const conference = avgRtpStatsReporter._conference;\n\n        conference.statistics.addConnectionStatsListener(\n            this._onConnectionStats);\n\n        if (!this.isP2P) {\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\n\n            this._onRemoteStatsUpdated\n                = (id, data) => this._processRemoteStats(id, data);\n            conference.on(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n        }\n    }\n\n    /**\n     * Processes next batch of stats.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        if (browser.supportsRTTStatistics()) {\n            if (data.transport && data.transport.length) {\n                this._avgRTT.addNext(data.transport[0].rtt);\n            }\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n            if (browser.supportsRTTStatistics()) {\n                const conference = this._avgRtpStatsReporter._conference;\n\n                const batchReport = {\n                    p2p: this.isP2P,\n                    'conference_size': conference.getParticipantCount()\n                };\n\n                if (data.transport && data.transport.length) {\n                    Object.assign(batchReport, {\n                        'local_candidate_type':\n                            data.transport[0].localCandidateType,\n                        'remote_candidate_type':\n                            data.transport[0].remoteCandidateType,\n                        'transport_type': data.transport[0].type\n                    });\n                }\n\n                this._avgRTT.appendReport(batchReport);\n\n                if (this.isP2P) {\n                    // Report RTT diff only for P2P.\n                    const jvbEnd2EndRTT = this\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\n\n                    if (!isNaN(jvbEnd2EndRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['rtt_diff']\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\n                    }\n                } else {\n                    // Report end to end RTT only for JVB.\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\n                    const avgLocalRTT = this._avgRTT.calculate();\n\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\n\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\n                    }\n                }\n\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n            }\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\n     * participants.\n     * @return {number|NaN} NaN if not available (not enough data)\n     * @private\n     */\n    _calculateAvgRemoteRTT() {\n        let count = 0, sum = 0;\n\n        // FIXME should we ignore RTT for participant\n        // who \"is having connectivity issues\" ?\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\n            const avg = remoteAvg.calculate();\n\n            if (!isNaN(avg)) {\n                sum += avg;\n                count += 1;\n                remoteAvg.reset();\n            }\n        }\n\n        return sum / count;\n    }\n\n    /**\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\n     * RTT towards the JVB reported by each participant.\n     * @param {string} id {@link JitsiParticipant.getId}\n     * @param {go figure in ConnectionQuality.js} data\n     * @private\n     */\n    _processRemoteStats(id, data) {\n        const validData = typeof data.jvbRTT === 'number';\n        let rttAvg = this._avgRemoteRTTMap.get(id);\n\n        if (!rttAvg && validData) {\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\n            this._avgRemoteRTTMap.set(id, rttAvg);\n        }\n\n        if (validData) {\n            rttAvg.addNext(data.jvbRTT);\n        } else if (rttAvg) {\n            this._avgRemoteRTTMap.delete(id);\n        }\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgRTT.reset();\n        if (this._avgRemoteRTTMap) {\n            this._avgRemoteRTTMap.clear();\n        }\n        this._sampleIdx = 0;\n    }\n\n    /**\n     *\n     */\n    dispose() {\n\n        const conference = this._avgRtpStatsReporter._conference;\n\n        conference.statistics.removeConnectionStatsListener(\n            this._onConnectionStats);\n        if (!this.isP2P) {\n            conference.off(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n            conference.off(\n                ConferenceEvents.USER_LEFT,\n                this._onUserLeft);\n        }\n    }\n}\n\n/**\n * Reports average RTP statistics values (arithmetic mean) to the analytics\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\n * of the P2P vs JVB conference modes and submits the values under different\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\n * P2P mode resets the data collected so far and averages are calculated from\n * scratch.\n */\nexport default class AvgRTPStatsReporter {\n    /**\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\n     * @param {JitsiConference} conference\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(conference, n) {\n        /**\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\n         * are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        if (n > 0) {\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\n        } else {\n            logger.info('Avg RTP stats reports are disabled.');\n\n            // Do not initialize\n            return;\n        }\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._conference = conference;\n\n        /**\n         * Average audio upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateUp\n            = new AverageStatReport('bitrate_audio_upload');\n\n        /**\n         * Average audio download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateDown\n            = new AverageStatReport('bitrate_audio_download');\n\n        /**\n         * Average video upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateUp\n            = new AverageStatReport('bitrate_video_upload');\n\n        /**\n         * Average video download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateDown\n            = new AverageStatReport('bitrate_video_download');\n\n        /**\n         * Average upload bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthUp\n            = new AverageStatReport('bandwidth_upload');\n\n        /**\n         * Average download bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthDown\n            = new AverageStatReport('bandwidth_download');\n\n        /**\n         * Average total packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossTotal\n            = new AverageStatReport('packet_loss_total');\n\n        /**\n         * Average upload packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossUp\n            = new AverageStatReport('packet_loss_upload');\n\n        /**\n         * Average download packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossDown\n            = new AverageStatReport('packet_loss_download');\n\n        /**\n         * Average FPS for remote videos\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\n\n        /**\n         * Average FPS for remote screen streaming videos (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenFPS\n            = new AverageStatReport('framerate_screen_remote');\n\n        /**\n         * Average FPS for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\n\n        /**\n         * Average FPS for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenFPS\n            = new AverageStatReport('framerate_screen_local');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteCameraPixels\n            = new AverageStatReport('pixels_remote');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenPixels\n            = new AverageStatReport('pixels_screen_remote');\n\n        /**\n         * Average pixels for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalCameraPixels\n            = new AverageStatReport('pixels_local');\n\n        /**\n         * Average pixels for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenPixels\n            = new AverageStatReport('pixels_screen_local');\n\n        /**\n         * Average connection quality as defined by\n         * the {@link ConnectionQuality} module.\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgCQ = new AverageStatReport('connection_quality');\n\n        this._cachedTransportStats = undefined;\n\n        this._onLocalStatsUpdated = data => {\n            this._calculateAvgStats(data);\n            this._maybeSendTransportAnalyticsEvent(data);\n        };\n        conference.on(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n\n        this._onP2PStatusChanged = () => {\n            logger.debug('Resetting average stats calculation');\n            this._resetAvgStats();\n            this.jvbStatsMonitor._resetAvgStats();\n            this.p2pStatsMonitor._resetAvgStats();\n        };\n        conference.on(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\n            // We want to reset only on the transition from false => true,\n            // because otherwise those stats are resetted on JVB <=> P2P\n            // transition.\n            if (newStatus === true) {\n                logger.info('Resetting JVB avg RTP stats');\n                this._resetAvgJvbStats();\n            }\n        };\n        conference.on(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n\n        this.jvbStatsMonitor\n            = new ConnectionAvgStats(this, false /* JVB */, n);\n\n        this.p2pStatsMonitor\n            = new ConnectionAvgStats(this, true /* P2P */, n);\n    }\n\n    /**\n     * Processes next batch of stats reported on\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        const isP2P = this._conference.isP2PActive();\n        const confSize = this._conference.getParticipantCount();\n\n        if (!isP2P && confSize < 2) {\n\n            // There's no point in collecting stats for a JVB conference of 1.\n            // That happens for short period of time after everyone leaves\n            // the room, until Jicofo terminates the session.\n            return;\n        }\n\n        /* Uncomment to figure out stats structure\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                logger.info(`local stat ${key}: `, data[key]);\n            }\n        } */\n\n        const bitrate = data.bitrate;\n        const bandwidth = data.bandwidth;\n        const packetLoss = data.packetLoss;\n        const frameRate = data.framerate;\n        const resolution = data.resolution;\n\n        if (!bitrate) {\n            logger.error('No \"bitrate\"');\n\n            return;\n        } else if (!bandwidth) {\n            logger.error('No \"bandwidth\"');\n\n            return;\n        } else if (!packetLoss) {\n            logger.error('No \"packetloss\"');\n\n            return;\n        } else if (!frameRate) {\n            logger.error('No \"framerate\"');\n\n            return;\n        } else if (!resolution) {\n            logger.error('No resolution');\n\n            return;\n        }\n\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\n\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\n\n        if (browser.supportsBandwidthStatistics()) {\n            this._avgBandwidthUp.addNext(bandwidth.upload);\n            this._avgBandwidthDown.addNext(bandwidth.download);\n        }\n\n        this._avgPacketLossUp.addNext(packetLoss.upload);\n        this._avgPacketLossDown.addNext(packetLoss.download);\n        this._avgPacketLossTotal.addNext(packetLoss.total);\n\n        this._avgCQ.addNext(data.connectionQuality);\n\n        if (frameRate) {\n            this._avgRemoteFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.CAMERA));\n            this._avgRemoteScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.CAMERA));\n            this._avgLocalScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.DESKTOP));\n        }\n\n        if (resolution) {\n            this._avgRemoteCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.CAMERA));\n\n            this._avgRemoteScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.CAMERA));\n\n            this._avgLocalScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.DESKTOP));\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n\n            const batchReport = {\n                p2p: isP2P,\n                'conference_size': confSize\n            };\n\n            if (data.transport && data.transport.length) {\n                Object.assign(batchReport, {\n                    'local_candidate_type':\n                        data.transport[0].localCandidateType,\n                    'remote_candidate_type':\n                        data.transport[0].remoteCandidateType,\n                    'transport_type': data.transport[0].type\n                });\n            }\n\n            this._avgAudioBitrateUp.appendReport(batchReport);\n            this._avgAudioBitrateDown.appendReport(batchReport);\n\n            this._avgVideoBitrateUp.appendReport(batchReport);\n            this._avgVideoBitrateDown.appendReport(batchReport);\n\n            if (browser.supportsBandwidthStatistics()) {\n                this._avgBandwidthUp.appendReport(batchReport);\n                this._avgBandwidthDown.appendReport(batchReport);\n            }\n            this._avgPacketLossUp.appendReport(batchReport);\n            this._avgPacketLossDown.appendReport(batchReport);\n            this._avgPacketLossTotal.appendReport(batchReport);\n\n            this._avgRemoteFPS.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\n                this._avgRemoteScreenFPS.appendReport(batchReport);\n            }\n            this._avgLocalFPS.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\n                this._avgLocalScreenFPS.appendReport(batchReport);\n            }\n\n            this._avgRemoteCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\n                this._avgRemoteScreenPixels.appendReport(batchReport);\n            }\n            this._avgLocalCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\n                this._avgLocalScreenPixels.appendReport(batchReport);\n            }\n\n            this._avgCQ.appendReport(batchReport);\n\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates average number of pixels for the report\n     *\n     * @param {map} peerResolutions a map of peer resolutions\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\n     * are no samples.\n     * @private\n     */\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\n        let peerPixelsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(peerResolutions)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null\n                        : this._conference.getParticipantById(peerID);\n                const videosResolution = peerResolutions[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosResolution) {\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\n                        videosResolution, participant, videoType);\n\n                    if (!isNaN(peerAvgPixels)) {\n                        peerPixelsSum += peerAvgPixels;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerPixelsSum / peerCount;\n    }\n\n    /**\n     * Calculate average pixels for either remote or local participant\n     * @param {object} videos maps resolution per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local video pixels calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average video pixels of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track =>\n                                !track.isMuted()\n                                    && track.getSSRC() === ssrc\n                                    && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track =>\n                            !track.isMuted()\n                                && tpc.getLocalSSRC(track) === ssrc\n                                && track.videoType === videoType));\n        }\n\n        let peerPixelsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcPixels\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\n                peerPixelsSum += peerSsrcPixels;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerPixelsSum / peerSsrcCount;\n    }\n\n\n    /**\n     * Calculates average FPS for the report\n     * @param {go figure} frameRate\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\n     * @private\n     */\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\n        let peerFpsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(frameRate)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null : this._conference.getParticipantById(peerID);\n                const videosFps = frameRate[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosFps) {\n                    const peerAvgFPS\n                        = this._calculatePeerAvgVideoFps(\n                            videosFps, participant, videoType);\n\n                    if (!isNaN(peerAvgFPS)) {\n                        peerFpsSum += peerAvgFPS;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerFpsSum / peerCount;\n    }\n\n    /**\n     * Calculate average FPS for either remote or local participant\n     * @param {object} videos maps FPS per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local FPS calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average FPS of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track => !track.isMuted()\n                                && track.getSSRC() === ssrc\n                                && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track => !track.isMuted()\n                            && tpc.getLocalSSRC(track) === ssrc\n                            && track.videoType === videoType));\n        }\n\n        let peerFpsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcFps = Number(videos[ssrc]);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\n                peerFpsSum += peerSsrcFps;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerFpsSum / peerSsrcCount;\n    }\n\n    /**\n     * Sends the 'transport.stats' analytics event whenever we detect that\n     * there is a change in the local or remote candidate type on the transport\n     * that is currently selected.\n     * @param {*} data\n     * @private\n     */\n    _maybeSendTransportAnalyticsEvent(data) {\n        if (!data || !data.transport || !data.transport.length) {\n            return;\n        }\n        const transportStats = {\n            p2p: data.transport[0].p2p,\n            'local_candidate_type': data.transport[0].localCandidateType,\n            'remote_candidate_type': data.transport[0].remoteCandidateType,\n            'transport_type': data.transport[0].type\n        };\n\n        if (!this._cachedTransportStats || !isEqual(transportStats, this._cachedTransportStats)) {\n            this._cachedTransportStats = transportStats;\n            Statistics.sendAnalytics(createTransportStatsEvent(transportStats));\n        }\n    }\n\n    /**\n     * Resets the stats related to JVB connection. Must not be called when in\n     * P2P mode, because then the {@link AverageStatReport} instances are\n     * tracking P2P stats. Note that this should never happen unless something\n     * is wrong with the P2P and JVB121 events.\n     * @private\n     */\n    _resetAvgJvbStats() {\n        this._resetAvgStats();\n        this.jvbStatsMonitor._resetAvgStats();\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgAudioBitrateUp.reset();\n        this._avgAudioBitrateDown.reset();\n\n        this._avgVideoBitrateUp.reset();\n        this._avgVideoBitrateDown.reset();\n\n        this._avgBandwidthUp.reset();\n        this._avgBandwidthDown.reset();\n\n        this._avgPacketLossUp.reset();\n        this._avgPacketLossDown.reset();\n        this._avgPacketLossTotal.reset();\n\n        this._avgRemoteFPS.reset();\n        this._avgRemoteScreenFPS.reset();\n        this._avgLocalFPS.reset();\n        this._avgLocalScreenFPS.reset();\n\n        this._avgRemoteCameraPixels.reset();\n        this._avgRemoteScreenPixels.reset();\n        this._avgLocalCameraPixels.reset();\n        this._avgLocalScreenPixels.reset();\n\n        this._avgCQ.reset();\n\n        this._sampleIdx = 0;\n    }\n\n    /**\n     * Unregisters all event listeners and stops working.\n     */\n    dispose() {\n        this._conference.off(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n        this._conference.off(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n        this._conference.off(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n        this.jvbStatsMonitor.dispose();\n        this.p2pStatsMonitor.dispose();\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport SpeakerStats from './SpeakerStats';\n\n/**\n * A collection for tracking speaker stats. Attaches listeners\n * to the conference to automatically update on tracked events.\n */\nexport default class SpeakerStatsCollector {\n    /**\n     * Initializes a new SpeakerStatsCollector instance.\n     *\n     * @constructor\n     * @param {JitsiConference} conference - The conference to track.\n     * @returns {void}\n     */\n    constructor(conference) {\n        this.stats = {\n            users: {\n\n                // userId: SpeakerStats\n            },\n            dominantSpeakerId: null\n        };\n\n        const userId = conference.myUserId();\n\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\n            this._onDominantSpeaker.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onUserJoin.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onUserLeave.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n            this._onDisplayNameChange.bind(this));\n        if (conference.xmpp) {\n            conference.xmpp.addListener(\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\n                this._updateStats.bind(this));\n        }\n    }\n\n    /**\n     * Reacts to dominant speaker change events by changing its speaker stats\n     * models to reflect the current dominant speaker.\n     *\n     * @param {string} dominantSpeakerId - The user id of the new\n     * dominant speaker.\n     * @returns {void}\n     * @private\n     */\n    _onDominantSpeaker(dominantSpeakerId) {\n        const oldDominantSpeaker\n            = this.stats.users[this.stats.dominantSpeakerId];\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\n\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true);\n        this.stats.dominantSpeakerId = dominantSpeakerId;\n    }\n\n    /**\n     * Reacts to user join events by creating a new SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the new user.\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\n     * @returns {void}\n     * @private\n     */\n    _onUserJoin(userId, participant) {\n        if (participant.isHidden()) {\n            return;\n        }\n\n        if (!this.stats.users[userId]) {\n            this.stats.users[userId] = new SpeakerStats(userId, participant.getDisplayName());\n        }\n    }\n\n    /**\n     * Reacts to user leave events by updating the associated user's\n     * SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onUserLeave(userId) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.markAsHasLeft();\n        }\n    }\n\n    /**\n     * Reacts to user name change events by updating the last known name\n     * tracked in the associated SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onDisplayNameChange(userId, newName) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.setDisplayName(newName);\n        }\n    }\n\n    /**\n     * Return a copy of the tracked SpeakerStats models.\n     *\n     * @returns {Object} The keys are the user ids and the values are the\n     * associated user's SpeakerStats model.\n     * @private\n     */\n    getStats() {\n        return this.stats.users;\n    }\n\n    /**\n     * Updates of the current stats is requested, passing the new values.\n     *\n     * @param {Object} newStats - The new values used to update current one.\n     * @private\n     */\n    _updateStats(newStats) {\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\n            let speakerStatsToUpdate;\n            const newParticipant = this.conference.getParticipantById(userId);\n\n            // we want to ignore hidden participants\n            if (!newParticipant || !newParticipant.isHidden()) {\n                if (this.stats.users[userId]) {\n                    speakerStatsToUpdate = this.stats.users[userId];\n\n                    if (!speakerStatsToUpdate.getDisplayName()) {\n                        speakerStatsToUpdate\n                            .setDisplayName(newStats[userId].displayName);\n                    }\n                } else {\n                    speakerStatsToUpdate = new SpeakerStats(\n                        userId, newStats[userId].displayName);\n                    this.stats.users[userId] = speakerStatsToUpdate;\n                    speakerStatsToUpdate.markAsHasLeft();\n                }\n            }\n\n            speakerStatsToUpdate.totalDominantSpeakerTime\n                = newStats[userId].totalDominantSpeakerTime;\n        }\n    }\n}\n","const AudioRecorder = require('./audioRecorder');\nconst SphinxService = require(\n    './transcriptionServices/SphinxTranscriptionService');\n\nconst BEFORE_STATE = 'before';\nconst RECORDING_STATE = 'recording';\nconst TRANSCRIBING_STATE = 'transcribing';\nconst FINISHED_STATE = 'finished';\n\n// the amount of characters each line in the transcription will have\nconst MAXIMUM_SENTENCE_LENGTH = 80;\n\n/**\n * This is the main object for handing the Transcription. It interacts with\n * the audioRecorder to record every person in a conference and sends the\n * recorder audio to a transcriptionService. The returned speech-to-text result\n * will be merged to create a transcript\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\n */\nfunction Transcriber() {\n    // the object which can record all audio in the conference\n    this.audioRecorder = new AudioRecorder();\n\n    // this object can send the recorder audio to a speech-to-text service\n    this.transcriptionService = new SphinxService();\n\n    // holds a counter to keep track if merging can start\n    this.counter = null;\n\n    // holds the date when transcription started which makes it possible\n    // to calculate the offset between recordings\n    this.startTime = null;\n\n    // will hold the transcription once it is completed\n    this.transcription = null;\n\n    // this will be a method which will be called once the transcription is done\n    // with the transcription as parameter\n    this.callback = null;\n\n    // stores all the retrieved speech-to-text results to merge together\n    // this value will store an Array<Word> object\n    this.results = [];\n\n    // Stores the current state of the transcription process\n    this.state = BEFORE_STATE;\n\n    // Used in the updateTranscription method to add a new line when the\n    // sentence becomes to long\n    this.lineLength = 0;\n}\n\n/**\n * Method to start the transcription process. It will tell the audioRecorder\n * to start storing all audio streams and record the start time for merging\n * purposes\n */\nTranscriber.prototype.start = function start() {\n    if (this.state !== BEFORE_STATE) {\n        throw new Error(\n            `The transcription can only start when it's in the \"${\n                BEFORE_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n    this.state = RECORDING_STATE;\n    this.audioRecorder.start();\n    this.startTime = new Date();\n};\n\n/**\n * Method to stop the transcription process. It will tell the audioRecorder to\n * stop, and get all the recorded audio to send it to the transcription service\n\n * @param callback a callback which will receive the transcription\n */\nTranscriber.prototype.stop = function stop(callback) {\n    if (this.state !== RECORDING_STATE) {\n        throw new Error(\n            `The transcription can only stop when it's in the \"${\n                RECORDING_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    // stop the recording\n    console.log('stopping recording and sending audio files');\n    this.audioRecorder.stop();\n\n    // and send all recorded audio to the transcription service\n    const callBack = blobCallBack.bind(null, this);\n\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\n        this.transcriptionService.send(recordingResult, callBack);\n        this.counter++;\n    });\n\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\n    this.state = TRANSCRIBING_STATE;\n\n    // and store the callback for later\n    this.callback = callback;\n};\n\n/**\n * This method gets the answer from the transcription service, calculates the\n * offset and adds is to every Word object. It will also start the merging\n * when every send request has been received\n *\n * note: Make sure to bind this as a Transcription object\n * @param {Transcriber} transcriber the transcriber instance\n * @param {RecordingResult} answer a RecordingResult object with a defined\n * WordArray\n */\nfunction blobCallBack(transcriber, answer) {\n    console.log(\n        'retrieved an answer from the transcription service. The answer has an'\n            + ` array of length: ${answer.wordArray.length}`);\n\n    // first add the offset between the start of the transcription and\n    // the start of the recording to all start and end times\n    if (answer.wordArray.length > 0) {\n        let offset = answer.startTime.getUTCMilliseconds()\n            - transcriber.startTime.getUTCMilliseconds();\n\n        // transcriber time will always be earlier\n\n        if (offset < 0) {\n            offset = 0; // presume 0 if it somehow not earlier\n        }\n\n        let array = '[';\n\n        answer.wordArray.forEach(wordObject => {\n            wordObject.begin += offset;\n            wordObject.end += offset;\n            array += `${wordObject.word},`;\n        });\n        array += ']';\n        console.log(array);\n\n        // give a name value to the Array object so that the merging can access\n        // the name value without having to use the whole recordingResult object\n        // in the algorithm\n        answer.wordArray.name = answer.name;\n    }\n\n    // then store the array and decrease the counter\n    transcriber.results.push(answer.wordArray);\n    transcriber.counter--;\n    console.log(`current counter: ${transcriber.counter}`);\n\n    // and check if all results have been received.\n    transcriber.maybeMerge();\n}\n\n/**\n * this method will check if the counter is zero. If it is, it will call\n * the merging method\n */\nTranscriber.prototype.maybeMerge = function() {\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\n        // make sure to include the events in the result arrays before\n        // merging starts\n        this.merge();\n    }\n};\n\n/**\n * This method will merge all speech-to-text arrays together in one\n * readable transcription string\n */\nTranscriber.prototype.merge = function() {\n    console.log(\n        `starting merge process!\\n The length of the array: ${\n            this.results.length}`);\n    this.transcription = '';\n\n    // the merging algorithm will look over all Word objects who are at pos 0 in\n    // every array. It will then select the one closest in time to the\n    // previously placed word, while removing the selected word from its array\n    // note: words can be skipped the skipped word's begin and end time somehow\n    // end up between the closest word start and end time\n    const arrays = this.results;\n\n    // arrays of Word objects\n    const potentialWords = []; // array of the first Word objects\n    // check if any arrays are already empty and remove them\n\n    hasPopulatedArrays(arrays);\n\n    // populate all the potential Words for a first time\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\n\n    // keep adding words to transcription until all arrays are exhausted\n    while (hasPopulatedArrays(arrays)) {\n        // first select the lowest array;\n        let lowestWordArray = arrays[0];\n\n        arrays.forEach(wordArray => {\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\n                lowestWordArray = wordArray;\n            }\n        });\n\n        // put the word in the transcription\n        let wordToAdd = lowestWordArray.shift();\n\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\n\n        // keep going until a word in another array has a smaller time\n        // or the array is empty\n        while (lowestWordArray.length > 0) {\n            let foundSmaller = false;\n            const wordToCompare = lowestWordArray[0].begin;\n\n            arrays.forEach(wordArray => {\n                if (wordArray[0].begin < wordToCompare) {\n                    foundSmaller = true;\n                }\n            });\n\n            // add next word if no smaller time has been found\n            if (foundSmaller) {\n                break;\n            }\n\n            wordToAdd = lowestWordArray.shift();\n            this.updateTranscription(wordToAdd, null);\n        }\n\n    }\n\n    // set the state to finished and do the necessary left-over tasks\n    this.state = FINISHED_STATE;\n    if (this.callback) {\n        this.callback(this.transcription);\n    }\n};\n\n/**\n * Appends a word object to the transcription. It will make a new line with a\n * name if a name is specified\n * @param {Word} word the Word object holding the word to append\n * @param {String|null} name the name of a new speaker. Null if not applicable\n */\nTranscriber.prototype.updateTranscription = function(word, name) {\n    if (name !== undefined && name !== null) {\n        this.transcription += `\\n${name}:`;\n        this.lineLength = name.length + 1; // +1 for the semi-colon\n    }\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\n        this.transcription += '\\n    ';\n        this.lineLength = 4; // because of the 4 spaces after the new line\n    }\n    this.transcription += ` ${word.word}`;\n    this.lineLength += word.word.length + 1; // +1 for the space\n};\n\n/**\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\n * All zero-element arrays inside will be removed\n * If any non-zero-element arrays are found, the method will return true.\n * otherwise it will return false\n * @param {Array<Array>} twoDimensionalArray the array to check\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\n */\nfunction hasPopulatedArrays(twoDimensionalArray) {\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\n        if (twoDimensionalArray[i].length === 0) {\n            twoDimensionalArray.splice(i, 1);\n        }\n    }\n\n    return twoDimensionalArray.length > 0;\n}\n\n/**\n * Push a word to the right location in a sorted array. The array is sorted\n * from lowest to highest start time. Every word is stored in an object which\n * includes the name of the person saying the word.\n *\n * @param {Array<Word>} array the sorted array to push to\n * @param {Word} word the word to push into the array\n */\nfunction pushWordToSortedArray(array, word) {\n    if (array.length === 0) {\n        array.push(word);\n    } else {\n        if (array[array.length - 1].begin <= word.begin) {\n            array.push(word);\n\n            return;\n        }\n\n        for (let i = 0; i < array.length; i++) {\n            if (word.begin < array[i].begin) {\n                array.splice(i, 0, word);\n\n                return;\n            }\n        }\n        array.push(word); // fail safe\n    }\n}\n\n/**\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\n * audiostream, it will not be added by the audioRecorder\n * @param {JitsiTrack} track the track to give to the audioRecorder\n */\nTranscriber.prototype.addTrack = function(track) {\n    this.audioRecorder.addTrack(track);\n};\n\n/**\n * Remove the given track from the auioRecorder\n * @param track\n */\nTranscriber.prototype.removeTrack = function(track) {\n    this.audioRecorder.removeTrack(track);\n};\n\n/**\n * Will return the created transcription if it's avialable or throw an error\n * when it's not done yet\n * @returns {String} the transcription as a String\n */\nTranscriber.prototype.getTranscription = function() {\n    if (this.state !== FINISHED_STATE) {\n        throw new Error(\n            `The transcription can only be retrieved when it's in the \"${\n                FINISHED_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    return this.transcription;\n};\n\n/**\n * Returns the current state of the transcription process\n */\nTranscriber.prototype.getState = function() {\n    return this.state;\n};\n\n/**\n * Resets the state to the \"before\" state, such that it's again possible to\n * call the start method\n */\nTranscriber.prototype.reset = function() {\n    this.state = BEFORE_STATE;\n    this.counter = null;\n    this.transcription = null;\n    this.startTime = null;\n    this.callback = null;\n    this.results = [];\n    this.lineLength = 0;\n};\n\nmodule.exports = Transcriber;\n","import Statistics from '../statistics/statistics';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\n * the versions of conferencing system components in given\n * <tt>JitsiConference</tt>.\n * @param conference <tt>JitsiConference</tt> instance which will be used to\n *        listen for focus presence updates.\n * @constructor\n */\nexport default function ComponentsVersions(conference) {\n\n    this.versions = {};\n\n    this.conference = conference;\n    this.conference.addCommandListener(\n        'versions', this.processVersions.bind(this));\n}\n\nComponentsVersions.prototype.processVersions\n    = function(versions, mucResource, mucJid) {\n        if (!this.conference._isFocus(mucJid)) {\n            logger.warn(\n                `Received versions not from the focus user: ${versions}`,\n                mucJid);\n\n            return;\n        }\n\n        const log = [];\n\n        versions.children.forEach(component => {\n\n            const name = component.attributes.name;\n            const version = component.value;\n\n            if (this.versions[name] !== version) {\n                this.versions[name] = version;\n                logger.info(`Got ${name} version: ${version}`);\n\n                log.push({\n                    id: 'component_version',\n                    component: name,\n                    version\n                });\n            }\n        });\n\n        // logs versions to stats\n        if (log.length > 0) {\n            Statistics.sendLog(JSON.stringify(log));\n        }\n    };\n\n/**\n * Obtains the version of conferencing system component.\n * @param componentName the name of the component for which we want to obtain\n *        the version.\n * @returns {String} which describes the version of the component identified by\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\n */\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\n    return this.versions[componentName];\n};\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\nimport * as Constants from './VideoSIPGWConstants';\n\n/**\n * Main video SIP GW handler. Stores references of all created sessions.\n */\nexport default class VideoSIPGW {\n\n    /**\n     * Creates new handler.\n     *\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\n     */\n    constructor(chatRoom) {\n        this.chatRoom = chatRoom;\n        this.eventEmitter = chatRoom.eventEmitter;\n        logger.debug('creating VideoSIPGW');\n        this.sessions = {};\n\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\n\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\n        // more than one VideoSIPGW can be created per JitsiConference,\n        // so we don't bother to cleanup\n        chatRoom.addPresenceListener('jibri-sip-call-state',\n            this.handleJibriSIPState.bind(this));\n    }\n\n    /**\n     * Handles presence nodes with name: jibri-sip-call-state.\n     *\n     * @param {Object} node the presence node Object to handle.\n     * Object representing part of the presence received over xmpp.\n     */\n    handleJibriSIPState(node) {\n        const attributes = node.attributes;\n\n        if (!attributes) {\n            return;\n        }\n\n        logger.debug('Handle video sip gw state : ', attributes);\n\n        const newState = attributes.state;\n\n        if (newState === this.state) {\n            return;\n        }\n\n        switch (newState) {\n        case Constants.STATE_ON:\n        case Constants.STATE_OFF:\n        case Constants.STATE_PENDING:\n        case Constants.STATE_RETRYING:\n        case Constants.STATE_FAILED: {\n            const address = attributes.sipaddress;\n\n            if (!address) {\n                return;\n            }\n\n            // find the corresponding session and set its state\n            const session = this.sessions[address];\n\n            if (session) {\n                session.setState(newState, attributes.failure_reason);\n            } else {\n                logger.warn('Video SIP GW session not found:', address);\n            }\n        }\n        }\n    }\n\n    /**\n     * Creates new session and stores its reference if it does not exist or\n     * returns an error otherwise.\n     *\n     * @param {string} sipAddress - The sip address to use.\n     * @param {string} displayName - The display name to use.\n     * @returns {JitsiVideoSIPGWSession|Error}\n     */\n    createVideoSIPGWSession(sipAddress, displayName) {\n        if (this.sessions[sipAddress]) {\n            logger.warn('There was already a Video SIP GW session for address',\n                sipAddress);\n\n            return new Error(Constants.ERROR_SESSION_EXISTS);\n        }\n\n        const session = new JitsiVideoSIPGWSession(\n            sipAddress, displayName, this.chatRoom);\n\n        session.addStateListener(this.sessionStateChangeListener);\n\n        this.sessions[sipAddress] = session;\n\n        return session;\n    }\n\n    /**\n     * Listener for session state changed. When a session goes to off or failed\n     * we delete its reference.\n     *\n     * @param {options} event - { address, oldState, newState, displayName }\n     */\n    sessionStateChanged(event) {\n        const address = event.address;\n\n        if (event.newState === Constants.STATE_OFF\n            || event.newState === Constants.STATE_FAILED) {\n            const session = this.sessions[address];\n\n            if (!session) {\n                logger.error('Missing Video SIP GW session with address:',\n                    address);\n\n                return;\n            }\n\n            session.removeStateListener(this.sessionStateChangeListener);\n            delete this.sessions[address];\n        }\n\n        this.eventEmitter.emit(\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n            event);\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport Listenable from '../util/Listenable';\n\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\n\nconst logger = getLogger(__filename);\n\n/**\n * The event name for current sip video session state changed.\n * @type {string} event name for sip video session state changed.\n */\nconst STATE_CHANGED = 'STATE_CHANGED';\n\n/**\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\n * When session is in OFF or FAILED stated it cannot be used anymore.\n */\nexport default class JitsiVideoSIPGWSession extends Listenable {\n\n    /**\n     * Creates new session with the desired sip address and display name.\n     *\n     * @param {string} sipAddress - The sip address to use when\n     * starting the session.\n     * @param {string} displayName - The display name to use for\n     * that participant.\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\n     */\n    constructor(sipAddress, displayName, chatRoom) {\n        super();\n\n        this.sipAddress = sipAddress;\n        this.displayName = displayName;\n        this.chatRoom = chatRoom;\n\n        /*\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\n         * the session enters this state when it was in STATE_ON and was stopped\n         * and such session cannot be used anymore.\n         *\n         * @type {VideoSIPGWConstants|undefined}\n         */\n        this.state = undefined;\n    }\n\n    /**\n     * Stops the current session.\n     */\n    stop() {\n        if (this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\n            logger.warn('Video SIP GW session already stopped or failed!');\n\n            return;\n        }\n\n        this._sendJibriIQ('stop');\n    }\n\n    /**\n     * Starts a new session. Sends an iq to the focus.\n     */\n    start() {\n        // if state is off, this session was active for some reason\n        // and we should create new one, rather than reusing it\n        if (this.state === VideoSIPGWConstants.STATE_ON\n            || this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_PENDING\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\n            logger.warn('Video SIP GW session already started!');\n\n            return;\n        }\n\n        this._sendJibriIQ('start');\n    }\n\n    /**\n     * Changes the state of this session.\n     *\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\n     * @param {string} [optional] failureReason - The reason why a failure state\n     * was entered.\n     * @returns {void}\n     */\n    setState(newState, failureReason) {\n        if (newState === this.state) {\n            return;\n        }\n\n        const oldState = this.state;\n\n        this.state = newState;\n        this.eventEmitter.emit(STATE_CHANGED,\n            {\n                address: this.sipAddress,\n                failureReason,\n                oldState,\n                newState: this.state,\n                displayName: this.displayName\n            }\n        );\n    }\n\n    /**\n     * Subscribes the passed listener to the event for state change of this\n     * session.\n     *\n     * @param {Function} listener - The function that will receive the event.\n     */\n    addStateListener(listener) {\n        this.addListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Unsubscribes the passed handler.\n     *\n     * @param {Function} listener - The function to be removed.\n     */\n    removeStateListener(listener) {\n        this.removeListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Sends a jibri command using an iq.\n     *\n     * @private\n     * @param {string} action - The action to send ('start' or 'stop').\n     */\n    _sendJibriIQ(action) {\n        const attributes = {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            sipaddress: this.sipAddress\n        };\n\n        attributes.displayname = this.displayName;\n\n        const iq = $iq({\n            to: this.chatRoom.focusMucJid,\n            type: 'set' })\n            .c('jibri', attributes)\n            .up();\n\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\n        this.chatRoom.connection.sendIQ(\n            iq,\n            () => {}, // eslint-disable-line no-empty-function\n            error => {\n                logger.error(\n                    `Failed to ${action} video SIP GW session, error: `, error);\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\n            });\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTC from '../RTC/RTC';\nimport Statistics from '../statistics/statistics';\n\n\nconst logger = getLogger(__filename);\n\n// If after 3000 ms the detector did not find any active devices consider that there aren't any usable ones available\n// i.e. audioLevel > 0.008\nconst DETECTION_TIMEOUT = 3000;\n\n\n/**\n * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n *\n * @returns Promise<Object> - Object containing information about the found device.\n */\nexport default function getActiveAudioDevice() {\n\n    return new Promise(resolve => {\n        RTC.enumerateDevices(devices => {\n            const audioDevices = devices.filter(device => device.kind === 'audioinput');\n            const devicePromiseArray = [];\n\n\n            for (const micDevice of audioDevices) {\n                const devicePromise = RTC.obtainAudioAndVideoPermissions({ devices: [ 'audio' ],\n                    micDeviceId: micDevice.deviceId }).then(tracks => {\n\n                    // We expect a single device to be available when obtained from obtainAudioAndVideoPermissions\n                    // that's  why only take p.value[0].\n                    const track = tracks[0];\n                    const originalStream = track.getOriginalStream();\n\n                    Statistics.startLocalStats(originalStream, track.setAudioLevel.bind(track));\n                    track.addEventListener(JitsiTrackEvents.LOCAL_TRACK_STOPPED, () => {\n                        Statistics.stopLocalStats(originalStream);\n                    });\n\n                    return track;\n                });\n\n                devicePromiseArray.push(devicePromise);\n            }\n\n            Promise.allSettled(devicePromiseArray).then(outcomeArray => {\n                const successfulPromises = outcomeArray.filter(p => p.status === 'fulfilled');\n                const rejectedPromises = outcomeArray.filter(p => p.status === 'rejected');\n\n\n                const availableDevices = successfulPromises.map(p => p.value);\n                const rejectReasons = rejectedPromises.map(p => p.value);\n\n                for (const reason of rejectReasons) {\n                    logger.error('Failed to acquire audio device with error: ', reason);\n                }\n\n                // Setup event handlers for monitored devices.\n                for (const device of availableDevices) {\n                    device.on(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\n                        // This is a very naive approach but works, a more accurate one would be to use rnnoise in\n                        // order to limit  the number of false positives. The 0.008 constant is due to how\n                        // LocalStatsCollector from lib-jitsi-meet publishes audio-levels, in this case 0.008 denotes //\n                        // no input.\n                        if (audioLevel > 0.008) {\n                            stopActiveDevices(availableDevices);\n                            resolve({ deviceId: device.deviceId,\n                                deviceLabel: device.track.label });\n                        }\n                    });\n                }\n\n                // Cancel the detection in case no devices was found with audioLevel > 0 in the set timeout.\n                setTimeout(() => {\n                    stopActiveDevices(availableDevices);\n                    resolve({\n                        deviceId: '',\n                        deviceLabel: '' }\n                    );\n                }, DETECTION_TIMEOUT);\n\n            });\n\n        });\n    });\n}\n\n/**\n * Stop the streams of the provided JitsiLocalTracks.\n *\n * @param {Array<JitsiLocalTrack>} deviceList - Array of JitsiLocalTracks to stop.\n * @returns {void}\n */\nfunction stopActiveDevices(deviceList) {\n    for (const device of deviceList) {\n        device.stopStream();\n    }\n}\n","/* globals $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport VideoType from '../../service/RTC/VideoType';\nimport RTC from '../RTC/RTC';\n\nimport ProxyConnectionPC from './ProxyConnectionPC';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\n * and assumes IQs to be used for communication.\n */\nexport default class ProxyConnectionService {\n    /**\n     * Initializes a new {@code ProxyConnectionService} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied\n     * video should be returned as a desktop stream. Defaults to false.\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\n     * for the peer connection.\n     * @param {JitsiConnection} [options.jitsiConnection] - The\n     * {@code JitsiConnection} which will be used to fetch TURN credentials for\n     * the P2P connection.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\n     * remote video stream has been received and converted to a\n     * {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\n     * @param {Function} options.onSendMessage - Callback to invoke when a\n     * message has to be sent (signaled) out. The arguments passed in are the\n     * jid to send the message to and the message\n     */\n    constructor(options = {}) {\n        const {\n            jitsiConnection,\n            ...otherOptions\n        } = options;\n\n        /**\n         * Holds a reference to the collection of all callbacks.\n         *\n         * @type {Object}\n         */\n        this._options = {\n            iceConfig: jitsiConnection\n                && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\n            ...otherOptions\n        };\n\n        /**\n         * The active instance of {@code ProxyConnectionService}.\n         *\n         * @type {ProxyConnectionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onFatalError = this._onFatalError.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n    }\n\n    /**\n     * Parses a message object regarding a proxy connection to create a new\n     * proxy connection or update and existing connection.\n     *\n     * @param {Object} message - A message object regarding establishing or\n     * updating a proxy connection.\n     * @param {Object} message.data - An object containing additional message\n     * details.\n     * @param {string} message.data.iq - The stringified iq which explains how\n     * and what to update regarding the proxy connection.\n     * @param {string} message.from - The message sender's full jid. Used for\n     * sending replies.\n     * @returns {void}\n     */\n    processMessage(message) {\n        const peerJid = message.from;\n\n        if (!peerJid) {\n            return;\n        }\n\n        // If a proxy connection has already been established and messages come\n        // from another peer jid then those messages should be replied to with\n        // a rejection.\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() !== peerJid) {\n            this._onFatalError(\n                peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'rejected'\n            );\n\n            return;\n        }\n\n        const iq = this._convertStringToXML(message.data.iq);\n        const $jingle = iq && iq.find('jingle');\n        const action = $jingle && $jingle.attr('action');\n\n        if (action === ACTIONS.INITIATE) {\n            this._peerConnection = this._createPeerConnection(peerJid, {\n                isInitiator: false,\n                receiveVideo: true\n            });\n        }\n\n        // Truthy check for peer connection added to protect against possibly\n        // receiving actions before an ACTIONS.INITIATE.\n        if (this._peerConnection) {\n            this._peerConnection.processMessage($jingle);\n        }\n\n        // Take additional steps to ensure the peer connection is cleaned up\n        // if it is to be closed.\n        if (action === ACTIONS.CONNECTION_ERROR\n            || action === ACTIONS.UNAVAILABLE\n            || action === ACTIONS.TERMINATE) {\n            this._selfCloseConnection();\n        }\n\n        return;\n    }\n\n    /**\n     * Instantiates and initiates a proxy peer connection.\n     *\n     * @param {string} peerJid - The jid of the remote client that should\n     * receive messages.\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\n     * send through to the peer.\n     * @returns {void}\n     */\n    start(peerJid, localTracks = []) {\n        this._peerConnection = this._createPeerConnection(peerJid, {\n            isInitiator: true,\n            receiveVideo: false\n        });\n\n        this._peerConnection.start(localTracks);\n    }\n\n    /**\n     * Terminates any active proxy peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.stop();\n        }\n\n        this._peerConnection = null;\n    }\n\n    /**\n     * Transforms a stringified xML into a XML wrapped in jQuery.\n     *\n     * @param {string} xml - The XML in string form.\n     * @private\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\n     * if an error is encountered during transformation.\n     */\n    _convertStringToXML(xml) {\n        try {\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\n\n            return $(xmlDom);\n        } catch (e) {\n            logger.error('Attempted to convert incorrectly formatted xml');\n\n            return null;\n        }\n    }\n\n    /**\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\n     *\n     * @param {string} peerJid - The jid of the remote peer with which the\n     * {@code ProxyConnectionPC} will be established with.\n     * @param {Object} options - Additional defaults to instantiate the\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\n     * for more details.\n     * @private\n     * @returns {ProxyConnectionPC}\n     */\n    _createPeerConnection(peerJid, options = {}) {\n        if (!peerJid) {\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\n        }\n\n        const pcOptions = {\n            iceConfig: this._options.iceConfig,\n            onError: this._onFatalError,\n            onRemoteStream: this._onRemoteStream,\n            onSendMessage: this._onSendMessage,\n            peerJid,\n            ...options\n        };\n\n        return new ProxyConnectionPC(pcOptions);\n    }\n\n    /**\n     * Callback invoked when an error occurs that should cause\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\n     * connected. Sends an error message/reply back to the peer.\n     *\n     * @param {string} peerJid - The peer jid with which the connection was\n     * attempted or started, and to which an iq with error details should be\n     * sent.\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onFatalError(peerJid, errorType, details = '') {\n        logger.error(\n            'Received a proxy connection error', peerJid, errorType, details);\n\n        const iq = $iq({\n            to: peerJid,\n            type: 'set'\n        })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: errorType\n            })\n            .c('details')\n            .t(details)\n            .up();\n\n        this._onSendMessage(peerJid, iq);\n\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() === peerJid) {\n            this._selfCloseConnection();\n        }\n    }\n\n    /**\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\n     * has offered a media stream. The stream is converted into a\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\n     * callback is defined.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\n     * for the peer's media stream.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        if (!this._options.onRemoteStream) {\n            logger.error('Remote track received without callback.');\n            jitsiRemoteTrack.dispose();\n\n            return;\n        }\n\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\n        let videoType;\n\n        if (isVideo) {\n            videoType = this._options.convertVideoToDesktop\n                ? VideoType.DESKTOP : VideoType.CAMERA;\n        }\n\n        // Grab the webrtc media stream and pipe it through the same processing\n        // that would occur for a locally obtained media stream.\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\n        const jitsiLocalTracks = RTC.newCreateLocalTracks(\n            [\n                {\n                    deviceId:\n                        `proxy:${this._peerConnection.getPeerJid()}`,\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\n                    sourceType: 'proxy',\n                    stream: mediaStream,\n                    track: mediaStream.getVideoTracks()[0],\n                    videoType\n                }\n            ]);\n\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\n    }\n\n    /**\n     * Formats and forwards a message an iq to be sent to a peer jid.\n     *\n     * @param {string} peerJid - The jid the iq should be sent to.\n     * @param {Object} iq - The iq which would be sent to the peer jid.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(peerJid, iq) {\n        if (!this._options.onSendMessage) {\n            return;\n        }\n\n        try {\n            const stringifiedIq\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\n\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\n        } catch (e) {\n            logger.error('Attempted to send an incorrectly formatted iq.');\n        }\n    }\n\n    /**\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\n     *\n     * @private\n     * @returns {void}\n     */\n    _selfCloseConnection() {\n        this.stop();\n\n        this._options.onConnectionClosed\n            && this._options.onConnectionClosed();\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport RTC from '../RTC/RTC';\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\n\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\n * an XMPP connection. It is being re-used for consistency with the rest of the\n * codebase and to leverage existing peer connection event handling. Also\n * this class provides a facade to hide most of the API for\n * {@code JingleSessionPC}.\n */\nexport default class ProxyConnectionPC {\n    /**\n     * Initializes a new {@code ProxyConnectionPC} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\n     * for the peer connection.\n     * @param {boolean} [options.isInitiator] - If true, the local client should\n     * send offers. If false, the local client should send answers. Defaults to\n     * false.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\n     * remote media stream has been received through the peer connection.\n     * @param {string} options.peerJid - The jid of the remote client with which\n     * the peer connection is being establish and which should receive direct\n     * messages regarding peer connection updates.\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer\n     * connection should accept incoming video streams. Defaults to false.\n     * @param {Function} options.onSendMessage - Callback to invoke when a\n     * message has to be sent (signaled) out.\n     */\n    constructor(options = {}) {\n        this._options = {\n            iceConfig: {},\n            isInitiator: false,\n            receiveAudio: false,\n            receiveVideo: false,\n            ...options\n        };\n\n        /**\n         * Instances of {@code JitsiTrack} associated with this instance of\n         * {@code ProxyConnectionPC}.\n         *\n         * @type {Array<JitsiTrack>}\n         */\n        this._tracks = [];\n\n        /**\n         * The active instance of {@code JingleSessionPC}.\n         *\n         * @type {JingleSessionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onError = this._onError.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n    }\n\n    /**\n     * Returns the jid of the remote peer with which this peer connection should\n     * be established with.\n     *\n     * @returns {string}\n     */\n    getPeerJid() {\n        return this._options.peerJid;\n    }\n\n    /**\n     * Updates the peer connection based on the passed in jingle.\n     *\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\n     * describing how the peer connection should be updated.\n     * @returns {void}\n     */\n    processMessage($jingle) {\n        switch ($jingle.attr('action')) {\n        case ACTIONS.ACCEPT:\n            this._onSessionAccept($jingle);\n            break;\n\n        case ACTIONS.INITIATE:\n            this._onSessionInitiate($jingle);\n            break;\n\n        case ACTIONS.TERMINATE:\n            this._onSessionTerminate($jingle);\n            break;\n\n        case ACTIONS.TRANSPORT_INFO:\n            this._onTransportInfo($jingle);\n            break;\n        }\n    }\n\n    /**\n     * Instantiates a peer connection and starts the offer/answer cycle to\n     * establish a connection with a remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\n     * to add to the peer connection.\n     * @returns {void}\n     */\n    start(localTracks = []) {\n        if (this._peerConnection) {\n            return;\n        }\n\n        this._tracks = this._tracks.concat(localTracks);\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.invite(localTracks);\n    }\n\n    /**\n     * Begins the process of disconnecting from a remote peer and cleaning up\n     * the peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.terminate();\n        }\n\n        this._onSessionTerminate();\n    }\n\n    /**\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\n     * dependencies of {@code JingleSessionPC}.\n     *\n     * @private\n     * @returns {JingleSessionPC}\n     */\n    _createPeerConnection() {\n        /**\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\n         * object, which may not be accessible from the caller.\n         *\n         * @type {Object}\n         */\n        const configStub = {};\n\n        /**\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\n         * passed through, which also has the jingle plugin initialized on it.\n         * This connection object is used to signal out peer connection updates\n         * via iqs, and those updates need to be piped back out to the remote\n         * peer.\n         *\n         * @type {Object}\n         */\n        const connectionStub = {\n            // At the time this is used for Spot and it's okay to say the connection is always connected, because if\n            // spot has no signalling it will not be in a meeting where this is used.\n            connected: true,\n            jingle: {\n                terminate: () => { /** no-op */ }\n            },\n            sendIQ: this._onSendMessage,\n\n            // Returns empty function, because it does not add any listeners for real\n            // eslint-disable-next-line no-empty-function\n            addEventListener: () => () => { }\n        };\n\n        /**\n         * {@code JingleSessionPC} can take in a custom ice configuration,\n         * depending on the peer connection type, peer-to-peer or other.\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\n         * connection so the ice configuration is hard-coded with defaults.\n         *\n         * @type {Object}\n         */\n        const iceConfigStub = {\n            iceServers: DEFAULT_STUN_SERVERS,\n            ...this._options.iceConfig\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference}, which has an event emitter that is used\n         * to signal various connection updates that the local client should\n         * act upon. The conference instance is not a dependency of a proxy\n         * connection, but the emitted events can be relevant to the proxy\n         * connection so the event emitter is stubbed.\n         *\n         * @param {string} event - The constant for the event type.\n         * @type {Function}\n         * @returns {void}\n         */\n        const emitter = event => {\n            switch (event) {\n            case XMPPEvents.CONNECTION_ICE_FAILED:\n            case XMPPEvents.CONNECTION_FAILED:\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\n                break;\n            }\n        };\n\n        /**\n         * {@link JingleSessionPC} expects an instance of\n         * {@link ChatRoom} to be passed in. {@link ProxyConnectionPC}\n         * is instantiated outside of the {@code JitsiConference}, so it must be\n         * stubbed to prevent errors.\n         *\n         * @type {Object}\n         */\n        const roomStub = {\n            addPresenceListener: () => { /** no-op */ },\n            connectionTimes: [],\n            eventEmitter: { emit: emitter },\n            getMediaPresenceInfo: () => {\n                // Errors occur if this function does not return an object\n\n                return {};\n            },\n            removePresenceListener: () => { /** no-op */ }\n        };\n\n        /**\n         * A {@code JitsiConference} stub passed to the {@link RTC} module.\n         * @type {Object}\n         */\n        const conferenceStub = {};\n\n        /**\n         * Create an instance of {@code RTC} as it is required for peer\n         * connection creation by {@code JingleSessionPC}. An existing instance\n         * of {@code RTC} from elsewhere should not be re-used because it is\n         * a stateful grouping of utilities.\n         */\n        this._rtc = new RTC(conferenceStub, {});\n\n        /**\n         * Add the remote track listener here as {@code JingleSessionPC} has\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\n         * emitter.\n         */\n        this._rtc.addListener(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            this._onRemoteStream\n        );\n\n        const peerConnection = new JingleSessionPC(\n            undefined, // sid\n            undefined, // localJid\n            this._options.peerJid, // remoteJid\n            connectionStub, // connection\n            {\n                offerToReceiveAudio: this._options.receiveAudio,\n                offerToReceiveVideo: this._options.receiveVideo\n            }, // mediaConstraints\n            iceConfigStub, // iceConfig\n            true, // isP2P\n            this._options.isInitiator // isInitiator\n        );\n\n        /**\n         * An additional initialize call is necessary to properly set instance\n         * variable for calling.\n         */\n        peerConnection.initialize(roomStub, this._rtc, configStub);\n\n        return peerConnection;\n    }\n\n    /**\n     * Invoked when a connection related issue has been encountered.\n     *\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onError(errorType, details = '') {\n        this._options.onError(this._options.peerJid, errorType, details);\n    }\n\n    /**\n     * Callback invoked when the peer connection has received a remote media\n     * stream.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\n     * wrapped in {@code JitsiRemoteTrack}.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        this._tracks.push(jitsiRemoteTrack);\n\n        this._options.onRemoteStream(jitsiRemoteTrack);\n    }\n\n    /**\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\n     * out to the remote peer.\n     *\n     * @param {XML} iq - The message to signal out.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(iq) {\n        this._options.onSendMessage(this._options.peerJid, iq);\n    }\n\n    /**\n     * Callback invoked in response to an agreement to start a proxy connection.\n     * The passed in jingle element should contain an SDP answer to a previously\n     * sent SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionAccept($jingle) {\n        if (!this._peerConnection) {\n            logger.error('Received an answer when no peer connection exists.');\n\n            return;\n        }\n\n        this._peerConnection.setAnswer($jingle);\n    }\n\n    /**\n     * Callback invoked in response to a request to start a proxy connection.\n     * The passed in jingle element should contain an SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionInitiate($jingle) {\n        if (this._peerConnection) {\n            logger.error('Received an offer when an offer was already sent.');\n\n            return;\n        }\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.acceptOffer(\n            $jingle,\n            () => { /** no-op */ },\n            () => this._onError(\n                this._options.peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'session initiate error'\n            )\n        );\n    }\n\n    /**\n     * Callback invoked in response to a request to disconnect an active proxy\n     * connection. Cleans up tracks and the peer connection.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onSessionTerminate() {\n        this._tracks.forEach(track => track.dispose());\n        this._tracks = [];\n\n        if (this._peerConnection) {\n            this._peerConnection.onTerminated();\n        }\n\n        if (this._rtc) {\n            this._rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_ADDED,\n                this._onRemoteStream\n            );\n\n            this._rtc.destroy();\n        }\n    }\n\n    /**\n     * Callback invoked in response to ICE candidates from the remote peer.\n     * The passed in jingle element should contain an ICE candidate.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onTransportInfo($jingle) {\n        this._peerConnection.addIceCandidates($jingle);\n    }\n}\n","export default {\n    error: {\n        BUSY: 'busy',\n        ERROR: 'error',\n        RESOURCE_CONSTRAINT: 'resource-constraint',\n        SERVICE_UNAVAILABLE: 'service-unavailable'\n    },\n    mode: {\n        FILE: 'file',\n        STREAM: 'stream'\n    },\n    status: {\n        OFF: 'off',\n        ON: 'on',\n        PENDING: 'pending'\n    }\n};\n","import EventEmitter from 'events';\n\nimport browser from '../browser';\nimport Settings from '../settings/Settings';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst PRECALL_TEST_RESULTS = 'preCallTestResults';\nconst emitter = new EventEmitter();\nlet _initialized = false;\nlet api = null;\n\n/**\n * Loads the callstats io script.\n *\n * @returns {Promise<void>}\n */\nfunction _loadScript() {\n    if (browser.isReactNative()) {\n        return;\n    }\n\n    return new Promise(resolve => {\n        ScriptUtil.loadScript(\n            CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ resolve);\n    });\n}\n\n/**\n * Initializes the callstats lib and registers a callback to be invoked\n * when there are 'preCallTestResults'.\n *\n * @typedef PrecallTestOptions\n * @type {Object}\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} statisticsId - The user name to use when initializing callstats.\n * @property {string} statisticsDisplayName - The user display name.\n *\n * @param { PrecallTestOptions} options - The init options.\n * @returns {Promise<void>}\n */\nfunction _initialize(options) {\n    return new Promise((resolve, reject) => {\n        const appId = options.callStatsID;\n        const appSecret = options.callStatsSecret;\n        const userId = options.statisticsId || options.statisticsDisplayName || Settings.callStatsUserName;\n\n        api.initialize(appId, appSecret, userId, (status, message) => {\n            if (status === 'success') {\n                api.on(PRECALL_TEST_RESULTS, (...args) => {\n                    emitter.emit(PRECALL_TEST_RESULTS, ...args);\n                });\n                _initialized = true;\n                resolve();\n            } else {\n                reject({\n                    status,\n                    message\n                });\n            }\n        }, null, { disablePrecalltest: true });\n    });\n}\n\n/**\n * Loads the callstats script and initializes the library.\n *\n * @param {Function} onResult - The callback to be invoked when results are received.\n * @returns {Promise<void>}\n */\nexport async function init(options) {\n    if (_initialized) {\n        throw new Error('Precall Test already initialized');\n    }\n\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests } = options;\n\n    if (!callStatsID || !callStatsSecret || disableThirdPartyRequests) {\n        throw new Error('Callstats is disabled');\n    }\n\n    await _loadScript();\n    // eslint-disable-next-line new-cap\n    api = new window.callstats();\n\n    return _initialize(options);\n}\n\n/**\n * Executes a pre call test.\n *\n * @typedef PrecallTestResults\n * @type {Object}\n * @property {boolean} mediaConnectivity - If there is media connectivity or not.\n * @property {number} throughput  - The average throughput.\n * @property {number} fractionalLoss - The packet loss.\n * @property {number} rtt - The round trip time.\n * @property {string} provider - It is usually 'callstats'.\n *\n * @returns {Promise<{PrecallTestResults}>}\n */\nexport function execute() {\n    if (!_initialized) {\n        return Promise.reject('uninitialized');\n    }\n\n    return new Promise((resolve, reject) => {\n        emitter.on(PRECALL_TEST_RESULTS, (status, payload) => {\n            if (status === 'success') {\n                resolve(payload);\n            } else {\n                reject({\n                    status,\n                    payload\n                });\n            }\n\n        });\n\n        api.makePrecallTest();\n    });\n}\n\nexport default {\n    init,\n    execute\n};\n","const AuthUtil = {\n    /**\n     * Creates the URL pointing to JWT token authentication service. It is\n     * formatted from the 'urlPattern' argument which can contain the following\n     * constants:\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\n     * argument to this method.\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\n     * the role upgrade scenario, where user connects from anonymous domain and\n     * then gets upgraded to the moderator by logging-in from the popup window.\n     *\n     * @param urlPattern a URL pattern pointing to the login service\n     * @param roomName the name of the conference room for which the user will\n     * be authenticated\n     * @param {bool} roleUpgrade <tt>true</tt> if the URL will be used for role\n     * upgrade scenario, where the user logs-in from the popup window in order\n     * to have the moderator rights granted\n     *\n     * @returns {string|null} the URL pointing to JWT login service or\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\n     * constructed.\n     */\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\n        const url = urlPattern;\n\n        if (typeof url !== 'string') {\n            return null;\n        }\n\n        return url.replace('{room}', roomName)\n            .replace('{roleUpgrade}', roleUpgrade === true);\n    }\n};\n\nmodule.exports = AuthUtil;\n","/* global\n    __filename\n*/\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport { createAudioContext } from './WebAudioUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AudioMixer, as the name implies, mixes a number of MediaStreams containing audio tracks into a single\n * MediaStream.\n */\nexport default class AudioMixer {\n    /**\n     * Create AudioMixer instance.\n     */\n    constructor() {\n        this._started = false;\n        this._streamsToMix = [];\n        this._streamMSSArray = [];\n    }\n\n    /**\n     * Add audio MediaStream to be mixed, if the stream doesn't contain any audio tracks it will be ignored.\n     *\n     * @param {MediaStream} stream - MediaStream to be mixed.\n     */\n    addMediaStream(stream) {\n        if (!stream.getAudioTracks()) {\n            logger.warn('Added MediaStream doesn\\'t contain audio tracks.');\n        }\n\n        this._streamsToMix.push(stream);\n    }\n\n    /**\n     * At this point a WebAudio ChannelMergerNode is created and and the two associated MediaStreams are connected to\n     * it; the resulting mixed MediaStream is returned.\n     *\n     * @returns {MediaStream} - MediaStream containing added streams mixed together, or null if no MediaStream\n     * is added.\n     */\n    start() {\n        // If the mixer was already started just return the existing mixed stream.\n        if (this._started) {\n            return this._mixedMSD.stream;\n        }\n\n        this._audioContext = createAudioContext();\n\n        if (!this._streamsToMix.length) {\n            logger.warn('No MediaStream\\'s added to AudioMixer, nothing will happen.');\n\n            return null;\n        }\n\n        this._started = true;\n\n        this._mixedMSD = this._audioContext.createMediaStreamDestination();\n\n        for (const stream of this._streamsToMix) {\n            const streamMSS = this._audioContext.createMediaStreamSource(stream);\n\n            streamMSS.connect(this._mixedMSD);\n\n            // Maintain a list of MediaStreamAudioSourceNode so we can disconnect them on reset.\n            this._streamMSSArray.push(streamMSS);\n        }\n\n        return this._mixedMSD.stream;\n    }\n\n    /**\n     * Disconnect MediaStreamAudioSourceNode and clear references.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._started = false;\n        this._streamsToMix = [];\n\n        // Clean up created MediaStreamAudioSourceNode.\n        for (const streamMSS of this._streamMSSArray) {\n            streamMSS.disconnect();\n        }\n\n        this._streamMSSArray = [];\n\n        if (this._audioContext) {\n            this._audioContext = undefined;\n        }\n    }\n}\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport transform from 'sdp-transform';\n\n/**\n * Rewrites the source information in the way sdp-transform expects.\n * Source information is split into multiple ssrc objects each containing\n * an id, attribute and value.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst write = function(session, opts) {\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            if (mLine.sources && mLine.sources.length) {\n                mLine.ssrcs = [];\n                mLine.sources.forEach(source => {\n                    Object.keys(source).forEach(attribute => {\n                        if (attribute === 'id') {\n                            return;\n                        }\n                        mLine.ssrcs.push({\n                            id: source.id,\n                            attribute,\n                            value: source[attribute]\n                        });\n                    });\n                });\n                delete mLine.sources;\n            }\n\n            // join ssrcs in ssrc groups\n            if (mLine.ssrcGroups && mLine.ssrcGroups.length) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs !== 'undefined'\n                    && Array.isArray(ssrcGroup.ssrcs)) {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return transform.write(session, opts);\n};\n\n/**\n * Rewrites the source information that we get from sdp-transform.\n * All the ssrc lines with different attributes that belong to the\n * same ssrc are grouped into a single soure object with multiple key value pairs.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst parse = function(sdp) {\n    const session = transform.parse(sdp);\n\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            // group sources attributes by ssrc\n            if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n                mLine.sources = [];\n                mLine.ssrcs.forEach(ssrc => {\n                    const found = mLine.sources.findIndex(source => source.id === ssrc.id);\n\n                    if (found > -1) {\n                        mLine.sources[found][ssrc.attribute] = ssrc.value;\n                    } else {\n                        const src = { id: ssrc.id };\n\n                        src[ssrc.attribute] = ssrc.value;\n                        mLine.sources.push(src);\n                    }\n                });\n                delete mLine.ssrcs;\n            }\n\n            // split ssrcs in ssrc groups\n            if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs === 'string') {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return session;\n};\n\nexport default {\n    write,\n    parse\n};\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport clonedeep from 'lodash.clonedeep';\nimport transform from './transform.js';\n\nconst PLAN_B_MIDS = [ 'audio', 'video', 'data' ];\nconst findSimGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'SIM');\nconst findFidGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'FID');\n\n/**\n * Add the ssrcs of the SIM group and their corresponding FID group ssrcs\n * to the m-line.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} simGroup - The SIM group whose ssrcs have to be added to\n * the m-line.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n */\nfunction addSimGroupSources(mLine, simGroup, sourceGroups, sourceList) {\n    if (!mLine || !simGroup) {\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    simGroup.ssrcs.forEach(src => {\n        mLine.sources.push(findSourcebyId(src));\n\n        // find the related FID group member for this ssrc.\n        const relatedFidGroup = sourceGroups[parseInt(src, 10)].find(grp => grp.semantics === 'FID');\n\n        if (relatedFidGroup) {\n            const relatedSsrc = relatedFidGroup.ssrcs.find(s => s !== src);\n\n            mLine.sources.push(findSourcebyId(relatedSsrc));\n            mLine.ssrcGroups.push(relatedFidGroup);\n        }\n    });\n\n    // Add the SIM group last.\n    mLine.ssrcGroups.push(simGroup);\n}\n\n/**\n * Add ssrcs and ssrc-groups to the m-line. When a primary ssrc, i.e., the\n * first ssrc in a SIM group is passed, all the other ssrcs from the SIM\n * group and the other ssrcs from the related FID groups are added to the same\n * m-line since they all belong to the same remote source. Since the ssrcs are\n * not guaranteed to be in the correct order, try to find if a SIM group exists,\n * if not, just add the FID group.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} ssrc - the primary ssrc.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n * @returns {void}\n */\nfunction addSourcesToMline(mLine, ssrc, sourceGroups, sourceList) {\n    if (!mLine || !ssrc) {\n        return;\n    }\n    mLine.sources = [];\n    mLine.ssrcGroups = [];\n\n    // If there are no associated ssrc-groups, just add the ssrc and msid.\n    if (!sourceGroups[ssrc.id]) {\n        mLine.sources.push(ssrc);\n        mLine.msid = ssrc.msid;\n\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    // Find the SIM and FID groups that this ssrc belongs to.\n    const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n    const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n    // Add the ssrcs for the SIM group and their corresponding FID groups.\n    if (simGroup) {\n        addSimGroupSources(mLine, simGroup, sourceGroups, sourceList);\n    } else if (fidGroup) {\n        // check if the other ssrc from this FID group is part of a SIM group\n        const otherSsrc = fidGroup.ssrcs.find(s => s !== ssrc);\n        const simGroup2 = findSimGroup(sourceGroups[otherSsrc]);\n\n        if (simGroup2) {\n            addSimGroupSources(mLine, simGroup2, sourceGroups, sourceList);\n        } else {\n            // Add the FID group ssrcs.\n            fidGroup.ssrcs.forEach(src => {\n                mLine.sources.push(findSourcebyId(src));\n            });\n            mLine.ssrcGroups.push(fidGroup);\n        }\n    }\n\n    // Set the msid for the media description using the msid attribute of the ssrcs.\n    mLine.msid = mLine.sources[0].msid;\n}\n\n/**\n * Checks if there is a mline for the given ssrc or its related primary ssrc.\n * We always implode the SIM group to the first ssrc in the SIM group before sRD,\n * so we also check if mline for that ssrc exists.\n * For example:\n * If the following ssrcs are in a SIM group,\n * <ssrc-group xmlns=\\\"urn:xmpp:jingle:apps:rtp:ssma:0\\\" semantics=\\\"SIM\\\">\n *        <source ssrc=\\\"1806330949\\\"/>\n *        <source ssrc=\\\"4173145196\\\"/>\n *        <source ssrc=\\\"2002632207\\\"/>\n * </ssrc-group>\n * This method returns true for any one of the 3 ssrcs if there is a mline for 1806330949.\n * @param {Object} ssrc - ssrc to check.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} mlines - mlines in the description\n\n * @returns {Boolean} - Returns true if mline for the given ssrc or the related primary ssrc\n * exists, returns false otherwise.\n */\nfunction checkIfMlineForSsrcExists(ssrc, sourceGroups, mlines) {\n    const findMatchingMline = mline => {\n        if (mline.sources) {\n            return mline.sources.some(source => source.id === ssrc.id);\n        }\n\n        return false;\n    };\n\n    if (!mlines.find(findMatchingMline)) {\n        // check if this ssrc is member of a SIM group. If so, check if there\n        // is a matching m-line for the primary ssrc of the SIM group.\n        if (!sourceGroups[ssrc.id]) {\n            return false;\n        }\n        const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n        const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n        if (simGroup) {\n            return mlines.some(mline => mline.sources\n                && mline.sources.some(src => src.id.toString() === simGroup.ssrcs[0]));\n        } else if (fidGroup && ssrc.id.toString() !== fidGroup.ssrcs[0]) {\n            const otherSsrc = { id: fidGroup.ssrcs[0] };\n\n            return checkIfMlineForSsrcExists(otherSsrc, sourceGroups, mlines);\n\n        }\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Create an inverted sourceGroup map to put all the grouped ssrcs\n * in the same m-line.\n * @param {Array<Object>} sourceGroups\n * @returns {Object} - An inverted sourceGroup map.\n */\nfunction createSourceGroupMap(sourceGroups) {\n    const ssrc2group = {};\n\n    if (!sourceGroups || !Array.isArray(sourceGroups)) {\n        return ssrc2group;\n    }\n    sourceGroups.forEach(group => {\n        if (group.ssrcs && Array.isArray(group.ssrcs)) {\n            group.ssrcs.forEach(ssrc => {\n                if (typeof ssrc2group[ssrc] === 'undefined') {\n                    ssrc2group[ssrc] = [];\n                }\n                ssrc2group[ssrc].push(group);\n            });\n        }\n    });\n\n    return ssrc2group;\n}\n\n/**\n * Interop provides an API for tranforming a Plan B SDP to a Unified Plan SDP and\n * vice versa.\n */\nexport class Interop {\n    /**\n     * This method transforms a Unified Plan SDP to an equivalent Plan B SDP.\n     * @param {RTCSessionDescription} description - The description in Unified plan format.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toPlanB(description) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a unified plan sdp\n        if (session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) !== -1)) {\n            console.warn('The description does not look like unified plan sdp');\n\n            return description;\n        }\n\n        const media = {};\n        const sessionMedia = session.media;\n\n        session.media = [];\n        sessionMedia.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                mLine.mid = 'data';\n                media[mLine.mid] = mLine;\n\n                return;\n            }\n            if (typeof media[type] === 'undefined') {\n                const bLine = clonedeep(mLine);\n\n                // Copy the msid attribute to all the ssrcs if they belong to the same source group\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    bLine.sources.forEach(source => {\n                        mLine.msid ? source.msid = mLine.msid : delete source.msid;\n                    });\n                }\n\n                // Do not signal the FID groups if there is no msid attribute present\n                // on the sources as sesison-accept with this source info will fail strophe\n                // validation and the session will not be established. This behavior is seen\n                // on Firefox (with RTX enabled) when no video source is added at the join time.\n                // FF generates two recvonly ssrcs with no msid and a corresponding FID group in\n                // this case.\n                if (!bLine.ssrcGroups || !mLine.msid) {\n                    bLine.ssrcGroups = [];\n                }\n                delete bLine.msid;\n                bLine.mid = type;\n                media[type] = bLine;\n            } else if (mLine.msid) {\n                // Add sources and source-groups to the existing m-line of the same media type.\n                if (mLine.sources && Array.isArray(mLine.sources)) {\n                    media[type].sources = media[type].sources.concat(mLine.sources);\n                }\n                if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                    media[type].ssrcGroups = media[type].ssrcGroups.concat(mLine.ssrcGroups);\n                }\n            }\n        });\n        session.media = Object.values(media);\n\n        // Bundle the media only if it is active.\n        const bundle = [];\n\n        Object.values(media).forEach(mline => {\n            if (mline.direction !== 'inactive') {\n                bundle.push(mline.mid);\n            }\n        });\n\n        // We regenerate the BUNDLE group with the new mids.\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = bundle.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n        const resStr = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resStr\n        });\n    }\n\n    /**\n     * This method transforms a Plan B SDP to an equivalent Unified Plan SDP.\n     * @param {RTCSessionDescription} description - The description in plan-b format.\n     * @param {RTCSessionDescription} current - The current description set on\n     * the peerconnection in Unified-plan format, i.e., the readonly attribute\n     * remoteDescription on the RTCPeerConnection object.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toUnifiedPlan(description, current = null) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a plan-b sdp.\n        if (session.media.length > 3 || session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) === -1)) {\n            console.warn('The description does not look like plan-b');\n\n            return description;\n        }\n        const currentDesc = current ? transform.parse(current.sdp) : null;\n        const media = {};\n\n        session.media.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                if (!currentDesc || !currentDesc.media) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n\n                    return;\n                }\n                const mLineForData = currentDesc.media.findIndex(m => m.type === type);\n\n                if (mLineForData) {\n                    currentDesc.media[mLineForData] = mLine;\n                    currentDesc.media[mLineForData].mid = mLineForData;\n                }\n\n                return;\n            }\n\n            // Create an inverted sourceGroup map here to put all the grouped SSRCs in the same m-line.\n            const ssrc2group = createSourceGroupMap(mLine.ssrcGroups);\n\n            if (!mLine.sources) {\n                return;\n            }\n            mLine.sources.forEach((ssrc, idx) => {\n                // Do not add the receive-only ssrcs that Jicofo sends in the source-add.\n                // These ssrcs do not have the \"msid\" attribute set.\n                if (!ssrc.msid) {\n                    return;\n                }\n\n                // If there is no description set on the peerconnection, create new m-lines.\n                if (!currentDesc || !currentDesc.media) {\n                    if (checkIfMlineForSsrcExists(ssrc, ssrc2group, Object.values(media))) {\n                        return;\n                    }\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    newMline.direction = idx\n                        ? 'sendonly'\n                        : mLine.direction === 'sendonly' ? 'sendonly' : 'sendrecv';\n                    newMline.bundleOnly = undefined;\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                    media[newMline.mid] = newMline;\n\n                    return;\n                }\n\n                // Create and append the m-lines to the existing description.\n                if (checkIfMlineForSsrcExists(ssrc, ssrc2group, currentDesc.media)) {\n                    return;\n                }\n\n                // check if there is a m-line that is inactive and is of the same media type\n                const inactiveMid = currentDesc.media\n                    .findIndex(cmLine => cmLine.direction\n                        && cmLine.direction === 'inactive'\n                        && cmLine.type === type);\n\n                if (inactiveMid > -1) {\n                    currentDesc.media[inactiveMid].direction = 'sendonly';\n                    addSourcesToMline(currentDesc.media[inactiveMid], ssrc, ssrc2group, mLine.sources);\n                } else {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = currentDesc.media.length.toString();\n                    newMline.direction = 'sendonly';\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                    currentDesc.media.push(newMline);\n                }\n            });\n        });\n        session.media = currentDesc ? currentDesc.media : Object.values(media);\n        const mids = [];\n\n        session.media.forEach(mLine => {\n            mids.push(mLine.mid);\n        });\n\n        // We regenerate the BUNDLE group (since we regenerated the mids)\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = mids.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n\n        // Increment the session version every time.\n        session.origin.sessionVersion++;\n        const resultSdp = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resultSdp\n        });\n    }\n}\n","// For legacy purposes, preserve the UMD of the public API of the Jitsi Meet\n// library (a.k.a. JitsiMeetJS).\nmodule.exports = require('./JitsiMeetJS').default;\n","/* global __filename */\n\nimport Logger from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiConnection from './JitsiConnection';\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport JitsiMediaDevices from './JitsiMediaDevices';\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport NetworkInfo from './modules/connectivity/NetworkInfo';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport getActiveAudioDevice from './modules/detection/ActiveDeviceDetector';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport TrackVADEmitter from './modules/detection/TrackVADEmitter';\nimport ProxyConnectionService\n    from './modules/proxyconnection/ProxyConnectionService';\nimport recordingConstants from './modules/recording/recordingConstants';\nimport Settings from './modules/settings/Settings';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport precallTest from './modules/statistics/PrecallTest';\nimport Statistics from './modules/statistics/statistics';\nimport AuthUtil from './modules/util/AuthUtil';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport ScriptUtil from './modules/util/ScriptUtil';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport AudioMixer from './modules/webaudio/AudioMixer';\nimport * as MediaType from './service/RTC/MediaType';\nimport Resolutions from './service/RTC/Resolutions';\nimport * as ConnectionQualityEvents\n    from './service/connectivity/ConnectionQualityEvents';\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\n\nconst logger = Logger.getLogger(__filename);\n\n/**\n * The amount of time to wait until firing\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\n */\nconst USER_MEDIA_SLOW_PROMISE_TIMEOUT = 1000;\n\n/**\n * Gets the next lowest desirable resolution to try for a camera. If the given\n * resolution is already the lowest acceptable resolution, returns {@code null}.\n *\n * @param resolution the current resolution\n * @return the next lowest resolution from the given one, or {@code null} if it\n * is already the lowest acceptable resolution.\n */\nfunction getLowerResolution(resolution) {\n    if (!Resolutions[resolution]) {\n        return null;\n    }\n    const order = Resolutions[resolution].order;\n    let res = null;\n    let resName = null;\n\n    Object.keys(Resolutions).forEach(r => {\n        const value = Resolutions[r];\n\n        if (!res || (res.order < value.order && value.order < order)) {\n            resName = r;\n            res = value;\n        }\n    });\n\n    if (resName === resolution) {\n        resName = null;\n    }\n\n    return resName;\n}\n\n/**\n * Extracts from an 'options' objects with a specific format (TODO what IS the\n * format?) the attributes which are to be logged in analytics events.\n *\n * @param options gum options (???)\n * @returns {*} the attributes to attach to analytics events.\n */\nfunction getAnalyticsAttributesFromOptions(options) {\n    const attributes = {\n        'audio_requested':\n            options.devices.includes('audio'),\n        'video_requested':\n            options.devices.includes('video'),\n        'screen_sharing_requested':\n            options.devices.includes('desktop')\n    };\n\n    if (attributes.video_requested) {\n        attributes.resolution = options.resolution;\n    }\n\n    return attributes;\n}\n\n/**\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\n * this module, it's also a global (i.e. attached to {@code window}) namespace\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\n * automatically be attached to {@code window} by webpack. Unfortunately,\n * webpack's source code does not check whether the global variable has already\n * been assigned and overwrites it. Which is OK for the module\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\n * because it may already contain the values of other projects in the Jitsi Meet\n * family. The solution offered here works around webpack by merging all\n * existing values of the namespace {@code JitsiMeetJS} into the module\n * {@code JitsiMeetJS}.\n *\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\n * exported and may be attached to {@code window} by webpack later on).\n * @private\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\n * value of the namespace {@code JitsiMeetJS} (if any).\n */\nfunction _mergeNamespaceAndModule(module) {\n    return (\n        typeof window.JitsiMeetJS === 'object'\n            ? Object.assign({}, window.JitsiMeetJS, module)\n            : module);\n}\n\n/**\n * The public API of the Jitsi Meet library (a.k.a. {@code JitsiMeetJS}).\n */\nexport default _mergeNamespaceAndModule({\n\n    version: '{#COMMIT_HASH#}',\n\n    JitsiConnection,\n\n    /**\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\n     * local Jitsi participant without going through a Jitsi conference. It is\n     * currently used for room integration development, specifically wireless\n     * screensharing. Its API is experimental and will likely change; usage of\n     * it is advised against.\n     */\n    ProxyConnectionService,\n\n    constants: {\n        participantConnectionStatus: ParticipantConnectionStatus,\n        recording: recordingConstants,\n        sipVideoGW: VideoSIPGWConstants,\n        transcriptionStatus: JitsiTranscriptionStatus\n    },\n    events: {\n        conference: JitsiConferenceEvents,\n        connection: JitsiConnectionEvents,\n        detection: DetectionEvents,\n        track: JitsiTrackEvents,\n        mediaDevices: JitsiMediaDevicesEvents,\n        connectionQuality: ConnectionQualityEvents,\n        e2eping: E2ePingEvents\n    },\n    errors: {\n        conference: JitsiConferenceErrors,\n        connection: JitsiConnectionErrors,\n        track: JitsiTrackErrors\n    },\n    errorTypes: {\n        JitsiTrackError\n    },\n    logLevels: Logger.levels,\n    mediaDevices: JitsiMediaDevices,\n    analytics: Statistics.analytics,\n    init(options = {}) {\n        Settings.init(options.externalStorage);\n        Statistics.init(options);\n\n        // Initialize global window.connectionTimes\n        // FIXME do not use 'window'\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n\n        if (options.enableAnalyticsLogging !== true) {\n            logger.warn('Analytics disabled, disposing.');\n            this.analytics.dispose();\n        }\n\n        if (options.enableWindowOnErrorHandler) {\n            GlobalOnErrorHandler.addHandler(\n                this.getGlobalOnErrorHandler.bind(this));\n        }\n\n        // Log deployment-specific information, if available. Defined outside\n        // the application by individual deployments\n        const aprops = options.deploymentInfo;\n\n        if (aprops && Object.keys(aprops).length > 0) {\n            const logObject = {};\n\n            for (const attr in aprops) {\n                if (aprops.hasOwnProperty(attr)) {\n                    logObject[attr] = aprops[attr];\n                }\n            }\n\n            logObject.id = 'deployment_info';\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        if (this.version) {\n            const logObject = {\n                id: 'component_version',\n                component: 'lib-jitsi-meet',\n                version: this.version\n            };\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        return RTC.init(options);\n    },\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return RTC.isDesktopSharingEnabled();\n    },\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    isWebRtcSupported() {\n        return RTC.isWebRtcSupported();\n    },\n\n    setLogLevel(level) {\n        Logger.setLogLevel(level);\n    },\n\n    /**\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\n     *\n     * @param {Logger.levels} level the logging level to be set\n     * @param {string} id the logger id to which new logging level will be set.\n     * Usually it's the name of the JavaScript source file including the path\n     * ex. \"modules/xmpp/ChatRoom.js\"\n     */\n    setLogLevelById(level, id) {\n        Logger.setLogLevelById(level, id);\n    },\n\n    /**\n     * Registers new global logger transport to the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.addGlobalTransport\n     */\n    addGlobalLogTransport(globalTransport) {\n        Logger.addGlobalTransport(globalTransport);\n    },\n\n    /**\n     * Removes global logging transport from the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.removeGlobalTransport\n     */\n    removeGlobalLogTransport(globalTransport) {\n        Logger.removeGlobalTransport(globalTransport);\n    },\n\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    *\n    * @param options\n    * @see Logger.setGlobalOptions\n    */\n    setGlobalLogOptions(options) {\n        Logger.setGlobalOptions(options);\n    },\n\n    /**\n     * Creates the media tracks and returns them trough the callback.\n     *\n     * @param options Object with properties / settings specifying the tracks\n     * which should be created. should be created or some additional\n     * configurations about resolution for example.\n     * @param {Array} options.effects optional effects array for the track\n     * @param {boolean} options.firePermissionPromptIsShownEvent - if event\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\n     * @param {boolean} options.fireSlowPromiseEvent - if event\n     * JitsiMediaDevicesEvents.USER_MEDIA_SLOW_PROMISE_TIMEOUT should be fired\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {intiger} interval - the interval (in ms) for\n     * checking whether the desktop sharing extension is installed or not\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\n     * createLocalTracks will wait and check on every \"interval\" ms for the\n     * extension. If the desktop extension is not install and checkAgain()==true\n     * createLocalTracks will finish with rejected Promise.\n     * @param {Function} listener - The listener will be called to notify the\n     * user of lib-jitsi-meet that createLocalTracks is starting external\n     * extension installation process.\n     * NOTE: If the inline installation process is not possible and external\n     * installation is enabled the listener property will be called to notify\n     * the start of external installation process. After that createLocalTracks\n     * will start to check for the extension on every interval ms until the\n     * plugin is installed or until checkAgain return false. If the extension\n     * is found createLocalTracks will try to get the desktop sharing track and\n     * will finish the execution. If checkAgain returns false, createLocalTracks\n     * will finish the execution with rejected Promise.\n     *\n     * @deprecated old firePermissionPromptIsShownEvent\n     * @param originalOptions - internal use only, to be able to store the\n     * originally requested options.\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\n     * that returns an array of created JitsiTracks if resolved, or a\n     * JitsiConferenceError if rejected.\n     */\n    createLocalTracks(options = {}, oldfirePermissionPromptIsShownEvent, originalOptions) {\n        let promiseFulfilled = false;\n\n        const { firePermissionPromptIsShownEvent, fireSlowPromiseEvent, ...restOptions } = options;\n        const firePermissionPrompt = firePermissionPromptIsShownEvent || oldfirePermissionPromptIsShownEvent;\n\n        if (firePermissionPrompt && !RTC.arePermissionsGrantedForAvailableDevices()) {\n            JitsiMediaDevices.emitEvent(\n                JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN,\n                browser.getName());\n        } else if (fireSlowPromiseEvent) {\n            window.setTimeout(() => {\n                if (!promiseFulfilled) {\n                    JitsiMediaDevices.emitEvent(JitsiMediaDevicesEvents.SLOW_GET_USER_MEDIA);\n                }\n            }, USER_MEDIA_SLOW_PROMISE_TIMEOUT);\n        }\n\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n        window.connectionTimes['obtainPermissions.start']\n            = window.performance.now();\n\n        return RTC.obtainAudioAndVideoPermissions(restOptions)\n            .then(tracks => {\n                promiseFulfilled = true;\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                Statistics.sendAnalytics(\n                    createGetUserMediaEvent(\n                        'success',\n                        getAnalyticsAttributesFromOptions(restOptions)));\n\n                if (!RTC.options.disableAudioLevels) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n                        const mStream = track.getOriginalStream();\n\n                        if (track.getType() === MediaType.AUDIO) {\n                            Statistics.startLocalStats(mStream,\n                                track.setAudioLevel.bind(track));\n                            track.addEventListener(\n                                JitsiTrackEvents.LOCAL_TRACK_STOPPED,\n                                () => {\n                                    Statistics.stopLocalStats(mStream);\n                                });\n                        }\n                    }\n                }\n\n                // set real device ids\n                const currentlyAvailableMediaDevices\n                    = RTC.getCurrentlyAvailableMediaDevices();\n\n                if (currentlyAvailableMediaDevices) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        track._setRealDeviceIdFromDeviceList(\n                            currentlyAvailableMediaDevices);\n                    }\n                }\n\n                // set the contentHint to \"detail\" for desktop tracks\n                // eslint-disable-next-line prefer-const\n                for (const track of tracks) {\n                    if (track.type === MediaType.VIDEO\n                        && track.videoType === 'desktop') {\n                        this.setVideoTrackContentHints(track.track, 'detail');\n                    }\n                }\n\n                return tracks;\n            })\n            .catch(error => {\n                promiseFulfilled = true;\n\n                if (error.name === JitsiTrackErrors.UNSUPPORTED_RESOLUTION\n                    && !browser.usesNewGumFlow()) {\n                    const oldResolution = restOptions.resolution || '720';\n                    const newResolution = getLowerResolution(oldResolution);\n\n                    if (newResolution !== null) {\n                        restOptions.resolution = newResolution;\n\n                        logger.debug(\n                            'Retry createLocalTracks with resolution',\n                            newResolution);\n\n                        Statistics.sendAnalytics(createGetUserMediaEvent(\n                            'warning',\n                            {\n                                'old_resolution': oldResolution,\n                                'new_resolution': newResolution,\n                                reason: 'unsupported resolution'\n                            }));\n\n                        return this.createLocalTracks(\n                            restOptions,\n                            originalOptions || Object.assign({}, restOptions));\n                    }\n\n                    // We tried everything. If there is a mandatory device id,\n                    // remove it and let gum find a device to use.\n                    if (originalOptions\n                        && error.gum.constraints\n                        && error.gum.constraints.video\n                        && error.gum.constraints.video.mandatory\n                        && error.gum.constraints.video.mandatory.sourceId) {\n                        originalOptions.cameraDeviceId = undefined;\n\n                        return this.createLocalTracks(originalOptions);\n                    }\n                }\n\n                if (error.name\n                        === JitsiTrackErrors.SCREENSHARING_USER_CANCELED) {\n                    // User cancelled action is not really an error, so only\n                    // log it as an event to avoid having conference classified\n                    // as partially failed\n                    const logObject = {\n                        id: 'screensharing_user_canceled',\n                        message: error.message\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent(\n                            'warning',\n                            {\n                                reason: 'extension install user canceled'\n                            }));\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\n                    // logs not found devices with just application log to cs\n                    const logObject = {\n                        id: 'usermedia_missing_device',\n                        status: error.gum.devices\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = 'device not found';\n                    attributes.devices = error.gum.devices.join('.');\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                } else {\n                    // Report gUM failed to the stats\n                    Statistics.sendGetUserMediaFailed(error);\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = error.name;\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                }\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                return Promise.reject(error);\n            });\n    },\n\n    /**\n     * Create a TrackVADEmitter service that connects an audio track to an VAD (voice activity detection) processor in\n     * order to obtain VAD scores for individual PCM audio samples.\n     * @param {string} localAudioDeviceId - The target local audio device.\n     * @param {number} sampleRate - Sample rate at which the emitter will operate. Possible values  256, 512, 1024,\n     * 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * I.e. Providing a value of 4096 means that the emitter will process 4096 PCM samples at a time, higher values mean\n     * longer calls, lowers values mean more calls but shorter.\n     * @param {Object} vadProcessor - VAD Processors that does the actual compute on a PCM sample.The processor needs\n     * to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by calculateAudioFrameVAD.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * i.e. (16KHz, 44.1 KHz etc.)\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>}\n     */\n    createTrackVADEmitter(localAudioDeviceId, sampleRate, vadProcessor) {\n        return TrackVADEmitter.create(localAudioDeviceId, sampleRate, vadProcessor);\n    },\n\n    /**\n     * Create AudioMixer, which is essentially a wrapper over web audio ChannelMergerNode. It essentially allows the\n     * user to mix multiple MediaStreams into a single one.\n     *\n     * @returns {AudioMixer}\n     */\n    createAudioMixer() {\n        return new AudioMixer();\n    },\n\n    /**\n     * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n     *\n     * @returns Promise<Object> - Object containing information about the found device.\n     */\n    getActiveAudioDevice() {\n        return getActiveAudioDevice();\n    },\n\n    /**\n     * Checks if its possible to enumerate available cameras/microphones.\n     *\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\n     */\n    isDeviceListAvailable() {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\n\n        return this.mediaDevices.isDeviceListAvailable();\n    },\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     *\n     * @param {string} [deviceType] - type of device to change. Default is\n     * {@code undefined} or 'input', 'output' - for audio output device change.\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\n     */\n    isDeviceChangeAvailable(deviceType) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\n\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\n    },\n\n\n    /**\n     * Checks if the current environment supports having multiple audio\n     * input devices in use simultaneously.\n     *\n     * @returns {boolean} True if multiple audio input devices can be used.\n     */\n    isMultipleAudioInputSupported() {\n        return this.mediaDevices.isMultipleAudioInputSupported();\n    },\n\n    /**\n     * Checks if local tracks can collect stats and collection is enabled.\n     *\n     * @param {boolean} True if stats are being collected for local tracks.\n     */\n    isCollectingLocalStats() {\n        return Statistics.audioLevelsEnabled\n            && LocalStatsCollector.isLocalStatsSupported();\n    },\n\n    /**\n     * Executes callback with list of media devices connected.\n     *\n     * @param {function} callback\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\n     */\n    enumerateDevices(callback) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\n        this.mediaDevices.enumerateDevices(callback);\n    },\n\n    /* eslint-disable max-params */\n\n    /**\n     * @returns function that can be used to be attached to window.onerror and\n     * if options.enableWindowOnErrorHandler is enabled returns\n     * the function used by the lib.\n     * (function(message, source, lineno, colno, error)).\n     */\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\n        logger.error(\n            `UnhandledError: ${message}`,\n            `Script: ${source}`,\n            `Line: ${lineno}`,\n            `Column: ${colno}`,\n            'StackTrace: ', error);\n        Statistics.reportGlobalError(error);\n    },\n\n    /**\n     * Informs lib-jitsi-meet about the current network status.\n     *\n     * @param {boolean} isOnline - {@code true} if the internet connectivity is online or {@code false}\n     * otherwise.\n     */\n    setNetworkInfo({ isOnline }) {\n        NetworkInfo.updateNetworkInfo({ isOnline });\n    },\n\n    /**\n     * Set the contentHint on the transmitted stream track to indicate\n     * charaterstics in the video stream, which informs PeerConnection\n     * on how to encode the track (to prefer motion or individual frame detail)\n     * @param {MediaStreamTrack} track - the track that is transmitted\n     * @param {String} hint - contentHint value that needs to be set on the track\n     */\n    setVideoTrackContentHints(track, hint) {\n        if ('contentHint' in track) {\n            track.contentHint = hint;\n            if (track.contentHint !== hint) {\n                logger.debug('Invalid video track contentHint');\n            }\n        } else {\n            logger.debug('MediaStreamTrack contentHint attribute not supported');\n        }\n    },\n\n    precallTest,\n\n    /* eslint-enable max-params */\n\n    /**\n     * Represents a hub/namespace for utility functionality which may be of\n     * interest to lib-jitsi-meet clients.\n     */\n    util: {\n        AuthUtil,\n        ScriptUtil,\n        browser\n    }\n});\n","/* Copyright @ 2016-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects = options && options.stringifyObjects ? options.stringifyObjects : false;\n    this.storeInterval = options && options.storeInterval ? options.storeInterval: 30000;\n    this.maxEntryLength = options && options.maxEntryLength ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function () {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return '[object with circular refs?]';\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n * @param {Date} timestamp - The {@code Date} when a message has been logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage = function (\nlogLevel /* timestamp, arg2, arg3, arg4... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR) &&\n            typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i !== len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var timestamp = arguments[1];\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage = this.queue[this.queue.length - 1];\n        var prevMessageText = prevMessage && prevMessage.text;\n        if (prevMessageText === msg) {\n            prevMessage.count += 1;\n        } else {\n            this.queue.push({\n                text: msg,\n                timestamp: timestamp,\n                count: 1\n            });\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID = window.setTimeout(\n        this._flush.bind(\n            this, false /* do not force */, true /* reschedule */),\n        this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ );\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","/* globals __webpack_amd_options__ */\nmodule.exports = __webpack_amd_options__;\n","/*!\n * currentExecutingScript\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\n * Copyright (c) 2015 James M. Greene\n * Licensed MIT\n * https://github.com/JamesMGreene/currentExecutingScript\n * v0.1.3\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS-like environments that support `module.exports`,\n    // like Node.js. Does not work with strict CommonJS!\n    module.exports = factory();\n  } else {\n    // Browser globals (`root` is `window`)\n    root.currentExecutingScript = factory();\n  }\n}(\n  // Current context/scope\n  this || window,\n\n  // Factory function to return the export\n  function() {\n\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\n\n// This page's URL (minus query string and fragment identifer hash, if any)\nvar fullPageUrl = !!window.location ? window.location.href : null;\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\n\n// Live NodeList collection\nvar scripts = document.getElementsByTagName(\"script\");\n\n// Check if the browser supports the `readyState` property on `script` elements\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\n\n// Lousy browser detection for [not] Opera\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\n\n// Detect if `document.currentScript` is supported\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\n\nvar originalStackDepthConfig;\n// Detect if the V8 Error Stack Trace API is supported\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\n  originalStackDepthConfig = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n}\n\n\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\n// object instance without needing to throw it. Avoiding an unnecessary\n// use of `throw` saves time and performance.\nvar hasStackBeforeThrowing = false,\n    hasStackAfterThrowing = false;\n(function() {\n  try {\n    var err = new Error();\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\n    throw err;\n  }\n  catch (thrownErr) {\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\n  }\n})();\n\n\n// Normalize whitespace within a string\nfunction normalizeWhitespace(str) {\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\n}\n\n// Get script object based on the `src` URL\nfunction getScriptFromUrl(url, eligibleScripts) {\n  var i,\n      script = null;\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (typeof url === \"string\" && url) {\n    for (i = eligibleScripts.length; i--; ) {\n      if (eligibleScripts[i].src === url) {\n        // NOTE: Could check if the same script URL is used by more than one `script` element\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\n        script = eligibleScripts[i];\n        break;\n      }\n    }\n  }\n  return script;\n}\n\n// Get script object based on the caller function's source code body (text)\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\n  var i, inlineScriptText,\n      script = null,\n      callerSourceText = normalizeWhitespace(callerFnSource);\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (callerFnSource && callerSourceText) {\n    for (i = eligibleScripts.length; i--; ) {\n      // Only look at inline scripts\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\n          // If more than one match is found, don't return any\n          if (script) {\n            script = null;\n            break;\n          }\n          script = eligibleScripts[i];\n        }\n      }\n    }\n  }\n\n  return script;\n}\n\n// If there is only a single inline script on the page, return it; otherwise `null`\nfunction getSoleInlineScript(eligibleScripts) {\n  var i, len,\n      script = null;\n  eligibleScripts = eligibleScripts || scripts;\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\n      if (script) {\n        script = null;\n        break;\n      }\n      script = eligibleScripts[i];\n    }\n  }\n  return script;\n}\n\n// Get the currently executing script URL from an Error stack trace\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\n  var matches, remainingStack,\n      url = null,\n      ignoreMessage = typeof skipStackDepth === \"number\";\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\n  if (typeof stack === \"string\" && stack) {\n    if (ignoreMessage) {\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n    }\n    else {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n\n      if (!(matches && matches[1])) {\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      }\n    }\n\n    if (matches && matches[1]) {\n      if (skipStackDepth > 0) {\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\n      }\n      else {\n        url = matches[1];\n      }\n    }\n\n    // TODO: Handle more edge cases!\n    // Fixes #1\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\n\n    // ???\n\n  }\n  return url;\n}\n\n\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time. The farthest\n// currently executing `script` DOM element would typically be considered the\n// originator of the current execution stack.\nfunction _farthestExecutingScript() {\n  /*jshint noarg:false */\n\n  // TODO: Implement!\n  // Fixes #3\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\n  return null;\n\n/*\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  // Guaranteed accurate in IE 6-10.\n  // Not accurate/supported in any other browsers.\n  if (isNotOpera && supportsScriptReadyState) {\n    for (var i = scripts.length; i--; ) {\n      if (scripts[i].readyState === \"interactive\") {\n        return scripts[i];\n      }\n    }\n  }\n\n  var stack,\n      e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n  if (stack) {\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\n    var script = getScriptFromUrl(url, scripts );\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present. If the caller function's source code is\n      // not available, see if there is only one inline script element\n      // in the DOM and return that (even though it may be wrong)\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n\n      var callerFn = _farthestExecutingScript.caller || null,\n          callerFnStack = [],\n          callerFnSource = null;\n\n      while (callerFn) {\n        callerFnStack.push(callerFn);\n        callerFn = callerFn.caller || null;\n      }\n      callerFn = callerFnStack.slice(-1)[0];\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\n\n\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource);\n      }\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript();\n      }\n    }\n    return script;\n  }\n\n  // NOTE: This is a loose assumption that could be inaccurate!\n  //\n  // Inaccuracies:\n  //  - If a script is created dynamically and appended to some position\n  //    other than the very end of the document.\n  //  - If multiple scripts are created dynamically and all appended to the\n  //    same position within the document (and do not have their `async` attributes\n  //    set to `false`, at least in browsers that support async script evaluation.\n  //    other than the very end of the document.\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\n  //    that supports it.\n  //  - May get confused by `script` elements within `svg` elements\n  return scripts[scripts.length - 1] || null;\n*/\n}\n\n\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\n// element or attribute node (e.g. `onclick`) for the caller function,\n// regardless of whether it is that `script` DOM element is currently being\n// evaluated for the first time. The originating currently executing `script`\n// DOM element [or attribute node] is the originator of the current execution stack.\nfunction _originatingExecutingScript() {\n  // TODO: Implement!\n  // Fixes #2\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\n  return null;\n}\n\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time.\nfunction _nearestExecutingScript() {\n  /*jshint noarg:false */\n\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  var i, e, stack, url, script,\n      eligibleScripts = [],\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\n\n  // This part will only help in IE 6-10.\n  for (i = 0; i < scripts.length; i++) {\n    if (isNotOpera && supportsScriptReadyState) {\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\n        eligibleScripts.push(scripts[i]);\n      }\n    }\n    else {\n      eligibleScripts.push(scripts[i]);\n    }\n  }\n\n  e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n\n  if (stack) {\n    url = getScriptUrlFromStack(stack, skipStackDepth);\n    script = getScriptFromUrl(url, eligibleScripts);\n\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present.\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\n      }\n      // If the caller function's source code is not available, see if\n      // there is only one inline script element in the DOM and return\n      // that (even though it may be wrong)...\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript(eligibleScripts);\n      }\n    }\n  }\n\n  //\n  // Welcome to the Island of Inaccurate Assumptions!\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\n  //\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If the inline script that initiated the call was also removed from the DOM.\n    //  - If the call was initiated by an element's inline event handler,\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n    if (eligibleScripts.length === 1) {\n      script = eligibleScripts[0];\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (hasNativeCurrentScriptAccessor) {\n      script = document.currentScript;\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (isNotOpera && supportsScriptReadyState) {\n      for (i = eligibleScripts.length; i--; ) {\n        if (eligibleScripts[i].readyState === \"interactive\") {\n          script = eligibleScripts[i];\n          break;\n        }\n      }\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If a script is created dynamically and appended to some position\n    //    other than the very end of the document.\n    //  - If multiple scripts are created dynamically and all appended to the\n    //    same position within the document (and do not have their `async` attributes\n    //    set to `false`, at least in browsers that support async script evaluation.\n    //    other than the very end of the document.\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\n    //    that supports it.\n    //  - May get confused by `script` elements within `svg` elements\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    //    ```\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\n  }\n\n  return script;\n}\n\n// Default stack depth to skip over when analyzing call stack frames\n_nearestExecutingScript.skipStackDepth = 1;\n\n\n\n    //\n    // Export the API\n    //\n    var currentExecutingScript    = _nearestExecutingScript;      // default\n    currentExecutingScript.near   = _nearestExecutingScript;\n    currentExecutingScript.far    = _farthestExecutingScript;\n    currentExecutingScript.origin = _originatingExecutingScript;\n\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return currentExecutingScript;\n  })\n);\n","const Constants = {\n    LOCAL_JID: 'local'\n};\n\nmodule.exports = Constants;\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(require('strophe.js')) :\n\ttypeof define === 'function' && define.amd ? define(['strophe.js'], factory) :\n\t(factory(global.window));\n}(this, (function (strophe_js) { 'use strict';\n\nstrophe_js.Strophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), strophe_js.Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), strophe_js.Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = strophe_js.$iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = strophe_js.$iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = strophe_js.$iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: strophe_js.Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n\n})));\n//# sourceMappingURL=strophe.disco.js.map\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(require('strophe.js')) :\n\ttypeof define === 'function' && define.amd ? define(['strophe.js'], factory) :\n\t(global = global || self, factory(global.window));\n}(this, (function (strophe_js) { 'use strict';\n\n\t/**\n\t* StropheJS - Stream Management XEP-0198\n\t*\n\t* This plugin implements stream management ACK capabilities of the specs XEP-0198.\n\t* Note: Resumption is not supported in this current implementation.\n\t*\n\t* Reference: http://xmpp.org/extensions/xep-0198.html\n\t*\n\t* @class streamManagement\n\t*/\n\tstrophe_js.Strophe.addConnectionPlugin('streamManagement', {\n\n\t\t/**\n\t\t* @property {Boolean} logging: Set to true to enable logging regarding out of sync stanzas.\n\t\t*/\n\t\tlogging: false,\n\n\t\t/**\n\t\t* @property {Boolean} autoSendCountOnEveryIncomingStanza: Set to true to send an 'a' response after every stanza.\n\t\t* @default false\n\t\t* @public\n\t\t*/\n\t\tautoSendCountOnEveryIncomingStanza: false,\n\n\t\t/**\n\t\t* @property {Integer} requestResponseInterval: Set this value to send a request for counter on very interval\n\t\t* number of stanzas sent. Set to 0 to disable.\n\t\t* @default 5\n\t\t* @public\n\t\t*/\n\t\trequestResponseInterval: 5,\n\n\t\t/**\n\t\t* @property {Pointer} _c: Strophe connection instance.\n\t\t* @private\n\t\t*/\n\t\t_c: null,\n\n\t\t/**\n\t\t* @property {String} _NS XMPP Namespace.\n\t\t* @private\n\t\t*/\n\t\t_NS: 'urn:xmpp:sm:3',\n\n\t\t/**\n\t\t* @property {Boolean} _isStreamManagementEnabled\n\t\t* @private\n\t\t*/\n\t\t_isStreamManagementEnabled: false,\n\n\t\t/**\n\t\t* @property {Integer} _serverProcesssedStanzasCounter: Keeps count of stanzas confirmed processed by the server.\n\t\t* The server is the source of truth of this value. It is the 'h' attribute on the latest 'a' element received\n\t\t* from the server.\n\t\t* @private\n\t\t*/\n\t\t_serverProcesssedStanzasCounter: null,\n\n\t\t/**\n\t\t* @property {Integer} _clientProcessedStanzasCounter: Counter of stanzas received by the client from the server.\n\t\t* Client is the source of truth of this value. It is the 'h' attribute in the 'a' sent from the client to\n\t\t* the server.\n\t\t* @private\n\t\t*/\n\t\t_clientProcessedStanzasCounter: null,\n\n\t\t/**\n\t\t* @property {Integer} _clientSentStanzasCounter\n\t\t* @private\n\t\t*/\n\t\t_clientSentStanzasCounter: null,\n\n\t\t/**\n\t\t* Stores a reference to Strophe connection xmlOutput function to wrap counting functionality.\n\t\t* @method _originalXMLOutput\n\t\t* @type {Handler}\n\t\t* @private\n\t\t*/\n\t\t_originalXMLOutput: null,\n\n\t\t/**\n\t\t* @property {Handler} _requestHandler: Stores reference to handler that process count request from server.\n\t\t* @private\n\t\t*/\n\t\t_requestHandler: null,\n\n\t\t/**\n\t\t* @property {Handler} _incomingHandler: Stores reference to handler that processes incoming stanzas count.\n\t\t* @private\n\t\t*/\n\t\t_incomingHandler: null,\n\n\t\t/**\n\t\t* @property {Integer} _requestResponseIntervalCount: Counts sent stanzas since last response request.\n\t\t*/\n\t\t_requestResponseIntervalCount: 0,\n\n\t\t/**\n\t\t * @property {boolean} _isSupported: indicates whether or not the server has advertised support for the stream\n\t\t * management namespace.\n\t\t */\n\t\t_isSupported: false,\n\n\t\t/**\n\t\t* @property {Queue} _unacknowledgedStanzas: Maintains a list of packet ids for stanzas which have yet to be acknowledged.\n\t\t*/\n\t\t_unacknowledgedStanzas: [],\n\n\t\t/**\n\t\t* @property {Array} _acknowledgedStanzaListeners: Stores callbacks for each stanza acknowledged by the server.\n\t\t* Provides the packet id of the stanza as a parameter.\n\t\t* @private\n\t\t*/\n\t\t_acknowledgedStanzaListeners: [],\n\n\t\taddAcknowledgedStanzaListener: function(listener) {\n\t\t\tthis._acknowledgedStanzaListeners.push(listener);\n\t\t},\n\n\t\tenable: function(resume) {\n\t\t\tif (!this._isSupported) {\n\t\t\t\tthrow new Error('The server doesn\\'t support urn:xmpp:sm:3 namespace');\n\t\t\t} else if (this._connectionStatus !== strophe_js.Strophe.Status.CONNECTED) {\n\t\t\t\tthrow new Error('enable() can only be called in the CONNECTED state');\n\t\t\t}\n\t\t\tthis._c.send(strophe_js.$build('enable', { xmlns: this._NS, resume }));\n\t\t\tthis._c.flush();\n\t\t\tthis._c.pause();\n\t\t},\n\n\t\tgetResumeToken: function() {\n\t\t\treturn this._resumeToken;\n\t\t},\n\n\t\tisSupported() {\n\t\t\treturn this._isSupported;\n\t\t},\n\n\t\tresume: function() {\n\t\t\tif (!this.getResumeToken()) {\n\t\t\t\tthrow new Error('No resume token');\n\t\t\t}\n\t\t\tif (this._connectionStatus !== strophe_js.Strophe.Status.DISCONNECTED) {\n\t\t\t\tthrow new Error('resume() can only be called in the DISCONNECTED state');\n\t\t\t}\n\n\t\t\tthis._c.options.explicitResourceBinding = true;\n\t\t\tthis._resuming = true;\n\n\t\t\tthis._originalConnect.apply(this._c, this._connectArgs);\n\t\t},\n\n\t\trequestAcknowledgement: function() {\n\t\t\tif (this._connectionStatus !== strophe_js.Strophe.Status.CONNECTED) {\n\t\t\t\tthrow new Error('requestAcknowledgement() can only be called in the CONNECTED state');\n\t\t\t}\n\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t\tthis._c.send(strophe_js.$build('r', { xmlns: this._NS }));\n\t\t},\n\n\t\tgetOutgoingCounter: function() {\n\t\t\treturn this._clientSentStanzasCounter;\n\t\t},\n\n\t\tgetIncomingCounter: function() {\n\t\t\treturn this._clientProcessedStanzasCounter;\n\t\t},\n\n\t\tinit: function(conn) {\n\t\t\tthis._c = conn;\n\t\t\tstrophe_js.Strophe.addNamespace('SM', this._NS);\n\n\t\t\t// Storing original xmlOutput function to use additional logic\n\t\t\tthis._originalXMLOutput = this._c.xmlOutput;\n\t\t\tthis._c.xmlOutput = this.xmlOutput.bind(this);\n\n\t\t\tthis._originalConnect = this._c.connect;\n\t\t\tthis._c.connect = this._interceptConnectArgs.bind(this);\n\n\t\t\tthis._originalOnStreamFeaturesAfterSASL = this._c._onStreamFeaturesAfterSASL;\n\t\t\tthis._c._onStreamFeaturesAfterSASL = this._onStreamFeaturesAfterSASL.bind(this);\n\n\t\t\tthis._originalDoDisconnect = this._c._doDisconnect;\n\t\t\tthis._c._doDisconnect = this._interceptDoDisconnect.bind(this);\n\n\t\t\tthis._originalDisconnect = this._c.disconnect;\n\t\t\tthis._c.disconnect = this._interceptDisconnect.bind(this);\n\t\t},\n\n\t\t_interceptDisconnect: function() {\n\t\t\tthis._resumeToken = undefined;\n\t\t\tthis._originalDisconnect.apply(this._c, arguments);\n\t\t},\n\n\t\t_interceptDoDisconnect: function() {\n\t\t\tif (this.getResumeToken()\n\t\t\t\t\t&& !this._resuming\n\t\t\t\t\t&& this._c.connected && !this._c.disconnecting) {\n\t\t\t\tthis._resumeState = {\n\t\t\t\t\thandlers: this._c.handlers,\n\t\t\t\t\ttimedHandlers: this._c.timedHandlers,\n\t\t\t\t\tremoveTimeds: this._c.removeTimeds,\n\t\t\t\t\tremoveHandlers: this._c.removeHandlers,\n\t\t\t\t\taddTimeds: this._c.addTimeds,\n\t\t\t\t\taddHandlers: this._c.addHandlers\n\t\t\t\t};\n\t\t\t\tthis._storedJid = this._c.jid;\n\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM stored resume state, handler count: ' + this._resumeState.handlers.length);\n\t\t\t}\n\n\t\t\t// Remove any queued stanzas from the buffer that have failed to send while the socket was closed,\n\t\t\t// as they would interfere with the resume flow. They will be resent anyway.\n\t\t\tthis._c._data = [];\n\n\t\t\tthis._originalDoDisconnect.apply(this._c, arguments);\n\t\t},\n\n\t\t_interceptConnectArgs: function() {\n\t\t\tthis._connectArgs = arguments;\n\n\t\t\tthis._originalConnect.apply(this._c, arguments);\n\t\t},\n\n\t\t_onStreamFeaturesAfterSASL: function(elem) {\n\t\t\tthis._isSupported = elem.getElementsByTagNameNS(this._NS, \"sm\").length > 0;\n\n\t\t\treturn this._originalOnStreamFeaturesAfterSASL.apply(this._c, arguments);\n\t\t},\n\n\t\tstatusChanged: function (status) {\n\t\t\tthis._connectionStatus = status;\n\t\t\tif (!this.getResumeToken()\n\t\t\t\t&& (status === strophe_js.Strophe.Status.CONNECTED || status === strophe_js.Strophe.Status.DISCONNECTED)) {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM reset state');\n\n\t\t\t\tthis._serverProcesssedStanzasCounter = 0;\n\t\t\t\tthis._clientProcessedStanzasCounter = 0;\n\n\t\t\t\tthis._clientSentStanzasCounter = 0;\n\n\t\t\t\tthis._isStreamManagementEnabled = false;\n\t\t\t\tthis._requestResponseIntervalCount = 0;\n\n\t\t\t\t// FIXME not described in JSDocs\n\t\t\t\tthis._resuming = false;\n\n\t\t\t\tif (status === strophe_js.Strophe.Status.DISCONNECTED) {\n\t\t\t\t\tthis._isSupported = false;\n\t\t\t\t}\n\n\t\t\t\tthis._unacknowledgedStanzas = [];\n\n\t\t\t\tif (this._requestHandler) {\n\t\t\t\t\tthis._c.deleteHandler(this._requestHandler);\n\t\t\t\t}\n\n\t\t\t\tif (this._incomingHandler) {\n\t\t\t\t\tthis._c.deleteHandler(this._incomingHandler);\n\t\t\t\t}\n\n\t\t\t\tthis._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, 'r');\n\t\t\t\tthis._ackHandler = this._c.addHandler(this._handleServerAck.bind(this), this._NS, 'a');\n\t\t\t\tthis._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this));\n\n\t\t\t\t// FIXME handler instances stored, but never used\n\t\t\t\tthis._enabledHandler = this._c._addSysHandler(this._handleEnabled.bind(this), this._NS, 'enabled');\n\t\t\t\tthis._resumeFailedHandler = this._c._addSysHandler(this._handleResumeFailed.bind(this), this._NS, 'failed');\n\t\t\t\tthis._resumedHandler =  this._c._addSysHandler(this._handleResumed.bind(this), this._NS,'resumed');\n\n\t\t\t} else if (status === strophe_js.Strophe.Status.BINDREQUIRED)  {\n\t\t\t\tthis._c.jid = this._storedJid;\n\n\t\t\t\t// Restore Strophe handlers\n\t\t\t\tfor (const property in this._resumeState) {\n\t\t\t\t\tthis._c[property] = this._resumeState[property];\n\t\t\t\t}\n\n\t\t\t\t// FIXME check conditions if there's session ID and if enabled\n\t\t\t\tthis._c.send(strophe_js.$build('resume', {\n\t\t\t\t\txmlns: this._NS,\n\t\t\t\t\th: this._clientProcessedStanzasCounter,\n\t\t\t\t\tprevid: this._resumeToken\n\t\t\t\t}));\n\t\t\t\tthis._c.flush();\n\t\t\t} else if (status === strophe_js.Strophe.Status.ERROR) {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM cleared resume token on error');\n\t\t\t\tthis._resumeToken = undefined;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t* This method overrides the send method implemented by Strophe.Connection\n\t\t* to count outgoing stanzas\n\t\t*\n\t\t* @method Send\n\t\t* @public\n\t\t*/\n\t\txmlOutput: function(elem) {\n\t\t\tif (strophe_js.Strophe.isTagEqual(elem, 'iq') ||\n\t\t\t\tstrophe_js.Strophe.isTagEqual(elem, 'presence') ||\n\t\t\t\tstrophe_js.Strophe.isTagEqual(elem, 'message')) {\n\t\t\t\tthis._increaseSentStanzasCounter(elem);\n\t\t\t}\n\n\t\t\treturn this._originalXMLOutput.call(this._c, elem);\n\t\t},\n\n\t\t_handleEnabled: function(elem) {\n\t\t\tthis._isStreamManagementEnabled = true;\n\t\t\t// FIXME fail if requested, but not enabled\n\t\t\tthis._resumeToken = elem.getAttribute('resume') === 'true' && elem.getAttribute('id');\n\n\t\t\tthis._c.resume();\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleResumeFailed: function(elem) {\n\t\t\tconst error = elem && elem.firstElementChild && elem.firstElementChild.tagName;\n\n\t\t\tthis._c._changeConnectStatus(strophe_js.Strophe.Status.ERROR, error, elem);\n\t\t\tthis._c._doDisconnect();\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleResumed: function(elem) {\n\t\t\t// FIXME check if in the correct state\n\t\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\t\tthis._resuming = false;\n\t\t\tthis._c.do_bind = false; // No need to bind our resource anymore\n\t\t\tthis._c.authenticated = true;\n\t\t\tthis._c.restored = true;\n\n\t\t\tif (this._unacknowledgedStanzas.length > 0) {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM Sending unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\t\tfor(const stanza of this._unacknowledgedStanzas) {\n\t\t\t\t\tthis._c.send(stanza);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM No unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\t}\n\n\t\t\tthis._c._changeConnectStatus(strophe_js.Strophe.Status.CONNECTED, null);\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_incomingStanzaHandler: function(elem) {\n\t\t\tif (strophe_js.Strophe.isTagEqual(elem, 'iq') || strophe_js.Strophe.isTagEqual(elem, 'presence') || strophe_js.Strophe.isTagEqual(elem, 'message'))  {\n\t\t\t\tthis._increaseReceivedStanzasCounter();\n\n\t\t\t\tif (this.autoSendCountOnEveryIncomingStanza) {\n\t\t\t\t\tthis._answerProcessedStanzas();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleAcknowledgedStanzas: function(reportedHandledCount, lastKnownHandledCount) {\n\t\t\tvar delta = reportedHandledCount - lastKnownHandledCount;\n\n\t\t\tif (delta < 0) {\n\t\t\t\tthis._throwError('New reported stanza count lower than previous. New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t\t}\n\n\t\t\tif (delta > this._unacknowledgedStanzas.length) {\n\t\t\t\tthis._throwError('Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: ' + delta + ' - Unacknowledge Stanza Count: ' + this._unacknowledgedStanzas.length + ' - New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t\t}\n\n\t\t\tfor(var i = 0; i < delta; i++) {\n\t\t\t\tvar stanza = this._unacknowledgedStanzas.shift();\n\t\t\t\tfor (var j = 0; j < this._acknowledgedStanzaListeners.length; j++) {\n\t\t\t\t\tthis._acknowledgedStanzaListeners[j](stanza);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.logging && this._unacknowledgedStanzas.length > 0) {\n\t\t\t\tstrophe_js.Strophe.warn('SM Unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\t}\n\n\t\t\tthis._serverProcesssedStanzasCounter = reportedHandledCount;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t\t}\n\t\t},\n\n\t\t_handleServerRequestHandler: function() {\n\t\t\tthis._answerProcessedStanzas();\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleServerAck: function(elem){\n\t\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_answerProcessedStanzas: function() {\n\t\t\tif (this._isStreamManagementEnabled) {\n\t\t\t\tthis._c.send(strophe_js.$build('a', { xmlns: this._NS, h: this._clientProcessedStanzasCounter }));\n\t\t\t}\n\t\t},\n\n\t\t_increaseSentStanzasCounter: function(elem) {\n\t\t\tif (this._isStreamManagementEnabled) {\n\t\t\t\tif (this._unacknowledgedStanzas.indexOf(elem) !== -1) {\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._unacknowledgedStanzas.push(elem);\n\t\t\t\tthis._clientSentStanzasCounter++;\n\n\t\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\t\tthis._requestResponseIntervalCount++;\n\n\t\t\t\t\tif (this._requestResponseIntervalCount === this.requestResponseInterval) {\n\t\t\t\t\t\t// FIXME Can not call send from onIdle.\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tif (this._connectionStatus === strophe_js.Strophe.Status.CONNECTED) {\n\t\t\t\t\t\t\t\tthis.requestAcknowledgement();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_increaseReceivedStanzasCounter: function() {\n\t\t\tif (this._isStreamManagementEnabled) {\n\t\t\t\tthis._clientProcessedStanzasCounter++;\n\t\t\t}\n\t\t},\n\n\t\t_throwError: function(msg) {\n\t\t\tstrophe_js.Strophe.error(msg);\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t});\n\n})));\n//# sourceMappingURL=strophe.stream-management.js.map\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\nvar transformUtils = require('./transform-utils');\nvar parseSsrcs = transformUtils.parseSsrcs;\nvar writeSsrcs = transformUtils.writeSsrcs;\n\n//region Constants\n\nvar DEFAULT_NUM_OF_LAYERS = 3;\n\n//endregion\n\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\n    return mLine\n        .ssrcs\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\n}\n\n//region Ctor\n\nfunction Simulcast(options) {\n\n    this.options = options ? options : {};\n\n    if (!this.options.numOfLayers) {\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n    }\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\n\n    /**\n     * An IN-ORDER list of the simulcast ssrcs\n     * @type {list<number>}\n     */\n    this.ssrcCache = [];\n}\n\n//endregion\n\n//region Stateless private utility functions\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Using Math.round() gives a non-uniform distribution!\n * @returns {number}\n */\nfunction generateSSRC() {\n    var min = 0, max = 0xffffffff;\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nfunction processVideo(session, action) {\n    if (session == null || !Array.isArray(session.media)) {\n        return;\n    }\n\n    session.media.forEach(function (mLine) {\n        if (mLine.type === 'video') {\n            action(mLine);\n        }\n    });\n};\n\nfunction validateDescription(desc)\n{\n    return desc && desc != null\n        && desc.type && desc.type != ''\n        && desc.sdp && desc.sdp != '';\n}\n\nfunction explodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n    var order = [];\n\n    // Find the SIM group and explode its sources.\n    var j = mLine.ssrcGroups.length;\n    while (j--) {\n\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\n            continue;\n        }\n\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\n\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            order.push(ssrc);\n\n            var parts = sources[ssrc].msid.split(' ');\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\n                    if (relatedSSRC !== ssrc) {\n                        order.push(relatedSSRC);\n                    }\n                });\n\n                // Schedule the related group for nuking.\n            })\n        }\n\n        mLine.ssrcs = writeSsrcs(sources, order);\n        mLine.ssrcGroups.splice(j, 1);\n    };\n}\n\nfunction implodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        console.info('Halt: There are no SSRC groups in the remote ' +\n                'description.');\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n\n    // Find the SIM group and nuke it.\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\n        if (simulcastGroup.semantics !== 'SIM') {\n            return;\n        }\n\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\n        // Schedule the SIM group for nuking.\n        simulcastGroup.nuke = true;\n\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\n\n        // Nuke all the higher layer SSRCs.\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            delete sources[ssrc];\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    delete sources[relatedSSRC];\n                });\n\n                // Schedule the related group for nuking.\n                relatedGroup.nuke = true;\n            })\n        }\n\n        return;\n    });\n\n    mLine.ssrcs = writeSsrcs(sources);\n\n    // Nuke all the scheduled groups.\n    var i = mLine.ssrcGroups.length;\n    while (i--) {\n        if (mLine.ssrcGroups[i].nuke) {\n            mLine.ssrcGroups.splice(i, 1);\n        }\n    }\n}\n\nfunction removeGoogConference(mLine) {\n    if (!mLine || typeof mLine.xGoogleFlag === 'undefined') {\n        return;\n    }\n\n    mLine.xGoogleFlag = undefined;\n}\n\nfunction assertGoogConference(mLine) {\n    if (!mLine) {\n        return;\n    }\n\n    if (!Array.isArray(mLine.invalid)) {\n        mLine.invalid = [];\n    }\n\n    if (!mLine.invalid.some(\n            function (i) { return i.value === 'x-google-flag:conference' })) {\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\n    }\n}\n\nSimulcast.prototype.clearSsrcCache = function() {\n    this.ssrcCache = [];\n}\n\n/**\n * When we start as video muted, all of the video\n *  ssrcs get generated so we can include them as part\n *  of the original session-accept.  That means we\n *  need this library to restore to those same ssrcs\n *  the first time we unmute, so we need the ability to\n *  force its cache\n */\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\n    this.ssrcCache = ssrcs;\n}\n\n//endregion\n\n//region \"Private\" functions\n\n/**\n * Given a video mLine, return a list of the video ssrcs\n *  in simulcast layer order (returns a list of just\n *  the primary ssrc if there are no simulcast layers)\n */\nSimulcast.prototype._parseSimLayers = function (mLine) {\n    var simGroup = mLine.ssrcGroups &&\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\n    if (simGroup) {\n        return simGroup.ssrcs\n            .split(\" \")\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\n    } else {\n        return [mLine.ssrcs[0].id];\n    }\n}\n\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\n    var ssrcMap = {};\n    for (var i = 0; i < newSsrcList.length; ++i) {\n        var newSsrc = newSsrcList[i];\n        var oldSsrc = oldSsrcList[i] || null;\n        ssrcMap[newSsrc] = oldSsrc;\n    }\n    return ssrcMap;\n}\n\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\n    var newSimSsrcs = this._parseSimLayers(mLine);\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\n    //  to replace directly\n    var ssrcsToAdd = this.ssrcCache\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\n\n    // First do the replacements\n    mLine.ssrcs.forEach(function(ssrc) {\n        if (ssrcsToReplace[ssrc.id]) {\n            ssrc.id = ssrcsToReplace[ssrc.id];\n        }\n    });\n    // Now the adds\n    ssrcsToAdd.forEach(function(ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: newMsid\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: newCname\n        });\n    });\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: this.ssrcCache.join(\" \")\n    });\n    return mLine;\n}\n\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\n    var addAssociatedStream = function(mLine, ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: primarySsrcCname\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: primarySsrcMsid\n        });\n    }\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\n\n    // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present\n    // in the answers that Chrome and Safari generate for an offer received from Jicofo.\n    // Generate these a=ssrc lines using the msid values from the a=msid line.\n    if (this.options.usesUnifiedPlan && !primarySsrcMsid) {\n        primarySsrcMsid = mLine.msid;\n        var primarySsrcs = mLine.ssrcs;\n        primarySsrcs.forEach(ssrc => {\n            mLine.ssrcs.push({\n                id: ssrc.id,\n                attribute: \"msid\",\n                value: primarySsrcMsid\n            });\n        });\n    }\n\n    // Generate sim layers\n    var simSsrcs = [];\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\n        var simSsrc = generateSSRC();\n        addAssociatedStream(mLine, simSsrc);\n        simSsrcs.push(simSsrc);\n    }\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\n    });\n    return mLine;\n}\n\n\n\n// Assumptions:\n//  1) 'mLine' contains only a single primary video source\n//   (i.e. it will not already have simulcast streams inserted)\n//  2) 'mLine' MAY already contain an RTX stream for its video source\n//  3) 'mLine' is in sendrecv or sendonly state\n// Guarantees:\n//  1) return mLine will contain 2 additional simulcast layers\n//   generated\n//  2) if the base video ssrc in mLine has been seen before,\n//   then the same generated simulcast streams from before will\n//   be used again\n//  3) if rtx is enabled for the mLine, all generated simulcast\n//   streams will have rtx streams generated as well\n//  4) if rtx has been generated for a src before, we will generate\n//   the same rtx stream again\nSimulcast.prototype._restoreSimulcast = function(mLine) {\n    // First, find the primary video source in the given\n    // mLine and see if we've seen it before.\n    var primarySsrc;\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\n        .filter(function(ssrc, index, array) {\n            return array.indexOf(ssrc) === index;\n        })\n        .length || 0;\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\n\n    if (numSsrcs === 0 || numSsrcs > 2) {\n        // Unsupported scenario\n        return mLine;\n    }\n    if (numSsrcs == 2 && numGroups === 0) {\n        // Unsupported scenario\n        return mLine;\n    }\n\n    if (numSsrcs === 1) {\n        primarySsrc = mLine.ssrcs[0].id;\n    } else {\n        // There must be an FID group, so parse\n        //  that and pull the primary ssrc from there\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\n        if (fidGroup) {\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\n        } else {\n            // Unsupported scenario\n            return mLine;\n        }\n    }\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\n\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\n\n    if (seenPrimarySsrc) {\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\n            \"filling in data from cache\");\n        mLine = this._fillInSourceDataFromCache(mLine);\n    } else {\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\n            \"generating source data\");\n        mLine = this._generateSourceData(mLine, primarySsrc);\n    }\n    // Now update the cache to match whatever we've just put into this sdp\n    this.ssrcCache = this._parseSimLayers(mLine);\n    return mLine;\n}\n\n//endregion\n\n//region \"Public\" functions\n\n/**\n *\n * @param desc\n * @param enableConferenceFlag\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeRemoteDescription = function (desc, enableConferenceFlag) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n\n        // Handle simulcast reception.\n        if (self.options.explodeRemoteSimulcast) {\n            explodeRemoteSimulcast(mLine);\n        } else {\n            implodeRemoteSimulcast(mLine);\n        }\n\n        // Add or remove \"x-google-conference\" from the remote description based on whether the client\n        // has enabled simulcast for the local video source. For cases where we disable simulcast for desktop share,\n        // it is necessary to remove the flag so that Chrome stops sending T1 temporal layers. It also fixes other\n        // issues related to screensharing like https://bugs.chromium.org/p/chromium/issues/detail?id=1093819.\n        if (!self.options.usesUnifiedPlan && enableConferenceFlag) {\n            assertGoogConference(mLine);\n        } else {\n            removeGoogConference(mLine);\n        }\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n/**\n *\n * NOTE this method should be called only if simulcast is supported by\n * the current browser, otherwise local SDP should not be munged.\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeLocalDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\n        {\n            return;\n        }\n        self._restoreSimulcast(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n//endregion\n\nmodule.exports = Simulcast;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * FIXME\n * @param sources FIXME\n * @param order An array of SSRCs which will be used to order the entries in\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\n * in the specified order, and all other sources will be added afterwards (in\n * no specific order).\n * @returns {Array} FIXME\n */\nexports.writeSsrcs = function(sources, order) {\n  var ssrcs = [];\n\n  // expand sources to ssrcs\n  if (typeof sources !== 'undefined' &&\n      Object.keys(sources).length !== 0) {\n\n    if (!Array.isArray(order)) {\n      order = []\n    }\n\n    // Add the sources that appear in 'order' first.\n    for (var i = 0; i < order.length; i++) {\n      var ssrc = order[i];\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    }\n\n    // Now add the rest of the sources.\n    Object.keys(sources).forEach(function (ssrc) {\n      ssrc = parseInt(ssrc); // Object.keys() returns string\n      if (order.indexOf(ssrc) >= 0) {\n        // Already added.\n        return;\n      }\n\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    });\n  }\n\n  return ssrcs;\n};\n\nexports.parseSsrcs = function (mLine) {\n  var sources = {};\n  // group sources attributes by ssrc.\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n    mLine.ssrcs.forEach(function (ssrc) {\n      if (!sources[ssrc.id])\n        sources[ssrc.id] = {};\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\n    });\n  }\n  return sources;\n};\n\n","/* eslint-disable max-params */\n\n/**\n * This object stores variables needed around the recording of an audio stream\n * and passing this recording along with additional information along to\n * different processes\n * @param blob the recording audio stream as a single blob\n * @param name the name of the person of the audio stream\n * @param startTime the time in UTC when recording of the audiostream started\n * @param wordArray the recorder audio stream transcribed as an array of Word\n *                  objects\n */\nconst RecordingResult = function(blob, name, startTime, wordArray) {\n    this.blob = blob;\n    this.name = name;\n    this.startTime = startTime;\n    this.wordArray = wordArray;\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = RecordingResult;\n","/* global config */\n\nconst Word = require('../word');\n\nconst audioRecorder = require('./../audioRecorder');\nconst TranscriptionService = require('./AbstractTranscriptionService');\n\n/**\n * Implements a TranscriptionService for a Sphinx4 http server\n */\nconst SphinxService = function() {\n    // set the correct url\n    this.url = getURL();\n};\n\n/**\n * Subclass of AbstractTranscriptionService\n */\nSphinxService.prototype = Object.create(TranscriptionService.prototype);\n\n/**\n * Set the right constructor\n */\nSphinxService.constructor = SphinxService;\n\n/**\n * Overrides the sendRequest method from AbstractTranscriptionService\n * it will send the audio stream the a Sphinx4 server to get the transcription\n *\n * @param audioFileBlob the recorder audio stream an a single Blob\n * @param callback the callback function retrieving the server response\n */\nSphinxService.prototype.sendRequest = function(audioFileBlob, callback) {\n    console.log(`sending an audio file  to ${this.url}`);\n    console.log(`the audio file being sent: ${audioFileBlob}`);\n    const request = new XMLHttpRequest();\n\n    request.onreadystatechange = function() {\n        if (request.readyState === XMLHttpRequest.DONE\n            && request.status === 200) {\n            callback(request.responseText);\n        } else if (request.readyState === XMLHttpRequest.DONE) {\n            throw new Error(\n                `unable to accept response from sphinx server. status: ${\n                    request.status}`);\n        }\n\n        // if not ready no point to throw an error\n    };\n    request.open('POST', this.url);\n    request.setRequestHeader('Content-Type',\n        audioRecorder.determineCorrectFileType());\n    request.send(audioFileBlob);\n    console.log(`send ${audioFileBlob}`);\n};\n\n/**\n * Overrides the formatResponse method from AbstractTranscriptionService\n * It will parse the answer from the server in the expected format\n *\n * @param response the JSON body retrieved from the Sphinx4 server\n */\nSphinxService.prototype.formatResponse = function(response) {\n    const result = JSON.parse(response).objects;\n\n    // make sure to delete the session id object, which is always\n    // the first value in the JSON array\n\n    result.shift();\n    const array = [];\n\n    result.forEach(\n        word =>\n            word.filler\n                || array.push(new Word(word.word, word.start, word.end)));\n\n    return array;\n};\n\n/**\n * checks wether the reply is empty, or doesn't contain a correct JSON object\n * @param response the server response\n * @return {boolean} whether the response is valid\n */\nSphinxService.prototype.verify = function(response) {\n    console.log(`response from server:${response.toString()}`);\n\n    // test if server responded with a string object\n    if (typeof response !== 'string') {\n        return false;\n    }\n\n    // test if the string can be parsed into valid JSON\n    let json;\n\n    try {\n        json = JSON.parse(response);\n    } catch (error) {\n        console.log(error);\n\n        return false;\n    }\n\n    // check if the JSON has a \"objects\" value\n    if (json.objects === undefined) {\n        return false;\n    }\n\n    // get the \"objects\" value and check for a session ID\n    const array = json.objects;\n\n    if (!(array[0] && array[0]['session-id'])) {\n        return false;\n    }\n\n    // everything seems to be in order\n    return true;\n};\n\n/**\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\n * it will throw an error\n *\n * @returns {string} the URL to the sphinx4 server\n */\nfunction getURL() {\n    const message = 'config does not contain an url to a Sphinx4 https server';\n\n    if (config.sphinxURL === undefined) {\n        console.log(message);\n    } else {\n        const toReturn = config.sphinxURL;\n\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\n            return toReturn;\n        }\n        console.log(message);\n\n    }\n}\n\nmodule.exports = SphinxService;\n","/**\n * An object representing a transcribed word, with some additional information\n * @param word the word\n * @param begin the time the word was started being uttered\n * @param end the time the word stopped being uttered\n */\nconst Word = function(word, begin, end) {\n    this.word = word;\n    this.begin = begin;\n    this.end = end;\n};\n\n/**\n * Get the string representation of the word\n * @returns {*} the word as a string\n */\nWord.prototype.getWord = function() {\n    return this.word;\n};\n\n/**\n * Get the time the word started being uttered\n * @returns {*} the start time as an integer\n */\nWord.prototype.getBeginTime = function() {\n    return this.begin;\n};\n\n/**\n * Get the time the word stopped being uttered\n * @returns {*} the end time as an integer\n */\nWord.prototype.getEndTime = function() {\n    return this.end;\n};\n\nmodule.exports = Word;\n","/**\n * Abstract class representing an interface to implement a speech-to-text\n * service on.\n */\nconst TranscriptionService = function() {\n    throw new Error('TranscriptionService is abstract and cannot be'\n        + 'created');\n};\n\n/**\n * This method can be used to send the recorder audio stream and\n * retrieve the answer from the transcription service from the callback\n *\n * @param {RecordingResult} recordingResult a recordingResult object which\n * includes the recorded audio stream as a blob\n * @param {Function} callback  which will retrieve the a RecordingResult with\n *        the answer as a WordArray\n */\nTranscriptionService.prototype.send = function send(recordingResult, callback) {\n    this.sendRequest(recordingResult.blob, response => {\n        if (this.verify(response)) {\n            recordingResult.wordArray = this.formatResponse(response);\n        } else {\n            console.log('the retrieved response from the server is not valid!');\n            recordingResult.wordArray = [];\n        }\n        callback(recordingResult);\n    });\n};\n\n/**\n * Abstract method which will rend the recorder audio stream to the implemented\n * transcription service and will retrieve an answer, which will be\n * called on the given callback method\n *\n * @param {Blob} audioBlob the recorded audio stream as a single Blob\n * @param {function} callback function which will retrieve the answer\n *                            from the service\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.sendRequest = function(audioBlob, callback) {\n    throw new Error('TranscriptionService.sendRequest is abstract');\n};\n\n/**\n * Abstract method which will parse the output from the implemented\n * transcription service to the expected format\n *\n * The transcriber class expect an array of word objects, where each word\n * object is one transcribed word by the service.\n *\n * The expected output of this method is an array of word objects, in\n * the correct order. That is, the first object in the array is the first word\n * being said, and the last word in the array is the last word being said\n *\n * @param response the answer from the speech-to-text server which needs to be\n *                 formatted\n * @return {Array<Word>} an array of Word objects\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.formatResponse = function(response) {\n    throw new Error('TranscriptionService.format is abstract');\n};\n\n/**\n * Abstract method which will verify that the response from the server is valid\n *\n * @param response the response from the server\n * @return {boolean} true if response is valid, false otherwise\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.verify = function(response) {\n    throw new Error('TranscriptionService.verify is abstract');\n};\n\nmodule.exports = TranscriptionService;\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nlet logDisabled_ = true;\nlet deprecationWarnings_ = true;\n\n/**\n * Extract browser version out of the provided user agent string.\n *\n * @param {!string} uastring userAgent string.\n * @param {!string} expr Regular expression used as match criteria.\n * @param {!number} pos position in the version string to be returned.\n * @return {!number} browser version.\n */\nexport function extractVersion(uastring, expr, pos) {\n  const match = uastring.match(expr);\n  return match && match.length >= pos && parseInt(match[pos], 10);\n}\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object (or false to prevent\n// the event).\nexport function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  const nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    const wrappedCallback = (e) => {\n      const modifiedEvent = wrapper(e);\n      if (modifiedEvent) {\n        if (cb.handleEvent) {\n          cb.handleEvent(modifiedEvent);\n        } else {\n          cb(modifiedEvent);\n        }\n      }\n    };\n    this._eventMap = this._eventMap || {};\n    if (!this._eventMap[eventNameToWrap]) {\n      this._eventMap[eventNameToWrap] = new Map();\n    }\n    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  const nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[eventNameToWrap]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    if (!this._eventMap[eventNameToWrap].has(cb)) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);\n    this._eventMap[eventNameToWrap].delete(cb);\n    if (this._eventMap[eventNameToWrap].size === 0) {\n      delete this._eventMap[eventNameToWrap];\n    }\n    if (Object.keys(this._eventMap).length === 0) {\n      delete this._eventMap;\n    }\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get() {\n      return this['_on' + eventNameToWrap];\n    },\n    set(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap] = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\n\nexport function disableLog(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  logDisabled_ = bool;\n  return (bool) ? 'adapter.js logging disabled' :\n      'adapter.js logging enabled';\n}\n\n/**\n * Disable or enable deprecation warnings\n * @param {!boolean} bool set to true to disable warnings.\n */\nexport function disableWarnings(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  deprecationWarnings_ = !bool;\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n}\n\nexport function log() {\n  if (typeof window === 'object') {\n    if (logDisabled_) {\n      return;\n    }\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\n      console.log.apply(console, arguments);\n    }\n  }\n}\n\n/**\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\n */\nexport function deprecated(oldMethod, newMethod) {\n  if (!deprecationWarnings_) {\n    return;\n  }\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n      ' instead.');\n}\n\n/**\n * Browser detector.\n *\n * @return {object} result containing browser and version\n *     properties.\n */\nexport function detectBrowser(window) {\n  // Returned result object.\n  const result = {browser: null, version: null};\n\n  // Fail early if it's not a browser\n  if (typeof window === 'undefined' || !window.navigator) {\n    result.browser = 'Not a browser.';\n    return result;\n  }\n\n  const {navigator} = window;\n\n  if (navigator.mozGetUserMedia) { // Firefox.\n    result.browser = 'firefox';\n    result.version = extractVersion(navigator.userAgent,\n        /Firefox\\/(\\d+)\\./, 1);\n  } else if (navigator.webkitGetUserMedia ||\n      (window.isSecureContext === false && window.webkitRTCPeerConnection &&\n       !window.RTCIceGatherer)) {\n    // Chrome, Chromium, Webview, Opera.\n    // Version matches Chrome/WebRTC version.\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\n    // more complicated fallback to webkitRTCPeerConnection.\n    result.browser = 'chrome';\n    result.version = extractVersion(navigator.userAgent,\n        /Chrom(e|ium)\\/(\\d+)\\./, 2);\n  } else if (navigator.mediaDevices &&\n      navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)) { // Edge.\n    result.browser = 'edge';\n    result.version = extractVersion(navigator.userAgent,\n        /Edge\\/(\\d+).(\\d+)$/, 2);\n  } else if (window.RTCPeerConnection &&\n      navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\n    result.browser = 'safari';\n    result.version = extractVersion(navigator.userAgent,\n        /AppleWebKit\\/(\\d+)\\./, 1);\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&\n        'currentDirection' in window.RTCRtpTransceiver.prototype;\n  } else { // Default fallthrough: not supported.\n    result.browser = 'Not a supported browser.';\n    return result;\n  }\n\n  return result;\n}\n\n/**\n * Checks if something is an object.\n *\n * @param {*} val The something you want to check.\n * @return true if val is an object, false otherwise.\n */\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\n/**\n * Remove all empty objects and undefined values\n * from a nested object -- an enhanced and vanilla version\n * of Lodash's `compact`.\n */\nexport function compactObject(data) {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  return Object.keys(data).reduce(function(accumulator, key) {\n    const isObj = isObject(data[key]);\n    const value = isObj ? compactObject(data[key]) : data[key];\n    const isEmptyObject = isObj && !Object.keys(value).length;\n    if (value === undefined || isEmptyObject) {\n      return accumulator;\n    }\n    return Object.assign(accumulator, {[key]: value});\n  }, {});\n}\n\n/* iterates the stats graph recursively. */\nexport function walkStats(stats, base, resultSet) {\n  if (!base || resultSet.has(base.id)) {\n    return;\n  }\n  resultSet.set(base.id, base);\n  Object.keys(base).forEach(name => {\n    if (name.endsWith('Id')) {\n      walkStats(stats, stats.get(base[name]), resultSet);\n    } else if (name.endsWith('Ids')) {\n      base[name].forEach(id => {\n        walkStats(stats, stats.get(id), resultSet);\n      });\n    }\n  });\n}\n\n/* filter getStats for a sender/receiver track. */\nexport function filterStats(result, track, outbound) {\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\n  const filteredResult = new Map();\n  if (track === null) {\n    return filteredResult;\n  }\n  const trackStats = [];\n  result.forEach(value => {\n    if (value.type === 'track' &&\n        value.trackIdentifier === track.id) {\n      trackStats.push(value);\n    }\n  });\n  trackStats.forEach(trackStat => {\n    result.forEach(stats => {\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\n        walkStats(result, stats, filteredResult);\n      }\n    });\n  });\n  return filteredResult;\n}\n\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\nconst logging = utils.log;\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n\n  if (!navigator.mediaDevices) {\n    return;\n  }\n\n  const constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    const cc = {};\n    Object.keys(c).forEach(key => {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      const oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        let oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(mix => {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  const shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      const remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      let face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      const getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        let matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(devices => {\n            devices = devices.filter(d => d.kind === 'videoinput');\n            let dev = devices.find(d => matches.some(match =>\n              d.label.toLowerCase().includes(match)));\n            if (!dev && devices.length && matches.includes('back')) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                        {ideal: dev.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  const shimError_ = function(e) {\n    if (browserDetails.version >= 64) {\n      return e;\n    }\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        PermissionDismissedError: 'NotAllowedError',\n        InvalidStateError: 'NotAllowedError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\n        TabCaptureError: 'AbortError',\n        ScreenCaptureError: 'AbortError',\n        DeviceCaptureError: 'AbortError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint || e.constraintName,\n      toString() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  const getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, c => {\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\n\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n  // function which returns a Promise, it does not accept spec-style\n  // constraints.\n  if (navigator.mediaDevices.getUserMedia) {\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          throw new DOMException('', 'NotFoundError');\n        }\n        return stream;\n      }, e => Promise.reject(shimError_(e))));\n    };\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nexport function shimGetDisplayMedia(window, getSourceId) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  // getSourceId is a function that returns a promise resolving with\n  // the sourceId of the screen/window/tab to be shared.\n  if (typeof getSourceId !== 'function') {\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' +\n        'a function');\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      return getSourceId(constraints)\n        .then(sourceId => {\n          const widthSpecified = constraints.video && constraints.video.width;\n          const heightSpecified = constraints.video &&\n            constraints.video.height;\n          const frameRateSpecified = constraints.video &&\n            constraints.video.frameRate;\n          constraints.video = {\n            mandatory: {\n              chromeMediaSource: 'desktop',\n              chromeMediaSourceId: sourceId,\n              maxFrameRate: frameRateSpecified || 3\n            }\n          };\n          if (widthSpecified) {\n            constraints.video.mandatory.maxWidth = widthSpecified;\n          }\n          if (heightSpecified) {\n            constraints.video.mandatory.maxHeight = heightSpecified;\n          }\n          return window.navigator.mediaDevices.getUserMedia(constraints);\n        });\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimMediaStream(window) {\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\n}\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n      window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n      get() {\n        return this._ontrack;\n      },\n      set(f) {\n        if (this._ontrack) {\n          this.removeEventListener('track', this._ontrack);\n        }\n        this.addEventListener('track', this._ontrack = f);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    const origSetRemoteDescription =\n        window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        if (!this._ontrackpoly) {\n          this._ontrackpoly = (e) => {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', te => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === te.track.id);\n              } else {\n                receiver = {track: te.track};\n              }\n\n              const event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(track => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === track.id);\n              } else {\n                receiver = {track};\n              }\n              const event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n          };\n          this.addEventListener('addstream', this._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(this, arguments);\n      };\n  } else {\n    // even if RTCRtpTransceiver is in window, it is only used and\n    // emitted in unified-plan. Unfortunately this means we need\n    // to unconditionally wrap the event.\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      if (!e.transceiver) {\n        Object.defineProperty(e, 'transceiver',\n          {value: {receiver: e.receiver}});\n      }\n      return e;\n    });\n  }\n}\n\nexport function shimGetSendersWithDtmf(window) {\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n  if (typeof window === 'object' && window.RTCPeerConnection &&\n      !('getSenders' in window.RTCPeerConnection.prototype) &&\n      'createDTMFSender' in window.RTCPeerConnection.prototype) {\n    const shimSenderWithDtmf = function(pc, track) {\n      return {\n        track,\n        get dtmf() {\n          if (this._dtmf === undefined) {\n            if (track.kind === 'audio') {\n              this._dtmf = pc.createDTMFSender(track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        },\n        _pc: pc\n      };\n    };\n\n    // augment addTrack when getSenders is not available.\n    if (!window.RTCPeerConnection.prototype.getSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        this._senders = this._senders || [];\n        return this._senders.slice(); // return a copy of the internal state.\n      };\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addTrack =\n        function addTrack(track, stream) {\n          let sender = origAddTrack.apply(this, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(this, track);\n            this._senders.push(sender);\n          }\n          return sender;\n        };\n\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n      window.RTCPeerConnection.prototype.removeTrack =\n        function removeTrack(sender) {\n          origRemoveTrack.apply(this, arguments);\n          const idx = this._senders.indexOf(sender);\n          if (idx !== -1) {\n            this._senders.splice(idx, 1);\n          }\n        };\n    }\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      this._senders = this._senders || [];\n      origAddStream.apply(this, [stream]);\n      stream.getTracks().forEach(track => {\n        this._senders.push(shimSenderWithDtmf(this, track));\n      });\n    };\n\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        this._senders = this._senders || [];\n        origRemoveStream.apply(this, [stream]);\n\n        stream.getTracks().forEach(track => {\n          const sender = this._senders.find(s => s.track === track);\n          if (sender) { // remove sender\n            this._senders.splice(this._senders.indexOf(sender), 1);\n          }\n        });\n      };\n  } else if (typeof window === 'object' && window.RTCPeerConnection &&\n             'getSenders' in window.RTCPeerConnection.prototype &&\n             'createDTMFSender' in window.RTCPeerConnection.prototype &&\n             window.RTCRtpSender &&\n             !('dtmf' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = this._pc.createDTMFSender(this.track);\n          } else {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n}\n\nexport function shimGetStats(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n\n    // If selector is a function then we are in the old style stats so just\n    // pass back the original getStats format to avoid breaking old users.\n    if (arguments.length > 0 && typeof selector === 'function') {\n      return origGetStats.apply(this, arguments);\n    }\n\n    // When spec-style getStats is supported, return those when called with\n    // either no arguments or the selector argument is null.\n    if (origGetStats.length === 0 && (arguments.length === 0 ||\n        typeof selector !== 'function')) {\n      return origGetStats.apply(this, []);\n    }\n\n    const fixChromeStats_ = function(response) {\n      const standardReport = {};\n      const reports = response.result();\n      reports.forEach(report => {\n        const standardStats = {\n          id: report.id,\n          timestamp: report.timestamp,\n          type: {\n            localcandidate: 'local-candidate',\n            remotecandidate: 'remote-candidate'\n          }[report.type] || report.type\n        };\n        report.names().forEach(name => {\n          standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n      });\n\n      return standardReport;\n    };\n\n    // shim getStats with maplike support\n    const makeMapStats = function(stats) {\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\n    };\n\n    if (arguments.length >= 2) {\n      const successCallbackWrapper_ = function(response) {\n        onSucc(makeMapStats(fixChromeStats_(response)));\n      };\n\n      return origGetStats.apply(this, [successCallbackWrapper_,\n        selector]);\n    }\n\n    // promise-support\n    return new Promise((resolve, reject) => {\n      origGetStats.apply(this, [\n        function(response) {\n          resolve(makeMapStats(fixChromeStats_(response)));\n        }, reject]);\n    }).then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender && window.RTCRtpReceiver)) {\n    return;\n  }\n\n  // shim sender stats.\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    if (origGetSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        const senders = origGetSenders.apply(this, []);\n        senders.forEach(sender => sender._pc = this);\n        return senders;\n      };\n    }\n\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n    if (origAddTrack) {\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n        const sender = origAddTrack.apply(this, arguments);\n        sender._pc = this;\n        return sender;\n      };\n    }\n    window.RTCRtpSender.prototype.getStats = function getStats() {\n      const sender = this;\n      return this._pc.getStats().then(result =>\n        /* Note: this will include stats of all senders that\n         *   send a track with the same id as sender.track as\n         *   it is not possible to identify the RTCRtpSender.\n         */\n        utils.filterStats(result, sender.track, true));\n    };\n  }\n\n  // shim receiver stats.\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n    if (origGetReceivers) {\n      window.RTCPeerConnection.prototype.getReceivers =\n        function getReceivers() {\n          const receivers = origGetReceivers.apply(this, []);\n          receivers.forEach(receiver => receiver._pc = this);\n          return receivers;\n        };\n    }\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      e.receiver._pc = e.srcElement;\n      return e;\n    });\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\n      const receiver = this;\n      return this._pc.getStats().then(result =>\n        utils.filterStats(result, receiver.track, false));\n    };\n  }\n\n  if (!('getStats' in window.RTCRtpSender.prototype &&\n      'getStats' in window.RTCRtpReceiver.prototype)) {\n    return;\n  }\n\n  // shim RTCPeerConnection.getStats(track).\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    if (arguments.length > 0 &&\n        arguments[0] instanceof window.MediaStreamTrack) {\n      const track = arguments[0];\n      let sender;\n      let receiver;\n      let err;\n      this.getSenders().forEach(s => {\n        if (s.track === track) {\n          if (sender) {\n            err = true;\n          } else {\n            sender = s;\n          }\n        }\n      });\n      this.getReceivers().forEach(r => {\n        if (r.track === track) {\n          if (receiver) {\n            err = true;\n          } else {\n            receiver = r;\n          }\n        }\n        return r.track === track;\n      });\n      if (err || (sender && receiver)) {\n        return Promise.reject(new DOMException(\n          'There are more than one sender or receiver for the track.',\n          'InvalidAccessError'));\n      } else if (sender) {\n        return sender.getStats();\n      } else if (receiver) {\n        return receiver.getStats();\n      }\n      return Promise.reject(new DOMException(\n        'There is no sender or receiver for the track.',\n        'InvalidAccessError'));\n    }\n    return origGetStats.apply(this, arguments);\n  };\n}\n\nexport function shimAddTrackRemoveTrackWithNative(window) {\n  // shim addTrack/removeTrack with native variants in order to make\n  // the interactions with legacy getLocalStreams behave as in other browsers.\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      return Object.keys(this._shimmedLocalStreams)\n        .map(streamId => this._shimmedLocalStreams[streamId][0]);\n    };\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (!stream) {\n        return origAddTrack.apply(this, arguments);\n      }\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n      const sender = origAddTrack.apply(this, arguments);\n      if (!this._shimmedLocalStreams[stream.id]) {\n        this._shimmedLocalStreams[stream.id] = [stream, sender];\n      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\n        this._shimmedLocalStreams[stream.id].push(sender);\n      }\n      return sender;\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    const existingSenders = this.getSenders();\n    origAddStream.apply(this, arguments);\n    const newSenders = this.getSenders()\n      .filter(newSender => existingSenders.indexOf(newSender) === -1);\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      delete this._shimmedLocalStreams[stream.id];\n      return origRemoveStream.apply(this, arguments);\n    };\n\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      if (sender) {\n        Object.keys(this._shimmedLocalStreams).forEach(streamId => {\n          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\n          if (idx !== -1) {\n            this._shimmedLocalStreams[streamId].splice(idx, 1);\n          }\n          if (this._shimmedLocalStreams[streamId].length === 1) {\n            delete this._shimmedLocalStreams[streamId];\n          }\n        });\n      }\n      return origRemoveTrack.apply(this, arguments);\n    };\n}\n\nexport function shimAddTrackRemoveTrack(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // shim addTrack and removeTrack.\n  if (window.RTCPeerConnection.prototype.addTrack &&\n      browserDetails.version >= 65) {\n    return shimAddTrackRemoveTrackWithNative(window);\n  }\n\n  // also shim pc.getLocalStreams when addTrack is shimmed\n  // to return the original streams.\n  const origGetLocalStreams = window.RTCPeerConnection.prototype\n      .getLocalStreams;\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      const nativeStreams = origGetLocalStreams.apply(this);\n      this._reverseStreams = this._reverseStreams || {};\n      return nativeStreams.map(stream => this._reverseStreams[stream.id]);\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    // Add identity mapping for consistency with addTrack.\n    // Unless this is being used with a stream from addTrack.\n    if (!this._reverseStreams[stream.id]) {\n      const newStream = new window.MediaStream(stream.getTracks());\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      stream = newStream;\n    }\n    origAddStream.apply(this, [stream]);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n\n      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);\n      delete this._reverseStreams[(this._streams[stream.id] ?\n          this._streams[stream.id].id : stream.id)];\n      delete this._streams[stream.id];\n    };\n\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      const streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(t => t === track)) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n      const oldStream = this._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(() => {\n          this.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        const newStream = new window.MediaStream([track]);\n        this._streams[stream.id] = newStream;\n        this._reverseStreams[newStream.id] = stream;\n        this.addStream(newStream);\n      }\n      return this.getSenders().find(s => s.track === track);\n    };\n\n  // replace the internal stream id with the external one and\n  // vice versa.\n  function replaceInternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n          externalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  function replaceExternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n          internalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  ['createOffer', 'createAnswer'].forEach(function(method) {\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\n    const methodObj = {[method]() {\n      const args = arguments;\n      const isLegacyCall = arguments.length &&\n          typeof arguments[0] === 'function';\n      if (isLegacyCall) {\n        return nativeMethod.apply(this, [\n          (description) => {\n            const desc = replaceInternalStreamId(this, description);\n            args[0].apply(null, [desc]);\n          },\n          (err) => {\n            if (args[1]) {\n              args[1].apply(null, err);\n            }\n          }, arguments[2]\n        ]);\n      }\n      return nativeMethod.apply(this, arguments)\n      .then(description => replaceInternalStreamId(this, description));\n    }};\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\n  });\n\n  const origSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(this, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(this, arguments[0]);\n      return origSetLocalDescription.apply(this, arguments);\n    };\n\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n  const origLocalDescription = Object.getOwnPropertyDescriptor(\n      window.RTCPeerConnection.prototype, 'localDescription');\n  Object.defineProperty(window.RTCPeerConnection.prototype,\n      'localDescription', {\n        get() {\n          const description = origLocalDescription.get.apply(this);\n          if (description.type === '') {\n            return description;\n          }\n          return replaceInternalStreamId(this, description);\n        }\n      });\n\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      const isLocal = sender._pc === this;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n            'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      this._streams = this._streams || {};\n      let stream;\n      Object.keys(this._streams).forEach(streamid => {\n        const hasTrack = this._streams[streamid].getTracks()\n          .find(track => sender.track === track);\n        if (hasTrack) {\n          stream = this._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          this.removeStream(this._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        this.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\n  }\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n  if (browserDetails.version < 53) {\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n}\n\n// Attempt to fix ONN in plan-b mode.\nexport function fixNegotiationNeeded(window, browserDetails) {\n  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\n    const pc = e.target;\n    if (browserDetails.version < 72 || (pc.getConfiguration &&\n        pc.getConfiguration().sdpSemantics === 'plan-b')) {\n      if (pc.signalingState !== 'stable') {\n        return;\n      }\n    }\n    return e;\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  const shimError_ = function(e) {\n    return {\n      name: {PermissionDeniedError: 'NotAllowedError'}[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint,\n      toString() {\n        return this.name;\n      }\n    };\n  };\n\n  // getUserMedia error shim.\n  const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n      bind(navigator.mediaDevices);\n  navigator.mediaDevices.getUserMedia = function(c) {\n    return origGetUserMedia(c).catch(e => Promise.reject(shimError_(e)));\n  };\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window) {\n  if (!('getDisplayMedia' in window.navigator)) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    window.navigator.getDisplayMedia.bind(window.navigator);\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nimport {filterIceServers} from './filtericeservers';\nimport shimRTCPeerConnection from 'rtcpeerconnection-shim';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (window.RTCIceGatherer) {\n    if (!window.RTCIceCandidate) {\n      window.RTCIceCandidate = function RTCIceCandidate(args) {\n        return args;\n      };\n    }\n    if (!window.RTCSessionDescription) {\n      window.RTCSessionDescription = function RTCSessionDescription(args) {\n        return args;\n      };\n    }\n    // this adds an additional event listener to MediaStrackTrack that signals\n    // when a tracks enabled property was changed. Workaround for a bug in\n    // addStream, see below. No longer required in 15025+\n    if (browserDetails.version < 15025) {\n      const origMSTEnabled = Object.getOwnPropertyDescriptor(\n          window.MediaStreamTrack.prototype, 'enabled');\n      Object.defineProperty(window.MediaStreamTrack.prototype, 'enabled', {\n        set(value) {\n          origMSTEnabled.set.call(this, value);\n          const ev = new Event('enabled');\n          ev.enabled = value;\n          this.dispatchEvent(ev);\n        }\n      });\n    }\n  }\n\n  // ORTC defines the DTMF sender a bit different.\n  // https://github.com/w3c/ortc/issues/714\n  if (window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = new window.RTCDtmfSender(this);\n          } else if (this.track.kind === 'video') {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n  // Edge currently only implements the RTCDtmfSender, not the\n  // RTCDTMFSender alias. See http://draft.ortc.org/#rtcdtmfsender2*\n  if (window.RTCDtmfSender && !window.RTCDTMFSender) {\n    window.RTCDTMFSender = window.RTCDtmfSender;\n  }\n\n  const RTCPeerConnectionShim = shimRTCPeerConnection(window,\n      browserDetails.version);\n  window.RTCPeerConnection = function RTCPeerConnection(config) {\n    if (config && config.iceServers) {\n      config.iceServers = filterIceServers(config.iceServers,\n        browserDetails.version);\n      utils.log('ICE servers after filtering:', config.iceServers);\n    }\n    return new RTCPeerConnectionShim(config);\n  };\n  window.RTCPeerConnection.prototype = RTCPeerConnectionShim.prototype;\n}\n\nexport function shimReplaceTrack(window) {\n  // ORTC has replaceTrack -- https://github.com/w3c/ortc/issues/614\n  if (window.RTCRtpSender &&\n      !('replaceTrack' in window.RTCRtpSender.prototype)) {\n    window.RTCRtpSender.prototype.replaceTrack =\n        window.RTCRtpSender.prototype.setTrack;\n  }\n}\n","/*\n *  Copyright (c) 2018 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n// Edge does not like\n// 1) stun: filtered after 14393 unless ?transport=udp is present\n// 2) turn: that does not have all of turn:host:port?transport=udp\n// 3) turn: with ipv6 addresses\n// 4) turn: occurring muliple times\nexport function filterIceServers(iceServers, edgeVersion) {\n  let hasTurn = false;\n  iceServers = JSON.parse(JSON.stringify(iceServers));\n  return iceServers.filter(server => {\n    if (server && (server.urls || server.url)) {\n      let urls = server.urls || server.url;\n      if (server.url && !server.urls) {\n        utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n      }\n      const isString = typeof urls === 'string';\n      if (isString) {\n        urls = [urls];\n      }\n      urls = urls.filter(url => {\n        // filter STUN unconditionally.\n        if (url.indexOf('stun:') === 0) {\n          return false;\n        }\n\n        const validTurn = url.startsWith('turn') &&\n            !url.startsWith('turn:[') &&\n            url.includes('transport=udp');\n        if (validTurn && !hasTurn) {\n          hasTurn = true;\n          return true;\n        }\n        return validTurn && !hasTurn;\n      });\n\n      delete server.url;\n      server.urls = isString ? urls[0] : urls;\n      return !!urls.length;\n    }\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n  const MediaStreamTrack = window && window.MediaStreamTrack;\n\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia',\n        'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    const remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        const obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      const nativeApplyConstraints =\n        MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window, preferredMediaSource) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      if (!(constraints && constraints.video)) {\n        const err = new DOMException('getDisplayMedia without video ' +\n            'constraints is undefined');\n        err.name = 'NotFoundError';\n        // from https://heycam.github.io/webidl/#idl-DOMException-error-names\n        err.code = 8;\n        return Promise.reject(err);\n      }\n      if (constraints.video === true) {\n        constraints.video = {mediaSource: preferredMediaSource};\n      } else {\n        constraints.video.mediaSource = preferredMediaSource;\n      }\n      return window.navigator.mediaDevices.getUserMedia(constraints);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      ('receiver' in window.RTCTrackEvent.prototype) &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (typeof window !== 'object' ||\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n    return nativeGetStats.apply(this, [selector || null])\n      .then(stats => {\n        if (browserDetails.version < 53 && !onSucc) {\n          // Shim only promise getStats with spec-hyphens in type names\n          // Leave callback version alone; misc old uses of forEach before Map\n          try {\n            stats.forEach(stat => {\n              stat.type = modernStatsTypes[stat.type] || stat.type;\n            });\n          } catch (e) {\n            if (e.name !== 'TypeError') {\n              throw e;\n            }\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n            stats.forEach((stat, i) => {\n              stats.set(i, Object.assign({}, stat, {\n                type: modernStatsTypes[stat.type] || stat.type\n              }));\n            });\n          }\n        }\n        return stats;\n      })\n      .then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) :\n        Promise.resolve(new Map());\n  };\n}\n\nexport function shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\n\nexport function shimRemoveStream(window) {\n  if (!window.RTCPeerConnection ||\n      'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      utils.deprecated('removeStream', 'removeTrack');\n      this.getSenders().forEach(sender => {\n        if (sender.track && stream.getTracks().includes(sender.track)) {\n          this.removeTrack(sender);\n        }\n      });\n    };\n}\n\nexport function shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\n\nexport function shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver =\n      function addTransceiver() {\n        this.setParametersPromises = [];\n        const initParameters = arguments[1];\n        const shouldPerformCheck = initParameters &&\n                                  'sendEncodings' in initParameters;\n        if (shouldPerformCheck) {\n          // If sendEncodings params are provided, validate grammar\n          initParameters.sendEncodings.forEach((encodingParam) => {\n            if ('rid' in encodingParam) {\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\n              if (!ridRegex.test(encodingParam.rid)) {\n                throw new TypeError('Invalid RID value provided.');\n              }\n            }\n            if ('scaleResolutionDownBy' in encodingParam) {\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\n              }\n            }\n            if ('maxFramerate' in encodingParam) {\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n                throw new RangeError('max_framerate must be >= 0.0');\n              }\n            }\n          });\n        }\n        const transceiver = origAddTransceiver.apply(this, arguments);\n        if (shouldPerformCheck) {\n          // Check if the init options were applied. If not we do this in an\n          // asynchronous way and save the promise reference in a global object.\n          // This is an ugly hack, but at the same time is way more robust than\n          // checking the sender parameters before and after the createOffer\n          // Also note that after the createoffer we are not 100% sure that\n          // the params were asynchronously applied so we might miss the\n          // opportunity to recreate offer.\n          const {sender} = transceiver;\n          const params = sender.getParameters();\n          if (!('encodings' in params) ||\n              // Avoid being fooled by patched getParameters() below.\n              (params.encodings.length === 1 &&\n               Object.keys(params.encodings[0]).length === 0)) {\n            params.encodings = initParameters.sendEncodings;\n            sender.sendEncodings = initParameters.sendEncodings;\n            this.setParametersPromises.push(sender.setParameters(params)\n              .then(() => {\n                delete sender.sendEncodings;\n              }).catch(() => {\n                delete sender.sendEncodings;\n              })\n            );\n          }\n        }\n        return transceiver;\n      };\n  }\n}\n\nexport function shimGetParameters(window) {\n  if (!(typeof window === 'object' && window.RTCRtpSender)) {\n    return;\n  }\n  const origGetParameters = window.RTCRtpSender.prototype.getParameters;\n  if (origGetParameters) {\n    window.RTCRtpSender.prototype.getParameters =\n      function getParameters() {\n        const params = origGetParameters.apply(this, arguments);\n        if (!('encodings' in params)) {\n          params.encodings = [].concat(this.sendEncodings || [{}]);\n        }\n        return params;\n      };\n  }\n}\n\nexport function shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateOffer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\n\nexport function shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateAnswer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateAnswer.apply(this, arguments);\n  };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nimport * as utils from '../utils';\n\nexport function shimLocalStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getLocalStreams =\n      function getLocalStreams() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n  }\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      if (!this._localStreams.includes(stream)) {\n        this._localStreams.push(stream);\n      }\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\n      // Safari orders by track id.\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n    };\n\n    window.RTCPeerConnection.prototype.addTrack =\n      function addTrack(track, ...streams) {\n        if (streams) {\n          streams.forEach((stream) => {\n            if (!this._localStreams) {\n              this._localStreams = [stream];\n            } else if (!this._localStreams.includes(stream)) {\n              this._localStreams.push(stream);\n            }\n          });\n        }\n        return _addTrack.apply(this, arguments);\n      };\n  }\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        const index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        const tracks = stream.getTracks();\n        this.getSenders().forEach(sender => {\n          if (tracks.includes(sender.track)) {\n            this.removeTrack(sender);\n          }\n        });\n      };\n  }\n}\n\nexport function shimRemoteStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getRemoteStreams =\n      function getRemoteStreams() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n  }\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n      get() {\n        return this._onaddstream;\n      },\n      set(f) {\n        if (this._onaddstream) {\n          this.removeEventListener('addstream', this._onaddstream);\n          this.removeEventListener('track', this._onaddstreampoly);\n        }\n        this.addEventListener('addstream', this._onaddstream = f);\n        this.addEventListener('track', this._onaddstreampoly = (e) => {\n          e.streams.forEach(stream => {\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.includes(stream)) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            const event = new Event('addstream');\n            event.stream = stream;\n            this.dispatchEvent(event);\n          });\n        });\n      }\n    });\n    const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        const pc = this;\n        if (!this._onaddstreampoly) {\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            e.streams.forEach(stream => {\n              if (!pc._remoteStreams) {\n                pc._remoteStreams = [];\n              }\n              if (pc._remoteStreams.indexOf(stream) >= 0) {\n                return;\n              }\n              pc._remoteStreams.push(stream);\n              const event = new Event('addstream');\n              event.stream = stream;\n              pc.dispatchEvent(event);\n            });\n          });\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n  }\n}\n\nexport function shimCallbacksAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  const prototype = window.RTCPeerConnection.prototype;\n  const origCreateOffer = prototype.createOffer;\n  const origCreateAnswer = prototype.createAnswer;\n  const setLocalDescription = prototype.setLocalDescription;\n  const setRemoteDescription = prototype.setRemoteDescription;\n  const addIceCandidate = prototype.addIceCandidate;\n\n  prototype.createOffer =\n    function createOffer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  prototype.createAnswer =\n    function createAnswer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  let withCallback = function(description, successCallback, failureCallback) {\n    const promise = setLocalDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setLocalDescription = withCallback;\n\n  withCallback = function(description, successCallback, failureCallback) {\n    const promise = setRemoteDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setRemoteDescription = withCallback;\n\n  withCallback = function(candidate, successCallback, failureCallback) {\n    const promise = addIceCandidate.apply(this, [candidate]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.addIceCandidate = withCallback;\n}\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    // shim not needed in Safari 12.1\n    const mediaDevices = navigator.mediaDevices;\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n    navigator.mediaDevices.getUserMedia = (constraints) => {\n      return _getUserMedia(shimConstraints(constraints));\n    };\n  }\n\n  if (!navigator.getUserMedia && navigator.mediaDevices &&\n    navigator.mediaDevices.getUserMedia) {\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\n      navigator.mediaDevices.getUserMedia(constraints)\n      .then(cb, errcb);\n    }.bind(navigator);\n  }\n}\n\nexport function shimConstraints(constraints) {\n  if (constraints && constraints.video !== undefined) {\n    return Object.assign({},\n      constraints,\n      {video: utils.compactObject(constraints.video)}\n    );\n  }\n\n  return constraints;\n}\n\nexport function shimRTCIceServerUrls(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n  const OrigPeerConnection = window.RTCPeerConnection;\n  window.RTCPeerConnection =\n    function RTCPeerConnection(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        const newIceServers = [];\n        for (let i = 0; i < pcConfig.iceServers.length; i++) {\n          let server = pcConfig.iceServers[i];\n          if (!server.hasOwnProperty('urls') &&\n              server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n  // wrap static methods. Currently just generateCertificate.\n  if ('generateCertificate' in OrigPeerConnection) {\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n      get() {\n        return OrigPeerConnection.generateCertificate;\n      }\n    });\n  }\n}\n\nexport function shimTrackEventTransceiver(window) {\n  // Add event.transceiver member over deprecated event.receiver\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      'receiver' in window.RTCTrackEvent.prototype &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimCreateOfferLegacy(window) {\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer =\n    function createOffer(offerOptions) {\n      if (offerOptions) {\n        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveAudio =\n            !!offerOptions.offerToReceiveAudio;\n        }\n        const audioTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'audio');\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('sendonly');\n            } else {\n              audioTransceiver.direction = 'sendonly';\n            }\n          } else if (audioTransceiver.direction === 'recvonly') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('inactive');\n            } else {\n              audioTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          this.addTransceiver('audio');\n        }\n\n        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveVideo =\n            !!offerOptions.offerToReceiveVideo;\n        }\n        const videoTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'video');\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('sendonly');\n            } else {\n              videoTransceiver.direction = 'sendonly';\n            }\n          } else if (videoTransceiver.direction === 'recvonly') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('inactive');\n            } else {\n              videoTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          this.addTransceiver('video');\n        }\n      }\n      return origCreateOffer.apply(this, arguments);\n    };\n}\n\nexport function shimAudioContext(window) {\n  if (typeof window !== 'object' || window.AudioContext) {\n    return;\n  }\n  window.AudioContext = window.webkitAudioContext;\n}\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport SDPUtils from 'sdp';\nimport * as utils from './utils';\n\nexport function shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\n      window.RTCIceCandidate.prototype)) {\n    return;\n  }\n\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate &&\n        args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substr(2);\n    }\n\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      const augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function toJSON() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    }\n    return new NativeRTCIceCandidate(args);\n  };\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n    return e;\n  });\n}\n\nexport function shimMaxMessageSize(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n\n  const sctpInDescription = function(description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n    const sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application'\n          && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n\n  const getRemoteFirefoxVersion = function(description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n    const version = parseInt(match[1], 10);\n    // Test for NaN (yes, this is ugly)\n    return version !== version ? -1 : version;\n  };\n\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize =\n          browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n    return canSendMaxMessageSize;\n  };\n\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536;\n\n    // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n    if (browserDetails.browser === 'firefox'\n         && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n\n    const match = SDPUtils.matchPrefix(description.sdp,\n      'a=max-message-size:');\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substr(19), 10);\n    } else if (browserDetails.browser === 'firefox' &&\n                remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n    return maxMessageSize;\n  };\n\n  const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n    function setRemoteDescription() {\n      this._sctp = null;\n      // Chrome decided to not expose .sctp in plan-b mode.\n      // As usual, adapter.js has to do an 'ugly worakaround'\n      // to cover up the mess.\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n        const {sdpSemantics} = this.getConfiguration();\n        if (sdpSemantics === 'plan-b') {\n          Object.defineProperty(this, 'sctp', {\n            get() {\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n      }\n\n      if (sctpInDescription(arguments[0])) {\n        // Check if the remote is FF.\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n        // Get the maximum message size the local peer is capable of sending\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n        // Get the maximum message size of the remote peer.\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n        // Determine final maximum message size\n        let maxMessageSize;\n        if (canSendMMS === 0 && remoteMMS === 0) {\n          maxMessageSize = Number.POSITIVE_INFINITY;\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\n        } else {\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\n        }\n\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n        // attribute.\n        const sctp = {};\n        Object.defineProperty(sctp, 'maxMessageSize', {\n          get() {\n            return maxMessageSize;\n          }\n        });\n        this._sctp = sctp;\n      }\n\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n}\n\nexport function shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection &&\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n      if (dc.readyState === 'open' &&\n          pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' +\n          pc.sctp.maxMessageSize + ' bytes)');\n      }\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n  const origCreateDataChannel =\n    window.RTCPeerConnection.prototype.createDataChannel;\n  window.RTCPeerConnection.prototype.createDataChannel =\n    function createDataChannel() {\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\n      wrapDcSend(dataChannel, this);\n      return dataChannel;\n    };\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n\n\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\nexport function shimConnectionState(window) {\n  if (!window.RTCPeerConnection ||\n      'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange',\n            this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n      if (cb) {\n        this.addEventListener('connectionstatechange',\n            this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\n    const origMethod = proto[method];\n    proto[method] = function() {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n          return e;\n        };\n        this.addEventListener('iceconnectionstatechange',\n          this._connectionstatechangepoly);\n      }\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\n\nexport function removeExtmapAllowMixed(window, browserDetails) {\n  /* remove a=extmap-allow-mixed for webrtc.org < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {\n    return;\n  }\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n  function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      const sdp = desc.sdp.split('\\n').filter((line) => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n      // Safari enforces read-only-ness of RTCSessionDescription fields.\n      if (window.RTCSessionDescription &&\n          desc instanceof window.RTCSessionDescription) {\n        arguments[0] = new window.RTCSessionDescription({\n          type: desc.type,\n          sdp,\n        });\n      } else {\n        desc.sdp = sdp;\n      }\n    }\n    return nativeSRD.apply(this, arguments);\n  };\n}\n\nexport function shimAddIceCandidateNullOrEmpty(window, browserDetails) {\n  // Support for addIceCandidate(null or undefined)\n  // as well as addIceCandidate({candidate: \"\", ...})\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n  // Note: must be called before other polyfills which change the signature.\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeAddIceCandidate =\n      window.RTCPeerConnection.prototype.addIceCandidate;\n  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions.\n      // Native support for ignoring exists for Chrome M77+.\n      // Safari ignores as well, exact version unknown but works in the same\n      // version that also ignores addIceCandidate(null).\n      if (((browserDetails.browser === 'chrome' && browserDetails.version < 78)\n           || (browserDetails.browser === 'firefox'\n               && browserDetails.version < 68)\n           || (browserDetails.browser === 'safari'))\n          && arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n'use strict';\n\nimport {adapterFactory} from './adapter_factory.js';\n\nconst adapter =\n  adapterFactory({window: typeof window === 'undefined' ? undefined : window});\nexport default adapter;\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\nimport * as utils from './utils';\n\n  // Browser shims.\nimport * as chromeShim from './chrome/chrome_shim';\nimport * as edgeShim from './edge/edge_shim';\nimport * as firefoxShim from './firefox/firefox_shim';\nimport * as safariShim from './safari/safari_shim';\nimport * as commonShim from './common_shim';\n\n// Shimming starts here.\nexport function adapterFactory({window} = {}, options = {\n  shimChrome: true,\n  shimFirefox: true,\n  shimEdge: true,\n  shimSafari: true,\n}) {\n  // Utils.\n  const logging = utils.log;\n  const browserDetails = utils.detectBrowser(window);\n\n  const adapter = {\n    browserDetails,\n    commonShim,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings\n  };\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      if (browserDetails.version === null) {\n        logging('Chrome shim can not determine version, not shimming.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      chromeShim.shimGetUserMedia(window, browserDetails);\n      chromeShim.shimMediaStream(window, browserDetails);\n      chromeShim.shimPeerConnection(window, browserDetails);\n      chromeShim.shimOnTrack(window, browserDetails);\n      chromeShim.shimAddTrackRemoveTrack(window, browserDetails);\n      chromeShim.shimGetSendersWithDtmf(window, browserDetails);\n      chromeShim.shimGetStats(window, browserDetails);\n      chromeShim.shimSenderReceiverGetStats(window, browserDetails);\n      chromeShim.fixNegotiationNeeded(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      firefoxShim.shimGetUserMedia(window, browserDetails);\n      firefoxShim.shimPeerConnection(window, browserDetails);\n      firefoxShim.shimOnTrack(window, browserDetails);\n      firefoxShim.shimRemoveStream(window, browserDetails);\n      firefoxShim.shimSenderGetStats(window, browserDetails);\n      firefoxShim.shimReceiverGetStats(window, browserDetails);\n      firefoxShim.shimRTCDataChannel(window, browserDetails);\n      firefoxShim.shimAddTransceiver(window, browserDetails);\n      firefoxShim.shimGetParameters(window, browserDetails);\n      firefoxShim.shimCreateOffer(window, browserDetails);\n      firefoxShim.shimCreateAnswer(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      break;\n    case 'edge':\n      if (!edgeShim || !edgeShim.shimPeerConnection || !options.shimEdge) {\n        logging('MS edge shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming edge.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = edgeShim;\n\n      edgeShim.shimGetUserMedia(window, browserDetails);\n      edgeShim.shimGetDisplayMedia(window, browserDetails);\n      edgeShim.shimPeerConnection(window, browserDetails);\n      edgeShim.shimReplaceTrack(window, browserDetails);\n\n      // the edge shim implements the full RTCIceCandidate object.\n\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n\n      // Must be called before shimCallbackAPI.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      safariShim.shimRTCIceServerUrls(window, browserDetails);\n      safariShim.shimCreateOfferLegacy(window, browserDetails);\n      safariShim.shimCallbacksAPI(window, browserDetails);\n      safariShim.shimLocalStreamsAPI(window, browserDetails);\n      safariShim.shimRemoteStreamsAPI(window, browserDetails);\n      safariShim.shimTrackEventTransceiver(window, browserDetails);\n      safariShim.shimGetUserMedia(window, browserDetails);\n      safariShim.shimAudioContext(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n}\n"],"sourceRoot":""}